
TMR_INTERRUPT_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007ae8  08007ae8  00017ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d00  08007d00  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08007d00  08007d00  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d00  08007d00  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  20000180  08007e88  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  08007e88  00020830  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a491  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca6  00000000  00000000  0002a67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  0002c328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f5  00000000  00000000  0002ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020b2  00000000  00000000  0002d7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd39  00000000  00000000  0002f85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cfd9  00000000  00000000  0003c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000339c  00000000  00000000  000c9574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000cc910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ad0 	.word	0x08007ad0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08007ad0 	.word	0x08007ad0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <ADC_Select_CH0>:
int32_t Sensor_Out;

int datasentflag = 0;


void ADC_Select_CH0 (void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	609a      	str	r2, [r3, #8]
//  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5e:	4905      	ldr	r1, [pc, #20]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <ADC_Select_CH0+0x30>)
 8000d62:	f002 ff99 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <ADC_Select_CH0+0x28>
  {
    Error_Handler();
 8000d6c:	f002 fa9c 	bl	80032a8 <Error_Handler>
  }
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000019c 	.word	0x2000019c
 8000d78:	200001a8 	.word	0x200001a8

08000d7c <ADC_Select_CH1>:

void ADC_Select_CH1 (void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	4905      	ldr	r1, [pc, #20]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <ADC_Select_CH1+0x30>)
 8000d96:	f002 ff7f 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <ADC_Select_CH1+0x28>
  {
    Error_Handler();
 8000da0:	f002 fa82 	bl	80032a8 <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000019c 	.word	0x2000019c
 8000dac:	200001a8 	.word	0x200001a8

08000db0 <ADC_Select_CH9>:

void ADC_Select_CH9 (void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000db6:	2209      	movs	r2, #9
 8000db8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <ADC_Select_CH9+0x30>)
 8000dca:	f002 ff65 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <ADC_Select_CH9+0x28>
  {
    Error_Handler();
 8000dd4:	f002 fa68 	bl	80032a8 <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000019c 	.word	0x2000019c
 8000de0:	200001a8 	.word	0x200001a8

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f002 fc0c 	bl	8003604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f85a 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f000 fa36 	bl	8001260 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df4:	f000 fa16 	bl	8001224 <MX_DMA_Init>
  MX_TIM4_Init();
 8000df8:	f000 f9c6 	bl	8001188 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000dfc:	f000 f976 	bl	80010ec <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e00:	f000 f8ac 	bl	8000f5c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e04:	f000 f8d2 	bl	8000fac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim4);
 8000e08:	481f      	ldr	r0, [pc, #124]	; (8000e88 <main+0xa4>)
 8000e0a:	f004 fbd3 	bl	80055b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000e0e:	481f      	ldr	r0, [pc, #124]	; (8000e8c <main+0xa8>)
 8000e10:	f004 fbd0 	bl	80055b4 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	481d      	ldr	r0, [pc, #116]	; (8000e90 <main+0xac>)
 8000e1c:	f003 fdc8 	bl	80049b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG2, 2);
 8000e20:	2202      	movs	r2, #2
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	481a      	ldr	r0, [pc, #104]	; (8000e90 <main+0xac>)
 8000e28:	f003 fdc2 	bl	80049b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG3, 3);
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e32:	4817      	ldr	r0, [pc, #92]	; (8000e90 <main+0xac>)
 8000e34:	f003 fdbc 	bl	80049b0 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000e38:	4816      	ldr	r0, [pc, #88]	; (8000e94 <main+0xb0>)
 8000e3a:	f002 fd41 	bl	80038c0 <HAL_ADC_Start>

	 WS2512_Send();
 8000e3e:	f002 f9c5 	bl	80031cc <WS2512_Send>

	 counter_timer4=0;
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <main+0xb4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		ADC_Handler();						//realiza captação dos valores analógicos
 8000e48:	f000 fa8e 	bl	8001368 <ADC_Handler>

		Analog_Buffer();						//Buffer para estabilização dos sinais
 8000e4c:	f001 fe32 	bl	8002ab4 <Analog_Buffer>

		AnalogHandler();					//Conversão dos sinais
 8000e50:	f000 facc 	bl	80013ec <AnalogHandler>

		var = Value[1];						//variável utilizada para acionamento display
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <main+0xb8>)
 8000e56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <main+0xbc>)
 8000e5c:	801a      	strh	r2, [r3, #0]
		DigitExtract(var);					//Atribuição dos valores usados nos 3 digitos 7 segmentos
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <main+0xbc>)
 8000e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 fef7 	bl	8002c58 <DigitExtract>

		ColorModeSelect();					//Identificação do Modo de atuação do SPEED
 8000e6a:	f000 fb31 	bl	80014d0 <ColorModeSelect>

		var = Value[2];						//variável utilizada para acionamento dos LEDs
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <main+0xb8>)
 8000e70:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <main+0xbc>)
 8000e76:	801a      	strh	r2, [r3, #0]
		LEDHandler(var);					//Acionamento dos LEDs WS2812  utilizando o sinal do Speed
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <main+0xbc>)
 8000e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fbc0 	bl	8001604 <LEDHandler>
		ADC_Handler();						//realiza captação dos valores analógicos
 8000e84:	e7e0      	b.n	8000e48 <main+0x64>
 8000e86:	bf00      	nop
 8000e88:	20000268 	.word	0x20000268
 8000e8c:	20000220 	.word	0x20000220
 8000e90:	40011000 	.word	0x40011000
 8000e94:	200001a8 	.word	0x200001a8
 8000e98:	20000348 	.word	0x20000348
 8000e9c:	20000324 	.word	0x20000324
 8000ea0:	20000320 	.word	0x20000320

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eae:	2228      	movs	r2, #40	; 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 fd85 	bl	80069c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ef0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 fda2 	bl	8004a44 <HAL_RCC_OscConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f06:	f002 f9cf 	bl	80032a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2102      	movs	r1, #2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 f80e 	bl	8004f48 <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f32:	f002 f9b9 	bl	80032a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f36:	2302      	movs	r3, #2
 8000f38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 f97a 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f4e:	f002 f9ab 	bl	80032a8 <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	3750      	adds	r7, #80	; 0x50
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_ADC1_Init+0x48>)
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <MX_ADC1_Init+0x4c>)
 8000f64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_ADC1_Init+0x48>)
 8000f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_ADC1_Init+0x48>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_ADC1_Init+0x48>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_ADC1_Init+0x48>)
 8000f7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_ADC1_Init+0x48>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_ADC1_Init+0x48>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_ADC1_Init+0x48>)
 8000f90:	f002 fbbe 	bl	8003710 <HAL_ADC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8000f9a:	f002 f985 	bl	80032a8 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001a8 	.word	0x200001a8
 8000fa8:	40012400 	.word	0x40012400

08000fac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b096      	sub	sp, #88	; 0x58
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	615a      	str	r2, [r3, #20]
 8000fdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f005 fcec 	bl	80069c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <MX_TIM1_Init+0x138>)
 8000fec:	4a3e      	ldr	r2, [pc, #248]	; (80010e8 <MX_TIM1_Init+0x13c>)
 8000fee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <MX_TIM1_Init+0x138>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <MX_TIM1_Init+0x138>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000ffc:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <MX_TIM1_Init+0x138>)
 8000ffe:	2259      	movs	r2, #89	; 0x59
 8001000:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <MX_TIM1_Init+0x138>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <MX_TIM1_Init+0x138>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <MX_TIM1_Init+0x138>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001014:	4833      	ldr	r0, [pc, #204]	; (80010e4 <MX_TIM1_Init+0x138>)
 8001016:	f004 fa7d 	bl	8005514 <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001020:	f002 f942 	bl	80032a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800102a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102e:	4619      	mov	r1, r3
 8001030:	482c      	ldr	r0, [pc, #176]	; (80010e4 <MX_TIM1_Init+0x138>)
 8001032:	f004 ff9b 	bl	8005f6c <HAL_TIM_ConfigClockSource>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800103c:	f002 f934 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001040:	4828      	ldr	r0, [pc, #160]	; (80010e4 <MX_TIM1_Init+0x138>)
 8001042:	f004 fb09 	bl	8005658 <HAL_TIM_PWM_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800104c:	f002 f92c 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001058:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800105c:	4619      	mov	r1, r3
 800105e:	4821      	ldr	r0, [pc, #132]	; (80010e4 <MX_TIM1_Init+0x138>)
 8001060:	f005 fbee 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800106a:	f002 f91d 	bl	80032a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	2360      	movs	r3, #96	; 0x60
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_TIM1_Init+0x138>)
 8001094:	f004 fea8 	bl	8005de8 <HAL_TIM_PWM_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800109e:	f002 f903 	bl	80032a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4807      	ldr	r0, [pc, #28]	; (80010e4 <MX_TIM1_Init+0x138>)
 80010c6:	f005 fc19 	bl	80068fc <HAL_TIMEx_ConfigBreakDeadTime>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80010d0:	f002 f8ea 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <MX_TIM1_Init+0x138>)
 80010d6:	f002 f9e5 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 80010da:	bf00      	nop
 80010dc:	3758      	adds	r7, #88	; 0x58
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001d8 	.word	0x200001d8
 80010e8:	40012c00 	.word	0x40012c00

080010ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_TIM3_Init+0x94>)
 800110a:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <MX_TIM3_Init+0x98>)
 800110c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM3_Init+0x94>)
 8001110:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM3_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_TIM3_Init+0x94>)
 800111e:	2201      	movs	r2, #1
 8001120:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_TIM3_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_TIM3_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <MX_TIM3_Init+0x94>)
 8001130:	f004 f9f0 	bl	8005514 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800113a:	f002 f8b5 	bl	80032a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_TIM3_Init+0x94>)
 800114c:	f004 ff0e 	bl	8005f6c <HAL_TIM_ConfigClockSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001156:	f002 f8a7 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM3_Init+0x94>)
 8001168:	f005 fb6a 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001172:	f002 f899 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000220 	.word	0x20000220
 8001184:	40000400 	.word	0x40000400

08001188 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_TIM4_Init+0x94>)
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <MX_TIM4_Init+0x98>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_TIM4_Init+0x94>)
 80011ac:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80011b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_TIM4_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_TIM4_Init+0x94>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_TIM4_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_TIM4_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <MX_TIM4_Init+0x94>)
 80011cc:	f004 f9a2 	bl	8005514 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011d6:	f002 f867 	bl	80032a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_TIM4_Init+0x94>)
 80011e8:	f004 fec0 	bl	8005f6c <HAL_TIM_ConfigClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011f2:	f002 f859 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_TIM4_Init+0x94>)
 8001204:	f005 fb1c 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800120e:	f002 f84b 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000268 	.word	0x20000268
 8001220:	40000800 	.word	0x40000800

08001224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_DMA_Init+0x38>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <MX_DMA_Init+0x38>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6153      	str	r3, [r2, #20]
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_DMA_Init+0x38>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	200c      	movs	r0, #12
 8001248:	f002 ff91 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800124c:	200c      	movs	r0, #12
 800124e:	f002 ffaa 	bl	80041a6 <HAL_NVIC_EnableIRQ>

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001274:	4b38      	ldr	r3, [pc, #224]	; (8001358 <MX_GPIO_Init+0xf8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a37      	ldr	r2, [pc, #220]	; (8001358 <MX_GPIO_Init+0xf8>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <MX_GPIO_Init+0xf8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <MX_GPIO_Init+0xf8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a31      	ldr	r2, [pc, #196]	; (8001358 <MX_GPIO_Init+0xf8>)
 8001292:	f043 0320 	orr.w	r3, r3, #32
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <MX_GPIO_Init+0xf8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_GPIO_Init+0xf8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <MX_GPIO_Init+0xf8>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_GPIO_Init+0xf8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_GPIO_Init+0xf8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <MX_GPIO_Init+0xf8>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_GPIO_Init+0xf8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80012da:	4820      	ldr	r0, [pc, #128]	; (800135c <MX_GPIO_Init+0xfc>)
 80012dc:	f003 fb68 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80012e6:	481e      	ldr	r0, [pc, #120]	; (8001360 <MX_GPIO_Init+0x100>)
 80012e8:	f003 fb62 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
 80012ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	4815      	ldr	r0, [pc, #84]	; (800135c <MX_GPIO_Init+0xfc>)
 8001306:	f003 f9cf 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_GPIO_Init+0x104>)
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <MX_GPIO_Init+0x100>)
 800131e:	f003 f9c3 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHCP_pin_Pin STCP_pin_Pin DS_pin_Pin */
  GPIO_InitStruct.Pin = SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin;
 8001322:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <MX_GPIO_Init+0x100>)
 800133c:	f003 f9b4 	bl	80046a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f002 ff12 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800134a:	2006      	movs	r0, #6
 800134c:	f002 ff2b 	bl	80041a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	40011000 	.word	0x40011000
 8001360:	40010c00 	.word	0x40010c00
 8001364:	10110000 	.word	0x10110000

08001368 <ADC_Handler>:

/* USER CODE BEGIN 4 */

void ADC_Handler() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

	ADC_Select_CH0();
 800136c:	f7ff fcec 	bl	8000d48 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 8001370:	481c      	ldr	r0, [pc, #112]	; (80013e4 <ADC_Handler+0x7c>)
 8001372:	f002 faa5 	bl	80038c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);		//TODO definir se está correto. Padrão = 1000
 8001376:	2101      	movs	r1, #1
 8001378:	481a      	ldr	r0, [pc, #104]	; (80013e4 <ADC_Handler+0x7c>)
 800137a:	f002 fb7b 	bl	8003a74 <HAL_ADC_PollForConversion>
	readValue[0] = HAL_ADC_GetValue(&hadc1);
 800137e:	4819      	ldr	r0, [pc, #100]	; (80013e4 <ADC_Handler+0x7c>)
 8001380:	f002 fc7e 	bl	8003c80 <HAL_ADC_GetValue>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <ADC_Handler+0x80>)
 800138a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800138c:	4815      	ldr	r0, [pc, #84]	; (80013e4 <ADC_Handler+0x7c>)
 800138e:	f002 fb45 	bl	8003a1c <HAL_ADC_Stop>

	ADC_Select_CH1();
 8001392:	f7ff fcf3 	bl	8000d7c <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <ADC_Handler+0x7c>)
 8001398:	f002 fa92 	bl	80038c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 800139c:	2101      	movs	r1, #1
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <ADC_Handler+0x7c>)
 80013a0:	f002 fb68 	bl	8003a74 <HAL_ADC_PollForConversion>
	readValue[1] = HAL_ADC_GetValue(&hadc1);
 80013a4:	480f      	ldr	r0, [pc, #60]	; (80013e4 <ADC_Handler+0x7c>)
 80013a6:	f002 fc6b 	bl	8003c80 <HAL_ADC_GetValue>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <ADC_Handler+0x80>)
 80013b0:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 80013b2:	480c      	ldr	r0, [pc, #48]	; (80013e4 <ADC_Handler+0x7c>)
 80013b4:	f002 fb32 	bl	8003a1c <HAL_ADC_Stop>

	ADC_Select_CH9();
 80013b8:	f7ff fcfa 	bl	8000db0 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <ADC_Handler+0x7c>)
 80013be:	f002 fa7f 	bl	80038c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80013c2:	2101      	movs	r1, #1
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <ADC_Handler+0x7c>)
 80013c6:	f002 fb55 	bl	8003a74 <HAL_ADC_PollForConversion>
	readValue[2] = HAL_ADC_GetValue(&hadc1);
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <ADC_Handler+0x7c>)
 80013cc:	f002 fc58 	bl	8003c80 <HAL_ADC_GetValue>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <ADC_Handler+0x80>)
 80013d6:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <ADC_Handler+0x7c>)
 80013da:	f002 fb1f 	bl	8003a1c <HAL_ADC_Stop>

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001a8 	.word	0x200001a8
 80013e8:	200003ec 	.word	0x200003ec

080013ec <AnalogHandler>:

void AnalogHandler() {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

	//Adequa a escala de cada sinal

		////conversao de 0 a 100% para uso do pedal Ranger
		int max = 2430;
 80013f2:	f640 137e 	movw	r3, #2430	; 0x97e
 80013f6:	607b      	str	r3, [r7, #4]
		int min = 550;
 80013f8:	f240 2326 	movw	r3, #550	; 0x226
 80013fc:	603b      	str	r3, [r7, #0]

		Value[1] = ( Sensor_in - min ) *100 / (max - min );
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <AnalogHandler+0x9c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2264      	movs	r2, #100	; 0x64
 8001408:	fb03 f202 	mul.w	r2, r3, r2
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	1acb      	subs	r3, r1, r3
 8001412:	fb92 f3f3 	sdiv	r3, r2, r3
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <AnalogHandler+0xa0>)
 800141a:	805a      	strh	r2, [r3, #2]
		if ( Value[1] > 100){
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <AnalogHandler+0xa0>)
 800141e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	dd03      	ble.n	800142e <AnalogHandler+0x42>
			Value[1] = 100;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <AnalogHandler+0xa0>)
 8001428:	2264      	movs	r2, #100	; 0x64
 800142a:	805a      	strh	r2, [r3, #2]
 800142c:	e007      	b.n	800143e <AnalogHandler+0x52>
		}else if ( Value[1] < 0){
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <AnalogHandler+0xa0>)
 8001430:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da02      	bge.n	800143e <AnalogHandler+0x52>
			Value[1] = 0;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <AnalogHandler+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	805a      	strh	r2, [r3, #2]
		}

		Value[2] = ( Sensor_Out - min ) *100 / (max - min );
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <AnalogHandler+0xa4>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2264      	movs	r2, #100	; 0x64
 8001448:	fb03 f202 	mul.w	r2, r3, r2
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	fb92 f3f3 	sdiv	r3, r2, r3
 8001456:	b21a      	sxth	r2, r3
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <AnalogHandler+0xa0>)
 800145a:	809a      	strh	r2, [r3, #4]
		if ( Value[2] > 100){
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <AnalogHandler+0xa0>)
 800145e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	dd03      	ble.n	800146e <AnalogHandler+0x82>
			Value[2] = 100;
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <AnalogHandler+0xa0>)
 8001468:	2264      	movs	r2, #100	; 0x64
 800146a:	809a      	strh	r2, [r3, #4]
		}else if ( Value[2] < 0){
			Value[2] = 0;
		}

}
 800146c:	e007      	b.n	800147e <AnalogHandler+0x92>
		}else if ( Value[2] < 0){
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <AnalogHandler+0xa0>)
 8001470:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	da02      	bge.n	800147e <AnalogHandler+0x92>
			Value[2] = 0;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <AnalogHandler+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	809a      	strh	r2, [r3, #4]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	200003f8 	.word	0x200003f8
 800148c:	20000324 	.word	0x20000324
 8001490:	200003fc 	.word	0x200003fc

08001494 <HAL_GPIO_EXTI_Callback>:

//TODO Documentar
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]

	//Rotina de tratamento da interrupção externa

	currentMillis = HAL_GetTick();
 800149e:	f002 f909 	bl	80036b4 <HAL_GetTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80014a6:	6013      	str	r3, [r2, #0]

	if ((currentMillis - previousMillis) > 200) {
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_GPIO_EXTI_Callback+0x38>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2bc8      	cmp	r3, #200	; 0xc8
 80014b4:	d903      	bls.n	80014be <HAL_GPIO_EXTI_Callback+0x2a>
//			brilho = 1;
//		}



		previousMillis = currentMillis;
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_GPIO_EXTI_Callback+0x38>)
 80014bc:	6013      	str	r3, [r2, #0]

	}
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000031c 	.word	0x2000031c
 80014cc:	20000318 	.word	0x20000318

080014d0 <ColorModeSelect>:

//TODO Documentar método
void ColorModeSelect() {
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

	//Define o modo de atuação SPEED

	if(SpeedMode<430){			//modo original
 80014d4:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <ColorModeSelect+0x120>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80014dc:	da03      	bge.n	80014e6 <ColorModeSelect+0x16>
		Value[0] = 0;
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <ColorModeSelect+0x124>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	e02d      	b.n	8001542 <ColorModeSelect+0x72>
	} else if(SpeedMode<800){	//modo Eco
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <ColorModeSelect+0x120>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80014ee:	da03      	bge.n	80014f8 <ColorModeSelect+0x28>
		Value[0] = 1;
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <ColorModeSelect+0x124>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	e024      	b.n	8001542 <ColorModeSelect+0x72>
	} else if(SpeedMode<1200){	//modo Sport
 80014f8:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <ColorModeSelect+0x120>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001500:	da03      	bge.n	800150a <ColorModeSelect+0x3a>
		Value[0] = 2;
 8001502:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <ColorModeSelect+0x124>)
 8001504:	2202      	movs	r2, #2
 8001506:	801a      	strh	r2, [r3, #0]
 8001508:	e01b      	b.n	8001542 <ColorModeSelect+0x72>
	} else if(SpeedMode<1510){	//modo Performance
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <ColorModeSelect+0x120>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8001512:	4293      	cmp	r3, r2
 8001514:	dc03      	bgt.n	800151e <ColorModeSelect+0x4e>
		Value[0] = 3;
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <ColorModeSelect+0x124>)
 8001518:	2203      	movs	r2, #3
 800151a:	801a      	strh	r2, [r3, #0]
 800151c:	e011      	b.n	8001542 <ColorModeSelect+0x72>
	} else if(SpeedMode<2000){	//modo Track
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <ColorModeSelect+0x120>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001526:	da03      	bge.n	8001530 <ColorModeSelect+0x60>
		Value[0] = 4;
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <ColorModeSelect+0x124>)
 800152a:	2204      	movs	r2, #4
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	e008      	b.n	8001542 <ColorModeSelect+0x72>
	} else if(SpeedMode<2500){	//modo Valet
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <ColorModeSelect+0x120>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001538:	4293      	cmp	r3, r2
 800153a:	dc02      	bgt.n	8001542 <ColorModeSelect+0x72>
			Value[0] = 4;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <ColorModeSelect+0x124>)
 800153e:	2204      	movs	r2, #4
 8001540:	801a      	strh	r2, [r3, #0]
	}

	switch (Value[0]) {
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <ColorModeSelect+0x124>)
 8001544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d84b      	bhi.n	80015e4 <ColorModeSelect+0x114>
 800154c:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <ColorModeSelect+0x84>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	0800156d 	.word	0x0800156d
 8001558:	08001581 	.word	0x08001581
 800155c:	08001595 	.word	0x08001595
 8001560:	080015a9 	.word	0x080015a9
 8001564:	080015bd 	.word	0x080015bd
 8001568:	080015d1 	.word	0x080015d1

	case branco:
		Red = 255;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <ColorModeSelect+0x128>)
 800156e:	22ff      	movs	r2, #255	; 0xff
 8001570:	601a      	str	r2, [r3, #0]
		Green = 255;
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <ColorModeSelect+0x12c>)
 8001574:	22ff      	movs	r2, #255	; 0xff
 8001576:	601a      	str	r2, [r3, #0]
		Blue = 255;
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <ColorModeSelect+0x130>)
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	601a      	str	r2, [r3, #0]
		break;
 800157e:	e032      	b.n	80015e6 <ColorModeSelect+0x116>

	case eco:
		Red = 0;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <ColorModeSelect+0x128>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
		Green = 180;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <ColorModeSelect+0x12c>)
 8001588:	22b4      	movs	r2, #180	; 0xb4
 800158a:	601a      	str	r2, [r3, #0]
		Blue = 255;
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <ColorModeSelect+0x130>)
 800158e:	22ff      	movs	r2, #255	; 0xff
 8001590:	601a      	str	r2, [r3, #0]
		break;
 8001592:	e028      	b.n	80015e6 <ColorModeSelect+0x116>

	case verde:
		Red = 0;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <ColorModeSelect+0x128>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
		Green = 255;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <ColorModeSelect+0x12c>)
 800159c:	22ff      	movs	r2, #255	; 0xff
 800159e:	601a      	str	r2, [r3, #0]
		Blue = 0;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <ColorModeSelect+0x130>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
		break;
 80015a6:	e01e      	b.n	80015e6 <ColorModeSelect+0x116>

	case amarelo:
		Red = 255;
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <ColorModeSelect+0x128>)
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	601a      	str	r2, [r3, #0]
		Green = 255;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <ColorModeSelect+0x12c>)
 80015b0:	22ff      	movs	r2, #255	; 0xff
 80015b2:	601a      	str	r2, [r3, #0]
		Blue = 0;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <ColorModeSelect+0x130>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
		break;
 80015ba:	e014      	b.n	80015e6 <ColorModeSelect+0x116>

	case vermelho:
		Red = 255;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <ColorModeSelect+0x128>)
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	601a      	str	r2, [r3, #0]
		Green = 0;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <ColorModeSelect+0x12c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
		Blue = 0;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <ColorModeSelect+0x130>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
		break;
 80015ce:	e00a      	b.n	80015e6 <ColorModeSelect+0x116>

	case azul:
		Red = 0;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <ColorModeSelect+0x128>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
		Green = 0;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <ColorModeSelect+0x12c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
		Blue = 255;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <ColorModeSelect+0x130>)
 80015de:	22ff      	movs	r2, #255	; 0xff
 80015e0:	601a      	str	r2, [r3, #0]
		break;
 80015e2:	e000      	b.n	80015e6 <ColorModeSelect+0x116>

	default:
		break;
 80015e4:	bf00      	nop

	}


}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200003f4 	.word	0x200003f4
 80015f4:	20000324 	.word	0x20000324
 80015f8:	20000008 	.word	0x20000008
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	20000010 	.word	0x20000010

08001604 <LEDHandler>:

void LEDHandler(int Valor) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]


	//brilho = Value * MAX_Brightness / 100;

	//lógica para acionamento sequencial
	if (Valor == 0 ) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d16b      	bne.n	80016ea <LEDHandler+0xe6>
		Set_LED(0, 0, 0, 0);
 8001612:	2300      	movs	r3, #0
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2000      	movs	r0, #0
 800161a:	f001 faf1 	bl	8002c00 <Set_LED>
		Set_LED(1, 0, 0, 0);
 800161e:	2300      	movs	r3, #0
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2001      	movs	r0, #1
 8001626:	f001 faeb 	bl	8002c00 <Set_LED>
		Set_LED(2, 0, 0, 0);
 800162a:	2300      	movs	r3, #0
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2002      	movs	r0, #2
 8001632:	f001 fae5 	bl	8002c00 <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001636:	2300      	movs	r3, #0
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	2003      	movs	r0, #3
 800163e:	f001 fadf 	bl	8002c00 <Set_LED>
		Set_LED(4, 0, 0, 0);
 8001642:	2300      	movs	r3, #0
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2004      	movs	r0, #4
 800164a:	f001 fad9 	bl	8002c00 <Set_LED>
		Set_LED(5, 0, 0, 0);
 800164e:	2300      	movs	r3, #0
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	2005      	movs	r0, #5
 8001656:	f001 fad3 	bl	8002c00 <Set_LED>
		Set_LED(6, 0, 0, 0);
 800165a:	2300      	movs	r3, #0
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2006      	movs	r0, #6
 8001662:	f001 facd 	bl	8002c00 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001666:	2300      	movs	r3, #0
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2007      	movs	r0, #7
 800166e:	f001 fac7 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001672:	2300      	movs	r3, #0
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2008      	movs	r0, #8
 800167a:	f001 fac1 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 800167e:	2300      	movs	r3, #0
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2009      	movs	r0, #9
 8001686:	f001 fabb 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 800168a:	2300      	movs	r3, #0
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	200a      	movs	r0, #10
 8001692:	f001 fab5 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001696:	2300      	movs	r3, #0
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	200b      	movs	r0, #11
 800169e:	f001 faaf 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 80016a2:	2300      	movs	r3, #0
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	200c      	movs	r0, #12
 80016aa:	f001 faa9 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 80016ae:	2300      	movs	r3, #0
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	200d      	movs	r0, #13
 80016b6:	f001 faa3 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 80016ba:	2300      	movs	r3, #0
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	200e      	movs	r0, #14
 80016c2:	f001 fa9d 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80016c6:	2300      	movs	r3, #0
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	200f      	movs	r0, #15
 80016ce:	f001 fa97 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80016d2:	2300      	movs	r3, #0
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2010      	movs	r0, #16
 80016da:	f001 fa91 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80016de:	2300      	movs	r3, #0
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2011      	movs	r0, #17
 80016e6:	f001 fa8b 	bl	8002c00 <Set_LED>

	}
	if (Valor >= 1 && Valor < 6) {
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	dd73      	ble.n	80017d8 <LEDHandler+0x1d4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	dc70      	bgt.n	80017d8 <LEDHandler+0x1d4>
		Set_LED(0, Red, Green, Blue);
 80016f6:	4bb8      	ldr	r3, [pc, #736]	; (80019d8 <LEDHandler+0x3d4>)
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	4bb8      	ldr	r3, [pc, #736]	; (80019dc <LEDHandler+0x3d8>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4bb8      	ldr	r3, [pc, #736]	; (80019e0 <LEDHandler+0x3dc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2000      	movs	r0, #0
 8001704:	f001 fa7c 	bl	8002c00 <Set_LED>
		Set_LED(1, 0, 0, 0);
 8001708:	2300      	movs	r3, #0
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f001 fa76 	bl	8002c00 <Set_LED>
		Set_LED(2, 0, 0, 0);
 8001714:	2300      	movs	r3, #0
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2002      	movs	r0, #2
 800171c:	f001 fa70 	bl	8002c00 <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001720:	2300      	movs	r3, #0
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2003      	movs	r0, #3
 8001728:	f001 fa6a 	bl	8002c00 <Set_LED>
		Set_LED(4, 0, 0, 0);
 800172c:	2300      	movs	r3, #0
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2004      	movs	r0, #4
 8001734:	f001 fa64 	bl	8002c00 <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001738:	2300      	movs	r3, #0
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2005      	movs	r0, #5
 8001740:	f001 fa5e 	bl	8002c00 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001744:	2300      	movs	r3, #0
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2006      	movs	r0, #6
 800174c:	f001 fa58 	bl	8002c00 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001750:	2300      	movs	r3, #0
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2007      	movs	r0, #7
 8001758:	f001 fa52 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 800175c:	2300      	movs	r3, #0
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2008      	movs	r0, #8
 8001764:	f001 fa4c 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001768:	2300      	movs	r3, #0
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2009      	movs	r0, #9
 8001770:	f001 fa46 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001774:	2300      	movs	r3, #0
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	200a      	movs	r0, #10
 800177c:	f001 fa40 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001780:	2300      	movs	r3, #0
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	200b      	movs	r0, #11
 8001788:	f001 fa3a 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 800178c:	2300      	movs	r3, #0
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	200c      	movs	r0, #12
 8001794:	f001 fa34 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001798:	2300      	movs	r3, #0
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200d      	movs	r0, #13
 80017a0:	f001 fa2e 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 80017a4:	2300      	movs	r3, #0
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	200e      	movs	r0, #14
 80017ac:	f001 fa28 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80017b0:	2300      	movs	r3, #0
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	200f      	movs	r0, #15
 80017b8:	f001 fa22 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80017bc:	2300      	movs	r3, #0
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2010      	movs	r0, #16
 80017c4:	f001 fa1c 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80017c8:	2300      	movs	r3, #0
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2011      	movs	r0, #17
 80017d0:	f001 fa16 	bl	8002c00 <Set_LED>
 80017d4:	f001 b957 	b.w	8002a86 <LEDHandler+0x1482>



	} else if (Valor >= 6 && Valor < 12) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	dd76      	ble.n	80018cc <LEDHandler+0x2c8>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0b      	cmp	r3, #11
 80017e2:	dc73      	bgt.n	80018cc <LEDHandler+0x2c8>
		Set_LED(0, Red, Green, Blue);
 80017e4:	4b7c      	ldr	r3, [pc, #496]	; (80019d8 <LEDHandler+0x3d4>)
 80017e6:	6819      	ldr	r1, [r3, #0]
 80017e8:	4b7c      	ldr	r3, [pc, #496]	; (80019dc <LEDHandler+0x3d8>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b7c      	ldr	r3, [pc, #496]	; (80019e0 <LEDHandler+0x3dc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2000      	movs	r0, #0
 80017f2:	f001 fa05 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80017f6:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <LEDHandler+0x3d4>)
 80017f8:	6819      	ldr	r1, [r3, #0]
 80017fa:	4b78      	ldr	r3, [pc, #480]	; (80019dc <LEDHandler+0x3d8>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b78      	ldr	r3, [pc, #480]	; (80019e0 <LEDHandler+0x3dc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2001      	movs	r0, #1
 8001804:	f001 f9fc 	bl	8002c00 <Set_LED>
		Set_LED(2, 0, 0, 0);
 8001808:	2300      	movs	r3, #0
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2002      	movs	r0, #2
 8001810:	f001 f9f6 	bl	8002c00 <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001814:	2300      	movs	r3, #0
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2003      	movs	r0, #3
 800181c:	f001 f9f0 	bl	8002c00 <Set_LED>
		Set_LED(4, 0, 0, 0);
 8001820:	2300      	movs	r3, #0
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2004      	movs	r0, #4
 8001828:	f001 f9ea 	bl	8002c00 <Set_LED>
		Set_LED(5, 0, 0, 0);
 800182c:	2300      	movs	r3, #0
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2005      	movs	r0, #5
 8001834:	f001 f9e4 	bl	8002c00 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001838:	2300      	movs	r3, #0
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2006      	movs	r0, #6
 8001840:	f001 f9de 	bl	8002c00 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001844:	2300      	movs	r3, #0
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2007      	movs	r0, #7
 800184c:	f001 f9d8 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001850:	2300      	movs	r3, #0
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2008      	movs	r0, #8
 8001858:	f001 f9d2 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 800185c:	2300      	movs	r3, #0
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2009      	movs	r0, #9
 8001864:	f001 f9cc 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001868:	2300      	movs	r3, #0
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	200a      	movs	r0, #10
 8001870:	f001 f9c6 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001874:	2300      	movs	r3, #0
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	200b      	movs	r0, #11
 800187c:	f001 f9c0 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001880:	2300      	movs	r3, #0
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	200c      	movs	r0, #12
 8001888:	f001 f9ba 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 800188c:	2300      	movs	r3, #0
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	200d      	movs	r0, #13
 8001894:	f001 f9b4 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001898:	2300      	movs	r3, #0
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	200e      	movs	r0, #14
 80018a0:	f001 f9ae 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80018a4:	2300      	movs	r3, #0
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	200f      	movs	r0, #15
 80018ac:	f001 f9a8 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80018b0:	2300      	movs	r3, #0
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2010      	movs	r0, #16
 80018b8:	f001 f9a2 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80018bc:	2300      	movs	r3, #0
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2011      	movs	r0, #17
 80018c4:	f001 f99c 	bl	8002c00 <Set_LED>
 80018c8:	f001 b8dd 	b.w	8002a86 <LEDHandler+0x1482>

	} else if (Valor >= 12 && Valor < 18) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b0b      	cmp	r3, #11
 80018d0:	f340 8088 	ble.w	80019e4 <LEDHandler+0x3e0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b11      	cmp	r3, #17
 80018d8:	f300 8084 	bgt.w	80019e4 <LEDHandler+0x3e0>
		Set_LED(0, Red, Green, Blue);
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <LEDHandler+0x3d4>)
 80018de:	6819      	ldr	r1, [r3, #0]
 80018e0:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <LEDHandler+0x3d8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <LEDHandler+0x3dc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2000      	movs	r0, #0
 80018ea:	f001 f989 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <LEDHandler+0x3d4>)
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <LEDHandler+0x3d8>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <LEDHandler+0x3dc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2001      	movs	r0, #1
 80018fc:	f001 f980 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001900:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <LEDHandler+0x3d4>)
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <LEDHandler+0x3d8>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <LEDHandler+0x3dc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2002      	movs	r0, #2
 800190e:	f001 f977 	bl	8002c00 <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001912:	2300      	movs	r3, #0
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	2003      	movs	r0, #3
 800191a:	f001 f971 	bl	8002c00 <Set_LED>
		Set_LED(3, 0, 0, 0);
 800191e:	2300      	movs	r3, #0
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2003      	movs	r0, #3
 8001926:	f001 f96b 	bl	8002c00 <Set_LED>
		Set_LED(4, 0, 0, 0);
 800192a:	2300      	movs	r3, #0
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2004      	movs	r0, #4
 8001932:	f001 f965 	bl	8002c00 <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001936:	2300      	movs	r3, #0
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2005      	movs	r0, #5
 800193e:	f001 f95f 	bl	8002c00 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001942:	2300      	movs	r3, #0
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2006      	movs	r0, #6
 800194a:	f001 f959 	bl	8002c00 <Set_LED>
		Set_LED(7, 0, 0, 0);
 800194e:	2300      	movs	r3, #0
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2007      	movs	r0, #7
 8001956:	f001 f953 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 800195a:	2300      	movs	r3, #0
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2008      	movs	r0, #8
 8001962:	f001 f94d 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001966:	2300      	movs	r3, #0
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	2009      	movs	r0, #9
 800196e:	f001 f947 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001972:	2300      	movs	r3, #0
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	200a      	movs	r0, #10
 800197a:	f001 f941 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	200b      	movs	r0, #11
 8001986:	f001 f93b 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 800198a:	2300      	movs	r3, #0
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	200c      	movs	r0, #12
 8001992:	f001 f935 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	200d      	movs	r0, #13
 800199e:	f001 f92f 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 80019a2:	2300      	movs	r3, #0
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	200e      	movs	r0, #14
 80019aa:	f001 f929 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80019ae:	2300      	movs	r3, #0
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	200f      	movs	r0, #15
 80019b6:	f001 f923 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80019ba:	2300      	movs	r3, #0
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2010      	movs	r0, #16
 80019c2:	f001 f91d 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80019c6:	2300      	movs	r3, #0
 80019c8:	2200      	movs	r2, #0
 80019ca:	2100      	movs	r1, #0
 80019cc:	2011      	movs	r0, #17
 80019ce:	f001 f917 	bl	8002c00 <Set_LED>
 80019d2:	f001 b858 	b.w	8002a86 <LEDHandler+0x1482>
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	2000000c 	.word	0x2000000c
 80019e0:	20000010 	.word	0x20000010

	} else if (Valor >= 18 && Valor < 24) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b11      	cmp	r3, #17
 80019e8:	dd7c      	ble.n	8001ae4 <LEDHandler+0x4e0>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b17      	cmp	r3, #23
 80019ee:	dc79      	bgt.n	8001ae4 <LEDHandler+0x4e0>
		Set_LED(0, Red, Green, Blue);
 80019f0:	4bc2      	ldr	r3, [pc, #776]	; (8001cfc <LEDHandler+0x6f8>)
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	4bc2      	ldr	r3, [pc, #776]	; (8001d00 <LEDHandler+0x6fc>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4bc2      	ldr	r3, [pc, #776]	; (8001d04 <LEDHandler+0x700>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2000      	movs	r0, #0
 80019fe:	f001 f8ff 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001a02:	4bbe      	ldr	r3, [pc, #760]	; (8001cfc <LEDHandler+0x6f8>)
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	4bbe      	ldr	r3, [pc, #760]	; (8001d00 <LEDHandler+0x6fc>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4bbe      	ldr	r3, [pc, #760]	; (8001d04 <LEDHandler+0x700>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f001 f8f6 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001a14:	4bb9      	ldr	r3, [pc, #740]	; (8001cfc <LEDHandler+0x6f8>)
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	4bb9      	ldr	r3, [pc, #740]	; (8001d00 <LEDHandler+0x6fc>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4bb9      	ldr	r3, [pc, #740]	; (8001d04 <LEDHandler+0x700>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2002      	movs	r0, #2
 8001a22:	f001 f8ed 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001a26:	4bb5      	ldr	r3, [pc, #724]	; (8001cfc <LEDHandler+0x6f8>)
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	4bb5      	ldr	r3, [pc, #724]	; (8001d00 <LEDHandler+0x6fc>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4bb5      	ldr	r3, [pc, #724]	; (8001d04 <LEDHandler+0x700>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2003      	movs	r0, #3
 8001a34:	f001 f8e4 	bl	8002c00 <Set_LED>
		Set_LED(4, 0, 0, 0);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2004      	movs	r0, #4
 8001a40:	f001 f8de 	bl	8002c00 <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001a44:	2300      	movs	r3, #0
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2005      	movs	r0, #5
 8001a4c:	f001 f8d8 	bl	8002c00 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001a50:	2300      	movs	r3, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2006      	movs	r0, #6
 8001a58:	f001 f8d2 	bl	8002c00 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2007      	movs	r0, #7
 8001a64:	f001 f8cc 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2008      	movs	r0, #8
 8001a70:	f001 f8c6 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001a74:	2300      	movs	r3, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2009      	movs	r0, #9
 8001a7c:	f001 f8c0 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001a80:	2300      	movs	r3, #0
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	200a      	movs	r0, #10
 8001a88:	f001 f8ba 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	200b      	movs	r0, #11
 8001a94:	f001 f8b4 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f001 f8ae 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	200d      	movs	r0, #13
 8001aac:	f001 f8a8 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	200e      	movs	r0, #14
 8001ab8:	f001 f8a2 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001abc:	2300      	movs	r3, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f001 f89c 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2010      	movs	r0, #16
 8001ad0:	f001 f896 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2011      	movs	r0, #17
 8001adc:	f001 f890 	bl	8002c00 <Set_LED>
 8001ae0:	f000 bfd1 	b.w	8002a86 <LEDHandler+0x1482>

	} else if (Valor >= 24 && Valor < 30) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b17      	cmp	r3, #23
 8001ae8:	dd7f      	ble.n	8001bea <LEDHandler+0x5e6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b1d      	cmp	r3, #29
 8001aee:	dc7c      	bgt.n	8001bea <LEDHandler+0x5e6>
		Set_LED(0, Red, Green, Blue);
 8001af0:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <LEDHandler+0x6f8>)
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <LEDHandler+0x6fc>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b82      	ldr	r3, [pc, #520]	; (8001d04 <LEDHandler+0x700>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2000      	movs	r0, #0
 8001afe:	f001 f87f 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001b02:	4b7e      	ldr	r3, [pc, #504]	; (8001cfc <LEDHandler+0x6f8>)
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	4b7e      	ldr	r3, [pc, #504]	; (8001d00 <LEDHandler+0x6fc>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b7e      	ldr	r3, [pc, #504]	; (8001d04 <LEDHandler+0x700>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f001 f876 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001b14:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <LEDHandler+0x6f8>)
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <LEDHandler+0x6fc>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b79      	ldr	r3, [pc, #484]	; (8001d04 <LEDHandler+0x700>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2002      	movs	r0, #2
 8001b22:	f001 f86d 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001b26:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <LEDHandler+0x6f8>)
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <LEDHandler+0x6fc>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <LEDHandler+0x700>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2003      	movs	r0, #3
 8001b34:	f001 f864 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001b38:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <LEDHandler+0x6f8>)
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <LEDHandler+0x6fc>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b70      	ldr	r3, [pc, #448]	; (8001d04 <LEDHandler+0x700>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2004      	movs	r0, #4
 8001b46:	f001 f85b 	bl	8002c00 <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2005      	movs	r0, #5
 8001b52:	f001 f855 	bl	8002c00 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001b56:	2300      	movs	r3, #0
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2006      	movs	r0, #6
 8001b5e:	f001 f84f 	bl	8002c00 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001b62:	2300      	movs	r3, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	2007      	movs	r0, #7
 8001b6a:	f001 f849 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2008      	movs	r0, #8
 8001b76:	f001 f843 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2009      	movs	r0, #9
 8001b82:	f001 f83d 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001b86:	2300      	movs	r3, #0
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	f001 f837 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001b92:	2300      	movs	r3, #0
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	200b      	movs	r0, #11
 8001b9a:	f001 f831 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	200c      	movs	r0, #12
 8001ba6:	f001 f82b 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001baa:	2300      	movs	r3, #0
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	200d      	movs	r0, #13
 8001bb2:	f001 f825 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	200e      	movs	r0, #14
 8001bbe:	f001 f81f 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	200f      	movs	r0, #15
 8001bca:	f001 f819 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2010      	movs	r0, #16
 8001bd6:	f001 f813 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	2011      	movs	r0, #17
 8001be2:	f001 f80d 	bl	8002c00 <Set_LED>
 8001be6:	f000 bf4e 	b.w	8002a86 <LEDHandler+0x1482>

	} else if (Valor >= 30 && Valor < 36) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b1d      	cmp	r3, #29
 8001bee:	f340 808b 	ble.w	8001d08 <LEDHandler+0x704>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b23      	cmp	r3, #35	; 0x23
 8001bf6:	f300 8087 	bgt.w	8001d08 <LEDHandler+0x704>
		Set_LED(0, Red, Green, Blue);
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <LEDHandler+0x6f8>)
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <LEDHandler+0x6fc>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <LEDHandler+0x700>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 fffa 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <LEDHandler+0x6f8>)
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <LEDHandler+0x6fc>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <LEDHandler+0x700>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f000 fff1 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <LEDHandler+0x6f8>)
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <LEDHandler+0x6fc>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <LEDHandler+0x700>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	f000 ffe8 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001c30:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <LEDHandler+0x6f8>)
 8001c32:	6819      	ldr	r1, [r3, #0]
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <LEDHandler+0x6fc>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <LEDHandler+0x700>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 ffdf 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <LEDHandler+0x6f8>)
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <LEDHandler+0x6fc>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <LEDHandler+0x700>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2004      	movs	r0, #4
 8001c50:	f000 ffd6 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001c54:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <LEDHandler+0x6f8>)
 8001c56:	6819      	ldr	r1, [r3, #0]
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <LEDHandler+0x6fc>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <LEDHandler+0x700>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2005      	movs	r0, #5
 8001c62:	f000 ffcd 	bl	8002c00 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001c66:	2300      	movs	r3, #0
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2006      	movs	r0, #6
 8001c6e:	f000 ffc7 	bl	8002c00 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001c72:	2300      	movs	r3, #0
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	2007      	movs	r0, #7
 8001c7a:	f000 ffc1 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	2008      	movs	r0, #8
 8001c86:	f000 ffbb 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2009      	movs	r0, #9
 8001c92:	f000 ffb5 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001c96:	2300      	movs	r3, #0
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f000 ffaf 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	200b      	movs	r0, #11
 8001caa:	f000 ffa9 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	200c      	movs	r0, #12
 8001cb6:	f000 ffa3 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	200d      	movs	r0, #13
 8001cc2:	f000 ff9d 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	200e      	movs	r0, #14
 8001cce:	f000 ff97 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	200f      	movs	r0, #15
 8001cda:	f000 ff91 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2010      	movs	r0, #16
 8001ce6:	f000 ff8b 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001cea:	2300      	movs	r3, #0
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2011      	movs	r0, #17
 8001cf2:	f000 ff85 	bl	8002c00 <Set_LED>
 8001cf6:	f000 bec6 	b.w	8002a86 <LEDHandler+0x1482>
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	2000000c 	.word	0x2000000c
 8001d04:	20000010 	.word	0x20000010

	} else if (Valor >= 36 && Valor < 42) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b23      	cmp	r3, #35	; 0x23
 8001d0c:	f340 8087 	ble.w	8001e1e <LEDHandler+0x81a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b29      	cmp	r3, #41	; 0x29
 8001d14:	f300 8083 	bgt.w	8001e1e <LEDHandler+0x81a>
		Set_LED(0, Red, Green, Blue);
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <LEDHandler+0x938>)
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <LEDHandler+0x93c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <LEDHandler+0x940>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2000      	movs	r0, #0
 8001d26:	f000 ff6b 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001d2a:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <LEDHandler+0x938>)
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	4b84      	ldr	r3, [pc, #528]	; (8001f40 <LEDHandler+0x93c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <LEDHandler+0x940>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2001      	movs	r0, #1
 8001d38:	f000 ff62 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001d3c:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <LEDHandler+0x938>)
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	4b7f      	ldr	r3, [pc, #508]	; (8001f40 <LEDHandler+0x93c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b7f      	ldr	r3, [pc, #508]	; (8001f44 <LEDHandler+0x940>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f000 ff59 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001d4e:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <LEDHandler+0x938>)
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <LEDHandler+0x93c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <LEDHandler+0x940>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f000 ff50 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001d60:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <LEDHandler+0x938>)
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <LEDHandler+0x93c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <LEDHandler+0x940>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2004      	movs	r0, #4
 8001d6e:	f000 ff47 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <LEDHandler+0x938>)
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	4b72      	ldr	r3, [pc, #456]	; (8001f40 <LEDHandler+0x93c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b72      	ldr	r3, [pc, #456]	; (8001f44 <LEDHandler+0x940>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2005      	movs	r0, #5
 8001d80:	f000 ff3e 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001d84:	4b6d      	ldr	r3, [pc, #436]	; (8001f3c <LEDHandler+0x938>)
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <LEDHandler+0x93c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b6d      	ldr	r3, [pc, #436]	; (8001f44 <LEDHandler+0x940>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2006      	movs	r0, #6
 8001d92:	f000 ff35 	bl	8002c00 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001d96:	2300      	movs	r3, #0
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2007      	movs	r0, #7
 8001d9e:	f000 ff2f 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001da2:	2300      	movs	r3, #0
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	2008      	movs	r0, #8
 8001daa:	f000 ff29 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001dae:	2300      	movs	r3, #0
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	2009      	movs	r0, #9
 8001db6:	f000 ff23 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f000 ff1d 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	200b      	movs	r0, #11
 8001dce:	f000 ff17 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	200c      	movs	r0, #12
 8001dda:	f000 ff11 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001dde:	2300      	movs	r3, #0
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	200d      	movs	r0, #13
 8001de6:	f000 ff0b 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001dea:	2300      	movs	r3, #0
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	200e      	movs	r0, #14
 8001df2:	f000 ff05 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001df6:	2300      	movs	r3, #0
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	200f      	movs	r0, #15
 8001dfe:	f000 feff 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001e02:	2300      	movs	r3, #0
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2010      	movs	r0, #16
 8001e0a:	f000 fef9 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2011      	movs	r0, #17
 8001e16:	f000 fef3 	bl	8002c00 <Set_LED>
 8001e1a:	f000 be34 	b.w	8002a86 <LEDHandler+0x1482>

	} else if (Valor >= 42 && Valor < 48) {
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b29      	cmp	r3, #41	; 0x29
 8001e22:	f340 8091 	ble.w	8001f48 <LEDHandler+0x944>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b2f      	cmp	r3, #47	; 0x2f
 8001e2a:	f300 808d 	bgt.w	8001f48 <LEDHandler+0x944>
		Set_LED(0, Red, Green, Blue);
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <LEDHandler+0x938>)
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <LEDHandler+0x93c>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <LEDHandler+0x940>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f000 fee0 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <LEDHandler+0x938>)
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	4b3e      	ldr	r3, [pc, #248]	; (8001f40 <LEDHandler+0x93c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <LEDHandler+0x940>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f000 fed7 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <LEDHandler+0x938>)
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <LEDHandler+0x93c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <LEDHandler+0x940>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f000 fece 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001e64:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <LEDHandler+0x938>)
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <LEDHandler+0x93c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <LEDHandler+0x940>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 fec5 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <LEDHandler+0x938>)
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <LEDHandler+0x93c>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <LEDHandler+0x940>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2004      	movs	r0, #4
 8001e84:	f000 febc 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <LEDHandler+0x938>)
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <LEDHandler+0x93c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <LEDHandler+0x940>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2005      	movs	r0, #5
 8001e96:	f000 feb3 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <LEDHandler+0x938>)
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <LEDHandler+0x93c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <LEDHandler+0x940>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2006      	movs	r0, #6
 8001ea8:	f000 feaa 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <LEDHandler+0x938>)
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <LEDHandler+0x93c>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <LEDHandler+0x940>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2007      	movs	r0, #7
 8001eba:	f000 fea1 	bl	8002c00 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2008      	movs	r0, #8
 8001ec6:	f000 fe9b 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2009      	movs	r0, #9
 8001ed2:	f000 fe95 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	200a      	movs	r0, #10
 8001ede:	f000 fe8f 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	200b      	movs	r0, #11
 8001eea:	f000 fe89 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	200c      	movs	r0, #12
 8001ef6:	f000 fe83 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001efa:	2300      	movs	r3, #0
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	200d      	movs	r0, #13
 8001f02:	f000 fe7d 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001f06:	2300      	movs	r3, #0
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	200e      	movs	r0, #14
 8001f0e:	f000 fe77 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001f12:	2300      	movs	r3, #0
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	200f      	movs	r0, #15
 8001f1a:	f000 fe71 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	2010      	movs	r0, #16
 8001f26:	f000 fe6b 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2011      	movs	r0, #17
 8001f32:	f000 fe65 	bl	8002c00 <Set_LED>
 8001f36:	f000 bda6 	b.w	8002a86 <LEDHandler+0x1482>
 8001f3a:	bf00      	nop
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	2000000c 	.word	0x2000000c
 8001f44:	20000010 	.word	0x20000010

	} else if (Valor >= 48 && Valor < 54) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b2f      	cmp	r3, #47	; 0x2f
 8001f4c:	f340 808d 	ble.w	800206a <LEDHandler+0xa66>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b35      	cmp	r3, #53	; 0x35
 8001f54:	f300 8089 	bgt.w	800206a <LEDHandler+0xa66>
		Set_LED(0, Red, Green, Blue);
 8001f58:	4b8e      	ldr	r3, [pc, #568]	; (8002194 <LEDHandler+0xb90>)
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	4b8e      	ldr	r3, [pc, #568]	; (8002198 <LEDHandler+0xb94>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b8e      	ldr	r3, [pc, #568]	; (800219c <LEDHandler+0xb98>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2000      	movs	r0, #0
 8001f66:	f000 fe4b 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001f6a:	4b8a      	ldr	r3, [pc, #552]	; (8002194 <LEDHandler+0xb90>)
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	4b8a      	ldr	r3, [pc, #552]	; (8002198 <LEDHandler+0xb94>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b8a      	ldr	r3, [pc, #552]	; (800219c <LEDHandler+0xb98>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2001      	movs	r0, #1
 8001f78:	f000 fe42 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001f7c:	4b85      	ldr	r3, [pc, #532]	; (8002194 <LEDHandler+0xb90>)
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	4b85      	ldr	r3, [pc, #532]	; (8002198 <LEDHandler+0xb94>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b85      	ldr	r3, [pc, #532]	; (800219c <LEDHandler+0xb98>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f000 fe39 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001f8e:	4b81      	ldr	r3, [pc, #516]	; (8002194 <LEDHandler+0xb90>)
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	4b81      	ldr	r3, [pc, #516]	; (8002198 <LEDHandler+0xb94>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b81      	ldr	r3, [pc, #516]	; (800219c <LEDHandler+0xb98>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f000 fe30 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001fa0:	4b7c      	ldr	r3, [pc, #496]	; (8002194 <LEDHandler+0xb90>)
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <LEDHandler+0xb94>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b7c      	ldr	r3, [pc, #496]	; (800219c <LEDHandler+0xb98>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2004      	movs	r0, #4
 8001fae:	f000 fe27 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001fb2:	4b78      	ldr	r3, [pc, #480]	; (8002194 <LEDHandler+0xb90>)
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	4b78      	ldr	r3, [pc, #480]	; (8002198 <LEDHandler+0xb94>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b78      	ldr	r3, [pc, #480]	; (800219c <LEDHandler+0xb98>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2005      	movs	r0, #5
 8001fc0:	f000 fe1e 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001fc4:	4b73      	ldr	r3, [pc, #460]	; (8002194 <LEDHandler+0xb90>)
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	4b73      	ldr	r3, [pc, #460]	; (8002198 <LEDHandler+0xb94>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b73      	ldr	r3, [pc, #460]	; (800219c <LEDHandler+0xb98>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2006      	movs	r0, #6
 8001fd2:	f000 fe15 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8001fd6:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <LEDHandler+0xb90>)
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <LEDHandler+0xb94>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <LEDHandler+0xb98>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2007      	movs	r0, #7
 8001fe4:	f000 fe0c 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <LEDHandler+0xb90>)
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <LEDHandler+0xb94>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <LEDHandler+0xb98>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2008      	movs	r0, #8
 8001ff6:	f000 fe03 	bl	8002c00 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2009      	movs	r0, #9
 8002002:	f000 fdfd 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8002006:	2300      	movs	r3, #0
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	200a      	movs	r0, #10
 800200e:	f000 fdf7 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8002012:	2300      	movs	r3, #0
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	200b      	movs	r0, #11
 800201a:	f000 fdf1 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 800201e:	2300      	movs	r3, #0
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	200c      	movs	r0, #12
 8002026:	f000 fdeb 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 800202a:	2300      	movs	r3, #0
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	200d      	movs	r0, #13
 8002032:	f000 fde5 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8002036:	2300      	movs	r3, #0
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	200e      	movs	r0, #14
 800203e:	f000 fddf 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8002042:	2300      	movs	r3, #0
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	200f      	movs	r0, #15
 800204a:	f000 fdd9 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 800204e:	2300      	movs	r3, #0
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	2010      	movs	r0, #16
 8002056:	f000 fdd3 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 800205a:	2300      	movs	r3, #0
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2011      	movs	r0, #17
 8002062:	f000 fdcd 	bl	8002c00 <Set_LED>
 8002066:	f000 bd0e 	b.w	8002a86 <LEDHandler+0x1482>

	} else if (Valor >= 54 && Valor < 60) {
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b35      	cmp	r3, #53	; 0x35
 800206e:	f340 8097 	ble.w	80021a0 <LEDHandler+0xb9c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b3b      	cmp	r3, #59	; 0x3b
 8002076:	f300 8093 	bgt.w	80021a0 <LEDHandler+0xb9c>
		Set_LED(0, Red, Green, Blue);
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <LEDHandler+0xb90>)
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <LEDHandler+0xb94>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <LEDHandler+0xb98>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2000      	movs	r0, #0
 8002088:	f000 fdba 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <LEDHandler+0xb90>)
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	4b41      	ldr	r3, [pc, #260]	; (8002198 <LEDHandler+0xb94>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b41      	ldr	r3, [pc, #260]	; (800219c <LEDHandler+0xb98>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2001      	movs	r0, #1
 800209a:	f000 fdb1 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <LEDHandler+0xb90>)
 80020a0:	6819      	ldr	r1, [r3, #0]
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <LEDHandler+0xb94>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <LEDHandler+0xb98>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2002      	movs	r0, #2
 80020ac:	f000 fda8 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80020b0:	4b38      	ldr	r3, [pc, #224]	; (8002194 <LEDHandler+0xb90>)
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <LEDHandler+0xb94>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b38      	ldr	r3, [pc, #224]	; (800219c <LEDHandler+0xb98>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 fd9f 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <LEDHandler+0xb90>)
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	4b34      	ldr	r3, [pc, #208]	; (8002198 <LEDHandler+0xb94>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b34      	ldr	r3, [pc, #208]	; (800219c <LEDHandler+0xb98>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2004      	movs	r0, #4
 80020d0:	f000 fd96 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 80020d4:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <LEDHandler+0xb90>)
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <LEDHandler+0xb94>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <LEDHandler+0xb98>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2005      	movs	r0, #5
 80020e2:	f000 fd8d 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <LEDHandler+0xb90>)
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <LEDHandler+0xb94>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <LEDHandler+0xb98>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2006      	movs	r0, #6
 80020f4:	f000 fd84 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <LEDHandler+0xb90>)
 80020fa:	6819      	ldr	r1, [r3, #0]
 80020fc:	4b26      	ldr	r3, [pc, #152]	; (8002198 <LEDHandler+0xb94>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <LEDHandler+0xb98>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2007      	movs	r0, #7
 8002106:	f000 fd7b 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <LEDHandler+0xb90>)
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <LEDHandler+0xb94>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <LEDHandler+0xb98>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2008      	movs	r0, #8
 8002118:	f000 fd72 	bl	8002c00 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <LEDHandler+0xb90>)
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <LEDHandler+0xb94>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <LEDHandler+0xb98>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2009      	movs	r0, #9
 800212a:	f000 fd69 	bl	8002c00 <Set_LED>
		Set_LED(10, 0, 0, 0);
 800212e:	2300      	movs	r3, #0
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	200a      	movs	r0, #10
 8002136:	f000 fd63 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 800213a:	2300      	movs	r3, #0
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	200b      	movs	r0, #11
 8002142:	f000 fd5d 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8002146:	2300      	movs	r3, #0
 8002148:	2200      	movs	r2, #0
 800214a:	2100      	movs	r1, #0
 800214c:	200c      	movs	r0, #12
 800214e:	f000 fd57 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8002152:	2300      	movs	r3, #0
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	200d      	movs	r0, #13
 800215a:	f000 fd51 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 800215e:	2300      	movs	r3, #0
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	200e      	movs	r0, #14
 8002166:	f000 fd4b 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	200f      	movs	r0, #15
 8002172:	f000 fd45 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8002176:	2300      	movs	r3, #0
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2010      	movs	r0, #16
 800217e:	f000 fd3f 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002182:	2300      	movs	r3, #0
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2011      	movs	r0, #17
 800218a:	f000 fd39 	bl	8002c00 <Set_LED>
 800218e:	f000 bc7a 	b.w	8002a86 <LEDHandler+0x1482>
 8002192:	bf00      	nop
 8002194:	20000008 	.word	0x20000008
 8002198:	2000000c 	.word	0x2000000c
 800219c:	20000010 	.word	0x20000010

	} else if (Valor >= 60 && Valor < 66) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b3b      	cmp	r3, #59	; 0x3b
 80021a4:	f340 8092 	ble.w	80022cc <LEDHandler+0xcc8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b41      	cmp	r3, #65	; 0x41
 80021ac:	f300 808e 	bgt.w	80022cc <LEDHandler+0xcc8>
		Set_LED(0, Red, Green, Blue);
 80021b0:	4b93      	ldr	r3, [pc, #588]	; (8002400 <LEDHandler+0xdfc>)
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	4b93      	ldr	r3, [pc, #588]	; (8002404 <LEDHandler+0xe00>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b93      	ldr	r3, [pc, #588]	; (8002408 <LEDHandler+0xe04>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2000      	movs	r0, #0
 80021be:	f000 fd1f 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80021c2:	4b8f      	ldr	r3, [pc, #572]	; (8002400 <LEDHandler+0xdfc>)
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	4b8f      	ldr	r3, [pc, #572]	; (8002404 <LEDHandler+0xe00>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b8f      	ldr	r3, [pc, #572]	; (8002408 <LEDHandler+0xe04>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2001      	movs	r0, #1
 80021d0:	f000 fd16 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80021d4:	4b8a      	ldr	r3, [pc, #552]	; (8002400 <LEDHandler+0xdfc>)
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	4b8a      	ldr	r3, [pc, #552]	; (8002404 <LEDHandler+0xe00>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <LEDHandler+0xe04>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2002      	movs	r0, #2
 80021e2:	f000 fd0d 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80021e6:	4b86      	ldr	r3, [pc, #536]	; (8002400 <LEDHandler+0xdfc>)
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	4b86      	ldr	r3, [pc, #536]	; (8002404 <LEDHandler+0xe00>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b86      	ldr	r3, [pc, #536]	; (8002408 <LEDHandler+0xe04>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2003      	movs	r0, #3
 80021f4:	f000 fd04 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 80021f8:	4b81      	ldr	r3, [pc, #516]	; (8002400 <LEDHandler+0xdfc>)
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	4b81      	ldr	r3, [pc, #516]	; (8002404 <LEDHandler+0xe00>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b81      	ldr	r3, [pc, #516]	; (8002408 <LEDHandler+0xe04>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2004      	movs	r0, #4
 8002206:	f000 fcfb 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 800220a:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <LEDHandler+0xdfc>)
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	4b7d      	ldr	r3, [pc, #500]	; (8002404 <LEDHandler+0xe00>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b7d      	ldr	r3, [pc, #500]	; (8002408 <LEDHandler+0xe04>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2005      	movs	r0, #5
 8002218:	f000 fcf2 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 800221c:	4b78      	ldr	r3, [pc, #480]	; (8002400 <LEDHandler+0xdfc>)
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	4b78      	ldr	r3, [pc, #480]	; (8002404 <LEDHandler+0xe00>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b78      	ldr	r3, [pc, #480]	; (8002408 <LEDHandler+0xe04>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2006      	movs	r0, #6
 800222a:	f000 fce9 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800222e:	4b74      	ldr	r3, [pc, #464]	; (8002400 <LEDHandler+0xdfc>)
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	4b74      	ldr	r3, [pc, #464]	; (8002404 <LEDHandler+0xe00>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b74      	ldr	r3, [pc, #464]	; (8002408 <LEDHandler+0xe04>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2007      	movs	r0, #7
 800223c:	f000 fce0 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002240:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <LEDHandler+0xdfc>)
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <LEDHandler+0xe00>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <LEDHandler+0xe04>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2008      	movs	r0, #8
 800224e:	f000 fcd7 	bl	8002c00 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002252:	4b6b      	ldr	r3, [pc, #428]	; (8002400 <LEDHandler+0xdfc>)
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <LEDHandler+0xe00>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <LEDHandler+0xe04>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2009      	movs	r0, #9
 8002260:	f000 fcce 	bl	8002c00 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002264:	4b66      	ldr	r3, [pc, #408]	; (8002400 <LEDHandler+0xdfc>)
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	4b66      	ldr	r3, [pc, #408]	; (8002404 <LEDHandler+0xe00>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <LEDHandler+0xe04>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	200a      	movs	r0, #10
 8002272:	f000 fcc5 	bl	8002c00 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8002276:	2300      	movs	r3, #0
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	200b      	movs	r0, #11
 800227e:	f000 fcbf 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8002282:	2300      	movs	r3, #0
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	200c      	movs	r0, #12
 800228a:	f000 fcb9 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 800228e:	2300      	movs	r3, #0
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	200d      	movs	r0, #13
 8002296:	f000 fcb3 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 800229a:	2300      	movs	r3, #0
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	200e      	movs	r0, #14
 80022a2:	f000 fcad 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80022a6:	2300      	movs	r3, #0
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	200f      	movs	r0, #15
 80022ae:	f000 fca7 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80022b2:	2300      	movs	r3, #0
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2010      	movs	r0, #16
 80022ba:	f000 fca1 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80022be:	2300      	movs	r3, #0
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2011      	movs	r0, #17
 80022c6:	f000 fc9b 	bl	8002c00 <Set_LED>
 80022ca:	e3dc      	b.n	8002a86 <LEDHandler+0x1482>

	} else if (Valor >= 66 && Valor < 72) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b41      	cmp	r3, #65	; 0x41
 80022d0:	f340 809c 	ble.w	800240c <LEDHandler+0xe08>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b47      	cmp	r3, #71	; 0x47
 80022d8:	f300 8098 	bgt.w	800240c <LEDHandler+0xe08>
		Set_LED(0, Red, Green, Blue);
 80022dc:	4b48      	ldr	r3, [pc, #288]	; (8002400 <LEDHandler+0xdfc>)
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <LEDHandler+0xe00>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b48      	ldr	r3, [pc, #288]	; (8002408 <LEDHandler+0xe04>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2000      	movs	r0, #0
 80022ea:	f000 fc89 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80022ee:	4b44      	ldr	r3, [pc, #272]	; (8002400 <LEDHandler+0xdfc>)
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	4b44      	ldr	r3, [pc, #272]	; (8002404 <LEDHandler+0xe00>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b44      	ldr	r3, [pc, #272]	; (8002408 <LEDHandler+0xe04>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 fc80 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <LEDHandler+0xdfc>)
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <LEDHandler+0xe00>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <LEDHandler+0xe04>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2002      	movs	r0, #2
 800230e:	f000 fc77 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <LEDHandler+0xdfc>)
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <LEDHandler+0xe00>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <LEDHandler+0xe04>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2003      	movs	r0, #3
 8002320:	f000 fc6e 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <LEDHandler+0xdfc>)
 8002326:	6819      	ldr	r1, [r3, #0]
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <LEDHandler+0xe00>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <LEDHandler+0xe04>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2004      	movs	r0, #4
 8002332:	f000 fc65 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <LEDHandler+0xdfc>)
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	4b32      	ldr	r3, [pc, #200]	; (8002404 <LEDHandler+0xe00>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <LEDHandler+0xe04>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2005      	movs	r0, #5
 8002344:	f000 fc5c 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <LEDHandler+0xdfc>)
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <LEDHandler+0xe00>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <LEDHandler+0xe04>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2006      	movs	r0, #6
 8002356:	f000 fc53 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <LEDHandler+0xdfc>)
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <LEDHandler+0xe00>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <LEDHandler+0xe04>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2007      	movs	r0, #7
 8002368:	f000 fc4a 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <LEDHandler+0xdfc>)
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <LEDHandler+0xe00>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <LEDHandler+0xe04>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2008      	movs	r0, #8
 800237a:	f000 fc41 	bl	8002c00 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <LEDHandler+0xdfc>)
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <LEDHandler+0xe00>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <LEDHandler+0xe04>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2009      	movs	r0, #9
 800238c:	f000 fc38 	bl	8002c00 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <LEDHandler+0xdfc>)
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <LEDHandler+0xe00>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <LEDHandler+0xe04>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	200a      	movs	r0, #10
 800239e:	f000 fc2f 	bl	8002c00 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <LEDHandler+0xdfc>)
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <LEDHandler+0xe00>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <LEDHandler+0xe04>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	200b      	movs	r0, #11
 80023b0:	f000 fc26 	bl	8002c00 <Set_LED>
		Set_LED(12, 0, 0, 0);
 80023b4:	2300      	movs	r3, #0
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	200c      	movs	r0, #12
 80023bc:	f000 fc20 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 80023c0:	2300      	movs	r3, #0
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	200d      	movs	r0, #13
 80023c8:	f000 fc1a 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 80023cc:	2300      	movs	r3, #0
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	200e      	movs	r0, #14
 80023d4:	f000 fc14 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80023d8:	2300      	movs	r3, #0
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	200f      	movs	r0, #15
 80023e0:	f000 fc0e 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80023e4:	2300      	movs	r3, #0
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2010      	movs	r0, #16
 80023ec:	f000 fc08 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80023f0:	2300      	movs	r3, #0
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2011      	movs	r0, #17
 80023f8:	f000 fc02 	bl	8002c00 <Set_LED>
 80023fc:	e343      	b.n	8002a86 <LEDHandler+0x1482>
 80023fe:	bf00      	nop
 8002400:	20000008 	.word	0x20000008
 8002404:	2000000c 	.word	0x2000000c
 8002408:	20000010 	.word	0x20000010

	} else if (Valor >= 72 && Valor < 78) {
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b47      	cmp	r3, #71	; 0x47
 8002410:	f340 8098 	ble.w	8002544 <LEDHandler+0xf40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b4d      	cmp	r3, #77	; 0x4d
 8002418:	f300 8094 	bgt.w	8002544 <LEDHandler+0xf40>
		Set_LED(0, Red, Green, Blue);
 800241c:	4b99      	ldr	r3, [pc, #612]	; (8002684 <LEDHandler+0x1080>)
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	4b99      	ldr	r3, [pc, #612]	; (8002688 <LEDHandler+0x1084>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b99      	ldr	r3, [pc, #612]	; (800268c <LEDHandler+0x1088>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2000      	movs	r0, #0
 800242a:	f000 fbe9 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 800242e:	4b95      	ldr	r3, [pc, #596]	; (8002684 <LEDHandler+0x1080>)
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	4b95      	ldr	r3, [pc, #596]	; (8002688 <LEDHandler+0x1084>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b95      	ldr	r3, [pc, #596]	; (800268c <LEDHandler+0x1088>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2001      	movs	r0, #1
 800243c:	f000 fbe0 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002440:	4b90      	ldr	r3, [pc, #576]	; (8002684 <LEDHandler+0x1080>)
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	4b90      	ldr	r3, [pc, #576]	; (8002688 <LEDHandler+0x1084>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b90      	ldr	r3, [pc, #576]	; (800268c <LEDHandler+0x1088>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2002      	movs	r0, #2
 800244e:	f000 fbd7 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8002452:	4b8c      	ldr	r3, [pc, #560]	; (8002684 <LEDHandler+0x1080>)
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <LEDHandler+0x1084>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b8c      	ldr	r3, [pc, #560]	; (800268c <LEDHandler+0x1088>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2003      	movs	r0, #3
 8002460:	f000 fbce 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002464:	4b87      	ldr	r3, [pc, #540]	; (8002684 <LEDHandler+0x1080>)
 8002466:	6819      	ldr	r1, [r3, #0]
 8002468:	4b87      	ldr	r3, [pc, #540]	; (8002688 <LEDHandler+0x1084>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b87      	ldr	r3, [pc, #540]	; (800268c <LEDHandler+0x1088>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2004      	movs	r0, #4
 8002472:	f000 fbc5 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8002476:	4b83      	ldr	r3, [pc, #524]	; (8002684 <LEDHandler+0x1080>)
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	4b83      	ldr	r3, [pc, #524]	; (8002688 <LEDHandler+0x1084>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b83      	ldr	r3, [pc, #524]	; (800268c <LEDHandler+0x1088>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2005      	movs	r0, #5
 8002484:	f000 fbbc 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8002488:	4b7e      	ldr	r3, [pc, #504]	; (8002684 <LEDHandler+0x1080>)
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <LEDHandler+0x1084>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b7e      	ldr	r3, [pc, #504]	; (800268c <LEDHandler+0x1088>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2006      	movs	r0, #6
 8002496:	f000 fbb3 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800249a:	4b7a      	ldr	r3, [pc, #488]	; (8002684 <LEDHandler+0x1080>)
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <LEDHandler+0x1084>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b7a      	ldr	r3, [pc, #488]	; (800268c <LEDHandler+0x1088>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2007      	movs	r0, #7
 80024a8:	f000 fbaa 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <LEDHandler+0x1080>)
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	4b75      	ldr	r3, [pc, #468]	; (8002688 <LEDHandler+0x1084>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b75      	ldr	r3, [pc, #468]	; (800268c <LEDHandler+0x1088>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2008      	movs	r0, #8
 80024ba:	f000 fba1 	bl	8002c00 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 80024be:	4b71      	ldr	r3, [pc, #452]	; (8002684 <LEDHandler+0x1080>)
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	4b71      	ldr	r3, [pc, #452]	; (8002688 <LEDHandler+0x1084>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b71      	ldr	r3, [pc, #452]	; (800268c <LEDHandler+0x1088>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2009      	movs	r0, #9
 80024cc:	f000 fb98 	bl	8002c00 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 80024d0:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <LEDHandler+0x1080>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <LEDHandler+0x1084>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b6c      	ldr	r3, [pc, #432]	; (800268c <LEDHandler+0x1088>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	200a      	movs	r0, #10
 80024de:	f000 fb8f 	bl	8002c00 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80024e2:	4b68      	ldr	r3, [pc, #416]	; (8002684 <LEDHandler+0x1080>)
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	4b68      	ldr	r3, [pc, #416]	; (8002688 <LEDHandler+0x1084>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b68      	ldr	r3, [pc, #416]	; (800268c <LEDHandler+0x1088>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	200b      	movs	r0, #11
 80024f0:	f000 fb86 	bl	8002c00 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 80024f4:	4b63      	ldr	r3, [pc, #396]	; (8002684 <LEDHandler+0x1080>)
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	4b63      	ldr	r3, [pc, #396]	; (8002688 <LEDHandler+0x1084>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b63      	ldr	r3, [pc, #396]	; (800268c <LEDHandler+0x1088>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	200c      	movs	r0, #12
 8002502:	f000 fb7d 	bl	8002c00 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8002506:	2300      	movs	r3, #0
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	200d      	movs	r0, #13
 800250e:	f000 fb77 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8002512:	2300      	movs	r3, #0
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	200e      	movs	r0, #14
 800251a:	f000 fb71 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 800251e:	2300      	movs	r3, #0
 8002520:	2200      	movs	r2, #0
 8002522:	2100      	movs	r1, #0
 8002524:	200f      	movs	r0, #15
 8002526:	f000 fb6b 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 800252a:	2300      	movs	r3, #0
 800252c:	2200      	movs	r2, #0
 800252e:	2100      	movs	r1, #0
 8002530:	2010      	movs	r0, #16
 8002532:	f000 fb65 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002536:	2300      	movs	r3, #0
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	2011      	movs	r0, #17
 800253e:	f000 fb5f 	bl	8002c00 <Set_LED>
 8002542:	e2a0      	b.n	8002a86 <LEDHandler+0x1482>

	} else if (Valor >= 78 && Valor < 84) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b4d      	cmp	r3, #77	; 0x4d
 8002548:	f340 80a2 	ble.w	8002690 <LEDHandler+0x108c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b53      	cmp	r3, #83	; 0x53
 8002550:	f300 809e 	bgt.w	8002690 <LEDHandler+0x108c>
		Set_LED(0, Red, Green, Blue);
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <LEDHandler+0x1080>)
 8002556:	6819      	ldr	r1, [r3, #0]
 8002558:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <LEDHandler+0x1084>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <LEDHandler+0x1088>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2000      	movs	r0, #0
 8002562:	f000 fb4d 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <LEDHandler+0x1080>)
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <LEDHandler+0x1084>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <LEDHandler+0x1088>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2001      	movs	r0, #1
 8002574:	f000 fb44 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <LEDHandler+0x1080>)
 800257a:	6819      	ldr	r1, [r3, #0]
 800257c:	4b42      	ldr	r3, [pc, #264]	; (8002688 <LEDHandler+0x1084>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b42      	ldr	r3, [pc, #264]	; (800268c <LEDHandler+0x1088>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2002      	movs	r0, #2
 8002586:	f000 fb3b 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <LEDHandler+0x1080>)
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	4b3e      	ldr	r3, [pc, #248]	; (8002688 <LEDHandler+0x1084>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <LEDHandler+0x1088>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2003      	movs	r0, #3
 8002598:	f000 fb32 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <LEDHandler+0x1080>)
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	4b39      	ldr	r3, [pc, #228]	; (8002688 <LEDHandler+0x1084>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <LEDHandler+0x1088>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2004      	movs	r0, #4
 80025aa:	f000 fb29 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <LEDHandler+0x1080>)
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	4b35      	ldr	r3, [pc, #212]	; (8002688 <LEDHandler+0x1084>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <LEDHandler+0x1088>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2005      	movs	r0, #5
 80025bc:	f000 fb20 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 80025c0:	4b30      	ldr	r3, [pc, #192]	; (8002684 <LEDHandler+0x1080>)
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <LEDHandler+0x1084>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b30      	ldr	r3, [pc, #192]	; (800268c <LEDHandler+0x1088>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2006      	movs	r0, #6
 80025ce:	f000 fb17 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <LEDHandler+0x1080>)
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <LEDHandler+0x1084>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <LEDHandler+0x1088>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2007      	movs	r0, #7
 80025e0:	f000 fb0e 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <LEDHandler+0x1080>)
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <LEDHandler+0x1084>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <LEDHandler+0x1088>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2008      	movs	r0, #8
 80025f2:	f000 fb05 	bl	8002c00 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <LEDHandler+0x1080>)
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <LEDHandler+0x1084>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <LEDHandler+0x1088>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2009      	movs	r0, #9
 8002604:	f000 fafc 	bl	8002c00 <Set_LED>
		Set_LED(10,Red, Green, Blue);
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <LEDHandler+0x1080>)
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <LEDHandler+0x1084>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <LEDHandler+0x1088>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	200a      	movs	r0, #10
 8002616:	f000 faf3 	bl	8002c00 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <LEDHandler+0x1080>)
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <LEDHandler+0x1084>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <LEDHandler+0x1088>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	200b      	movs	r0, #11
 8002628:	f000 faea 	bl	8002c00 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <LEDHandler+0x1080>)
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <LEDHandler+0x1084>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b15      	ldr	r3, [pc, #84]	; (800268c <LEDHandler+0x1088>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	200c      	movs	r0, #12
 800263a:	f000 fae1 	bl	8002c00 <Set_LED>
		Set_LED(13, Red, Green, Blue);
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <LEDHandler+0x1080>)
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <LEDHandler+0x1084>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <LEDHandler+0x1088>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	200d      	movs	r0, #13
 800264c:	f000 fad8 	bl	8002c00 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8002650:	2300      	movs	r3, #0
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	200e      	movs	r0, #14
 8002658:	f000 fad2 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 800265c:	2300      	movs	r3, #0
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	200f      	movs	r0, #15
 8002664:	f000 facc 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8002668:	2300      	movs	r3, #0
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2010      	movs	r0, #16
 8002670:	f000 fac6 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002674:	2300      	movs	r3, #0
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	2011      	movs	r0, #17
 800267c:	f000 fac0 	bl	8002c00 <Set_LED>
 8002680:	e201      	b.n	8002a86 <LEDHandler+0x1482>
 8002682:	bf00      	nop
 8002684:	20000008 	.word	0x20000008
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000010 	.word	0x20000010

	} else if (Valor >= 84 && Valor < 90) {
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b53      	cmp	r3, #83	; 0x53
 8002694:	f340 80a4 	ble.w	80027e0 <LEDHandler+0x11dc>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b59      	cmp	r3, #89	; 0x59
 800269c:	f300 80a0 	bgt.w	80027e0 <LEDHandler+0x11dc>
		Set_LED(0, Red, Green, Blue);
 80026a0:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <LEDHandler+0x11d0>)
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <LEDHandler+0x11d4>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <LEDHandler+0x11d8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2000      	movs	r0, #0
 80026ae:	f000 faa7 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80026b2:	4b48      	ldr	r3, [pc, #288]	; (80027d4 <LEDHandler+0x11d0>)
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <LEDHandler+0x11d4>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <LEDHandler+0x11d8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2001      	movs	r0, #1
 80026c0:	f000 fa9e 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <LEDHandler+0x11d0>)
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <LEDHandler+0x11d4>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <LEDHandler+0x11d8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2002      	movs	r0, #2
 80026d2:	f000 fa95 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <LEDHandler+0x11d0>)
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <LEDHandler+0x11d4>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <LEDHandler+0x11d8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2003      	movs	r0, #3
 80026e4:	f000 fa8c 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <LEDHandler+0x11d0>)
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <LEDHandler+0x11d4>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <LEDHandler+0x11d8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2004      	movs	r0, #4
 80026f6:	f000 fa83 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 80026fa:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <LEDHandler+0x11d0>)
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <LEDHandler+0x11d4>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <LEDHandler+0x11d8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2005      	movs	r0, #5
 8002708:	f000 fa7a 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 800270c:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <LEDHandler+0x11d0>)
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <LEDHandler+0x11d4>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b31      	ldr	r3, [pc, #196]	; (80027dc <LEDHandler+0x11d8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2006      	movs	r0, #6
 800271a:	f000 fa71 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <LEDHandler+0x11d0>)
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <LEDHandler+0x11d4>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <LEDHandler+0x11d8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2007      	movs	r0, #7
 800272c:	f000 fa68 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002730:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <LEDHandler+0x11d0>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <LEDHandler+0x11d4>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <LEDHandler+0x11d8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2008      	movs	r0, #8
 800273e:	f000 fa5f 	bl	8002c00 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <LEDHandler+0x11d0>)
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <LEDHandler+0x11d4>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <LEDHandler+0x11d8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2009      	movs	r0, #9
 8002750:	f000 fa56 	bl	8002c00 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002754:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <LEDHandler+0x11d0>)
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <LEDHandler+0x11d4>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <LEDHandler+0x11d8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	200a      	movs	r0, #10
 8002762:	f000 fa4d 	bl	8002c00 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <LEDHandler+0x11d0>)
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <LEDHandler+0x11d4>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <LEDHandler+0x11d8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	200b      	movs	r0, #11
 8002774:	f000 fa44 	bl	8002c00 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <LEDHandler+0x11d0>)
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <LEDHandler+0x11d4>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <LEDHandler+0x11d8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	200c      	movs	r0, #12
 8002786:	f000 fa3b 	bl	8002c00 <Set_LED>
		Set_LED(13, Red, Green, Blue);
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <LEDHandler+0x11d0>)
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <LEDHandler+0x11d4>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <LEDHandler+0x11d8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	200d      	movs	r0, #13
 8002798:	f000 fa32 	bl	8002c00 <Set_LED>
		Set_LED(14, Red, Green, Blue);
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <LEDHandler+0x11d0>)
 800279e:	6819      	ldr	r1, [r3, #0]
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <LEDHandler+0x11d4>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <LEDHandler+0x11d8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	200e      	movs	r0, #14
 80027aa:	f000 fa29 	bl	8002c00 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80027ae:	2300      	movs	r3, #0
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	200f      	movs	r0, #15
 80027b6:	f000 fa23 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80027ba:	2300      	movs	r3, #0
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	2010      	movs	r0, #16
 80027c2:	f000 fa1d 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80027c6:	2300      	movs	r3, #0
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	2011      	movs	r0, #17
 80027ce:	f000 fa17 	bl	8002c00 <Set_LED>
 80027d2:	e158      	b.n	8002a86 <LEDHandler+0x1482>
 80027d4:	20000008 	.word	0x20000008
 80027d8:	2000000c 	.word	0x2000000c
 80027dc:	20000010 	.word	0x20000010

	} else if (Valor >= 90 && Valor < 96) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b59      	cmp	r3, #89	; 0x59
 80027e4:	f340 80a8 	ble.w	8002938 <LEDHandler+0x1334>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b5f      	cmp	r3, #95	; 0x5f
 80027ec:	f300 80a4 	bgt.w	8002938 <LEDHandler+0x1334>
		Set_LED(0, Red, Green, Blue);
 80027f0:	4b4e      	ldr	r3, [pc, #312]	; (800292c <LEDHandler+0x1328>)
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <LEDHandler+0x132c>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <LEDHandler+0x1330>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2000      	movs	r0, #0
 80027fe:	f000 f9ff 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8002802:	4b4a      	ldr	r3, [pc, #296]	; (800292c <LEDHandler+0x1328>)
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <LEDHandler+0x132c>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <LEDHandler+0x1330>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2001      	movs	r0, #1
 8002810:	f000 f9f6 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002814:	4b45      	ldr	r3, [pc, #276]	; (800292c <LEDHandler+0x1328>)
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	4b45      	ldr	r3, [pc, #276]	; (8002930 <LEDHandler+0x132c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b45      	ldr	r3, [pc, #276]	; (8002934 <LEDHandler+0x1330>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2002      	movs	r0, #2
 8002822:	f000 f9ed 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <LEDHandler+0x1328>)
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <LEDHandler+0x132c>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <LEDHandler+0x1330>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2003      	movs	r0, #3
 8002834:	f000 f9e4 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002838:	4b3c      	ldr	r3, [pc, #240]	; (800292c <LEDHandler+0x1328>)
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	4b3c      	ldr	r3, [pc, #240]	; (8002930 <LEDHandler+0x132c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b3c      	ldr	r3, [pc, #240]	; (8002934 <LEDHandler+0x1330>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2004      	movs	r0, #4
 8002846:	f000 f9db 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <LEDHandler+0x1328>)
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	4b38      	ldr	r3, [pc, #224]	; (8002930 <LEDHandler+0x132c>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <LEDHandler+0x1330>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2005      	movs	r0, #5
 8002858:	f000 f9d2 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 800285c:	4b33      	ldr	r3, [pc, #204]	; (800292c <LEDHandler+0x1328>)
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	4b33      	ldr	r3, [pc, #204]	; (8002930 <LEDHandler+0x132c>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b33      	ldr	r3, [pc, #204]	; (8002934 <LEDHandler+0x1330>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2006      	movs	r0, #6
 800286a:	f000 f9c9 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <LEDHandler+0x1328>)
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <LEDHandler+0x132c>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <LEDHandler+0x1330>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2007      	movs	r0, #7
 800287c:	f000 f9c0 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <LEDHandler+0x1328>)
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <LEDHandler+0x132c>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <LEDHandler+0x1330>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2008      	movs	r0, #8
 800288e:	f000 f9b7 	bl	8002c00 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <LEDHandler+0x1328>)
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <LEDHandler+0x132c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <LEDHandler+0x1330>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2009      	movs	r0, #9
 80028a0:	f000 f9ae 	bl	8002c00 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <LEDHandler+0x1328>)
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <LEDHandler+0x132c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b21      	ldr	r3, [pc, #132]	; (8002934 <LEDHandler+0x1330>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	200a      	movs	r0, #10
 80028b2:	f000 f9a5 	bl	8002c00 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <LEDHandler+0x1328>)
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <LEDHandler+0x132c>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <LEDHandler+0x1330>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	200b      	movs	r0, #11
 80028c4:	f000 f99c 	bl	8002c00 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <LEDHandler+0x1328>)
 80028ca:	6819      	ldr	r1, [r3, #0]
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <LEDHandler+0x132c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <LEDHandler+0x1330>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	200c      	movs	r0, #12
 80028d6:	f000 f993 	bl	8002c00 <Set_LED>
		Set_LED(13, Red, Green, Blue);
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <LEDHandler+0x1328>)
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <LEDHandler+0x132c>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <LEDHandler+0x1330>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	200d      	movs	r0, #13
 80028e8:	f000 f98a 	bl	8002c00 <Set_LED>
		Set_LED(14, Red, Green, Blue);
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <LEDHandler+0x1328>)
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <LEDHandler+0x132c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <LEDHandler+0x1330>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	200e      	movs	r0, #14
 80028fa:	f000 f981 	bl	8002c00 <Set_LED>
		Set_LED(15, Red, Green, Blue);
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <LEDHandler+0x1328>)
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <LEDHandler+0x132c>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <LEDHandler+0x1330>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	200f      	movs	r0, #15
 800290c:	f000 f978 	bl	8002c00 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8002910:	2300      	movs	r3, #0
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	2010      	movs	r0, #16
 8002918:	f000 f972 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 800291c:	2300      	movs	r3, #0
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	2011      	movs	r0, #17
 8002924:	f000 f96c 	bl	8002c00 <Set_LED>
 8002928:	e0ad      	b.n	8002a86 <LEDHandler+0x1482>
 800292a:	bf00      	nop
 800292c:	20000008 	.word	0x20000008
 8002930:	2000000c 	.word	0x2000000c
 8002934:	20000010 	.word	0x20000010

	} else if (Valor >= 96 && Valor < 101) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b5f      	cmp	r3, #95	; 0x5f
 800293c:	f340 80a3 	ble.w	8002a86 <LEDHandler+0x1482>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	f300 809f 	bgt.w	8002a86 <LEDHandler+0x1482>
		Set_LED(0, Red, Green, Blue);
 8002948:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <LEDHandler+0x14a0>)
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <LEDHandler+0x14a4>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b56      	ldr	r3, [pc, #344]	; (8002aac <LEDHandler+0x14a8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2000      	movs	r0, #0
 8002956:	f000 f953 	bl	8002c00 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 800295a:	4b52      	ldr	r3, [pc, #328]	; (8002aa4 <LEDHandler+0x14a0>)
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <LEDHandler+0x14a4>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b52      	ldr	r3, [pc, #328]	; (8002aac <LEDHandler+0x14a8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2001      	movs	r0, #1
 8002968:	f000 f94a 	bl	8002c00 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 800296c:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <LEDHandler+0x14a0>)
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <LEDHandler+0x14a4>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <LEDHandler+0x14a8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2002      	movs	r0, #2
 800297a:	f000 f941 	bl	8002c00 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <LEDHandler+0x14a0>)
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <LEDHandler+0x14a4>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b49      	ldr	r3, [pc, #292]	; (8002aac <LEDHandler+0x14a8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2003      	movs	r0, #3
 800298c:	f000 f938 	bl	8002c00 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002990:	4b44      	ldr	r3, [pc, #272]	; (8002aa4 <LEDHandler+0x14a0>)
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <LEDHandler+0x14a4>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b44      	ldr	r3, [pc, #272]	; (8002aac <LEDHandler+0x14a8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2004      	movs	r0, #4
 800299e:	f000 f92f 	bl	8002c00 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 80029a2:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <LEDHandler+0x14a0>)
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <LEDHandler+0x14a4>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b40      	ldr	r3, [pc, #256]	; (8002aac <LEDHandler+0x14a8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2005      	movs	r0, #5
 80029b0:	f000 f926 	bl	8002c00 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 80029b4:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <LEDHandler+0x14a0>)
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <LEDHandler+0x14a4>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <LEDHandler+0x14a8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2006      	movs	r0, #6
 80029c2:	f000 f91d 	bl	8002c00 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <LEDHandler+0x14a0>)
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <LEDHandler+0x14a4>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b37      	ldr	r3, [pc, #220]	; (8002aac <LEDHandler+0x14a8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2007      	movs	r0, #7
 80029d4:	f000 f914 	bl	8002c00 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 80029d8:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <LEDHandler+0x14a0>)
 80029da:	6819      	ldr	r1, [r3, #0]
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <LEDHandler+0x14a4>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b32      	ldr	r3, [pc, #200]	; (8002aac <LEDHandler+0x14a8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2008      	movs	r0, #8
 80029e6:	f000 f90b 	bl	8002c00 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <LEDHandler+0x14a0>)
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <LEDHandler+0x14a4>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <LEDHandler+0x14a8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2009      	movs	r0, #9
 80029f8:	f000 f902 	bl	8002c00 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <LEDHandler+0x14a0>)
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <LEDHandler+0x14a4>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <LEDHandler+0x14a8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	200a      	movs	r0, #10
 8002a0a:	f000 f8f9 	bl	8002c00 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 8002a0e:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <LEDHandler+0x14a0>)
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <LEDHandler+0x14a4>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b25      	ldr	r3, [pc, #148]	; (8002aac <LEDHandler+0x14a8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	200b      	movs	r0, #11
 8002a1c:	f000 f8f0 	bl	8002c00 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 8002a20:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <LEDHandler+0x14a0>)
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <LEDHandler+0x14a4>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b20      	ldr	r3, [pc, #128]	; (8002aac <LEDHandler+0x14a8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	200c      	movs	r0, #12
 8002a2e:	f000 f8e7 	bl	8002c00 <Set_LED>
		Set_LED(13, Red, Green, Blue);
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <LEDHandler+0x14a0>)
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <LEDHandler+0x14a4>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <LEDHandler+0x14a8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	200d      	movs	r0, #13
 8002a40:	f000 f8de 	bl	8002c00 <Set_LED>
		Set_LED(14, Red, Green, Blue);
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <LEDHandler+0x14a0>)
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <LEDHandler+0x14a4>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <LEDHandler+0x14a8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	200e      	movs	r0, #14
 8002a52:	f000 f8d5 	bl	8002c00 <Set_LED>
		Set_LED(15, Red, Green, Blue);
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <LEDHandler+0x14a0>)
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <LEDHandler+0x14a4>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <LEDHandler+0x14a8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	200f      	movs	r0, #15
 8002a64:	f000 f8cc 	bl	8002c00 <Set_LED>
		Set_LED(16, Red, Green, Blue);
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <LEDHandler+0x14a0>)
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <LEDHandler+0x14a4>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <LEDHandler+0x14a8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2010      	movs	r0, #16
 8002a76:	f000 f8c3 	bl	8002c00 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2011      	movs	r0, #17
 8002a82:	f000 f8bd 	bl	8002c00 <Set_LED>
	}


	Set_Brightness(brilho);
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <LEDHandler+0x14ac>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fb20 	bl	80030d0 <Set_Brightness>
	WS2512_Send();
 8002a90:	f000 fb9c 	bl	80031cc <WS2512_Send>
	HAL_Delay(50);
 8002a94:	2032      	movs	r0, #50	; 0x32
 8002a96:	f000 fe17 	bl	80036c8 <HAL_Delay>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	20000010 	.word	0x20000010
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <Analog_Buffer>:

//TODO Documentar método
void Analog_Buffer(){
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0

	/* Processa as novas amostras */
	int32_t accumulator[BSP_ADC_CHANNEL_SIZE] = { 0 };
 8002aba:	463b      	mov	r3, r7
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
	static int16_t filter_sample_index = 0;

	//guarda a amostra atual
	Buffer_ADC_Filter[0][filter_sample_index] = readValue[0];
 8002ac4:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <Analog_Buffer+0x108>)
 8002ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <Analog_Buffer+0x10c>)
 8002ace:	8819      	ldrh	r1, [r3, #0]
 8002ad0:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <Analog_Buffer+0x110>)
 8002ad2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	Buffer_ADC_Filter[1][filter_sample_index] = readValue[1];
 8002ad6:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <Analog_Buffer+0x108>)
 8002ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002adc:	4618      	mov	r0, r3
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <Analog_Buffer+0x10c>)
 8002ae0:	8859      	ldrh	r1, [r3, #2]
 8002ae2:	4a38      	ldr	r2, [pc, #224]	; (8002bc4 <Analog_Buffer+0x110>)
 8002ae4:	1d83      	adds	r3, r0, #6
 8002ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	Buffer_ADC_Filter[2][filter_sample_index] = readValue[2];
 8002aea:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <Analog_Buffer+0x108>)
 8002aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af0:	4618      	mov	r0, r3
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <Analog_Buffer+0x10c>)
 8002af4:	8899      	ldrh	r1, [r3, #4]
 8002af6:	4a33      	ldr	r2, [pc, #204]	; (8002bc4 <Analog_Buffer+0x110>)
 8002af8:	f100 030c 	add.w	r3, r0, #12
 8002afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Processa o novo valor filtrado considerando as ultimas x amostras
	for (int sample_idx = 0; sample_idx < BSP_ADC_FILTER_SAMPLES_SIZE;++sample_idx)
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e01c      	b.n	8002b40 <Analog_Buffer+0x8c>
	{
		accumulator[0] += Buffer_ADC_Filter[0][sample_idx];
 8002b06:	4a2f      	ldr	r2, [pc, #188]	; (8002bc4 <Analog_Buffer+0x110>)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	603b      	str	r3, [r7, #0]
		accumulator[1] += Buffer_ADC_Filter[1][sample_idx];
 8002b16:	4a2b      	ldr	r2, [pc, #172]	; (8002bc4 <Analog_Buffer+0x110>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3306      	adds	r3, #6
 8002b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	607b      	str	r3, [r7, #4]
		accumulator[2] += Buffer_ADC_Filter[2][sample_idx];
 8002b28:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <Analog_Buffer+0x110>)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4413      	add	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]
	for (int sample_idx = 0; sample_idx < BSP_ADC_FILTER_SAMPLES_SIZE;++sample_idx)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	dddf      	ble.n	8002b06 <Analog_Buffer+0x52>
	}

	//wrap around no buffer
	filter_sample_index++;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <Analog_Buffer+0x108>)
 8002b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <Analog_Buffer+0x108>)
 8002b56:	801a      	strh	r2, [r3, #0]
	if (filter_sample_index >= BSP_ADC_FILTER_SAMPLES_SIZE)
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <Analog_Buffer+0x108>)
 8002b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	dd02      	ble.n	8002b68 <Analog_Buffer+0xb4>
	{
		filter_sample_index = 0;
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <Analog_Buffer+0x108>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	801a      	strh	r2, [r3, #0]
	}


	//calcula a média dos valores
	SpeedMode = accumulator[0];
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <Analog_Buffer+0x114>)
 8002b6c:	6013      	str	r3, [r2, #0]
	SpeedMode = (SpeedMode / BSP_ADC_FILTER_SAMPLES_SIZE);
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <Analog_Buffer+0x114>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <Analog_Buffer+0x118>)
 8002b74:	fb82 1203 	smull	r1, r2, r2, r3
 8002b78:	17db      	asrs	r3, r3, #31
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <Analog_Buffer+0x114>)
 8002b7e:	6013      	str	r3, [r2, #0]

	Sensor_in = accumulator[1];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <Analog_Buffer+0x11c>)
 8002b84:	6013      	str	r3, [r2, #0]
	Sensor_in = (Sensor_in / BSP_ADC_FILTER_SAMPLES_SIZE);
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <Analog_Buffer+0x11c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <Analog_Buffer+0x118>)
 8002b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b90:	17db      	asrs	r3, r3, #31
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <Analog_Buffer+0x11c>)
 8002b96:	6013      	str	r3, [r2, #0]

	Sensor_Out= accumulator[2];
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <Analog_Buffer+0x120>)
 8002b9c:	6013      	str	r3, [r2, #0]
	Sensor_Out = (Sensor_Out / BSP_ADC_FILTER_SAMPLES_SIZE);
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <Analog_Buffer+0x120>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <Analog_Buffer+0x118>)
 8002ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ba8:	17db      	asrs	r3, r3, #31
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <Analog_Buffer+0x120>)
 8002bae:	6013      	str	r3, [r2, #0]

}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000828 	.word	0x20000828
 8002bc0:	200003ec 	.word	0x200003ec
 8002bc4:	200002f4 	.word	0x200002f4
 8002bc8:	200003f4 	.word	0x200003f4
 8002bcc:	2aaaaaab 	.word	0x2aaaaaab
 8002bd0:	200003f8 	.word	0x200003f8
 8002bd4:	200003fc 	.word	0x200003fc

08002bd8 <HAL_TIM_PWM_PulseFinishedCallback>:

//TODO Documentar método
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002be0:	2100      	movs	r1, #0
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002be4:	f002 ff32 	bl	8005a4c <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200001d8 	.word	0x200001d8
 8002bfc:	20000400 	.word	0x20000400

08002c00 <Set_LED>:

//TODO Documentar método
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	b2d9      	uxtb	r1, r3
 8002c12:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <Set_LED+0x54>)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	b2d9      	uxtb	r1, r3
 8002c1e:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <Set_LED+0x54>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	460a      	mov	r2, r1
 8002c28:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	b2d9      	uxtb	r1, r3
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <Set_LED+0x54>)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	460a      	mov	r2, r1
 8002c38:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	b2d9      	uxtb	r1, r3
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <Set_LED+0x54>)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	460a      	mov	r2, r1
 8002c48:	70da      	strb	r2, [r3, #3]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	2000034c 	.word	0x2000034c

08002c58 <DigitExtract>:


//TODO Documentar método
void DigitExtract(int num) {
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

//	int unid, dez, cent;
	unid = num % 10;
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <DigitExtract+0x6c>)
 8002c64:	fb83 2301 	smull	r2, r3, r3, r1
 8002c68:	109a      	asrs	r2, r3, #2
 8002c6a:	17cb      	asrs	r3, r1, #31
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	1aca      	subs	r2, r1, r3
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <DigitExtract+0x70>)
 8002c7a:	601a      	str	r2, [r3, #0]
	num = num / 10;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <DigitExtract+0x6c>)
 8002c80:	fb82 1203 	smull	r1, r2, r2, r3
 8002c84:	1092      	asrs	r2, r2, #2
 8002c86:	17db      	asrs	r3, r3, #31
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	607b      	str	r3, [r7, #4]
	dez = num % 10;
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <DigitExtract+0x6c>)
 8002c90:	fb83 2301 	smull	r2, r3, r3, r1
 8002c94:	109a      	asrs	r2, r3, #2
 8002c96:	17cb      	asrs	r3, r1, #31
 8002c98:	1ad2      	subs	r2, r2, r3
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	1aca      	subs	r2, r1, r3
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <DigitExtract+0x74>)
 8002ca6:	601a      	str	r2, [r3, #0]
	cent = num / 10;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <DigitExtract+0x6c>)
 8002cac:	fb82 1203 	smull	r1, r2, r2, r3
 8002cb0:	1092      	asrs	r2, r2, #2
 8002cb2:	17db      	asrs	r3, r3, #31
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <DigitExtract+0x78>)
 8002cb8:	6013      	str	r3, [r2, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	66666667 	.word	0x66666667
 8002cc8:	20000330 	.word	0x20000330
 8002ccc:	20000334 	.word	0x20000334
 8002cd0:	20000338 	.word	0x20000338

08002cd4 <HAL_TIM_PeriodElapsedCallback>:

//TODO Documentar método
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

	//************************************ TIMER 4 ************************************

	if (htim->Instance == TIM4) //frequencia do timer4 é de 5 kHz, sample time = 200us
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4aaa      	ldr	r2, [pc, #680]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11a      	bne.n	8002d1c <HAL_TIM_PeriodElapsedCallback+0x48>
	{


		//atualização do valor do sinal analógico a cada 500 ms

		if (idx < 200) {
 8002ce6:	4baa      	ldr	r3, [pc, #680]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2bc7      	cmp	r3, #199	; 0xc7
 8002cec:	dc05      	bgt.n	8002cfa <HAL_TIM_PeriodElapsedCallback+0x26>

			idx++;
 8002cee:	4ba8      	ldr	r3, [pc, #672]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4aa6      	ldr	r2, [pc, #664]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e002      	b.n	8002d00 <HAL_TIM_PeriodElapsedCallback+0x2c>
		} else {


			idx = 1;
 8002cfa:	4ba5      	ldr	r3, [pc, #660]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]



		//atualização do contador timer4

		if (downcounter_timer4 > 0) {
 8002d00:	4ba4      	ldr	r3, [pc, #656]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	dd04      	ble.n	8002d12 <HAL_TIM_PeriodElapsedCallback+0x3e>
			downcounter_timer4--;
 8002d08:	4ba2      	ldr	r3, [pc, #648]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	4aa1      	ldr	r2, [pc, #644]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002d10:	6013      	str	r3, [r2, #0]
		}

		counter_timer4++;
 8002d12:	4ba1      	ldr	r3, [pc, #644]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	4a9f      	ldr	r2, [pc, #636]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002d1a:	6013      	str	r3, [r2, #0]
	}


	//************************************ TIMER 3 ************************************

	if (htim->Instance == TIM3) { //frequencia do timer3 é de 50 kHz, time=20us
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a9e      	ldr	r2, [pc, #632]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f040 81bf 	bne.w	80030a6 <HAL_TIM_PeriodElapsedCallback+0x3d2>

		if (downcounter > 0) {
 8002d28:	4b9d      	ldr	r3, [pc, #628]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dd05      	ble.n	8002d3c <HAL_TIM_PeriodElapsedCallback+0x68>
			downcounter--;
 8002d30:	4b9b      	ldr	r3, [pc, #620]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	4a9a      	ldr	r2, [pc, #616]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002d38:	6013      	str	r3, [r2, #0]
			fsm++;

		}
	}

}
 8002d3a:	e1b4      	b.n	80030a6 <HAL_TIM_PeriodElapsedCallback+0x3d2>
			switch (fsm) {			//fsm é o index da mensagem entregue ao CI HC595 para multiplexação
 8002d3c:	4b99      	ldr	r3, [pc, #612]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f240 2255 	movw	r2, #597	; 0x255
 8002d44:	4293      	cmp	r3, r2
 8002d46:	f000 8193 	beq.w	8003070 <HAL_TIM_PeriodElapsedCallback+0x39c>
 8002d4a:	f240 2255 	movw	r2, #597	; 0x255
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f300 819e 	bgt.w	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002d54:	f240 2253 	movw	r2, #595	; 0x253
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	f000 817d 	beq.w	8003058 <HAL_TIM_PeriodElapsedCallback+0x384>
 8002d5e:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8002d62:	f280 8195 	bge.w	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002d66:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 8002d6a:	f300 8191 	bgt.w	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002d6e:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8002d72:	da11      	bge.n	8002d98 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8002d74:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002d78:	f000 8122 	beq.w	8002fc0 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8002d7c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002d80:	f300 8186 	bgt.w	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002d84:	2be7      	cmp	r3, #231	; 0xe7
 8002d86:	f300 8183 	bgt.w	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002d8a:	2bd7      	cmp	r3, #215	; 0xd7
 8002d8c:	da2a      	bge.n	8002de4 <HAL_TIM_PeriodElapsedCallback+0x110>
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	dc6d      	bgt.n	8002e6e <HAL_TIM_PeriodElapsedCallback+0x19a>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da4a      	bge.n	8002e2c <HAL_TIM_PeriodElapsedCallback+0x158>
 8002d96:	e17b      	b.n	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002d98:	f5a3 73d7 	sub.w	r3, r3, #430	; 0x1ae
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002da6:	401a      	ands	r2, r3
 8002da8:	2a00      	cmp	r2, #0
 8002daa:	bf14      	ite	ne
 8002dac:	2201      	movne	r2, #1
 8002dae:	2200      	moveq	r2, #0
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	2a00      	cmp	r2, #0
 8002db4:	f040 8131 	bne.w	800301a <HAL_TIM_PeriodElapsedCallback+0x346>
 8002db8:	f245 5255 	movw	r2, #21845	; 0x5555
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	2a00      	cmp	r2, #0
 8002dc0:	bf14      	ite	ne
 8002dc2:	2201      	movne	r2, #1
 8002dc4:	2200      	moveq	r2, #0
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	f040 8105 	bne.w	8002fd8 <HAL_TIM_PeriodElapsedCallback+0x304>
 8002dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 8127 	bne.w	8003030 <HAL_TIM_PeriodElapsedCallback+0x35c>
 8002de2:	e155      	b.n	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002de4:	3bd7      	subs	r3, #215	; 0xd7
 8002de6:	2201      	movs	r2, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002df0:	401a      	ands	r2, r3
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	bf14      	ite	ne
 8002df6:	2201      	movne	r2, #1
 8002df8:	2200      	moveq	r2, #0
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	f040 80a6 	bne.w	8002f4e <HAL_TIM_PeriodElapsedCallback+0x27a>
 8002e02:	f245 5255 	movw	r2, #21845	; 0x5555
 8002e06:	401a      	ands	r2, r3
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	bf14      	ite	ne
 8002e0c:	2201      	movne	r2, #1
 8002e0e:	2200      	moveq	r2, #0
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	2a00      	cmp	r2, #0
 8002e14:	d17a      	bne.n	8002f0c <HAL_TIM_PeriodElapsedCallback+0x238>
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 809d 	bne.w	8002f64 <HAL_TIM_PeriodElapsedCallback+0x290>
 8002e2a:	e131      	b.n	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4093      	lsls	r3, r2
 8002e32:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002e36:	401a      	ands	r2, r3
 8002e38:	2a00      	cmp	r2, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2201      	movne	r2, #1
 8002e3e:	2200      	moveq	r2, #0
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	d137      	bne.n	8002eb6 <HAL_TIM_PeriodElapsedCallback+0x1e2>
 8002e46:	f245 5255 	movw	r2, #21845	; 0x5555
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	2a00      	cmp	r2, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2201      	movne	r2, #1
 8002e52:	2200      	moveq	r2, #0
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	2a00      	cmp	r2, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8002e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d12f      	bne.n	8002ecc <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8002e6c:	e110      	b.n	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 8002e6e:	2ba5      	cmp	r3, #165	; 0xa5
 8002e70:	d040      	beq.n	8002ef4 <HAL_TIM_PeriodElapsedCallback+0x220>
 8002e72:	e10d      	b.n	8003090 <HAL_TIM_PeriodElapsedCallback+0x3bc>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002e74:	2200      	movs	r2, #0
 8002e76:	2140      	movs	r1, #64	; 0x40
 8002e78:	484b      	ldr	r0, [pc, #300]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e7a:	f001 fd99 	bl	80049b0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e82:	4849      	ldr	r0, [pc, #292]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e84:	f001 fdac 	bl	80049e0 <HAL_GPIO_TogglePin>
				if (digits[cent][myIndex] == 1) {
 8002e88:	4b48      	ldr	r3, [pc, #288]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4948      	ldr	r1, [pc, #288]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002e92:	00d2      	lsls	r2, r2, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x1d6>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	4841      	ldr	r0, [pc, #260]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002ea4:	f001 fd84 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 8002ea8:	e0f8      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	483e      	ldr	r0, [pc, #248]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002eb0:	f001 fd7e 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 8002eb4:	e0f2      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				myIndex--;
 8002eb6:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	4a3c      	ldr	r2, [pc, #240]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002ebe:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ec4:	4838      	ldr	r0, [pc, #224]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002ec6:	f001 fd8b 	bl	80049e0 <HAL_GPIO_TogglePin>
				break;
 8002eca:	e0e7      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ed0:	4835      	ldr	r0, [pc, #212]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002ed2:	f001 fd85 	bl	80049e0 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2140      	movs	r1, #64	; 0x40
 8002eda:	4833      	ldr	r0, [pc, #204]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002edc:	f001 fd68 	bl	80049b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ee6:	4834      	ldr	r0, [pc, #208]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002ee8:	f001 fd62 	bl	80049b0 <HAL_GPIO_WritePin>
				myIndex = 7;
 8002eec:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002eee:	2207      	movs	r2, #7
 8002ef0:	601a      	str	r2, [r3, #0]
				break;
 8002ef2:	e0d3      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ef8:	482b      	ldr	r0, [pc, #172]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002efa:	f001 fd71 	bl	80049e0 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f04:	482c      	ldr	r0, [pc, #176]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002f06:	f001 fd53 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 8002f0a:	e0c7      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2140      	movs	r1, #64	; 0x40
 8002f10:	4825      	ldr	r0, [pc, #148]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f12:	f001 fd4d 	bl	80049b0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f1a:	4823      	ldr	r0, [pc, #140]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f1c:	f001 fd60 	bl	80049e0 <HAL_GPIO_TogglePin>
				if (digits[dez][myIndex] == 1) {
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4922      	ldr	r1, [pc, #136]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002f2a:	00d2      	lsls	r2, r2, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x26e>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8002f36:	2201      	movs	r2, #1
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	481b      	ldr	r0, [pc, #108]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f3c:	f001 fd38 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 8002f40:	e0ac      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8002f42:	2200      	movs	r2, #0
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	4818      	ldr	r0, [pc, #96]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f48:	f001 fd32 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 8002f4c:	e0a6      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				myIndex--;
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002f56:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f5c:	4812      	ldr	r0, [pc, #72]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f5e:	f001 fd3f 	bl	80049e0 <HAL_GPIO_TogglePin>
				break;
 8002f62:	e09b      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				myIndex = 7;
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002f66:	2207      	movs	r2, #7
 8002f68:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f6e:	480e      	ldr	r0, [pc, #56]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f70:	f001 fd36 	bl	80049e0 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 8002f74:	2201      	movs	r2, #1
 8002f76:	2140      	movs	r1, #64	; 0x40
 8002f78:	480b      	ldr	r0, [pc, #44]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002f7a:	f001 fd19 	bl	80049b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 1);
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f84:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002f86:	f001 fd13 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 8002f8a:	e087      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	2000032c 	.word	0x2000032c
 8002f94:	20000344 	.word	0x20000344
 8002f98:	20000348 	.word	0x20000348
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	20000340 	.word	0x20000340
 8002fa4:	2000033c 	.word	0x2000033c
 8002fa8:	40010c00 	.word	0x40010c00
 8002fac:	20000338 	.word	0x20000338
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	20000014 	.word	0x20000014
 8002fb8:	40011000 	.word	0x40011000
 8002fbc:	20000334 	.word	0x20000334
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fc4:	483a      	ldr	r0, [pc, #232]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002fc6:	f001 fd0b 	bl	80049e0 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fd0:	4838      	ldr	r0, [pc, #224]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002fd2:	f001 fced 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 8002fd6:	e061      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2140      	movs	r1, #64	; 0x40
 8002fdc:	4834      	ldr	r0, [pc, #208]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002fde:	f001 fce7 	bl	80049b0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fe6:	4832      	ldr	r0, [pc, #200]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002fe8:	f001 fcfa 	bl	80049e0 <HAL_GPIO_TogglePin>
				if (digits[unid][myIndex] == 1) {
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4932      	ldr	r1, [pc, #200]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002ff6:	00d2      	lsls	r2, r2, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <HAL_TIM_PeriodElapsedCallback+0x33a>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8003002:	2201      	movs	r2, #1
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	482a      	ldr	r0, [pc, #168]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003008:	f001 fcd2 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 800300c:	e046      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 800300e:	2200      	movs	r2, #0
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	4827      	ldr	r0, [pc, #156]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003014:	f001 fccc 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 8003018:	e040      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				myIndex--;
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3b01      	subs	r3, #1
 8003020:	4a26      	ldr	r2, [pc, #152]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8003022:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8003024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003028:	4821      	ldr	r0, [pc, #132]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 800302a:	f001 fcd9 	bl	80049e0 <HAL_GPIO_TogglePin>
				break;
 800302e:	e035      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8003030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003034:	481e      	ldr	r0, [pc, #120]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003036:	f001 fcd3 	bl	80049e0 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 800303a:	2201      	movs	r2, #1
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	481c      	ldr	r0, [pc, #112]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003040:	f001 fcb6 	bl	80049b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 1);
 8003044:	2201      	movs	r2, #1
 8003046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800304a:	481a      	ldr	r0, [pc, #104]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800304c:	f001 fcb0 	bl	80049b0 <HAL_GPIO_WritePin>
				myIndex = 7;
 8003050:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8003052:	2207      	movs	r2, #7
 8003054:	601a      	str	r2, [r3, #0]
				break;
 8003056:	e021      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8003058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800305c:	4814      	ldr	r0, [pc, #80]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 800305e:	f001 fcbf 	bl	80049e0 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003068:	4812      	ldr	r0, [pc, #72]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800306a:	f001 fca1 	bl	80049b0 <HAL_GPIO_WritePin>
				break;
 800306e:	e015      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8003070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003074:	480e      	ldr	r0, [pc, #56]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003076:	f001 fcb3 	bl	80049e0 <HAL_GPIO_TogglePin>
				downcounter = 50;		//tempo morto de 1ms
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800307c:	2232      	movs	r2, #50	; 0x32
 800307e:	601a      	str	r2, [r3, #0]
				fsm = -1;
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	601a      	str	r2, [r3, #0]
				myIndex = 7;
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800308a:	2207      	movs	r2, #7
 800308c:	601a      	str	r2, [r3, #0]
				break;
 800308e:	e005      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x3c8>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);	//CLOCK
 8003090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003094:	4806      	ldr	r0, [pc, #24]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8003096:	f001 fca3 	bl	80049e0 <HAL_GPIO_TogglePin>
				break;
 800309a:	bf00      	nop
			fsm++;
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80030a4:	6013      	str	r3, [r2, #0]
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40010c00 	.word	0x40010c00
 80030b4:	40011000 	.word	0x40011000
 80030b8:	20000330 	.word	0x20000330
 80030bc:	20000000 	.word	0x20000000
 80030c0:	20000014 	.word	0x20000014
 80030c4:	20000340 	.word	0x20000340
 80030c8:	2000033c 	.word	0x2000033c
 80030cc:	00000000 	.word	0x00000000

080030d0 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness) // 0~45 linearização do brilho
{
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b2d      	cmp	r3, #45	; 0x2d
 80030dc:	dd01      	ble.n	80030e2 <Set_Brightness+0x12>
		brightness = 45;
 80030de:	232d      	movs	r3, #45	; 0x2d
 80030e0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e05f      	b.n	80031a8 <Set_Brightness+0xd8>
		LED_Mod[i][0] = LED_Data[i][0];
 80030e8:	4a35      	ldr	r2, [pc, #212]	; (80031c0 <Set_Brightness+0xf0>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80030f0:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <Set_Brightness+0xf4>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	e04e      	b.n	800319c <Set_Brightness+0xcc>
			float angle = 90 - brightness; // em graus
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fdcb 	bl	8000ca0 <__aeabi_i2f>
 800310a:	4603      	mov	r3, r0
 800310c:	60fb      	str	r3, [r7, #12]
			angle = angle * PI / 180; //em radianos
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f7fd f982 	bl	8000418 <__aeabi_f2d>
 8003114:	a328      	add	r3, pc, #160	; (adr r3, 80031b8 <Set_Brightness+0xe8>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f7fd f9d5 	bl	80004c8 <__aeabi_dmul>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <Set_Brightness+0xf8>)
 800312c:	f7fd faf6 	bl	800071c <__aeabi_ddiv>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	f7fd fca8 	bl	8000a8c <__aeabi_d2f>
 800313c:	4603      	mov	r3, r0
 800313e:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <Set_Brightness+0xf0>)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	441a      	add	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f950 	bl	80003f4 <__aeabi_i2d>
 8003154:	4604      	mov	r4, r0
 8003156:	460d      	mov	r5, r1
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7fd f95d 	bl	8000418 <__aeabi_f2d>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f003 fc59 	bl	8006a1c <tan>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4620      	mov	r0, r4
 8003170:	4629      	mov	r1, r5
 8003172:	f7fd fad3 	bl	800071c <__aeabi_ddiv>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f7fd fc65 	bl	8000a4c <__aeabi_d2uiz>
 8003182:	4603      	mov	r3, r0
 8003184:	b2d9      	uxtb	r1, r3
 8003186:	4a0f      	ldr	r2, [pc, #60]	; (80031c4 <Set_Brightness+0xf4>)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	460a      	mov	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3301      	adds	r3, #1
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	ddad      	ble.n	80030fe <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b13      	cmp	r3, #19
 80031ac:	dd9c      	ble.n	80030e8 <Set_Brightness+0x18>
		}
	}
}
 80031ae:	bf00      	nop
 80031b0:	bf00      	nop
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bdb0      	pop	{r4, r5, r7, pc}
 80031b8:	53c8d4f1 	.word	0x53c8d4f1
 80031bc:	400921fb 	.word	0x400921fb
 80031c0:	2000034c 	.word	0x2000034c
 80031c4:	2000039c 	.word	0x2000039c
 80031c8:	40668000 	.word	0x40668000

080031cc <WS2512_Send>:

#endif

uint16_t pwmData[(24*MAX_LED+50)];

void WS2512_Send(void) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
//	{
//		pwmData[indx] = 0;
//		indx++;
//	}

	for (int i = 0; i < MAX_LED; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	e036      	b.n	800324a <WS2512_Send+0x7e>
	{
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 80031dc:	4a2e      	ldr	r2, [pc, #184]	; (8003298 <WS2512_Send+0xcc>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	041a      	lsls	r2, r3, #16
 80031e8:	492b      	ldr	r1, [pc, #172]	; (8003298 <WS2512_Send+0xcc>)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	789b      	ldrb	r3, [r3, #2]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	431a      	orrs	r2, r3
 80031f6:	4928      	ldr	r1, [pc, #160]	; (8003298 <WS2512_Send+0xcc>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	78db      	ldrb	r3, [r3, #3]
 8003200:	4313      	orrs	r3, r2
 8003202:	607b      	str	r3, [r7, #4]

		for (int i = 23; i >= 0; i--) {
 8003204:	2317      	movs	r3, #23
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e019      	b.n	800323e <WS2512_Send+0x72>
			if (color & (1 << i)) {
 800320a:	2201      	movs	r2, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	461a      	mov	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <WS2512_Send+0x5c>
				pwmData[indx] = 60;		// pulso alto, 2/3 de 90, aprox 68%
 800321c:	4a1f      	ldr	r2, [pc, #124]	; (800329c <WS2512_Send+0xd0>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	213c      	movs	r1, #60	; 0x3c
 8003222:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003226:	e004      	b.n	8003232 <WS2512_Send+0x66>
			}

			else
				pwmData[indx] = 30;	// pulso baixo, 1/3 de 90, aprox 32%
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <WS2512_Send+0xd0>)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	211e      	movs	r1, #30
 800322e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3b01      	subs	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	dae2      	bge.n	800320a <WS2512_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3301      	adds	r3, #1
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b13      	cmp	r3, #19
 800324e:	ddc5      	ble.n	80031dc <WS2512_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++)//intervalor de tempo de 50us antes da próxima msg
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	e00a      	b.n	800326c <WS2512_Send+0xa0>
			{
		pwmData[indx] = 0;
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <WS2512_Send+0xd0>)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2100      	movs	r1, #0
 800325c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3301      	adds	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++)//intervalor de tempo de 50us antes da próxima msg
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3301      	adds	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b31      	cmp	r3, #49	; 0x31
 8003270:	ddf1      	ble.n	8003256 <WS2512_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	b29b      	uxth	r3, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <WS2512_Send+0xd0>)
 8003278:	2100      	movs	r1, #0
 800327a:	4809      	ldr	r0, [pc, #36]	; (80032a0 <WS2512_Send+0xd4>)
 800327c:	f002 fa44 	bl	8005708 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8003280:	bf00      	nop
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <WS2512_Send+0xd8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0fb      	beq.n	8003282 <WS2512_Send+0xb6>
	};
	datasentflag = 0;
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <WS2512_Send+0xd8>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
}
 8003290:	bf00      	nop
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	2000039c 	.word	0x2000039c
 800329c:	20000404 	.word	0x20000404
 80032a0:	200001d8 	.word	0x200001d8
 80032a4:	20000400 	.word	0x20000400

080032a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032ba:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <HAL_MspInit+0x40>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <HAL_MspInit+0x40>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6193      	str	r3, [r2, #24]
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_MspInit+0x40>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <HAL_MspInit+0x40>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <HAL_MspInit+0x40>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032dc:	61d3      	str	r3, [r2, #28]
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_MspInit+0x40>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40021000 	.word	0x40021000

080032f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0318 	add.w	r3, r7, #24
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_ADC_MspInit+0x98>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d137      	bne.n	8003388 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003318:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 800331e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003322:	6193      	str	r3, [r2, #24]
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	6193      	str	r3, [r2, #24]
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4a11      	ldr	r2, [pc, #68]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 800334e:	f043 0308 	orr.w	r3, r3, #8
 8003352:	6193      	str	r3, [r2, #24]
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_ADC_MspInit+0x9c>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003360:	2303      	movs	r3, #3
 8003362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003364:	2303      	movs	r3, #3
 8003366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003368:	f107 0318 	add.w	r3, r7, #24
 800336c:	4619      	mov	r1, r3
 800336e:	480a      	ldr	r0, [pc, #40]	; (8003398 <HAL_ADC_MspInit+0xa0>)
 8003370:	f001 f99a 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003374:	2302      	movs	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003378:	2303      	movs	r3, #3
 800337a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337c:	f107 0318 	add.w	r3, r7, #24
 8003380:	4619      	mov	r1, r3
 8003382:	4806      	ldr	r0, [pc, #24]	; (800339c <HAL_ADC_MspInit+0xa4>)
 8003384:	f001 f990 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003388:	bf00      	nop
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40012400 	.word	0x40012400
 8003394:	40021000 	.word	0x40021000
 8003398:	40010800 	.word	0x40010800
 800339c:	40010c00 	.word	0x40010c00

080033a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a37      	ldr	r2, [pc, #220]	; (800348c <HAL_TIM_Base_MspInit+0xec>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d134      	bne.n	800341c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033b2:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	4a36      	ldr	r2, [pc, #216]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 80033b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033bc:	6193      	str	r3, [r2, #24]
 80033be:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80033ca:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 80033cc:	4a32      	ldr	r2, [pc, #200]	; (8003498 <HAL_TIM_Base_MspInit+0xf8>)
 80033ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033d0:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 80033d2:	2210      	movs	r2, #16
 80033d4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d6:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033e2:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 80033e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 80033ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033f0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80033fe:	4825      	ldr	r0, [pc, #148]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 8003400:	f000 feec 	bl	80041dc <HAL_DMA_Init>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800340a:	f7ff ff4d 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a20      	ldr	r2, [pc, #128]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <HAL_TIM_Base_MspInit+0xf4>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800341a:	e032      	b.n	8003482 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <HAL_TIM_Base_MspInit+0xfc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d114      	bne.n	8003450 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a19      	ldr	r2, [pc, #100]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	61d3      	str	r3, [r2, #28]
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	201d      	movs	r0, #29
 8003444:	f000 fe93 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003448:	201d      	movs	r0, #29
 800344a:	f000 feac 	bl	80041a6 <HAL_NVIC_EnableIRQ>
}
 800344e:	e018      	b.n	8003482 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM4)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <HAL_TIM_Base_MspInit+0x100>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d113      	bne.n	8003482 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	61d3      	str	r3, [r2, #28]
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_TIM_Base_MspInit+0xf0>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2100      	movs	r1, #0
 8003476:	201e      	movs	r0, #30
 8003478:	f000 fe79 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800347c:	201e      	movs	r0, #30
 800347e:	f000 fe92 	bl	80041a6 <HAL_NVIC_EnableIRQ>
}
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40021000 	.word	0x40021000
 8003494:	200002b0 	.word	0x200002b0
 8003498:	4002001c 	.word	0x4002001c
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800

080034a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a10      	ldr	r2, [pc, #64]	; (8003500 <HAL_TIM_MspPostInit+0x5c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d118      	bne.n	80034f6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_TIM_MspPostInit+0x60>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <HAL_TIM_MspPostInit+0x60>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6193      	str	r3, [r2, #24]
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_TIM_MspPostInit+0x60>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2302      	movs	r3, #2
 80034e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	f107 0310 	add.w	r3, r7, #16
 80034ee:	4619      	mov	r1, r3
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <HAL_TIM_MspPostInit+0x64>)
 80034f2:	f001 f8d9 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40021000 	.word	0x40021000
 8003508:	40010800 	.word	0x40010800

0800350c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <HardFault_Handler+0x4>

0800351e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003522:	e7fe      	b.n	8003522 <MemManage_Handler+0x4>

08003524 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <BusFault_Handler+0x4>

0800352a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800352e:	e7fe      	b.n	800352e <UsageFault_Handler+0x4>

08003530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003558:	f000 f89a 	bl	8003690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	bd80      	pop	{r7, pc}

08003560 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003564:	2001      	movs	r0, #1
 8003566:	f001 fa55 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <DMA1_Channel2_IRQHandler+0x10>)
 8003576:	f000 ff63 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200002b0 	.word	0x200002b0

08003584 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <TIM3_IRQHandler+0x10>)
 800358a:	f002 fb25 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000220 	.word	0x20000220

08003598 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <TIM4_IRQHandler+0x10>)
 800359e:	f002 fb1b 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000268 	.word	0x20000268

080035ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035b8:	f7ff fff8 	bl	80035ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035bc:	480b      	ldr	r0, [pc, #44]	; (80035ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035be:	490c      	ldr	r1, [pc, #48]	; (80035f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035c0:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80035c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c4:	e002      	b.n	80035cc <LoopCopyDataInit>

080035c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ca:	3304      	adds	r3, #4

080035cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d0:	d3f9      	bcc.n	80035c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d2:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80035d4:	4c09      	ldr	r4, [pc, #36]	; (80035fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d8:	e001      	b.n	80035de <LoopFillZerobss>

080035da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035dc:	3204      	adds	r2, #4

080035de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e0:	d3fb      	bcc.n	80035da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035e2:	f003 f9f7 	bl	80069d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035e6:	f7fd fbfd 	bl	8000de4 <main>
  bx lr
 80035ea:	4770      	bx	lr
  ldr r0, =_sdata
 80035ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80035f4:	08007d08 	.word	0x08007d08
  ldr r2, =_sbss
 80035f8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80035fc:	20000830 	.word	0x20000830

08003600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003600:	e7fe      	b.n	8003600 <ADC1_2_IRQHandler>
	...

08003604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_Init+0x28>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_Init+0x28>)
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 fd9f 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361a:	200f      	movs	r0, #15
 800361c:	f000 f808 	bl	8003630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003620:	f7ff fe48 	bl	80032b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_InitTick+0x54>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_InitTick+0x58>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003646:	fbb3 f3f1 	udiv	r3, r3, r1
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fdb7 	bl	80041c2 <HAL_SYSTICK_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00e      	b.n	800367c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d80a      	bhi.n	800367a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003664:	2200      	movs	r2, #0
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f000 fd7f 	bl	800416e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003670:	4a06      	ldr	r2, [pc, #24]	; (800368c <HAL_InitTick+0x5c>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000174 	.word	0x20000174
 8003688:	2000017c 	.word	0x2000017c
 800368c:	20000178 	.word	0x20000178

08003690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_IncTick+0x1c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_IncTick+0x20>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	4a03      	ldr	r2, [pc, #12]	; (80036b0 <HAL_IncTick+0x20>)
 80036a2:	6013      	str	r3, [r2, #0]
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	2000017c 	.word	0x2000017c
 80036b0:	2000082c 	.word	0x2000082c

080036b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return uwTick;
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <HAL_GetTick+0x10>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	2000082c 	.word	0x2000082c

080036c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d005      	beq.n	80036ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_Delay+0x44>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ee:	bf00      	nop
 80036f0:	f7ff ffe0 	bl	80036b4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d8f7      	bhi.n	80036f0 <HAL_Delay+0x28>
  {
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000017c 	.word	0x2000017c

08003710 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0be      	b.n	80038b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fdd2 	bl	80032f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fbf1 	bl	8003f3c <ADC_ConversionStop_Disable>
 800375a:	4603      	mov	r3, r0
 800375c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 8099 	bne.w	800389e <HAL_ADC_Init+0x18e>
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 8095 	bne.w	800389e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800377c:	f023 0302 	bic.w	r3, r3, #2
 8003780:	f043 0202 	orr.w	r2, r3, #2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003790:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7b1b      	ldrb	r3, [r3, #12]
 8003796:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003798:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a8:	d003      	beq.n	80037b2 <HAL_ADC_Init+0xa2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d102      	bne.n	80037b8 <HAL_ADC_Init+0xa8>
 80037b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b6:	e000      	b.n	80037ba <HAL_ADC_Init+0xaa>
 80037b8:	2300      	movs	r3, #0
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7d1b      	ldrb	r3, [r3, #20]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d119      	bne.n	80037fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7b1b      	ldrb	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	035a      	lsls	r2, r3, #13
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e00b      	b.n	80037fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_ADC_Init+0x1a8>)
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	430b      	orrs	r3, r1
 8003822:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382c:	d003      	beq.n	8003836 <HAL_ADC_Init+0x126>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d104      	bne.n	8003840 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	3b01      	subs	r3, #1
 800383c:	051b      	lsls	r3, r3, #20
 800383e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	430a      	orrs	r2, r1
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	4b18      	ldr	r3, [pc, #96]	; (80038bc <HAL_ADC_Init+0x1ac>)
 800385c:	4013      	ands	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d10b      	bne.n	800387c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800387a:	e018      	b.n	80038ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f023 0312 	bic.w	r3, r3, #18
 8003884:	f043 0210 	orr.w	r2, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800389c:	e007      	b.n	80038ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	ffe1f7fd 	.word	0xffe1f7fd
 80038bc:	ff1f0efe 	.word	0xff1f0efe

080038c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_ADC_Start+0x1a>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e098      	b.n	8003a0c <HAL_ADC_Start+0x14c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fad0 	bl	8003e88 <ADC_Enable>
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 8087 	bne.w	8003a02 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a41      	ldr	r2, [pc, #260]	; (8003a14 <HAL_ADC_Start+0x154>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d105      	bne.n	800391e <HAL_ADC_Start+0x5e>
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_ADC_Start+0x158>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d115      	bne.n	800394a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d026      	beq.n	8003986 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003940:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003948:	e01d      	b.n	8003986 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2f      	ldr	r2, [pc, #188]	; (8003a18 <HAL_ADC_Start+0x158>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_ADC_Start+0xaa>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_ADC_Start+0x154>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10d      	bne.n	8003986 <HAL_ADC_Start+0xc6>
 800396a:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_ADC_Start+0x158>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800397e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f023 0206 	bic.w	r2, r3, #6
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
 800399e:	e002      	b.n	80039a6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f06f 0202 	mvn.w	r2, #2
 80039b6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80039c6:	d113      	bne.n	80039f0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80039cc:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <HAL_ADC_Start+0x154>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d105      	bne.n	80039de <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_ADC_Start+0x158>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d108      	bne.n	80039f0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	e00c      	b.n	8003a0a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	e003      	b.n	8003a0a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40012800 	.word	0x40012800
 8003a18:	40012400 	.word	0x40012400

08003a1c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_ADC_Stop+0x1a>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e01a      	b.n	8003a6c <HAL_ADC_Stop+0x50>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa7c 	bl	8003f3c <ADC_ConversionStop_Disable>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a8a:	f7ff fe13 	bl	80036b4 <HAL_GetTick>
 8003a8e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0d3      	b.n	8003c5e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d131      	bne.n	8003b28 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d12a      	bne.n	8003b28 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003ad2:	e021      	b.n	8003b18 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d01d      	beq.n	8003b18 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_ADC_PollForConversion+0x7e>
 8003ae2:	f7ff fde7 	bl	80036b4 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d212      	bcs.n	8003b18 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f043 0204 	orr.w	r2, r3, #4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0a2      	b.n	8003c5e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0d6      	beq.n	8003ad4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003b26:	e070      	b.n	8003c0a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003b28:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <HAL_ADC_PollForConversion+0x1f4>)
 8003b2a:	681c      	ldr	r4, [r3, #0]
 8003b2c:	2002      	movs	r0, #2
 8003b2e:	f001 fc3b 	bl	80053a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b32:	4603      	mov	r3, r0
 8003b34:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6919      	ldr	r1, [r3, #16]
 8003b3e:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <HAL_ADC_PollForConversion+0x1f8>)
 8003b40:	400b      	ands	r3, r1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <HAL_ADC_PollForConversion+0x104>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68d9      	ldr	r1, [r3, #12]
 8003b4c:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <HAL_ADC_PollForConversion+0x1fc>)
 8003b4e:	400b      	ands	r3, r1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d111      	bne.n	8003b78 <HAL_ADC_PollForConversion+0x104>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6919      	ldr	r1, [r3, #16]
 8003b5a:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <HAL_ADC_PollForConversion+0x200>)
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d108      	bne.n	8003b74 <HAL_ADC_PollForConversion+0x100>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68d9      	ldr	r1, [r3, #12]
 8003b68:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <HAL_ADC_PollForConversion+0x204>)
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_ADC_PollForConversion+0x100>
 8003b70:	2314      	movs	r3, #20
 8003b72:	e020      	b.n	8003bb6 <HAL_ADC_PollForConversion+0x142>
 8003b74:	2329      	movs	r3, #41	; 0x29
 8003b76:	e01e      	b.n	8003bb6 <HAL_ADC_PollForConversion+0x142>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6919      	ldr	r1, [r3, #16]
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_ADC_PollForConversion+0x200>)
 8003b80:	400b      	ands	r3, r1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_ADC_PollForConversion+0x120>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68d9      	ldr	r1, [r3, #12]
 8003b8c:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <HAL_ADC_PollForConversion+0x204>)
 8003b8e:	400b      	ands	r3, r1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <HAL_ADC_PollForConversion+0x13c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6919      	ldr	r1, [r3, #16]
 8003b9a:	4b38      	ldr	r3, [pc, #224]	; (8003c7c <HAL_ADC_PollForConversion+0x208>)
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d108      	bne.n	8003bb4 <HAL_ADC_PollForConversion+0x140>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68d9      	ldr	r1, [r3, #12]
 8003ba8:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <HAL_ADC_PollForConversion+0x208>)
 8003baa:	400b      	ands	r3, r1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_PollForConversion+0x140>
 8003bb0:	2354      	movs	r3, #84	; 0x54
 8003bb2:	e000      	b.n	8003bb6 <HAL_ADC_PollForConversion+0x142>
 8003bb4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003bbc:	e021      	b.n	8003c02 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d01a      	beq.n	8003bfc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_ADC_PollForConversion+0x168>
 8003bcc:	f7ff fd72 	bl	80036b4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d20f      	bcs.n	8003bfc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d90b      	bls.n	8003bfc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	f043 0204 	orr.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e030      	b.n	8003c5e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d8d9      	bhi.n	8003bbe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f06f 0212 	mvn.w	r2, #18
 8003c12:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c2e:	d115      	bne.n	8003c5c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d111      	bne.n	8003c5c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd90      	pop	{r4, r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000174 	.word	0x20000174
 8003c6c:	24924924 	.word	0x24924924
 8003c70:	00924924 	.word	0x00924924
 8003c74:	12492492 	.word	0x12492492
 8003c78:	00492492 	.word	0x00492492
 8003c7c:	00249249 	.word	0x00249249

08003c80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x20>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0dc      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x1da>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d81c      	bhi.n	8003d02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3b05      	subs	r3, #5
 8003cda:	221f      	movs	r2, #31
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	4019      	ands	r1, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3b05      	subs	r3, #5
 8003cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	635a      	str	r2, [r3, #52]	; 0x34
 8003d00:	e03c      	b.n	8003d7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d81c      	bhi.n	8003d44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	3b23      	subs	r3, #35	; 0x23
 8003d1c:	221f      	movs	r2, #31
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	4019      	ands	r1, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	3b23      	subs	r3, #35	; 0x23
 8003d36:	fa00 f203 	lsl.w	r2, r0, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
 8003d42:	e01b      	b.n	8003d7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	3b41      	subs	r3, #65	; 0x41
 8003d56:	221f      	movs	r2, #31
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	4019      	ands	r1, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3b41      	subs	r3, #65	; 0x41
 8003d70:	fa00 f203 	lsl.w	r2, r0, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b09      	cmp	r3, #9
 8003d82:	d91c      	bls.n	8003dbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68d9      	ldr	r1, [r3, #12]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	3b1e      	subs	r3, #30
 8003d96:	2207      	movs	r2, #7
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	4019      	ands	r1, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6898      	ldr	r0, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	3b1e      	subs	r3, #30
 8003db0:	fa00 f203 	lsl.w	r2, r0, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	60da      	str	r2, [r3, #12]
 8003dbc:	e019      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6919      	ldr	r1, [r3, #16]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	2207      	movs	r2, #7
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	4019      	ands	r1, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6898      	ldr	r0, [r3, #8]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d003      	beq.n	8003e02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003dfe:	2b11      	cmp	r3, #17
 8003e00:	d132      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_ADC_ConfigChannel+0x1e4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d125      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d126      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003e28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d11a      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_ADC_ConfigChannel+0x1e8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <HAL_ADC_ConfigChannel+0x1ec>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	0c9a      	lsrs	r2, r3, #18
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e48:	e002      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f9      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x1b2>
 8003e56:	e007      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	40012400 	.word	0x40012400
 8003e80:	20000174 	.word	0x20000174
 8003e84:	431bde83 	.word	0x431bde83

08003e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d040      	beq.n	8003f28 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003eb6:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <ADC_Enable+0xac>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <ADC_Enable+0xb0>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	0c9b      	lsrs	r3, r3, #18
 8003ec2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ec4:	e002      	b.n	8003ecc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f9      	bne.n	8003ec6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ed2:	f7ff fbef 	bl	80036b4 <HAL_GetTick>
 8003ed6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003ed8:	e01f      	b.n	8003f1a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eda:	f7ff fbeb 	bl	80036b4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d918      	bls.n	8003f1a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d011      	beq.n	8003f1a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f043 0210 	orr.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	f043 0201 	orr.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d1d8      	bne.n	8003eda <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000174 	.word	0x20000174
 8003f38:	431bde83 	.word	0x431bde83

08003f3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d12e      	bne.n	8003fb4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f66:	f7ff fba5 	bl	80036b4 <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f6c:	e01b      	b.n	8003fa6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f6e:	f7ff fba1 	bl	80036b4 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d914      	bls.n	8003fa6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10d      	bne.n	8003fa6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f043 0210 	orr.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e007      	b.n	8003fb6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d0dc      	beq.n	8003f6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff2:	4a04      	ldr	r2, [pc, #16]	; (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	60d3      	str	r3, [r2, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <__NVIC_GetPriorityGrouping+0x18>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f003 0307 	and.w	r3, r3, #7
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	2b00      	cmp	r3, #0
 8004034:	db0b      	blt.n	800404e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	4906      	ldr	r1, [pc, #24]	; (8004058 <__NVIC_EnableIRQ+0x34>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2001      	movs	r0, #1
 8004046:	fa00 f202 	lsl.w	r2, r0, r2
 800404a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004124:	d301      	bcc.n	800412a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004126:	2301      	movs	r3, #1
 8004128:	e00f      	b.n	800414a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <SysTick_Config+0x40>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004132:	210f      	movs	r1, #15
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	f7ff ff90 	bl	800405c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <SysTick_Config+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <SysTick_Config+0x40>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010

08004158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff2d 	bl	8003fc0 <__NVIC_SetPriorityGrouping>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004180:	f7ff ff42 	bl	8004008 <__NVIC_GetPriorityGrouping>
 8004184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ff90 	bl	80040b0 <NVIC_EncodePriority>
 8004190:	4602      	mov	r2, r0
 8004192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff5f 	bl	800405c <__NVIC_SetPriority>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff35 	bl	8004024 <__NVIC_EnableIRQ>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ffa2 	bl	8004114 <SysTick_Config>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e043      	b.n	800427a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_DMA_Init+0xa8>)
 80041fa:	4413      	add	r3, r2
 80041fc:	4a22      	ldr	r2, [pc, #136]	; (8004288 <HAL_DMA_Init+0xac>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	009a      	lsls	r2, r3, #2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_DMA_Init+0xb0>)
 800420e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004226:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800422a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800424c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	bffdfff8 	.word	0xbffdfff8
 8004288:	cccccccd 	.word	0xcccccccd
 800428c:	40020000 	.word	0x40020000

08004290 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_DMA_Start_IT+0x20>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e04b      	b.n	8004348 <HAL_DMA_Start_IT+0xb8>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d13a      	bne.n	800433a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f9af 	bl	800464c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 020e 	orr.w	r2, r2, #14
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e00f      	b.n	8004328 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 020a 	orr.w	r2, r2, #10
 8004326:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e005      	b.n	8004346 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d005      	beq.n	8004374 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2204      	movs	r2, #4
 800436c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e051      	b.n	8004418 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 020e 	bic.w	r2, r2, #14
 8004382:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0201 	bic.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <HAL_DMA_Abort_IT+0xd4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d029      	beq.n	80043f2 <HAL_DMA_Abort_IT+0xa2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a21      	ldr	r2, [pc, #132]	; (8004428 <HAL_DMA_Abort_IT+0xd8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_DMA_Abort_IT+0x9e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	; (800442c <HAL_DMA_Abort_IT+0xdc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01a      	beq.n	80043e8 <HAL_DMA_Abort_IT+0x98>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <HAL_DMA_Abort_IT+0xe0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d012      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x92>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <HAL_DMA_Abort_IT+0xe4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00a      	beq.n	80043dc <HAL_DMA_Abort_IT+0x8c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <HAL_DMA_Abort_IT+0xe8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d102      	bne.n	80043d6 <HAL_DMA_Abort_IT+0x86>
 80043d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043d4:	e00e      	b.n	80043f4 <HAL_DMA_Abort_IT+0xa4>
 80043d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043da:	e00b      	b.n	80043f4 <HAL_DMA_Abort_IT+0xa4>
 80043dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043e0:	e008      	b.n	80043f4 <HAL_DMA_Abort_IT+0xa4>
 80043e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043e6:	e005      	b.n	80043f4 <HAL_DMA_Abort_IT+0xa4>
 80043e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043ec:	e002      	b.n	80043f4 <HAL_DMA_Abort_IT+0xa4>
 80043ee:	2310      	movs	r3, #16
 80043f0:	e000      	b.n	80043f4 <HAL_DMA_Abort_IT+0xa4>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4a11      	ldr	r2, [pc, #68]	; (800443c <HAL_DMA_Abort_IT+0xec>)
 80043f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
    } 
  }
  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40020008 	.word	0x40020008
 8004428:	4002001c 	.word	0x4002001c
 800442c:	40020030 	.word	0x40020030
 8004430:	40020044 	.word	0x40020044
 8004434:	40020058 	.word	0x40020058
 8004438:	4002006c 	.word	0x4002006c
 800443c:	40020000 	.word	0x40020000

08004440 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	2204      	movs	r2, #4
 800445e:	409a      	lsls	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d04f      	beq.n	8004508 <HAL_DMA_IRQHandler+0xc8>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d04a      	beq.n	8004508 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a66      	ldr	r2, [pc, #408]	; (8004630 <HAL_DMA_IRQHandler+0x1f0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d029      	beq.n	80044ee <HAL_DMA_IRQHandler+0xae>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a65      	ldr	r2, [pc, #404]	; (8004634 <HAL_DMA_IRQHandler+0x1f4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d022      	beq.n	80044ea <HAL_DMA_IRQHandler+0xaa>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a63      	ldr	r2, [pc, #396]	; (8004638 <HAL_DMA_IRQHandler+0x1f8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01a      	beq.n	80044e4 <HAL_DMA_IRQHandler+0xa4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a62      	ldr	r2, [pc, #392]	; (800463c <HAL_DMA_IRQHandler+0x1fc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d012      	beq.n	80044de <HAL_DMA_IRQHandler+0x9e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a60      	ldr	r2, [pc, #384]	; (8004640 <HAL_DMA_IRQHandler+0x200>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00a      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x98>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a5f      	ldr	r2, [pc, #380]	; (8004644 <HAL_DMA_IRQHandler+0x204>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d102      	bne.n	80044d2 <HAL_DMA_IRQHandler+0x92>
 80044cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044d0:	e00e      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044d6:	e00b      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044dc:	e008      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044e2:	e005      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e8:	e002      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044ea:	2340      	movs	r3, #64	; 0x40
 80044ec:	e000      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044ee:	2304      	movs	r3, #4
 80044f0:	4a55      	ldr	r2, [pc, #340]	; (8004648 <HAL_DMA_IRQHandler+0x208>)
 80044f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8094 	beq.w	8004626 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004506:	e08e      	b.n	8004626 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2202      	movs	r2, #2
 800450e:	409a      	lsls	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4013      	ands	r3, r2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d056      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x186>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d051      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020a 	bic.w	r2, r2, #10
 800453e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a38      	ldr	r2, [pc, #224]	; (8004630 <HAL_DMA_IRQHandler+0x1f0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d029      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x166>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a37      	ldr	r2, [pc, #220]	; (8004634 <HAL_DMA_IRQHandler+0x1f4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x162>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a35      	ldr	r2, [pc, #212]	; (8004638 <HAL_DMA_IRQHandler+0x1f8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01a      	beq.n	800459c <HAL_DMA_IRQHandler+0x15c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a34      	ldr	r2, [pc, #208]	; (800463c <HAL_DMA_IRQHandler+0x1fc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d012      	beq.n	8004596 <HAL_DMA_IRQHandler+0x156>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a32      	ldr	r2, [pc, #200]	; (8004640 <HAL_DMA_IRQHandler+0x200>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00a      	beq.n	8004590 <HAL_DMA_IRQHandler+0x150>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a31      	ldr	r2, [pc, #196]	; (8004644 <HAL_DMA_IRQHandler+0x204>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d102      	bne.n	800458a <HAL_DMA_IRQHandler+0x14a>
 8004584:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004588:	e00e      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 800458a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800458e:	e00b      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 8004590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004594:	e008      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 8004596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800459a:	e005      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 800459c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a0:	e002      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 80045a2:	2320      	movs	r3, #32
 80045a4:	e000      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 80045a6:	2302      	movs	r3, #2
 80045a8:	4a27      	ldr	r2, [pc, #156]	; (8004648 <HAL_DMA_IRQHandler+0x208>)
 80045aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d034      	beq.n	8004626 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045c4:	e02f      	b.n	8004626 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2208      	movs	r2, #8
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d028      	beq.n	8004628 <HAL_DMA_IRQHandler+0x1e8>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d023      	beq.n	8004628 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 020e 	bic.w	r2, r2, #14
 80045ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
    }
  }
  return;
 8004626:	bf00      	nop
 8004628:	bf00      	nop
}
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40020008 	.word	0x40020008
 8004634:	4002001c 	.word	0x4002001c
 8004638:	40020030 	.word	0x40020030
 800463c:	40020044 	.word	0x40020044
 8004640:	40020058 	.word	0x40020058
 8004644:	4002006c 	.word	0x4002006c
 8004648:	40020000 	.word	0x40020000

0800464c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f202 	lsl.w	r2, r1, r2
 8004668:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b10      	cmp	r3, #16
 8004678:	d108      	bne.n	800468c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800468a:	e007      	b.n	800469c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b08b      	sub	sp, #44	; 0x2c
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046b6:	2300      	movs	r3, #0
 80046b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ba:	e169      	b.n	8004990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046bc:	2201      	movs	r2, #1
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	f040 8158 	bne.w	800498a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4a9a      	ldr	r2, [pc, #616]	; (8004948 <HAL_GPIO_Init+0x2a0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d05e      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 80046e4:	4a98      	ldr	r2, [pc, #608]	; (8004948 <HAL_GPIO_Init+0x2a0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d875      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 80046ea:	4a98      	ldr	r2, [pc, #608]	; (800494c <HAL_GPIO_Init+0x2a4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d058      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 80046f0:	4a96      	ldr	r2, [pc, #600]	; (800494c <HAL_GPIO_Init+0x2a4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d86f      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 80046f6:	4a96      	ldr	r2, [pc, #600]	; (8004950 <HAL_GPIO_Init+0x2a8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d052      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 80046fc:	4a94      	ldr	r2, [pc, #592]	; (8004950 <HAL_GPIO_Init+0x2a8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d869      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 8004702:	4a94      	ldr	r2, [pc, #592]	; (8004954 <HAL_GPIO_Init+0x2ac>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d04c      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 8004708:	4a92      	ldr	r2, [pc, #584]	; (8004954 <HAL_GPIO_Init+0x2ac>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d863      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 800470e:	4a92      	ldr	r2, [pc, #584]	; (8004958 <HAL_GPIO_Init+0x2b0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d046      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 8004714:	4a90      	ldr	r2, [pc, #576]	; (8004958 <HAL_GPIO_Init+0x2b0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d85d      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 800471a:	2b12      	cmp	r3, #18
 800471c:	d82a      	bhi.n	8004774 <HAL_GPIO_Init+0xcc>
 800471e:	2b12      	cmp	r3, #18
 8004720:	d859      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 8004722:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_GPIO_Init+0x80>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	080047a3 	.word	0x080047a3
 800472c:	0800477d 	.word	0x0800477d
 8004730:	0800478f 	.word	0x0800478f
 8004734:	080047d1 	.word	0x080047d1
 8004738:	080047d7 	.word	0x080047d7
 800473c:	080047d7 	.word	0x080047d7
 8004740:	080047d7 	.word	0x080047d7
 8004744:	080047d7 	.word	0x080047d7
 8004748:	080047d7 	.word	0x080047d7
 800474c:	080047d7 	.word	0x080047d7
 8004750:	080047d7 	.word	0x080047d7
 8004754:	080047d7 	.word	0x080047d7
 8004758:	080047d7 	.word	0x080047d7
 800475c:	080047d7 	.word	0x080047d7
 8004760:	080047d7 	.word	0x080047d7
 8004764:	080047d7 	.word	0x080047d7
 8004768:	080047d7 	.word	0x080047d7
 800476c:	08004785 	.word	0x08004785
 8004770:	08004799 	.word	0x08004799
 8004774:	4a79      	ldr	r2, [pc, #484]	; (800495c <HAL_GPIO_Init+0x2b4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800477a:	e02c      	b.n	80047d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	623b      	str	r3, [r7, #32]
          break;
 8004782:	e029      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	3304      	adds	r3, #4
 800478a:	623b      	str	r3, [r7, #32]
          break;
 800478c:	e024      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	3308      	adds	r3, #8
 8004794:	623b      	str	r3, [r7, #32]
          break;
 8004796:	e01f      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	330c      	adds	r3, #12
 800479e:	623b      	str	r3, [r7, #32]
          break;
 80047a0:	e01a      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047aa:	2304      	movs	r3, #4
 80047ac:	623b      	str	r3, [r7, #32]
          break;
 80047ae:	e013      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d105      	bne.n	80047c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047b8:	2308      	movs	r3, #8
 80047ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	611a      	str	r2, [r3, #16]
          break;
 80047c2:	e009      	b.n	80047d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047c4:	2308      	movs	r3, #8
 80047c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	615a      	str	r2, [r3, #20]
          break;
 80047ce:	e003      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047d0:	2300      	movs	r3, #0
 80047d2:	623b      	str	r3, [r7, #32]
          break;
 80047d4:	e000      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          break;
 80047d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2bff      	cmp	r3, #255	; 0xff
 80047dc:	d801      	bhi.n	80047e2 <HAL_GPIO_Init+0x13a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	e001      	b.n	80047e6 <HAL_GPIO_Init+0x13e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2bff      	cmp	r3, #255	; 0xff
 80047ec:	d802      	bhi.n	80047f4 <HAL_GPIO_Init+0x14c>
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	e002      	b.n	80047fa <HAL_GPIO_Init+0x152>
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	3b08      	subs	r3, #8
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	210f      	movs	r1, #15
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	6a39      	ldr	r1, [r7, #32]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	fa01 f303 	lsl.w	r3, r1, r3
 8004814:	431a      	orrs	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80b1 	beq.w	800498a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004828:	4b4d      	ldr	r3, [pc, #308]	; (8004960 <HAL_GPIO_Init+0x2b8>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4a4c      	ldr	r2, [pc, #304]	; (8004960 <HAL_GPIO_Init+0x2b8>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6193      	str	r3, [r2, #24]
 8004834:	4b4a      	ldr	r3, [pc, #296]	; (8004960 <HAL_GPIO_Init+0x2b8>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004840:	4a48      	ldr	r2, [pc, #288]	; (8004964 <HAL_GPIO_Init+0x2bc>)
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	220f      	movs	r2, #15
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a40      	ldr	r2, [pc, #256]	; (8004968 <HAL_GPIO_Init+0x2c0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_GPIO_Init+0x1ec>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3f      	ldr	r2, [pc, #252]	; (800496c <HAL_GPIO_Init+0x2c4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00d      	beq.n	8004890 <HAL_GPIO_Init+0x1e8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3e      	ldr	r2, [pc, #248]	; (8004970 <HAL_GPIO_Init+0x2c8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <HAL_GPIO_Init+0x1e4>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3d      	ldr	r2, [pc, #244]	; (8004974 <HAL_GPIO_Init+0x2cc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_GPIO_Init+0x1e0>
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <HAL_GPIO_Init+0x1ee>
 8004888:	2304      	movs	r3, #4
 800488a:	e004      	b.n	8004896 <HAL_GPIO_Init+0x1ee>
 800488c:	2302      	movs	r3, #2
 800488e:	e002      	b.n	8004896 <HAL_GPIO_Init+0x1ee>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <HAL_GPIO_Init+0x1ee>
 8004894:	2300      	movs	r3, #0
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	f002 0203 	and.w	r2, r2, #3
 800489c:	0092      	lsls	r2, r2, #2
 800489e:	4093      	lsls	r3, r2
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048a6:	492f      	ldr	r1, [pc, #188]	; (8004964 <HAL_GPIO_Init+0x2bc>)
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	3302      	adds	r3, #2
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d006      	beq.n	80048ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	492c      	ldr	r1, [pc, #176]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]
 80048cc:	e006      	b.n	80048dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048ce:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	4928      	ldr	r1, [pc, #160]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048d8:	4013      	ands	r3, r2
 80048da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048e8:	4b23      	ldr	r3, [pc, #140]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	4922      	ldr	r1, [pc, #136]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60cb      	str	r3, [r1, #12]
 80048f4:	e006      	b.n	8004904 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048f6:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	491e      	ldr	r1, [pc, #120]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004900:	4013      	ands	r3, r2
 8004902:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	4918      	ldr	r1, [pc, #96]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
 800491c:	e006      	b.n	800492c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	43db      	mvns	r3, r3
 8004926:	4914      	ldr	r1, [pc, #80]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004928:	4013      	ands	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d021      	beq.n	800497c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	490e      	ldr	r1, [pc, #56]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
 8004944:	e021      	b.n	800498a <HAL_GPIO_Init+0x2e2>
 8004946:	bf00      	nop
 8004948:	10320000 	.word	0x10320000
 800494c:	10310000 	.word	0x10310000
 8004950:	10220000 	.word	0x10220000
 8004954:	10210000 	.word	0x10210000
 8004958:	10120000 	.word	0x10120000
 800495c:	10110000 	.word	0x10110000
 8004960:	40021000 	.word	0x40021000
 8004964:	40010000 	.word	0x40010000
 8004968:	40010800 	.word	0x40010800
 800496c:	40010c00 	.word	0x40010c00
 8004970:	40011000 	.word	0x40011000
 8004974:	40011400 	.word	0x40011400
 8004978:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_GPIO_Init+0x304>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	43db      	mvns	r3, r3
 8004984:	4909      	ldr	r1, [pc, #36]	; (80049ac <HAL_GPIO_Init+0x304>)
 8004986:	4013      	ands	r3, r2
 8004988:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	3301      	adds	r3, #1
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	f47f ae8e 	bne.w	80046bc <HAL_GPIO_Init+0x14>
  }
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	372c      	adds	r7, #44	; 0x2c
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40010400 	.word	0x40010400

080049b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
 80049bc:	4613      	mov	r3, r2
 80049be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049cc:	e003      	b.n	80049d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	041a      	lsls	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	611a      	str	r2, [r3, #16]
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4013      	ands	r3, r2
 80049f8:	041a      	lsls	r2, r3, #16
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	43d9      	mvns	r1, r3
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	400b      	ands	r3, r1
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc fd2e 	bl	8001494 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40010400 	.word	0x40010400

08004a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e272      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8087 	beq.w	8004b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a64:	4b92      	ldr	r3, [pc, #584]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d00c      	beq.n	8004a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a70:	4b8f      	ldr	r3, [pc, #572]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d112      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x5e>
 8004a7c:	4b8c      	ldr	r3, [pc, #560]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a88:	d10b      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8a:	4b89      	ldr	r3, [pc, #548]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d06c      	beq.n	8004b70 <HAL_RCC_OscConfig+0x12c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d168      	bne.n	8004b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e24c      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x76>
 8004aac:	4b80      	ldr	r3, [pc, #512]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a7f      	ldr	r2, [pc, #508]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e02e      	b.n	8004b18 <HAL_RCC_OscConfig+0xd4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0x98>
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a7a      	ldr	r2, [pc, #488]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b78      	ldr	r3, [pc, #480]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a77      	ldr	r2, [pc, #476]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e01d      	b.n	8004b18 <HAL_RCC_OscConfig+0xd4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0xbc>
 8004ae6:	4b72      	ldr	r3, [pc, #456]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a71      	ldr	r2, [pc, #452]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b6f      	ldr	r3, [pc, #444]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6e      	ldr	r2, [pc, #440]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xd4>
 8004b00:	4b6b      	ldr	r3, [pc, #428]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6a      	ldr	r2, [pc, #424]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b68      	ldr	r3, [pc, #416]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a67      	ldr	r2, [pc, #412]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fe fdc8 	bl	80036b4 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fe fdc4 	bl	80036b4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e200      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b5d      	ldr	r3, [pc, #372]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0xe4>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fe fdb4 	bl	80036b4 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fe fdb0 	bl	80036b4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1ec      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x10c>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b7e:	4b4c      	ldr	r3, [pc, #304]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b8a:	4b49      	ldr	r3, [pc, #292]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x18c>
 8004b96:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d116      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x176>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e1c0      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4939      	ldr	r1, [pc, #228]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bce:	e03a      	b.n	8004c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd8:	4b36      	ldr	r3, [pc, #216]	; (8004cb4 <HAL_RCC_OscConfig+0x270>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bde:	f7fe fd69 	bl	80036b4 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be6:	f7fe fd65 	bl	80036b4 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1a1      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4927      	ldr	r1, [pc, #156]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	e015      	b.n	8004c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1a:	4b26      	ldr	r3, [pc, #152]	; (8004cb4 <HAL_RCC_OscConfig+0x270>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fe fd48 	bl	80036b4 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c28:	f7fe fd44 	bl	80036b4 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e180      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d03a      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d019      	beq.n	8004c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5a:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c60:	f7fe fd28 	bl	80036b4 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c68:	f7fe fd24 	bl	80036b4 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e160      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c86:	2001      	movs	r0, #1
 8004c88:	f000 faba 	bl	8005200 <RCC_Delay>
 8004c8c:	e01c      	b.n	8004cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_RCC_OscConfig+0x274>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c94:	f7fe fd0e 	bl	80036b4 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9a:	e00f      	b.n	8004cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fe fd0a 	bl	80036b4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d908      	bls.n	8004cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e146      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	42420000 	.word	0x42420000
 8004cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cbc:	4b92      	ldr	r3, [pc, #584]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e9      	bne.n	8004c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80a6 	beq.w	8004e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cda:	4b8b      	ldr	r3, [pc, #556]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	4b88      	ldr	r3, [pc, #544]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4a87      	ldr	r2, [pc, #540]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	61d3      	str	r3, [r2, #28]
 8004cf2:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d02:	4b82      	ldr	r3, [pc, #520]	; (8004f0c <HAL_RCC_OscConfig+0x4c8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d118      	bne.n	8004d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0e:	4b7f      	ldr	r3, [pc, #508]	; (8004f0c <HAL_RCC_OscConfig+0x4c8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7e      	ldr	r2, [pc, #504]	; (8004f0c <HAL_RCC_OscConfig+0x4c8>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1a:	f7fe fccb 	bl	80036b4 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d22:	f7fe fcc7 	bl	80036b4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b64      	cmp	r3, #100	; 0x64
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e103      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d34:	4b75      	ldr	r3, [pc, #468]	; (8004f0c <HAL_RCC_OscConfig+0x4c8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d106      	bne.n	8004d56 <HAL_RCC_OscConfig+0x312>
 8004d48:	4b6f      	ldr	r3, [pc, #444]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4a6e      	ldr	r2, [pc, #440]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	6213      	str	r3, [r2, #32]
 8004d54:	e02d      	b.n	8004db2 <HAL_RCC_OscConfig+0x36e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x334>
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4a69      	ldr	r2, [pc, #420]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	6213      	str	r3, [r2, #32]
 8004d6a:	4b67      	ldr	r3, [pc, #412]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4a66      	ldr	r2, [pc, #408]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	f023 0304 	bic.w	r3, r3, #4
 8004d74:	6213      	str	r3, [r2, #32]
 8004d76:	e01c      	b.n	8004db2 <HAL_RCC_OscConfig+0x36e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b05      	cmp	r3, #5
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCC_OscConfig+0x356>
 8004d80:	4b61      	ldr	r3, [pc, #388]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	4a60      	ldr	r2, [pc, #384]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	f043 0304 	orr.w	r3, r3, #4
 8004d8a:	6213      	str	r3, [r2, #32]
 8004d8c:	4b5e      	ldr	r3, [pc, #376]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	4a5d      	ldr	r2, [pc, #372]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6213      	str	r3, [r2, #32]
 8004d98:	e00b      	b.n	8004db2 <HAL_RCC_OscConfig+0x36e>
 8004d9a:	4b5b      	ldr	r3, [pc, #364]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	4a5a      	ldr	r2, [pc, #360]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	6213      	str	r3, [r2, #32]
 8004da6:	4b58      	ldr	r3, [pc, #352]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4a57      	ldr	r2, [pc, #348]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	f023 0304 	bic.w	r3, r3, #4
 8004db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d015      	beq.n	8004de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dba:	f7fe fc7b 	bl	80036b4 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc2:	f7fe fc77 	bl	80036b4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0b1      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	4b4b      	ldr	r3, [pc, #300]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ee      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x37e>
 8004de4:	e014      	b.n	8004e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de6:	f7fe fc65 	bl	80036b4 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dec:	e00a      	b.n	8004e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fe fc61 	bl	80036b4 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e09b      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e04:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ee      	bne.n	8004dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4b3c      	ldr	r3, [pc, #240]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	4a3b      	ldr	r2, [pc, #236]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8087 	beq.w	8004f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e2c:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d061      	beq.n	8004efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d146      	bne.n	8004ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e40:	4b33      	ldr	r3, [pc, #204]	; (8004f10 <HAL_RCC_OscConfig+0x4cc>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fe fc35 	bl	80036b4 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4e:	f7fe fc31 	bl	80036b4 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e06d      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e60:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f0      	bne.n	8004e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d108      	bne.n	8004e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e76:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4921      	ldr	r1, [pc, #132]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e88:	4b1f      	ldr	r3, [pc, #124]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a19      	ldr	r1, [r3, #32]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	491b      	ldr	r1, [pc, #108]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <HAL_RCC_OscConfig+0x4cc>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7fe fc05 	bl	80036b4 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fe fc01 	bl	80036b4 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e03d      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec0:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x46a>
 8004ecc:	e035      	b.n	8004f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ece:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <HAL_RCC_OscConfig+0x4cc>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fbee 	bl	80036b4 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fe fbea 	bl	80036b4 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e026      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x498>
 8004efa:	e01e      	b.n	8004f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e019      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCC_OscConfig+0x500>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d106      	bne.n	8004f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000

08004f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0d0      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b6a      	ldr	r3, [pc, #424]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d910      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b67      	ldr	r3, [pc, #412]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 0207 	bic.w	r2, r3, #7
 8004f72:	4965      	ldr	r1, [pc, #404]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b63      	ldr	r3, [pc, #396]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0b8      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d020      	beq.n	8004fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa4:	4b59      	ldr	r3, [pc, #356]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a58      	ldr	r2, [pc, #352]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004faa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fbc:	4b53      	ldr	r3, [pc, #332]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a52      	ldr	r2, [pc, #328]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc8:	4b50      	ldr	r3, [pc, #320]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	494d      	ldr	r1, [pc, #308]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d040      	beq.n	8005068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b47      	ldr	r3, [pc, #284]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d115      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e07f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d107      	bne.n	8005016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005006:	4b41      	ldr	r3, [pc, #260]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e073      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005016:	4b3d      	ldr	r3, [pc, #244]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e06b      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f023 0203 	bic.w	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4936      	ldr	r1, [pc, #216]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005038:	f7fe fb3c 	bl	80036b4 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	e00a      	b.n	8005056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005040:	f7fe fb38 	bl	80036b4 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	; 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e053      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005056:	4b2d      	ldr	r3, [pc, #180]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 020c 	and.w	r2, r3, #12
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	429a      	cmp	r2, r3
 8005066:	d1eb      	bne.n	8005040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005068:	4b27      	ldr	r3, [pc, #156]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d210      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005076:	4b24      	ldr	r3, [pc, #144]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f023 0207 	bic.w	r2, r3, #7
 800507e:	4922      	ldr	r1, [pc, #136]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	4313      	orrs	r3, r2
 8005084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e032      	b.n	80050fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4916      	ldr	r1, [pc, #88]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	490e      	ldr	r1, [pc, #56]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050d6:	f000 f821 	bl	800511c <HAL_RCC_GetSysClockFreq>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	490a      	ldr	r1, [pc, #40]	; (8005110 <HAL_RCC_ClockConfig+0x1c8>)
 80050e8:	5ccb      	ldrb	r3, [r1, r3]
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <HAL_RCC_ClockConfig+0x1cc>)
 80050f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_RCC_ClockConfig+0x1d0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fa9a 	bl	8003630 <HAL_InitTick>

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40022000 	.word	0x40022000
 800510c:	40021000 	.word	0x40021000
 8005110:	08007ae8 	.word	0x08007ae8
 8005114:	20000174 	.word	0x20000174
 8005118:	20000178 	.word	0x20000178

0800511c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	2300      	movs	r3, #0
 8005130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005136:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b04      	cmp	r3, #4
 8005144:	d002      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x30>
 8005146:	2b08      	cmp	r3, #8
 8005148:	d003      	beq.n	8005152 <HAL_RCC_GetSysClockFreq+0x36>
 800514a:	e027      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800514e:	613b      	str	r3, [r7, #16]
      break;
 8005150:	e027      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	0c9b      	lsrs	r3, r3, #18
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800515c:	5cd3      	ldrb	r3, [r2, r3]
 800515e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800516a:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	0c5b      	lsrs	r3, r3, #17
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	4a11      	ldr	r2, [pc, #68]	; (80051bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a0d      	ldr	r2, [pc, #52]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800517e:	fb03 f202 	mul.w	r2, r3, r2
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e004      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	613b      	str	r3, [r7, #16]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800519e:	613b      	str	r3, [r7, #16]
      break;
 80051a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a2:	693b      	ldr	r3, [r7, #16]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000
 80051b4:	007a1200 	.word	0x007a1200
 80051b8:	08007b00 	.word	0x08007b00
 80051bc:	08007b10 	.word	0x08007b10
 80051c0:	003d0900 	.word	0x003d0900

080051c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b02      	ldr	r3, [pc, #8]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	20000174 	.word	0x20000174

080051d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051dc:	f7ff fff2 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	0adb      	lsrs	r3, r3, #11
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40021000 	.word	0x40021000
 80051fc:	08007af8 	.word	0x08007af8

08005200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <RCC_Delay+0x34>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <RCC_Delay+0x38>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	0a5b      	lsrs	r3, r3, #9
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800521c:	bf00      	nop
  }
  while (Delay --);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	60fa      	str	r2, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f9      	bne.n	800521c <RCC_Delay+0x1c>
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	20000174 	.word	0x20000174
 8005238:	10624dd3 	.word	0x10624dd3

0800523c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d07d      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005258:	2300      	movs	r3, #0
 800525a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525c:	4b4f      	ldr	r3, [pc, #316]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10d      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005268:	4b4c      	ldr	r3, [pc, #304]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	4a4b      	ldr	r2, [pc, #300]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005272:	61d3      	str	r3, [r2, #28]
 8005274:	4b49      	ldr	r3, [pc, #292]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005280:	2301      	movs	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005284:	4b46      	ldr	r3, [pc, #280]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d118      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005290:	4b43      	ldr	r3, [pc, #268]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a42      	ldr	r2, [pc, #264]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529c:	f7fe fa0a 	bl	80036b4 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a2:	e008      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a4:	f7fe fa06 	bl	80036b4 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e06d      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b6:	4b3a      	ldr	r3, [pc, #232]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052c2:	4b36      	ldr	r3, [pc, #216]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02e      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d027      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052e0:	4b2e      	ldr	r3, [pc, #184]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ea:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052f0:	4b2c      	ldr	r3, [pc, #176]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052f6:	4a29      	ldr	r2, [pc, #164]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d014      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005306:	f7fe f9d5 	bl	80036b4 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530c:	e00a      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fe f9d1 	bl	80036b4 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f241 3288 	movw	r2, #5000	; 0x1388
 800531c:	4293      	cmp	r3, r2
 800531e:	d901      	bls.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e036      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005324:	4b1d      	ldr	r3, [pc, #116]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ee      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005330:	4b1a      	ldr	r3, [pc, #104]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4917      	ldr	r1, [pc, #92]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533e:	4313      	orrs	r3, r2
 8005340:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d105      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005348:	4b14      	ldr	r3, [pc, #80]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	4a13      	ldr	r2, [pc, #76]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005352:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	490b      	ldr	r1, [pc, #44]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536e:	4313      	orrs	r3, r2
 8005370:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	4904      	ldr	r1, [pc, #16]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538c:	4313      	orrs	r3, r2
 800538e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	40007000 	.word	0x40007000
 80053a4:	42420440 	.word	0x42420440

080053a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	f200 808a 	bhi.w	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d045      	beq.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d075      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80053de:	e082      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80053e0:	4b46      	ldr	r3, [pc, #280]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80053e6:	4b45      	ldr	r3, [pc, #276]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d07b      	beq.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	0c9b      	lsrs	r3, r3, #18
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	4a41      	ldr	r2, [pc, #260]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80053fc:	5cd3      	ldrb	r3, [r2, r3]
 80053fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d015      	beq.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800540a:	4b3c      	ldr	r3, [pc, #240]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	0c5b      	lsrs	r3, r3, #17
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	4a3b      	ldr	r2, [pc, #236]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005424:	4a38      	ldr	r2, [pc, #224]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	fbb2 f2f3 	udiv	r2, r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	fb02 f303 	mul.w	r3, r2, r3
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	e004      	b.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4a34      	ldr	r2, [pc, #208]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005440:	4b2e      	ldr	r3, [pc, #184]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544c:	d102      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	61bb      	str	r3, [r7, #24]
      break;
 8005452:	e04a      	b.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4a2d      	ldr	r2, [pc, #180]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	61bb      	str	r3, [r7, #24]
      break;
 8005462:	e042      	b.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005464:	4b25      	ldr	r3, [pc, #148]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005474:	d108      	bne.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e01f      	b.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005492:	d109      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005494:	4b19      	ldr	r3, [pc, #100]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80054a0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	e00f      	b.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b2:	d11c      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80054b4:	4b11      	ldr	r3, [pc, #68]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d016      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80054c0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80054c4:	61bb      	str	r3, [r7, #24]
      break;
 80054c6:	e012      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80054c8:	e011      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80054ca:	f7ff fe85 	bl	80051d8 <HAL_RCC_GetPCLK2Freq>
 80054ce:	4602      	mov	r2, r0
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	0b9b      	lsrs	r3, r3, #14
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	3301      	adds	r3, #1
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	61bb      	str	r3, [r7, #24]
      break;
 80054e4:	e004      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054ee:	bf00      	nop
    }
  }
  return (frequency);
 80054f0:	69bb      	ldr	r3, [r7, #24]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40021000 	.word	0x40021000
 8005500:	08007b14 	.word	0x08007b14
 8005504:	08007b24 	.word	0x08007b24
 8005508:	007a1200 	.word	0x007a1200
 800550c:	003d0900 	.word	0x003d0900
 8005510:	aaaaaaab 	.word	0xaaaaaaab

08005514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e041      	b.n	80055aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fd ff30 	bl	80033a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 fed0 	bl	80062f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d001      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e03a      	b.n	8005642 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_TIM_Base_Start_IT+0x98>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x58>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f6:	d009      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x58>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a14      	ldr	r2, [pc, #80]	; (8005650 <HAL_TIM_Base_Start_IT+0x9c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x58>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a13      	ldr	r2, [pc, #76]	; (8005654 <HAL_TIM_Base_Start_IT+0xa0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d111      	bne.n	8005630 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b06      	cmp	r3, #6
 800561c:	d010      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562e:	e007      	b.n	8005640 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800

08005658 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e041      	b.n	80056ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f839 	bl	80056f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f000 fe2e 	bl	80062f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	bf0c      	ite	eq
 800572c:	2301      	moveq	r3, #1
 800572e:	2300      	movne	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	e022      	b.n	800577a <HAL_TIM_PWM_Start_DMA+0x72>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b04      	cmp	r3, #4
 8005738:	d109      	bne.n	800574e <HAL_TIM_PWM_Start_DMA+0x46>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e015      	b.n	800577a <HAL_TIM_PWM_Start_DMA+0x72>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b08      	cmp	r3, #8
 8005752:	d109      	bne.n	8005768 <HAL_TIM_PWM_Start_DMA+0x60>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	e008      	b.n	800577a <HAL_TIM_PWM_Start_DMA+0x72>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	bf0c      	ite	eq
 8005774:	2301      	moveq	r3, #1
 8005776:	2300      	movne	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
 8005780:	e153      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <HAL_TIM_PWM_Start_DMA+0x94>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e022      	b.n	80057e2 <HAL_TIM_PWM_Start_DMA+0xda>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d109      	bne.n	80057b6 <HAL_TIM_PWM_Start_DMA+0xae>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	bf0c      	ite	eq
 80057ae:	2301      	moveq	r3, #1
 80057b0:	2300      	movne	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	e015      	b.n	80057e2 <HAL_TIM_PWM_Start_DMA+0xda>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d109      	bne.n	80057d0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	e008      	b.n	80057e2 <HAL_TIM_PWM_Start_DMA+0xda>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d024      	beq.n	8005830 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_TIM_PWM_Start_DMA+0xea>
 80057ec:	887b      	ldrh	r3, [r7, #2]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e119      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start_DMA+0xfe>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005804:	e016      	b.n	8005834 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b04      	cmp	r3, #4
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Start_DMA+0x10e>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005814:	e00e      	b.n	8005834 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start_DMA+0x11e>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005824:	e006      	b.n	8005834 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800582e:	e001      	b.n	8005834 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0fa      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b0c      	cmp	r3, #12
 8005838:	f200 80ae 	bhi.w	8005998 <HAL_TIM_PWM_Start_DMA+0x290>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005879 	.word	0x08005879
 8005848:	08005999 	.word	0x08005999
 800584c:	08005999 	.word	0x08005999
 8005850:	08005999 	.word	0x08005999
 8005854:	080058c1 	.word	0x080058c1
 8005858:	08005999 	.word	0x08005999
 800585c:	08005999 	.word	0x08005999
 8005860:	08005999 	.word	0x08005999
 8005864:	08005909 	.word	0x08005909
 8005868:	08005999 	.word	0x08005999
 800586c:	08005999 	.word	0x08005999
 8005870:	08005999 	.word	0x08005999
 8005874:	08005951 	.word	0x08005951
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	4a6d      	ldr	r2, [pc, #436]	; (8005a34 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	4a6c      	ldr	r2, [pc, #432]	; (8005a38 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	4a6b      	ldr	r2, [pc, #428]	; (8005a3c <HAL_TIM_PWM_Start_DMA+0x334>)
 800588e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3334      	adds	r3, #52	; 0x34
 800589c:	461a      	mov	r2, r3
 800589e:	887b      	ldrh	r3, [r7, #2]
 80058a0:	f7fe fcf6 	bl	8004290 <HAL_DMA_Start_IT>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e0bd      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058bc:	60da      	str	r2, [r3, #12]
      break;
 80058be:	e06e      	b.n	800599e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	4a5b      	ldr	r2, [pc, #364]	; (8005a34 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	4a5a      	ldr	r2, [pc, #360]	; (8005a38 <HAL_TIM_PWM_Start_DMA+0x330>)
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	4a59      	ldr	r2, [pc, #356]	; (8005a3c <HAL_TIM_PWM_Start_DMA+0x334>)
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3338      	adds	r3, #56	; 0x38
 80058e4:	461a      	mov	r2, r3
 80058e6:	887b      	ldrh	r3, [r7, #2]
 80058e8:	f7fe fcd2 	bl	8004290 <HAL_DMA_Start_IT>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e099      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005904:	60da      	str	r2, [r3, #12]
      break;
 8005906:	e04a      	b.n	800599e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	4a49      	ldr	r2, [pc, #292]	; (8005a34 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800590e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4a48      	ldr	r2, [pc, #288]	; (8005a38 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005916:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4a47      	ldr	r2, [pc, #284]	; (8005a3c <HAL_TIM_PWM_Start_DMA+0x334>)
 800591e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	333c      	adds	r3, #60	; 0x3c
 800592c:	461a      	mov	r2, r3
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	f7fe fcae 	bl	8004290 <HAL_DMA_Start_IT>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e075      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594c:	60da      	str	r2, [r3, #12]
      break;
 800594e:	e026      	b.n	800599e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	4a37      	ldr	r2, [pc, #220]	; (8005a34 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	4a36      	ldr	r2, [pc, #216]	; (8005a38 <HAL_TIM_PWM_Start_DMA+0x330>)
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	4a35      	ldr	r2, [pc, #212]	; (8005a3c <HAL_TIM_PWM_Start_DMA+0x334>)
 8005966:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3340      	adds	r3, #64	; 0x40
 8005974:	461a      	mov	r2, r3
 8005976:	887b      	ldrh	r3, [r7, #2]
 8005978:	f7fe fc8a 	bl	8004290 <HAL_DMA_Start_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e051      	b.n	8005a2a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005994:	60da      	str	r2, [r3, #12]
      break;
 8005996:	e002      	b.n	800599e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	bf00      	nop
  }

  if (status == HAL_OK)
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d141      	bne.n	8005a28 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 ff23 	bl	80067f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <HAL_TIM_PWM_Start_DMA+0x338>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <HAL_TIM_PWM_Start_DMA+0x338>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00e      	beq.n	80059f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d009      	beq.n	80059f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <HAL_TIM_PWM_Start_DMA+0x340>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d111      	bne.n	8005a18 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d010      	beq.n	8005a28 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0201 	orr.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	e007      	b.n	8005a28 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	080061e7 	.word	0x080061e7
 8005a38:	0800628f 	.word	0x0800628f
 8005a3c:	08006155 	.word	0x08006155
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800

08005a4c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b0c      	cmp	r3, #12
 8005a5e:	d855      	bhi.n	8005b0c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a9d 	.word	0x08005a9d
 8005a6c:	08005b0d 	.word	0x08005b0d
 8005a70:	08005b0d 	.word	0x08005b0d
 8005a74:	08005b0d 	.word	0x08005b0d
 8005a78:	08005ab9 	.word	0x08005ab9
 8005a7c:	08005b0d 	.word	0x08005b0d
 8005a80:	08005b0d 	.word	0x08005b0d
 8005a84:	08005b0d 	.word	0x08005b0d
 8005a88:	08005ad5 	.word	0x08005ad5
 8005a8c:	08005b0d 	.word	0x08005b0d
 8005a90:	08005b0d 	.word	0x08005b0d
 8005a94:	08005b0d 	.word	0x08005b0d
 8005a98:	08005af1 	.word	0x08005af1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005aaa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe fc4d 	bl	8004350 <HAL_DMA_Abort_IT>
      break;
 8005ab6:	e02c      	b.n	8005b12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fc3f 	bl	8004350 <HAL_DMA_Abort_IT>
      break;
 8005ad2:	e01e      	b.n	8005b12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe fc31 	bl	8004350 <HAL_DMA_Abort_IT>
      break;
 8005aee:	e010      	b.n	8005b12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005afe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fc23 	bl	8004350 <HAL_DMA_Abort_IT>
      break;
 8005b0a:	e002      	b.n	8005b12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b10:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d157      	bne.n	8005bc8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fe69 	bl	80067f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2a      	ldr	r2, [pc, #168]	; (8005bd4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d117      	bne.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10f      	bne.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	f240 4344 	movw	r3, #1092	; 0x444
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a1a      	ldr	r2, [r3, #32]
 8005b66:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10f      	bne.n	8005b90 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6a1a      	ldr	r2, [r3, #32]
 8005b76:	f240 4344 	movw	r3, #1092	; 0x444
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9e:	e013      	b.n	8005bc8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d104      	bne.n	8005bb0 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bae:	e00b      	b.n	8005bc8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d104      	bne.n	8005bc0 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbe:	e003      	b.n	8005bc8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40012c00 	.word	0x40012c00

08005bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d122      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d11b      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0202 	mvn.w	r2, #2
 8005c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fa76 	bl	800610c <HAL_TIM_IC_CaptureCallback>
 8005c20:	e005      	b.n	8005c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa69 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fc ffd5 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d122      	bne.n	8005c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d11b      	bne.n	8005c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0204 	mvn.w	r2, #4
 8005c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa4c 	bl	800610c <HAL_TIM_IC_CaptureCallback>
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa3f 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fc ffab 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d122      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d11b      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0208 	mvn.w	r2, #8
 8005cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa22 	bl	800610c <HAL_TIM_IC_CaptureCallback>
 8005cc8:	e005      	b.n	8005cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa15 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fc ff81 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d122      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	d11b      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0210 	mvn.w	r2, #16
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2208      	movs	r2, #8
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9f8 	bl	800610c <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9eb 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fc ff57 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d10e      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d107      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0201 	mvn.w	r2, #1
 8005d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc ffbc 	bl	8002cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	2b80      	cmp	r3, #128	; 0x80
 8005d68:	d10e      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d107      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fe14 	bl	80069b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	d10e      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d107      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9be 	bl	8006130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d10e      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d107      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0220 	mvn.w	r2, #32
 8005dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fddf 	bl	800699e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e0ae      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	f200 809f 	bhi.w	8005f54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e51 	.word	0x08005e51
 8005e20:	08005f55 	.word	0x08005f55
 8005e24:	08005f55 	.word	0x08005f55
 8005e28:	08005f55 	.word	0x08005f55
 8005e2c:	08005e91 	.word	0x08005e91
 8005e30:	08005f55 	.word	0x08005f55
 8005e34:	08005f55 	.word	0x08005f55
 8005e38:	08005f55 	.word	0x08005f55
 8005e3c:	08005ed3 	.word	0x08005ed3
 8005e40:	08005f55 	.word	0x08005f55
 8005e44:	08005f55 	.word	0x08005f55
 8005e48:	08005f55 	.word	0x08005f55
 8005e4c:	08005f13 	.word	0x08005f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fab0 	bl	80063bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0208 	orr.w	r2, r2, #8
 8005e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0204 	bic.w	r2, r2, #4
 8005e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6999      	ldr	r1, [r3, #24]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	619a      	str	r2, [r3, #24]
      break;
 8005e8e:	e064      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 faf6 	bl	8006488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6999      	ldr	r1, [r3, #24]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	021a      	lsls	r2, r3, #8
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	619a      	str	r2, [r3, #24]
      break;
 8005ed0:	e043      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fb3f 	bl	800655c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0208 	orr.w	r2, r2, #8
 8005eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0204 	bic.w	r2, r2, #4
 8005efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69d9      	ldr	r1, [r3, #28]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	61da      	str	r2, [r3, #28]
      break;
 8005f10:	e023      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fb89 	bl	8006630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69d9      	ldr	r1, [r3, #28]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	021a      	lsls	r2, r3, #8
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	61da      	str	r2, [r3, #28]
      break;
 8005f52:	e002      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
      break;
 8005f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_TIM_ConfigClockSource+0x1c>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e0b4      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x186>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc0:	d03e      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0xd4>
 8005fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc6:	f200 8087 	bhi.w	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fce:	f000 8086 	beq.w	80060de <HAL_TIM_ConfigClockSource+0x172>
 8005fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd6:	d87f      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd8:	2b70      	cmp	r3, #112	; 0x70
 8005fda:	d01a      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0xa6>
 8005fdc:	2b70      	cmp	r3, #112	; 0x70
 8005fde:	d87b      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe0:	2b60      	cmp	r3, #96	; 0x60
 8005fe2:	d050      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x11a>
 8005fe4:	2b60      	cmp	r3, #96	; 0x60
 8005fe6:	d877      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe8:	2b50      	cmp	r3, #80	; 0x50
 8005fea:	d03c      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0xfa>
 8005fec:	2b50      	cmp	r3, #80	; 0x50
 8005fee:	d873      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d058      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x13a>
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d86f      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff8:	2b30      	cmp	r3, #48	; 0x30
 8005ffa:	d064      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ffc:	2b30      	cmp	r3, #48	; 0x30
 8005ffe:	d86b      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006000:	2b20      	cmp	r3, #32
 8006002:	d060      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006004:	2b20      	cmp	r3, #32
 8006006:	d867      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d05c      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x15a>
 800600c:	2b10      	cmp	r3, #16
 800600e:	d05a      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006010:	e062      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006022:	f000 fbca 	bl	80067ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	609a      	str	r2, [r3, #8]
      break;
 800603e:	e04f      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006050:	f000 fbb3 	bl	80067ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006062:	609a      	str	r2, [r3, #8]
      break;
 8006064:	e03c      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006072:	461a      	mov	r2, r3
 8006074:	f000 fb2a 	bl	80066cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2150      	movs	r1, #80	; 0x50
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fb81 	bl	8006786 <TIM_ITRx_SetConfig>
      break;
 8006084:	e02c      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006092:	461a      	mov	r2, r3
 8006094:	f000 fb48 	bl	8006728 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2160      	movs	r1, #96	; 0x60
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fb71 	bl	8006786 <TIM_ITRx_SetConfig>
      break;
 80060a4:	e01c      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b2:	461a      	mov	r2, r3
 80060b4:	f000 fb0a 	bl	80066cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2140      	movs	r1, #64	; 0x40
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fb61 	bl	8006786 <TIM_ITRx_SetConfig>
      break;
 80060c4:	e00c      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f000 fb58 	bl	8006786 <TIM_ITRx_SetConfig>
      break;
 80060d6:	e003      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
      break;
 80060dc:	e000      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr

08006142 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d107      	bne.n	800617c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800617a:	e02a      	b.n	80061d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d107      	bne.n	8006196 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2202      	movs	r2, #2
 800618a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006194:	e01d      	b.n	80061d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d107      	bne.n	80061b0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2204      	movs	r2, #4
 80061a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ae:	e010      	b.n	80061d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d107      	bne.n	80061ca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2208      	movs	r2, #8
 80061be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061c8:	e003      	b.n	80061d2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff ffb5 	bl	8006142 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	771a      	strb	r2, [r3, #28]
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d10b      	bne.n	8006216 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d136      	bne.n	800627a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006214:	e031      	b.n	800627a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	429a      	cmp	r2, r3
 800621e:	d10b      	bne.n	8006238 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2202      	movs	r2, #2
 8006224:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d125      	bne.n	800627a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006236:	e020      	b.n	800627a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	429a      	cmp	r2, r3
 8006240:	d10b      	bne.n	800625a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2204      	movs	r2, #4
 8006246:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d114      	bne.n	800627a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006258:	e00f      	b.n	800627a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d10a      	bne.n	800627a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2208      	movs	r2, #8
 8006268:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7fc fcac 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	771a      	strb	r2, [r3, #28]
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d103      	bne.n	80062ae <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	771a      	strb	r2, [r3, #28]
 80062ac:	e019      	b.n	80062e2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d103      	bne.n	80062c0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2202      	movs	r2, #2
 80062bc:	771a      	strb	r2, [r3, #28]
 80062be:	e010      	b.n	80062e2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d103      	bne.n	80062d2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2204      	movs	r2, #4
 80062ce:	771a      	strb	r2, [r3, #28]
 80062d0:	e007      	b.n	80062e2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d102      	bne.n	80062e2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2208      	movs	r2, #8
 80062e0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff ff1b 	bl	800611e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	771a      	strb	r2, [r3, #28]
}
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <TIM_Base_SetConfig+0xb8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0x30>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0x30>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <TIM_Base_SetConfig+0xbc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0x30>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <TIM_Base_SetConfig+0xc0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1c      	ldr	r2, [pc, #112]	; (80063b0 <TIM_Base_SetConfig+0xb8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00b      	beq.n	800635a <TIM_Base_SetConfig+0x62>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d007      	beq.n	800635a <TIM_Base_SetConfig+0x62>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <TIM_Base_SetConfig+0xbc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_Base_SetConfig+0x62>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <TIM_Base_SetConfig+0xc0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d108      	bne.n	800636c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <TIM_Base_SetConfig+0xb8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d103      	bne.n	80063a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	615a      	str	r2, [r3, #20]
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	40000400 	.word	0x40000400
 80063b8:	40000800 	.word	0x40000800

080063bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	f023 0201 	bic.w	r2, r3, #1
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 0302 	bic.w	r3, r3, #2
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <TIM_OC1_SetConfig+0xc8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d10c      	bne.n	8006432 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0308 	bic.w	r3, r3, #8
 800641e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 0304 	bic.w	r3, r3, #4
 8006430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a13      	ldr	r2, [pc, #76]	; (8006484 <TIM_OC1_SetConfig+0xc8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d111      	bne.n	800645e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	621a      	str	r2, [r3, #32]
}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00

08006488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f023 0210 	bic.w	r2, r3, #16
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0320 	bic.w	r3, r3, #32
 80064d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <TIM_OC2_SetConfig+0xd0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10d      	bne.n	8006504 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a14      	ldr	r2, [pc, #80]	; (8006558 <TIM_OC2_SetConfig+0xd0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d113      	bne.n	8006534 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr
 8006558:	40012c00 	.word	0x40012c00

0800655c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0303 	bic.w	r3, r3, #3
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1d      	ldr	r2, [pc, #116]	; (800662c <TIM_OC3_SetConfig+0xd0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10d      	bne.n	80065d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <TIM_OC3_SetConfig+0xd0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d113      	bne.n	8006606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40012c00 	.word	0x40012c00

08006630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800667a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <TIM_OC4_SetConfig+0x98>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d109      	bne.n	80066a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	019b      	lsls	r3, r3, #6
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00

080066cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f023 0201 	bic.w	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f023 030a 	bic.w	r3, r3, #10
 8006708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f023 0210 	bic.w	r2, r3, #16
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	031b      	lsls	r3, r3, #12
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006764:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr

08006786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f043 0307 	orr.w	r3, r3, #7
 80067a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	609a      	str	r2, [r3, #8]
}
 80067b0:	bf00      	nop
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b087      	sub	sp, #28
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	021a      	lsls	r2, r3, #8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	431a      	orrs	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	609a      	str	r2, [r3, #8]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	2201      	movs	r2, #1
 800680c:	fa02 f303 	lsl.w	r3, r2, r3
 8006810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a1a      	ldr	r2, [r3, #32]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	43db      	mvns	r3, r3
 800681a:	401a      	ands	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1a      	ldr	r2, [r3, #32]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	fa01 f303 	lsl.w	r3, r1, r3
 8006830:	431a      	orrs	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	621a      	str	r2, [r3, #32]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr

08006840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006854:	2302      	movs	r3, #2
 8006856:	e046      	b.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a4:	d009      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a12      	ldr	r2, [pc, #72]	; (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a10      	ldr	r2, [pc, #64]	; (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d10c      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800

080068fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006914:	2302      	movs	r3, #2
 8006916:	e03d      	b.n	8006994 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr

080069c2 <memset>:
 80069c2:	4603      	mov	r3, r0
 80069c4:	4402      	add	r2, r0
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d100      	bne.n	80069cc <memset+0xa>
 80069ca:	4770      	bx	lr
 80069cc:	f803 1b01 	strb.w	r1, [r3], #1
 80069d0:	e7f9      	b.n	80069c6 <memset+0x4>
	...

080069d4 <__libc_init_array>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	2600      	movs	r6, #0
 80069d8:	4d0c      	ldr	r5, [pc, #48]	; (8006a0c <__libc_init_array+0x38>)
 80069da:	4c0d      	ldr	r4, [pc, #52]	; (8006a10 <__libc_init_array+0x3c>)
 80069dc:	1b64      	subs	r4, r4, r5
 80069de:	10a4      	asrs	r4, r4, #2
 80069e0:	42a6      	cmp	r6, r4
 80069e2:	d109      	bne.n	80069f8 <__libc_init_array+0x24>
 80069e4:	f001 f874 	bl	8007ad0 <_init>
 80069e8:	2600      	movs	r6, #0
 80069ea:	4d0a      	ldr	r5, [pc, #40]	; (8006a14 <__libc_init_array+0x40>)
 80069ec:	4c0a      	ldr	r4, [pc, #40]	; (8006a18 <__libc_init_array+0x44>)
 80069ee:	1b64      	subs	r4, r4, r5
 80069f0:	10a4      	asrs	r4, r4, #2
 80069f2:	42a6      	cmp	r6, r4
 80069f4:	d105      	bne.n	8006a02 <__libc_init_array+0x2e>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fc:	4798      	blx	r3
 80069fe:	3601      	adds	r6, #1
 8006a00:	e7ee      	b.n	80069e0 <__libc_init_array+0xc>
 8006a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a06:	4798      	blx	r3
 8006a08:	3601      	adds	r6, #1
 8006a0a:	e7f2      	b.n	80069f2 <__libc_init_array+0x1e>
 8006a0c:	08007d00 	.word	0x08007d00
 8006a10:	08007d00 	.word	0x08007d00
 8006a14:	08007d00 	.word	0x08007d00
 8006a18:	08007d04 	.word	0x08007d04

08006a1c <tan>:
 8006a1c:	b530      	push	{r4, r5, lr}
 8006a1e:	4a12      	ldr	r2, [pc, #72]	; (8006a68 <tan+0x4c>)
 8006a20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a24:	4293      	cmp	r3, r2
 8006a26:	b087      	sub	sp, #28
 8006a28:	dc06      	bgt.n	8006a38 <tan+0x1c>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	2300      	movs	r3, #0
 8006a32:	f000 f81d 	bl	8006a70 <__kernel_tan>
 8006a36:	e006      	b.n	8006a46 <tan+0x2a>
 8006a38:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <tan+0x50>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	dd05      	ble.n	8006a4a <tan+0x2e>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	f7f9 fb89 	bl	8000158 <__aeabi_dsub>
 8006a46:	b007      	add	sp, #28
 8006a48:	bd30      	pop	{r4, r5, pc}
 8006a4a:	aa02      	add	r2, sp, #8
 8006a4c:	f000 fa0c 	bl	8006e68 <__ieee754_rem_pio2>
 8006a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a54:	0040      	lsls	r0, r0, #1
 8006a56:	f000 0002 	and.w	r0, r0, #2
 8006a5a:	f1c0 0001 	rsb	r0, r0, #1
 8006a5e:	9000      	str	r0, [sp, #0]
 8006a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a64:	e7e5      	b.n	8006a32 <tan+0x16>
 8006a66:	bf00      	nop
 8006a68:	3fe921fb 	.word	0x3fe921fb
 8006a6c:	7fefffff 	.word	0x7fefffff

08006a70 <__kernel_tan>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	b08b      	sub	sp, #44	; 0x2c
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	4bd9      	ldr	r3, [pc, #868]	; (8006de0 <__kernel_tan+0x370>)
 8006a7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006a7e:	429e      	cmp	r6, r3
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	4682      	mov	sl, r0
 8006a86:	468b      	mov	fp, r1
 8006a88:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006a8a:	9202      	str	r2, [sp, #8]
 8006a8c:	9107      	str	r1, [sp, #28]
 8006a8e:	dc58      	bgt.n	8006b42 <__kernel_tan+0xd2>
 8006a90:	f7f9 ffb4 	bl	80009fc <__aeabi_d2iz>
 8006a94:	4605      	mov	r5, r0
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d178      	bne.n	8006b8c <__kernel_tan+0x11c>
 8006a9a:	1c7b      	adds	r3, r7, #1
 8006a9c:	4323      	orrs	r3, r4
 8006a9e:	4333      	orrs	r3, r6
 8006aa0:	d110      	bne.n	8006ac4 <__kernel_tan+0x54>
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	4659      	mov	r1, fp
 8006aa6:	f000 fbd3 	bl	8007250 <fabs>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	2000      	movs	r0, #0
 8006ab0:	49cc      	ldr	r1, [pc, #816]	; (8006de4 <__kernel_tan+0x374>)
 8006ab2:	f7f9 fe33 	bl	800071c <__aeabi_ddiv>
 8006ab6:	4682      	mov	sl, r0
 8006ab8:	468b      	mov	fp, r1
 8006aba:	4650      	mov	r0, sl
 8006abc:	4659      	mov	r1, fp
 8006abe:	b00b      	add	sp, #44	; 0x2c
 8006ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac4:	2f01      	cmp	r7, #1
 8006ac6:	d0f8      	beq.n	8006aba <__kernel_tan+0x4a>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	4659      	mov	r1, fp
 8006acc:	9a02      	ldr	r2, [sp, #8]
 8006ace:	9b00      	ldr	r3, [sp, #0]
 8006ad0:	f7f9 fb44 	bl	800015c <__adddf3>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	460f      	mov	r7, r1
 8006ada:	2000      	movs	r0, #0
 8006adc:	49c2      	ldr	r1, [pc, #776]	; (8006de8 <__kernel_tan+0x378>)
 8006ade:	f7f9 fe1d 	bl	800071c <__aeabi_ddiv>
 8006ae2:	462e      	mov	r6, r5
 8006ae4:	4689      	mov	r9, r1
 8006ae6:	4652      	mov	r2, sl
 8006ae8:	465b      	mov	r3, fp
 8006aea:	4680      	mov	r8, r0
 8006aec:	462c      	mov	r4, r5
 8006aee:	4630      	mov	r0, r6
 8006af0:	460d      	mov	r5, r1
 8006af2:	4639      	mov	r1, r7
 8006af4:	f7f9 fb30 	bl	8000158 <__aeabi_dsub>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	9802      	ldr	r0, [sp, #8]
 8006afe:	9900      	ldr	r1, [sp, #0]
 8006b00:	f7f9 fb2a 	bl	8000158 <__aeabi_dsub>
 8006b04:	4632      	mov	r2, r6
 8006b06:	464b      	mov	r3, r9
 8006b08:	f7f9 fcde 	bl	80004c8 <__aeabi_dmul>
 8006b0c:	4632      	mov	r2, r6
 8006b0e:	4682      	mov	sl, r0
 8006b10:	468b      	mov	fp, r1
 8006b12:	464b      	mov	r3, r9
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 fcd6 	bl	80004c8 <__aeabi_dmul>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4bb1      	ldr	r3, [pc, #708]	; (8006de4 <__kernel_tan+0x374>)
 8006b20:	f7f9 fb1c 	bl	800015c <__adddf3>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4650      	mov	r0, sl
 8006b2a:	4659      	mov	r1, fp
 8006b2c:	f7f9 fb16 	bl	800015c <__adddf3>
 8006b30:	4642      	mov	r2, r8
 8006b32:	464b      	mov	r3, r9
 8006b34:	f7f9 fcc8 	bl	80004c8 <__aeabi_dmul>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f7f9 fb0e 	bl	800015c <__adddf3>
 8006b40:	e7b9      	b.n	8006ab6 <__kernel_tan+0x46>
 8006b42:	4baa      	ldr	r3, [pc, #680]	; (8006dec <__kernel_tan+0x37c>)
 8006b44:	429e      	cmp	r6, r3
 8006b46:	dd21      	ble.n	8006b8c <__kernel_tan+0x11c>
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	da06      	bge.n	8006b5a <__kernel_tan+0xea>
 8006b4c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b50:	469b      	mov	fp, r3
 8006b52:	9b00      	ldr	r3, [sp, #0]
 8006b54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4652      	mov	r2, sl
 8006b5c:	a182      	add	r1, pc, #520	; (adr r1, 8006d68 <__kernel_tan+0x2f8>)
 8006b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b62:	465b      	mov	r3, fp
 8006b64:	f7f9 faf8 	bl	8000158 <__aeabi_dsub>
 8006b68:	4604      	mov	r4, r0
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	a180      	add	r1, pc, #512	; (adr r1, 8006d70 <__kernel_tan+0x300>)
 8006b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b72:	9a02      	ldr	r2, [sp, #8]
 8006b74:	9b00      	ldr	r3, [sp, #0]
 8006b76:	f7f9 faef 	bl	8000158 <__aeabi_dsub>
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	f7f9 faed 	bl	800015c <__adddf3>
 8006b82:	2300      	movs	r3, #0
 8006b84:	4682      	mov	sl, r0
 8006b86:	468b      	mov	fp, r1
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	465b      	mov	r3, fp
 8006b90:	4650      	mov	r0, sl
 8006b92:	4659      	mov	r1, fp
 8006b94:	f7f9 fc98 	bl	80004c8 <__aeabi_dmul>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	4689      	mov	r9, r1
 8006ba0:	f7f9 fc92 	bl	80004c8 <__aeabi_dmul>
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	460d      	mov	r5, r1
 8006baa:	464b      	mov	r3, r9
 8006bac:	4650      	mov	r0, sl
 8006bae:	4659      	mov	r1, fp
 8006bb0:	f7f9 fc8a 	bl	80004c8 <__aeabi_dmul>
 8006bb4:	a370      	add	r3, pc, #448	; (adr r3, 8006d78 <__kernel_tan+0x308>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 fc81 	bl	80004c8 <__aeabi_dmul>
 8006bc6:	a36e      	add	r3, pc, #440	; (adr r3, 8006d80 <__kernel_tan+0x310>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f7f9 fac6 	bl	800015c <__adddf3>
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	f7f9 fc78 	bl	80004c8 <__aeabi_dmul>
 8006bd8:	a36b      	add	r3, pc, #428	; (adr r3, 8006d88 <__kernel_tan+0x318>)
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f7f9 fabd 	bl	800015c <__adddf3>
 8006be2:	4622      	mov	r2, r4
 8006be4:	462b      	mov	r3, r5
 8006be6:	f7f9 fc6f 	bl	80004c8 <__aeabi_dmul>
 8006bea:	a369      	add	r3, pc, #420	; (adr r3, 8006d90 <__kernel_tan+0x320>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fab4 	bl	800015c <__adddf3>
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	f7f9 fc66 	bl	80004c8 <__aeabi_dmul>
 8006bfc:	a366      	add	r3, pc, #408	; (adr r3, 8006d98 <__kernel_tan+0x328>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	f7f9 faab 	bl	800015c <__adddf3>
 8006c06:	4622      	mov	r2, r4
 8006c08:	462b      	mov	r3, r5
 8006c0a:	f7f9 fc5d 	bl	80004c8 <__aeabi_dmul>
 8006c0e:	a364      	add	r3, pc, #400	; (adr r3, 8006da0 <__kernel_tan+0x330>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 faa2 	bl	800015c <__adddf3>
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	f7f9 fc54 	bl	80004c8 <__aeabi_dmul>
 8006c20:	a361      	add	r3, pc, #388	; (adr r3, 8006da8 <__kernel_tan+0x338>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 fc4b 	bl	80004c8 <__aeabi_dmul>
 8006c32:	a35f      	add	r3, pc, #380	; (adr r3, 8006db0 <__kernel_tan+0x340>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fa90 	bl	800015c <__adddf3>
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	462b      	mov	r3, r5
 8006c40:	f7f9 fc42 	bl	80004c8 <__aeabi_dmul>
 8006c44:	a35c      	add	r3, pc, #368	; (adr r3, 8006db8 <__kernel_tan+0x348>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f7f9 fa87 	bl	800015c <__adddf3>
 8006c4e:	4622      	mov	r2, r4
 8006c50:	462b      	mov	r3, r5
 8006c52:	f7f9 fc39 	bl	80004c8 <__aeabi_dmul>
 8006c56:	a35a      	add	r3, pc, #360	; (adr r3, 8006dc0 <__kernel_tan+0x350>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f7f9 fa7e 	bl	800015c <__adddf3>
 8006c60:	4622      	mov	r2, r4
 8006c62:	462b      	mov	r3, r5
 8006c64:	f7f9 fc30 	bl	80004c8 <__aeabi_dmul>
 8006c68:	a357      	add	r3, pc, #348	; (adr r3, 8006dc8 <__kernel_tan+0x358>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f7f9 fa75 	bl	800015c <__adddf3>
 8006c72:	4622      	mov	r2, r4
 8006c74:	462b      	mov	r3, r5
 8006c76:	f7f9 fc27 	bl	80004c8 <__aeabi_dmul>
 8006c7a:	a355      	add	r3, pc, #340	; (adr r3, 8006dd0 <__kernel_tan+0x360>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	f7f9 fa6c 	bl	800015c <__adddf3>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c8c:	f7f9 fa66 	bl	800015c <__adddf3>
 8006c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c94:	f7f9 fc18 	bl	80004c8 <__aeabi_dmul>
 8006c98:	9a02      	ldr	r2, [sp, #8]
 8006c9a:	9b00      	ldr	r3, [sp, #0]
 8006c9c:	f7f9 fa5e 	bl	800015c <__adddf3>
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	f7f9 fc10 	bl	80004c8 <__aeabi_dmul>
 8006ca8:	9a02      	ldr	r2, [sp, #8]
 8006caa:	9b00      	ldr	r3, [sp, #0]
 8006cac:	f7f9 fa56 	bl	800015c <__adddf3>
 8006cb0:	a349      	add	r3, pc, #292	; (adr r3, 8006dd8 <__kernel_tan+0x368>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	460d      	mov	r5, r1
 8006cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cbe:	f7f9 fc03 	bl	80004c8 <__aeabi_dmul>
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	f7f9 fa49 	bl	800015c <__adddf3>
 8006cca:	460b      	mov	r3, r1
 8006ccc:	e9cd 0100 	strd	r0, r1, [sp]
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	4659      	mov	r1, fp
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	f7f9 fa41 	bl	800015c <__adddf3>
 8006cda:	4b44      	ldr	r3, [pc, #272]	; (8006dec <__kernel_tan+0x37c>)
 8006cdc:	4604      	mov	r4, r0
 8006cde:	429e      	cmp	r6, r3
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	f340 8085 	ble.w	8006df0 <__kernel_tan+0x380>
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7f9 fb84 	bl	80003f4 <__aeabi_i2d>
 8006cec:	4622      	mov	r2, r4
 8006cee:	4680      	mov	r8, r0
 8006cf0:	4689      	mov	r9, r1
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f7f9 fbe6 	bl	80004c8 <__aeabi_dmul>
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	464b      	mov	r3, r9
 8006d04:	4620      	mov	r0, r4
 8006d06:	4629      	mov	r1, r5
 8006d08:	f7f9 fa28 	bl	800015c <__adddf3>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 fd02 	bl	800071c <__aeabi_ddiv>
 8006d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d1c:	f7f9 fa1c 	bl	8000158 <__aeabi_dsub>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4650      	mov	r0, sl
 8006d26:	4659      	mov	r1, fp
 8006d28:	f7f9 fa16 	bl	8000158 <__aeabi_dsub>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	f7f9 fa14 	bl	800015c <__adddf3>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4640      	mov	r0, r8
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	f7f9 fa0c 	bl	8000158 <__aeabi_dsub>
 8006d40:	9b07      	ldr	r3, [sp, #28]
 8006d42:	4604      	mov	r4, r0
 8006d44:	179b      	asrs	r3, r3, #30
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	f1c3 0001 	rsb	r0, r3, #1
 8006d4e:	460d      	mov	r5, r1
 8006d50:	f7f9 fb50 	bl	80003f4 <__aeabi_i2d>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4620      	mov	r0, r4
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	f7f9 fbb4 	bl	80004c8 <__aeabi_dmul>
 8006d60:	e6a9      	b.n	8006ab6 <__kernel_tan+0x46>
 8006d62:	bf00      	nop
 8006d64:	f3af 8000 	nop.w
 8006d68:	54442d18 	.word	0x54442d18
 8006d6c:	3fe921fb 	.word	0x3fe921fb
 8006d70:	33145c07 	.word	0x33145c07
 8006d74:	3c81a626 	.word	0x3c81a626
 8006d78:	74bf7ad4 	.word	0x74bf7ad4
 8006d7c:	3efb2a70 	.word	0x3efb2a70
 8006d80:	32f0a7e9 	.word	0x32f0a7e9
 8006d84:	3f12b80f 	.word	0x3f12b80f
 8006d88:	1a8d1068 	.word	0x1a8d1068
 8006d8c:	3f3026f7 	.word	0x3f3026f7
 8006d90:	fee08315 	.word	0xfee08315
 8006d94:	3f57dbc8 	.word	0x3f57dbc8
 8006d98:	e96e8493 	.word	0xe96e8493
 8006d9c:	3f8226e3 	.word	0x3f8226e3
 8006da0:	1bb341fe 	.word	0x1bb341fe
 8006da4:	3faba1ba 	.word	0x3faba1ba
 8006da8:	db605373 	.word	0xdb605373
 8006dac:	bef375cb 	.word	0xbef375cb
 8006db0:	a03792a6 	.word	0xa03792a6
 8006db4:	3f147e88 	.word	0x3f147e88
 8006db8:	f2f26501 	.word	0xf2f26501
 8006dbc:	3f4344d8 	.word	0x3f4344d8
 8006dc0:	c9560328 	.word	0xc9560328
 8006dc4:	3f6d6d22 	.word	0x3f6d6d22
 8006dc8:	8406d637 	.word	0x8406d637
 8006dcc:	3f9664f4 	.word	0x3f9664f4
 8006dd0:	1110fe7a 	.word	0x1110fe7a
 8006dd4:	3fc11111 	.word	0x3fc11111
 8006dd8:	55555563 	.word	0x55555563
 8006ddc:	3fd55555 	.word	0x3fd55555
 8006de0:	3e2fffff 	.word	0x3e2fffff
 8006de4:	3ff00000 	.word	0x3ff00000
 8006de8:	bff00000 	.word	0xbff00000
 8006dec:	3fe59427 	.word	0x3fe59427
 8006df0:	2f01      	cmp	r7, #1
 8006df2:	d031      	beq.n	8006e58 <__kernel_tan+0x3e8>
 8006df4:	460f      	mov	r7, r1
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	4918      	ldr	r1, [pc, #96]	; (8006e60 <__kernel_tan+0x3f0>)
 8006dfe:	f7f9 fc8d 	bl	800071c <__aeabi_ddiv>
 8006e02:	2600      	movs	r6, #0
 8006e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e0c:	4652      	mov	r2, sl
 8006e0e:	465b      	mov	r3, fp
 8006e10:	4630      	mov	r0, r6
 8006e12:	4639      	mov	r1, r7
 8006e14:	f7f9 f9a0 	bl	8000158 <__aeabi_dsub>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e20:	f7f9 f99a 	bl	8000158 <__aeabi_dsub>
 8006e24:	4632      	mov	r2, r6
 8006e26:	462b      	mov	r3, r5
 8006e28:	f7f9 fb4e 	bl	80004c8 <__aeabi_dmul>
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	4682      	mov	sl, r0
 8006e30:	468b      	mov	fp, r1
 8006e32:	462b      	mov	r3, r5
 8006e34:	4630      	mov	r0, r6
 8006e36:	4639      	mov	r1, r7
 8006e38:	f7f9 fb46 	bl	80004c8 <__aeabi_dmul>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <__kernel_tan+0x3f4>)
 8006e40:	f7f9 f98c 	bl	800015c <__adddf3>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4650      	mov	r0, sl
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	f7f9 f986 	bl	800015c <__adddf3>
 8006e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e54:	4634      	mov	r4, r6
 8006e56:	e66d      	b.n	8006b34 <__kernel_tan+0xc4>
 8006e58:	4682      	mov	sl, r0
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	e62d      	b.n	8006aba <__kernel_tan+0x4a>
 8006e5e:	bf00      	nop
 8006e60:	bff00000 	.word	0xbff00000
 8006e64:	3ff00000 	.word	0x3ff00000

08006e68 <__ieee754_rem_pio2>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	4ac2      	ldr	r2, [pc, #776]	; (8007178 <__ieee754_rem_pio2+0x310>)
 8006e70:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006e74:	b08d      	sub	sp, #52	; 0x34
 8006e76:	4592      	cmp	sl, r2
 8006e78:	9104      	str	r1, [sp, #16]
 8006e7a:	dc07      	bgt.n	8006e8c <__ieee754_rem_pio2+0x24>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e9c4 0100 	strd	r0, r1, [r4]
 8006e84:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006e88:	2500      	movs	r5, #0
 8006e8a:	e024      	b.n	8006ed6 <__ieee754_rem_pio2+0x6e>
 8006e8c:	4abb      	ldr	r2, [pc, #748]	; (800717c <__ieee754_rem_pio2+0x314>)
 8006e8e:	4592      	cmp	sl, r2
 8006e90:	dc72      	bgt.n	8006f78 <__ieee754_rem_pio2+0x110>
 8006e92:	9b04      	ldr	r3, [sp, #16]
 8006e94:	4dba      	ldr	r5, [pc, #744]	; (8007180 <__ieee754_rem_pio2+0x318>)
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	a3a9      	add	r3, pc, #676	; (adr r3, 8007140 <__ieee754_rem_pio2+0x2d8>)
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	dd36      	ble.n	8006f0e <__ieee754_rem_pio2+0xa6>
 8006ea0:	f7f9 f95a 	bl	8000158 <__aeabi_dsub>
 8006ea4:	45aa      	cmp	sl, r5
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	460f      	mov	r7, r1
 8006eaa:	d018      	beq.n	8006ede <__ieee754_rem_pio2+0x76>
 8006eac:	a3a6      	add	r3, pc, #664	; (adr r3, 8007148 <__ieee754_rem_pio2+0x2e0>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f7f9 f951 	bl	8000158 <__aeabi_dsub>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4630      	mov	r0, r6
 8006ebc:	e9c4 2300 	strd	r2, r3, [r4]
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	f7f9 f949 	bl	8000158 <__aeabi_dsub>
 8006ec6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007148 <__ieee754_rem_pio2+0x2e0>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 f944 	bl	8000158 <__aeabi_dsub>
 8006ed0:	2501      	movs	r5, #1
 8006ed2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	b00d      	add	sp, #52	; 0x34
 8006eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ede:	a39c      	add	r3, pc, #624	; (adr r3, 8007150 <__ieee754_rem_pio2+0x2e8>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f7f9 f938 	bl	8000158 <__aeabi_dsub>
 8006ee8:	a39b      	add	r3, pc, #620	; (adr r3, 8007158 <__ieee754_rem_pio2+0x2f0>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	f7f9 f931 	bl	8000158 <__aeabi_dsub>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4630      	mov	r0, r6
 8006efc:	e9c4 2300 	strd	r2, r3, [r4]
 8006f00:	4639      	mov	r1, r7
 8006f02:	f7f9 f929 	bl	8000158 <__aeabi_dsub>
 8006f06:	a394      	add	r3, pc, #592	; (adr r3, 8007158 <__ieee754_rem_pio2+0x2f0>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	e7de      	b.n	8006ecc <__ieee754_rem_pio2+0x64>
 8006f0e:	f7f9 f925 	bl	800015c <__adddf3>
 8006f12:	45aa      	cmp	sl, r5
 8006f14:	4606      	mov	r6, r0
 8006f16:	460f      	mov	r7, r1
 8006f18:	d016      	beq.n	8006f48 <__ieee754_rem_pio2+0xe0>
 8006f1a:	a38b      	add	r3, pc, #556	; (adr r3, 8007148 <__ieee754_rem_pio2+0x2e0>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f7f9 f91c 	bl	800015c <__adddf3>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4630      	mov	r0, r6
 8006f2a:	e9c4 2300 	strd	r2, r3, [r4]
 8006f2e:	4639      	mov	r1, r7
 8006f30:	f7f9 f912 	bl	8000158 <__aeabi_dsub>
 8006f34:	a384      	add	r3, pc, #528	; (adr r3, 8007148 <__ieee754_rem_pio2+0x2e0>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f7f9 f90f 	bl	800015c <__adddf3>
 8006f3e:	f04f 35ff 	mov.w	r5, #4294967295
 8006f42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f46:	e7c6      	b.n	8006ed6 <__ieee754_rem_pio2+0x6e>
 8006f48:	a381      	add	r3, pc, #516	; (adr r3, 8007150 <__ieee754_rem_pio2+0x2e8>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f7f9 f905 	bl	800015c <__adddf3>
 8006f52:	a381      	add	r3, pc, #516	; (adr r3, 8007158 <__ieee754_rem_pio2+0x2f0>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	4606      	mov	r6, r0
 8006f5a:	460f      	mov	r7, r1
 8006f5c:	f7f9 f8fe 	bl	800015c <__adddf3>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4630      	mov	r0, r6
 8006f66:	e9c4 2300 	strd	r2, r3, [r4]
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 f8f4 	bl	8000158 <__aeabi_dsub>
 8006f70:	a379      	add	r3, pc, #484	; (adr r3, 8007158 <__ieee754_rem_pio2+0x2f0>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	e7e0      	b.n	8006f3a <__ieee754_rem_pio2+0xd2>
 8006f78:	4a82      	ldr	r2, [pc, #520]	; (8007184 <__ieee754_rem_pio2+0x31c>)
 8006f7a:	4592      	cmp	sl, r2
 8006f7c:	f300 80d4 	bgt.w	8007128 <__ieee754_rem_pio2+0x2c0>
 8006f80:	f000 f966 	bl	8007250 <fabs>
 8006f84:	a376      	add	r3, pc, #472	; (adr r3, 8007160 <__ieee754_rem_pio2+0x2f8>)
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	f7f9 fa9b 	bl	80004c8 <__aeabi_dmul>
 8006f92:	2200      	movs	r2, #0
 8006f94:	4b7c      	ldr	r3, [pc, #496]	; (8007188 <__ieee754_rem_pio2+0x320>)
 8006f96:	f7f9 f8e1 	bl	800015c <__adddf3>
 8006f9a:	f7f9 fd2f 	bl	80009fc <__aeabi_d2iz>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	f7f9 fa28 	bl	80003f4 <__aeabi_i2d>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fac:	a364      	add	r3, pc, #400	; (adr r3, 8007140 <__ieee754_rem_pio2+0x2d8>)
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f7f9 fa89 	bl	80004c8 <__aeabi_dmul>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4630      	mov	r0, r6
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	f7f9 f8cb 	bl	8000158 <__aeabi_dsub>
 8006fc2:	a361      	add	r3, pc, #388	; (adr r3, 8007148 <__ieee754_rem_pio2+0x2e0>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	4680      	mov	r8, r0
 8006fca:	4689      	mov	r9, r1
 8006fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fd0:	f7f9 fa7a 	bl	80004c8 <__aeabi_dmul>
 8006fd4:	2d1f      	cmp	r5, #31
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460f      	mov	r7, r1
 8006fda:	dc0e      	bgt.n	8006ffa <__ieee754_rem_pio2+0x192>
 8006fdc:	4b6b      	ldr	r3, [pc, #428]	; (800718c <__ieee754_rem_pio2+0x324>)
 8006fde:	1e6a      	subs	r2, r5, #1
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	4553      	cmp	r3, sl
 8006fe6:	d008      	beq.n	8006ffa <__ieee754_rem_pio2+0x192>
 8006fe8:	4632      	mov	r2, r6
 8006fea:	463b      	mov	r3, r7
 8006fec:	4640      	mov	r0, r8
 8006fee:	4649      	mov	r1, r9
 8006ff0:	f7f9 f8b2 	bl	8000158 <__aeabi_dsub>
 8006ff4:	e9c4 0100 	strd	r0, r1, [r4]
 8006ff8:	e012      	b.n	8007020 <__ieee754_rem_pio2+0x1b8>
 8006ffa:	463b      	mov	r3, r7
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	4640      	mov	r0, r8
 8007000:	4649      	mov	r1, r9
 8007002:	f7f9 f8a9 	bl	8000158 <__aeabi_dsub>
 8007006:	ea4f 532a 	mov.w	r3, sl, asr #20
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007010:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8007014:	2b10      	cmp	r3, #16
 8007016:	dc1f      	bgt.n	8007058 <__ieee754_rem_pio2+0x1f0>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	e9c4 2300 	strd	r2, r3, [r4]
 8007020:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8007024:	4640      	mov	r0, r8
 8007026:	4653      	mov	r3, sl
 8007028:	4649      	mov	r1, r9
 800702a:	f7f9 f895 	bl	8000158 <__aeabi_dsub>
 800702e:	4632      	mov	r2, r6
 8007030:	463b      	mov	r3, r7
 8007032:	f7f9 f891 	bl	8000158 <__aeabi_dsub>
 8007036:	460b      	mov	r3, r1
 8007038:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800703c:	9904      	ldr	r1, [sp, #16]
 800703e:	4602      	mov	r2, r0
 8007040:	2900      	cmp	r1, #0
 8007042:	f6bf af48 	bge.w	8006ed6 <__ieee754_rem_pio2+0x6e>
 8007046:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800704a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800704e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007052:	60e3      	str	r3, [r4, #12]
 8007054:	426d      	negs	r5, r5
 8007056:	e73e      	b.n	8006ed6 <__ieee754_rem_pio2+0x6e>
 8007058:	a33d      	add	r3, pc, #244	; (adr r3, 8007150 <__ieee754_rem_pio2+0x2e8>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007062:	f7f9 fa31 	bl	80004c8 <__aeabi_dmul>
 8007066:	4606      	mov	r6, r0
 8007068:	460f      	mov	r7, r1
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4640      	mov	r0, r8
 8007070:	4649      	mov	r1, r9
 8007072:	f7f9 f871 	bl	8000158 <__aeabi_dsub>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4682      	mov	sl, r0
 800707c:	468b      	mov	fp, r1
 800707e:	4640      	mov	r0, r8
 8007080:	4649      	mov	r1, r9
 8007082:	f7f9 f869 	bl	8000158 <__aeabi_dsub>
 8007086:	4632      	mov	r2, r6
 8007088:	463b      	mov	r3, r7
 800708a:	f7f9 f865 	bl	8000158 <__aeabi_dsub>
 800708e:	a332      	add	r3, pc, #200	; (adr r3, 8007158 <__ieee754_rem_pio2+0x2f0>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	4606      	mov	r6, r0
 8007096:	460f      	mov	r7, r1
 8007098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800709c:	f7f9 fa14 	bl	80004c8 <__aeabi_dmul>
 80070a0:	4632      	mov	r2, r6
 80070a2:	463b      	mov	r3, r7
 80070a4:	f7f9 f858 	bl	8000158 <__aeabi_dsub>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4606      	mov	r6, r0
 80070ae:	460f      	mov	r7, r1
 80070b0:	4650      	mov	r0, sl
 80070b2:	4659      	mov	r1, fp
 80070b4:	f7f9 f850 	bl	8000158 <__aeabi_dsub>
 80070b8:	9a05      	ldr	r2, [sp, #20]
 80070ba:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b31      	cmp	r3, #49	; 0x31
 80070c2:	dc06      	bgt.n	80070d2 <__ieee754_rem_pio2+0x26a>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	46d0      	mov	r8, sl
 80070ca:	46d9      	mov	r9, fp
 80070cc:	e9c4 2300 	strd	r2, r3, [r4]
 80070d0:	e7a6      	b.n	8007020 <__ieee754_rem_pio2+0x1b8>
 80070d2:	a325      	add	r3, pc, #148	; (adr r3, 8007168 <__ieee754_rem_pio2+0x300>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070dc:	f7f9 f9f4 	bl	80004c8 <__aeabi_dmul>
 80070e0:	4606      	mov	r6, r0
 80070e2:	460f      	mov	r7, r1
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4650      	mov	r0, sl
 80070ea:	4659      	mov	r1, fp
 80070ec:	f7f9 f834 	bl	8000158 <__aeabi_dsub>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4680      	mov	r8, r0
 80070f6:	4689      	mov	r9, r1
 80070f8:	4650      	mov	r0, sl
 80070fa:	4659      	mov	r1, fp
 80070fc:	f7f9 f82c 	bl	8000158 <__aeabi_dsub>
 8007100:	4632      	mov	r2, r6
 8007102:	463b      	mov	r3, r7
 8007104:	f7f9 f828 	bl	8000158 <__aeabi_dsub>
 8007108:	a319      	add	r3, pc, #100	; (adr r3, 8007170 <__ieee754_rem_pio2+0x308>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	4606      	mov	r6, r0
 8007110:	460f      	mov	r7, r1
 8007112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007116:	f7f9 f9d7 	bl	80004c8 <__aeabi_dmul>
 800711a:	4632      	mov	r2, r6
 800711c:	463b      	mov	r3, r7
 800711e:	f7f9 f81b 	bl	8000158 <__aeabi_dsub>
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	e75f      	b.n	8006fe8 <__ieee754_rem_pio2+0x180>
 8007128:	4a19      	ldr	r2, [pc, #100]	; (8007190 <__ieee754_rem_pio2+0x328>)
 800712a:	4592      	cmp	sl, r2
 800712c:	dd32      	ble.n	8007194 <__ieee754_rem_pio2+0x32c>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	f7f9 f811 	bl	8000158 <__aeabi_dsub>
 8007136:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800713a:	e9c4 0100 	strd	r0, r1, [r4]
 800713e:	e6a3      	b.n	8006e88 <__ieee754_rem_pio2+0x20>
 8007140:	54400000 	.word	0x54400000
 8007144:	3ff921fb 	.word	0x3ff921fb
 8007148:	1a626331 	.word	0x1a626331
 800714c:	3dd0b461 	.word	0x3dd0b461
 8007150:	1a600000 	.word	0x1a600000
 8007154:	3dd0b461 	.word	0x3dd0b461
 8007158:	2e037073 	.word	0x2e037073
 800715c:	3ba3198a 	.word	0x3ba3198a
 8007160:	6dc9c883 	.word	0x6dc9c883
 8007164:	3fe45f30 	.word	0x3fe45f30
 8007168:	2e000000 	.word	0x2e000000
 800716c:	3ba3198a 	.word	0x3ba3198a
 8007170:	252049c1 	.word	0x252049c1
 8007174:	397b839a 	.word	0x397b839a
 8007178:	3fe921fb 	.word	0x3fe921fb
 800717c:	4002d97b 	.word	0x4002d97b
 8007180:	3ff921fb 	.word	0x3ff921fb
 8007184:	413921fb 	.word	0x413921fb
 8007188:	3fe00000 	.word	0x3fe00000
 800718c:	08007b28 	.word	0x08007b28
 8007190:	7fefffff 	.word	0x7fefffff
 8007194:	ea4f 552a 	mov.w	r5, sl, asr #20
 8007198:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800719c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80071a0:	460f      	mov	r7, r1
 80071a2:	4606      	mov	r6, r0
 80071a4:	f7f9 fc2a 	bl	80009fc <__aeabi_d2iz>
 80071a8:	f7f9 f924 	bl	80003f4 <__aeabi_i2d>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4630      	mov	r0, r6
 80071b2:	4639      	mov	r1, r7
 80071b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80071b8:	f7f8 ffce 	bl	8000158 <__aeabi_dsub>
 80071bc:	2200      	movs	r2, #0
 80071be:	4b22      	ldr	r3, [pc, #136]	; (8007248 <__ieee754_rem_pio2+0x3e0>)
 80071c0:	f7f9 f982 	bl	80004c8 <__aeabi_dmul>
 80071c4:	460f      	mov	r7, r1
 80071c6:	4606      	mov	r6, r0
 80071c8:	f7f9 fc18 	bl	80009fc <__aeabi_d2iz>
 80071cc:	f7f9 f912 	bl	80003f4 <__aeabi_i2d>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4630      	mov	r0, r6
 80071d6:	4639      	mov	r1, r7
 80071d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80071dc:	f7f8 ffbc 	bl	8000158 <__aeabi_dsub>
 80071e0:	2200      	movs	r2, #0
 80071e2:	4b19      	ldr	r3, [pc, #100]	; (8007248 <__ieee754_rem_pio2+0x3e0>)
 80071e4:	f7f9 f970 	bl	80004c8 <__aeabi_dmul>
 80071e8:	f04f 0803 	mov.w	r8, #3
 80071ec:	2600      	movs	r6, #0
 80071ee:	2700      	movs	r7, #0
 80071f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80071f4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80071f8:	4632      	mov	r2, r6
 80071fa:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80071fe:	463b      	mov	r3, r7
 8007200:	46c2      	mov	sl, r8
 8007202:	f108 38ff 	add.w	r8, r8, #4294967295
 8007206:	f7f9 fbc7 	bl	8000998 <__aeabi_dcmpeq>
 800720a:	2800      	cmp	r0, #0
 800720c:	d1f4      	bne.n	80071f8 <__ieee754_rem_pio2+0x390>
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <__ieee754_rem_pio2+0x3e4>)
 8007210:	462a      	mov	r2, r5
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	2302      	movs	r3, #2
 8007216:	4621      	mov	r1, r4
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	a806      	add	r0, sp, #24
 800721c:	4653      	mov	r3, sl
 800721e:	f000 f81b 	bl	8007258 <__kernel_rem_pio2>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	4605      	mov	r5, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	f6bf ae55 	bge.w	8006ed6 <__ieee754_rem_pio2+0x6e>
 800722c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007230:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007234:	e9c4 2300 	strd	r2, r3, [r4]
 8007238:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800723c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007240:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007244:	e706      	b.n	8007054 <__ieee754_rem_pio2+0x1ec>
 8007246:	bf00      	nop
 8007248:	41700000 	.word	0x41700000
 800724c:	08007ba8 	.word	0x08007ba8

08007250 <fabs>:
 8007250:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007254:	4619      	mov	r1, r3
 8007256:	4770      	bx	lr

08007258 <__kernel_rem_pio2>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007260:	9308      	str	r3, [sp, #32]
 8007262:	9106      	str	r1, [sp, #24]
 8007264:	4bb6      	ldr	r3, [pc, #728]	; (8007540 <__kernel_rem_pio2+0x2e8>)
 8007266:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007268:	f112 0f14 	cmn.w	r2, #20
 800726c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007270:	bfa8      	it	ge
 8007272:	1ed4      	subge	r4, r2, #3
 8007274:	9302      	str	r3, [sp, #8]
 8007276:	9b08      	ldr	r3, [sp, #32]
 8007278:	bfb8      	it	lt
 800727a:	2400      	movlt	r4, #0
 800727c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007280:	9307      	str	r3, [sp, #28]
 8007282:	bfa4      	itt	ge
 8007284:	2318      	movge	r3, #24
 8007286:	fb94 f4f3 	sdivge	r4, r4, r3
 800728a:	f06f 0317 	mvn.w	r3, #23
 800728e:	fb04 3303 	mla	r3, r4, r3, r3
 8007292:	eb03 0b02 	add.w	fp, r3, r2
 8007296:	9a07      	ldr	r2, [sp, #28]
 8007298:	9b02      	ldr	r3, [sp, #8]
 800729a:	1aa7      	subs	r7, r4, r2
 800729c:	eb03 0802 	add.w	r8, r3, r2
 80072a0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80072a2:	2500      	movs	r5, #0
 80072a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80072a8:	2200      	movs	r2, #0
 80072aa:	2300      	movs	r3, #0
 80072ac:	9009      	str	r0, [sp, #36]	; 0x24
 80072ae:	ae20      	add	r6, sp, #128	; 0x80
 80072b0:	4545      	cmp	r5, r8
 80072b2:	dd14      	ble.n	80072de <__kernel_rem_pio2+0x86>
 80072b4:	f04f 0800 	mov.w	r8, #0
 80072b8:	9a08      	ldr	r2, [sp, #32]
 80072ba:	ab20      	add	r3, sp, #128	; 0x80
 80072bc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80072c0:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	4598      	cmp	r8, r3
 80072c8:	dc35      	bgt.n	8007336 <__kernel_rem_pio2+0xde>
 80072ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072cc:	2200      	movs	r2, #0
 80072ce:	f1a3 0908 	sub.w	r9, r3, #8
 80072d2:	2300      	movs	r3, #0
 80072d4:	462f      	mov	r7, r5
 80072d6:	2600      	movs	r6, #0
 80072d8:	e9cd 2300 	strd	r2, r3, [sp]
 80072dc:	e01f      	b.n	800731e <__kernel_rem_pio2+0xc6>
 80072de:	42ef      	cmn	r7, r5
 80072e0:	d40b      	bmi.n	80072fa <__kernel_rem_pio2+0xa2>
 80072e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80072e6:	e9cd 2300 	strd	r2, r3, [sp]
 80072ea:	f7f9 f883 	bl	80003f4 <__aeabi_i2d>
 80072ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072f6:	3501      	adds	r5, #1
 80072f8:	e7da      	b.n	80072b0 <__kernel_rem_pio2+0x58>
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	e7f8      	b.n	80072f2 <__kernel_rem_pio2+0x9a>
 8007300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007304:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8007308:	f7f9 f8de 	bl	80004c8 <__aeabi_dmul>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007314:	f7f8 ff22 	bl	800015c <__adddf3>
 8007318:	e9cd 0100 	strd	r0, r1, [sp]
 800731c:	3601      	adds	r6, #1
 800731e:	9b07      	ldr	r3, [sp, #28]
 8007320:	3f08      	subs	r7, #8
 8007322:	429e      	cmp	r6, r3
 8007324:	ddec      	ble.n	8007300 <__kernel_rem_pio2+0xa8>
 8007326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800732a:	f108 0801 	add.w	r8, r8, #1
 800732e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8007332:	3508      	adds	r5, #8
 8007334:	e7c6      	b.n	80072c4 <__kernel_rem_pio2+0x6c>
 8007336:	9b02      	ldr	r3, [sp, #8]
 8007338:	aa0c      	add	r2, sp, #48	; 0x30
 800733a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800733e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007340:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007342:	9e02      	ldr	r6, [sp, #8]
 8007344:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007348:	930a      	str	r3, [sp, #40]	; 0x28
 800734a:	ab98      	add	r3, sp, #608	; 0x260
 800734c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007350:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8007354:	ab70      	add	r3, sp, #448	; 0x1c0
 8007356:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800735a:	46d0      	mov	r8, sl
 800735c:	46b1      	mov	r9, r6
 800735e:	af0c      	add	r7, sp, #48	; 0x30
 8007360:	9700      	str	r7, [sp, #0]
 8007362:	f1b9 0f00 	cmp.w	r9, #0
 8007366:	f1a8 0808 	sub.w	r8, r8, #8
 800736a:	dc70      	bgt.n	800744e <__kernel_rem_pio2+0x1f6>
 800736c:	465a      	mov	r2, fp
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f000 fab1 	bl	80078d8 <scalbn>
 8007376:	2200      	movs	r2, #0
 8007378:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	f7f9 f8a2 	bl	80004c8 <__aeabi_dmul>
 8007384:	f000 fb24 	bl	80079d0 <floor>
 8007388:	2200      	movs	r2, #0
 800738a:	4b6e      	ldr	r3, [pc, #440]	; (8007544 <__kernel_rem_pio2+0x2ec>)
 800738c:	f7f9 f89c 	bl	80004c8 <__aeabi_dmul>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4620      	mov	r0, r4
 8007396:	4629      	mov	r1, r5
 8007398:	f7f8 fede 	bl	8000158 <__aeabi_dsub>
 800739c:	460d      	mov	r5, r1
 800739e:	4604      	mov	r4, r0
 80073a0:	f7f9 fb2c 	bl	80009fc <__aeabi_d2iz>
 80073a4:	9004      	str	r0, [sp, #16]
 80073a6:	f7f9 f825 	bl	80003f4 <__aeabi_i2d>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4620      	mov	r0, r4
 80073b0:	4629      	mov	r1, r5
 80073b2:	f7f8 fed1 	bl	8000158 <__aeabi_dsub>
 80073b6:	f1bb 0f00 	cmp.w	fp, #0
 80073ba:	4680      	mov	r8, r0
 80073bc:	4689      	mov	r9, r1
 80073be:	dd6f      	ble.n	80074a0 <__kernel_rem_pio2+0x248>
 80073c0:	1e71      	subs	r1, r6, #1
 80073c2:	ab0c      	add	r3, sp, #48	; 0x30
 80073c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073c8:	9c04      	ldr	r4, [sp, #16]
 80073ca:	f1cb 0018 	rsb	r0, fp, #24
 80073ce:	fa43 f200 	asr.w	r2, r3, r0
 80073d2:	4414      	add	r4, r2
 80073d4:	4082      	lsls	r2, r0
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	aa0c      	add	r2, sp, #48	; 0x30
 80073da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80073de:	f1cb 0217 	rsb	r2, fp, #23
 80073e2:	9404      	str	r4, [sp, #16]
 80073e4:	4113      	asrs	r3, r2
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	9b00      	ldr	r3, [sp, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dd66      	ble.n	80074bc <__kernel_rem_pio2+0x264>
 80073ee:	2200      	movs	r2, #0
 80073f0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80073f4:	4614      	mov	r4, r2
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	3301      	adds	r3, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	4296      	cmp	r6, r2
 80073fe:	f300 80ad 	bgt.w	800755c <__kernel_rem_pio2+0x304>
 8007402:	f1bb 0f00 	cmp.w	fp, #0
 8007406:	dd07      	ble.n	8007418 <__kernel_rem_pio2+0x1c0>
 8007408:	f1bb 0f01 	cmp.w	fp, #1
 800740c:	f000 80b5 	beq.w	800757a <__kernel_rem_pio2+0x322>
 8007410:	f1bb 0f02 	cmp.w	fp, #2
 8007414:	f000 80bb 	beq.w	800758e <__kernel_rem_pio2+0x336>
 8007418:	9b00      	ldr	r3, [sp, #0]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d14e      	bne.n	80074bc <__kernel_rem_pio2+0x264>
 800741e:	4642      	mov	r2, r8
 8007420:	464b      	mov	r3, r9
 8007422:	2000      	movs	r0, #0
 8007424:	4948      	ldr	r1, [pc, #288]	; (8007548 <__kernel_rem_pio2+0x2f0>)
 8007426:	f7f8 fe97 	bl	8000158 <__aeabi_dsub>
 800742a:	4680      	mov	r8, r0
 800742c:	4689      	mov	r9, r1
 800742e:	2c00      	cmp	r4, #0
 8007430:	d044      	beq.n	80074bc <__kernel_rem_pio2+0x264>
 8007432:	465a      	mov	r2, fp
 8007434:	2000      	movs	r0, #0
 8007436:	4944      	ldr	r1, [pc, #272]	; (8007548 <__kernel_rem_pio2+0x2f0>)
 8007438:	f000 fa4e 	bl	80078d8 <scalbn>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4640      	mov	r0, r8
 8007442:	4649      	mov	r1, r9
 8007444:	f7f8 fe88 	bl	8000158 <__aeabi_dsub>
 8007448:	4680      	mov	r8, r0
 800744a:	4689      	mov	r9, r1
 800744c:	e036      	b.n	80074bc <__kernel_rem_pio2+0x264>
 800744e:	2200      	movs	r2, #0
 8007450:	4b3e      	ldr	r3, [pc, #248]	; (800754c <__kernel_rem_pio2+0x2f4>)
 8007452:	4620      	mov	r0, r4
 8007454:	4629      	mov	r1, r5
 8007456:	f7f9 f837 	bl	80004c8 <__aeabi_dmul>
 800745a:	f7f9 facf 	bl	80009fc <__aeabi_d2iz>
 800745e:	f7f8 ffc9 	bl	80003f4 <__aeabi_i2d>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800746a:	2200      	movs	r2, #0
 800746c:	4b38      	ldr	r3, [pc, #224]	; (8007550 <__kernel_rem_pio2+0x2f8>)
 800746e:	f7f9 f82b 	bl	80004c8 <__aeabi_dmul>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4620      	mov	r0, r4
 8007478:	4629      	mov	r1, r5
 800747a:	f7f8 fe6d 	bl	8000158 <__aeabi_dsub>
 800747e:	f7f9 fabd 	bl	80009fc <__aeabi_d2iz>
 8007482:	9b00      	ldr	r3, [sp, #0]
 8007484:	f109 39ff 	add.w	r9, r9, #4294967295
 8007488:	f843 0b04 	str.w	r0, [r3], #4
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007492:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007496:	f7f8 fe61 	bl	800015c <__adddf3>
 800749a:	4604      	mov	r4, r0
 800749c:	460d      	mov	r5, r1
 800749e:	e760      	b.n	8007362 <__kernel_rem_pio2+0x10a>
 80074a0:	d105      	bne.n	80074ae <__kernel_rem_pio2+0x256>
 80074a2:	1e73      	subs	r3, r6, #1
 80074a4:	aa0c      	add	r2, sp, #48	; 0x30
 80074a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074aa:	15db      	asrs	r3, r3, #23
 80074ac:	e79b      	b.n	80073e6 <__kernel_rem_pio2+0x18e>
 80074ae:	2200      	movs	r2, #0
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <__kernel_rem_pio2+0x2fc>)
 80074b2:	f7f9 fa8f 	bl	80009d4 <__aeabi_dcmpge>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d13e      	bne.n	8007538 <__kernel_rem_pio2+0x2e0>
 80074ba:	9000      	str	r0, [sp, #0]
 80074bc:	2200      	movs	r2, #0
 80074be:	2300      	movs	r3, #0
 80074c0:	4640      	mov	r0, r8
 80074c2:	4649      	mov	r1, r9
 80074c4:	f7f9 fa68 	bl	8000998 <__aeabi_dcmpeq>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	f000 80b2 	beq.w	8007632 <__kernel_rem_pio2+0x3da>
 80074ce:	1e74      	subs	r4, r6, #1
 80074d0:	4623      	mov	r3, r4
 80074d2:	2200      	movs	r2, #0
 80074d4:	9902      	ldr	r1, [sp, #8]
 80074d6:	428b      	cmp	r3, r1
 80074d8:	da60      	bge.n	800759c <__kernel_rem_pio2+0x344>
 80074da:	2a00      	cmp	r2, #0
 80074dc:	d075      	beq.n	80075ca <__kernel_rem_pio2+0x372>
 80074de:	ab0c      	add	r3, sp, #48	; 0x30
 80074e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80074e4:	f1ab 0b18 	sub.w	fp, fp, #24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 80a0 	beq.w	800762e <__kernel_rem_pio2+0x3d6>
 80074ee:	465a      	mov	r2, fp
 80074f0:	2000      	movs	r0, #0
 80074f2:	4915      	ldr	r1, [pc, #84]	; (8007548 <__kernel_rem_pio2+0x2f0>)
 80074f4:	f000 f9f0 	bl	80078d8 <scalbn>
 80074f8:	46a2      	mov	sl, r4
 80074fa:	4606      	mov	r6, r0
 80074fc:	460f      	mov	r7, r1
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	ab70      	add	r3, sp, #448	; 0x1c0
 8007504:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800754c <__kernel_rem_pio2+0x2f4>
 8007508:	00e5      	lsls	r5, r4, #3
 800750a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800750e:	f1ba 0f00 	cmp.w	sl, #0
 8007512:	f280 80c4 	bge.w	800769e <__kernel_rem_pio2+0x446>
 8007516:	4626      	mov	r6, r4
 8007518:	2e00      	cmp	r6, #0
 800751a:	f2c0 80f6 	blt.w	800770a <__kernel_rem_pio2+0x4b2>
 800751e:	4b0e      	ldr	r3, [pc, #56]	; (8007558 <__kernel_rem_pio2+0x300>)
 8007520:	f04f 0a00 	mov.w	sl, #0
 8007524:	9307      	str	r3, [sp, #28]
 8007526:	ab70      	add	r3, sp, #448	; 0x1c0
 8007528:	f04f 0b00 	mov.w	fp, #0
 800752c:	f04f 0800 	mov.w	r8, #0
 8007530:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007534:	1ba7      	subs	r7, r4, r6
 8007536:	e0dc      	b.n	80076f2 <__kernel_rem_pio2+0x49a>
 8007538:	2302      	movs	r3, #2
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	e757      	b.n	80073ee <__kernel_rem_pio2+0x196>
 800753e:	bf00      	nop
 8007540:	08007cf0 	.word	0x08007cf0
 8007544:	40200000 	.word	0x40200000
 8007548:	3ff00000 	.word	0x3ff00000
 800754c:	3e700000 	.word	0x3e700000
 8007550:	41700000 	.word	0x41700000
 8007554:	3fe00000 	.word	0x3fe00000
 8007558:	08007cb0 	.word	0x08007cb0
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	b944      	cbnz	r4, 8007572 <__kernel_rem_pio2+0x31a>
 8007560:	b11b      	cbz	r3, 800756a <__kernel_rem_pio2+0x312>
 8007562:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	2301      	movs	r3, #1
 800756a:	461c      	mov	r4, r3
 800756c:	3201      	adds	r2, #1
 800756e:	3704      	adds	r7, #4
 8007570:	e744      	b.n	80073fc <__kernel_rem_pio2+0x1a4>
 8007572:	1acb      	subs	r3, r1, r3
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	4623      	mov	r3, r4
 8007578:	e7f7      	b.n	800756a <__kernel_rem_pio2+0x312>
 800757a:	1e72      	subs	r2, r6, #1
 800757c:	ab0c      	add	r3, sp, #48	; 0x30
 800757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007582:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007586:	a90c      	add	r1, sp, #48	; 0x30
 8007588:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800758c:	e744      	b.n	8007418 <__kernel_rem_pio2+0x1c0>
 800758e:	1e72      	subs	r2, r6, #1
 8007590:	ab0c      	add	r3, sp, #48	; 0x30
 8007592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007596:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800759a:	e7f4      	b.n	8007586 <__kernel_rem_pio2+0x32e>
 800759c:	a90c      	add	r1, sp, #48	; 0x30
 800759e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	430a      	orrs	r2, r1
 80075a6:	e795      	b.n	80074d4 <__kernel_rem_pio2+0x27c>
 80075a8:	3301      	adds	r3, #1
 80075aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80075ae:	2900      	cmp	r1, #0
 80075b0:	d0fa      	beq.n	80075a8 <__kernel_rem_pio2+0x350>
 80075b2:	9a08      	ldr	r2, [sp, #32]
 80075b4:	a920      	add	r1, sp, #128	; 0x80
 80075b6:	18b2      	adds	r2, r6, r2
 80075b8:	f106 0801 	add.w	r8, r6, #1
 80075bc:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80075c0:	18f4      	adds	r4, r6, r3
 80075c2:	4544      	cmp	r4, r8
 80075c4:	da04      	bge.n	80075d0 <__kernel_rem_pio2+0x378>
 80075c6:	4626      	mov	r6, r4
 80075c8:	e6bf      	b.n	800734a <__kernel_rem_pio2+0xf2>
 80075ca:	2301      	movs	r3, #1
 80075cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075ce:	e7ec      	b.n	80075aa <__kernel_rem_pio2+0x352>
 80075d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d2:	f04f 0900 	mov.w	r9, #0
 80075d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80075da:	f7f8 ff0b 	bl	80003f4 <__aeabi_i2d>
 80075de:	2600      	movs	r6, #0
 80075e0:	2700      	movs	r7, #0
 80075e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e4:	e9c5 0100 	strd	r0, r1, [r5]
 80075e8:	3b08      	subs	r3, #8
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	9504      	str	r5, [sp, #16]
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	4599      	cmp	r9, r3
 80075f2:	dd05      	ble.n	8007600 <__kernel_rem_pio2+0x3a8>
 80075f4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80075f8:	f108 0801 	add.w	r8, r8, #1
 80075fc:	3508      	adds	r5, #8
 80075fe:	e7e0      	b.n	80075c2 <__kernel_rem_pio2+0x36a>
 8007600:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007604:	9900      	ldr	r1, [sp, #0]
 8007606:	f109 0901 	add.w	r9, r9, #1
 800760a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800760e:	9100      	str	r1, [sp, #0]
 8007610:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8007614:	f8cd c010 	str.w	ip, [sp, #16]
 8007618:	f7f8 ff56 	bl	80004c8 <__aeabi_dmul>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	f7f8 fd9a 	bl	800015c <__adddf3>
 8007628:	4606      	mov	r6, r0
 800762a:	460f      	mov	r7, r1
 800762c:	e7df      	b.n	80075ee <__kernel_rem_pio2+0x396>
 800762e:	3c01      	subs	r4, #1
 8007630:	e755      	b.n	80074de <__kernel_rem_pio2+0x286>
 8007632:	f1cb 0200 	rsb	r2, fp, #0
 8007636:	4640      	mov	r0, r8
 8007638:	4649      	mov	r1, r9
 800763a:	f000 f94d 	bl	80078d8 <scalbn>
 800763e:	2200      	movs	r2, #0
 8007640:	4ba3      	ldr	r3, [pc, #652]	; (80078d0 <__kernel_rem_pio2+0x678>)
 8007642:	4604      	mov	r4, r0
 8007644:	460d      	mov	r5, r1
 8007646:	f7f9 f9c5 	bl	80009d4 <__aeabi_dcmpge>
 800764a:	b1f8      	cbz	r0, 800768c <__kernel_rem_pio2+0x434>
 800764c:	2200      	movs	r2, #0
 800764e:	4ba1      	ldr	r3, [pc, #644]	; (80078d4 <__kernel_rem_pio2+0x67c>)
 8007650:	4620      	mov	r0, r4
 8007652:	4629      	mov	r1, r5
 8007654:	f7f8 ff38 	bl	80004c8 <__aeabi_dmul>
 8007658:	f7f9 f9d0 	bl	80009fc <__aeabi_d2iz>
 800765c:	4607      	mov	r7, r0
 800765e:	f7f8 fec9 	bl	80003f4 <__aeabi_i2d>
 8007662:	2200      	movs	r2, #0
 8007664:	4b9a      	ldr	r3, [pc, #616]	; (80078d0 <__kernel_rem_pio2+0x678>)
 8007666:	f7f8 ff2f 	bl	80004c8 <__aeabi_dmul>
 800766a:	460b      	mov	r3, r1
 800766c:	4602      	mov	r2, r0
 800766e:	4629      	mov	r1, r5
 8007670:	4620      	mov	r0, r4
 8007672:	f7f8 fd71 	bl	8000158 <__aeabi_dsub>
 8007676:	f7f9 f9c1 	bl	80009fc <__aeabi_d2iz>
 800767a:	1c74      	adds	r4, r6, #1
 800767c:	ab0c      	add	r3, sp, #48	; 0x30
 800767e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007682:	f10b 0b18 	add.w	fp, fp, #24
 8007686:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800768a:	e730      	b.n	80074ee <__kernel_rem_pio2+0x296>
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f7f9 f9b4 	bl	80009fc <__aeabi_d2iz>
 8007694:	ab0c      	add	r3, sp, #48	; 0x30
 8007696:	4634      	mov	r4, r6
 8007698:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800769c:	e727      	b.n	80074ee <__kernel_rem_pio2+0x296>
 800769e:	ab0c      	add	r3, sp, #48	; 0x30
 80076a0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80076a4:	f7f8 fea6 	bl	80003f4 <__aeabi_i2d>
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	f7f8 ff0c 	bl	80004c8 <__aeabi_dmul>
 80076b0:	4642      	mov	r2, r8
 80076b2:	e86b 0102 	strd	r0, r1, [fp], #-8
 80076b6:	464b      	mov	r3, r9
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f8 ff04 	bl	80004c8 <__aeabi_dmul>
 80076c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	e721      	b.n	800750e <__kernel_rem_pio2+0x2b6>
 80076ca:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80076ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80076d2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80076d6:	f8cd c01c 	str.w	ip, [sp, #28]
 80076da:	f7f8 fef5 	bl	80004c8 <__aeabi_dmul>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4650      	mov	r0, sl
 80076e4:	4659      	mov	r1, fp
 80076e6:	f7f8 fd39 	bl	800015c <__adddf3>
 80076ea:	4682      	mov	sl, r0
 80076ec:	468b      	mov	fp, r1
 80076ee:	f108 0801 	add.w	r8, r8, #1
 80076f2:	9b02      	ldr	r3, [sp, #8]
 80076f4:	4598      	cmp	r8, r3
 80076f6:	dc01      	bgt.n	80076fc <__kernel_rem_pio2+0x4a4>
 80076f8:	45b8      	cmp	r8, r7
 80076fa:	dde6      	ble.n	80076ca <__kernel_rem_pio2+0x472>
 80076fc:	ab48      	add	r3, sp, #288	; 0x120
 80076fe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007702:	e9c7 ab00 	strd	sl, fp, [r7]
 8007706:	3e01      	subs	r6, #1
 8007708:	e706      	b.n	8007518 <__kernel_rem_pio2+0x2c0>
 800770a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800770c:	2b02      	cmp	r3, #2
 800770e:	dc09      	bgt.n	8007724 <__kernel_rem_pio2+0x4cc>
 8007710:	2b00      	cmp	r3, #0
 8007712:	dc32      	bgt.n	800777a <__kernel_rem_pio2+0x522>
 8007714:	d058      	beq.n	80077c8 <__kernel_rem_pio2+0x570>
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	f003 0007 	and.w	r0, r3, #7
 800771c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007724:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007726:	2b03      	cmp	r3, #3
 8007728:	d1f5      	bne.n	8007716 <__kernel_rem_pio2+0x4be>
 800772a:	ab48      	add	r3, sp, #288	; 0x120
 800772c:	441d      	add	r5, r3
 800772e:	46aa      	mov	sl, r5
 8007730:	46a3      	mov	fp, r4
 8007732:	f1bb 0f00 	cmp.w	fp, #0
 8007736:	dc74      	bgt.n	8007822 <__kernel_rem_pio2+0x5ca>
 8007738:	46aa      	mov	sl, r5
 800773a:	46a3      	mov	fp, r4
 800773c:	f1bb 0f01 	cmp.w	fp, #1
 8007740:	f300 808e 	bgt.w	8007860 <__kernel_rem_pio2+0x608>
 8007744:	2700      	movs	r7, #0
 8007746:	463e      	mov	r6, r7
 8007748:	2c01      	cmp	r4, #1
 800774a:	f300 80a8 	bgt.w	800789e <__kernel_rem_pio2+0x646>
 800774e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007752:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007756:	9b00      	ldr	r3, [sp, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f040 80aa 	bne.w	80078b2 <__kernel_rem_pio2+0x65a>
 800775e:	4603      	mov	r3, r0
 8007760:	462a      	mov	r2, r5
 8007762:	9806      	ldr	r0, [sp, #24]
 8007764:	e9c0 2300 	strd	r2, r3, [r0]
 8007768:	4622      	mov	r2, r4
 800776a:	460b      	mov	r3, r1
 800776c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007770:	463a      	mov	r2, r7
 8007772:	4633      	mov	r3, r6
 8007774:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007778:	e7cd      	b.n	8007716 <__kernel_rem_pio2+0x4be>
 800777a:	2000      	movs	r0, #0
 800777c:	46a0      	mov	r8, r4
 800777e:	4601      	mov	r1, r0
 8007780:	ab48      	add	r3, sp, #288	; 0x120
 8007782:	441d      	add	r5, r3
 8007784:	f1b8 0f00 	cmp.w	r8, #0
 8007788:	da38      	bge.n	80077fc <__kernel_rem_pio2+0x5a4>
 800778a:	9b00      	ldr	r3, [sp, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d03c      	beq.n	800780a <__kernel_rem_pio2+0x5b2>
 8007790:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007794:	4602      	mov	r2, r0
 8007796:	462b      	mov	r3, r5
 8007798:	9d06      	ldr	r5, [sp, #24]
 800779a:	2601      	movs	r6, #1
 800779c:	e9c5 2300 	strd	r2, r3, [r5]
 80077a0:	460b      	mov	r3, r1
 80077a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80077a6:	f7f8 fcd7 	bl	8000158 <__aeabi_dsub>
 80077aa:	4684      	mov	ip, r0
 80077ac:	460f      	mov	r7, r1
 80077ae:	ad48      	add	r5, sp, #288	; 0x120
 80077b0:	42b4      	cmp	r4, r6
 80077b2:	da2c      	bge.n	800780e <__kernel_rem_pio2+0x5b6>
 80077b4:	9b00      	ldr	r3, [sp, #0]
 80077b6:	b10b      	cbz	r3, 80077bc <__kernel_rem_pio2+0x564>
 80077b8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80077bc:	4662      	mov	r2, ip
 80077be:	463b      	mov	r3, r7
 80077c0:	9906      	ldr	r1, [sp, #24]
 80077c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80077c6:	e7a6      	b.n	8007716 <__kernel_rem_pio2+0x4be>
 80077c8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80077ca:	ab48      	add	r3, sp, #288	; 0x120
 80077cc:	4637      	mov	r7, r6
 80077ce:	441d      	add	r5, r3
 80077d0:	2c00      	cmp	r4, #0
 80077d2:	da09      	bge.n	80077e8 <__kernel_rem_pio2+0x590>
 80077d4:	9b00      	ldr	r3, [sp, #0]
 80077d6:	b10b      	cbz	r3, 80077dc <__kernel_rem_pio2+0x584>
 80077d8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80077dc:	4632      	mov	r2, r6
 80077de:	463b      	mov	r3, r7
 80077e0:	9906      	ldr	r1, [sp, #24]
 80077e2:	e9c1 2300 	strd	r2, r3, [r1]
 80077e6:	e796      	b.n	8007716 <__kernel_rem_pio2+0x4be>
 80077e8:	4630      	mov	r0, r6
 80077ea:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80077ee:	4639      	mov	r1, r7
 80077f0:	f7f8 fcb4 	bl	800015c <__adddf3>
 80077f4:	3c01      	subs	r4, #1
 80077f6:	4606      	mov	r6, r0
 80077f8:	460f      	mov	r7, r1
 80077fa:	e7e9      	b.n	80077d0 <__kernel_rem_pio2+0x578>
 80077fc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007800:	f7f8 fcac 	bl	800015c <__adddf3>
 8007804:	f108 38ff 	add.w	r8, r8, #4294967295
 8007808:	e7bc      	b.n	8007784 <__kernel_rem_pio2+0x52c>
 800780a:	460d      	mov	r5, r1
 800780c:	e7c2      	b.n	8007794 <__kernel_rem_pio2+0x53c>
 800780e:	4660      	mov	r0, ip
 8007810:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8007814:	4639      	mov	r1, r7
 8007816:	f7f8 fca1 	bl	800015c <__adddf3>
 800781a:	3601      	adds	r6, #1
 800781c:	4684      	mov	ip, r0
 800781e:	460f      	mov	r7, r1
 8007820:	e7c6      	b.n	80077b0 <__kernel_rem_pio2+0x558>
 8007822:	e9da 6700 	ldrd	r6, r7, [sl]
 8007826:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800782a:	4632      	mov	r2, r6
 800782c:	463b      	mov	r3, r7
 800782e:	4640      	mov	r0, r8
 8007830:	4649      	mov	r1, r9
 8007832:	f7f8 fc93 	bl	800015c <__adddf3>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800783e:	4640      	mov	r0, r8
 8007840:	4649      	mov	r1, r9
 8007842:	f7f8 fc89 	bl	8000158 <__aeabi_dsub>
 8007846:	4632      	mov	r2, r6
 8007848:	463b      	mov	r3, r7
 800784a:	f7f8 fc87 	bl	800015c <__adddf3>
 800784e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007852:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007856:	f10b 3bff 	add.w	fp, fp, #4294967295
 800785a:	e9ca 2300 	strd	r2, r3, [sl]
 800785e:	e768      	b.n	8007732 <__kernel_rem_pio2+0x4da>
 8007860:	e9da 8900 	ldrd	r8, r9, [sl]
 8007864:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007868:	4642      	mov	r2, r8
 800786a:	464b      	mov	r3, r9
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f8 fc74 	bl	800015c <__adddf3>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800787c:	4630      	mov	r0, r6
 800787e:	4639      	mov	r1, r7
 8007880:	f7f8 fc6a 	bl	8000158 <__aeabi_dsub>
 8007884:	4642      	mov	r2, r8
 8007886:	464b      	mov	r3, r9
 8007888:	f7f8 fc68 	bl	800015c <__adddf3>
 800788c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007890:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007894:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007898:	e9ca 2300 	strd	r2, r3, [sl]
 800789c:	e74e      	b.n	800773c <__kernel_rem_pio2+0x4e4>
 800789e:	4638      	mov	r0, r7
 80078a0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80078a4:	4631      	mov	r1, r6
 80078a6:	f7f8 fc59 	bl	800015c <__adddf3>
 80078aa:	3c01      	subs	r4, #1
 80078ac:	4607      	mov	r7, r0
 80078ae:	460e      	mov	r6, r1
 80078b0:	e74a      	b.n	8007748 <__kernel_rem_pio2+0x4f0>
 80078b2:	9b06      	ldr	r3, [sp, #24]
 80078b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80078b8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80078bc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80078c0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80078c4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80078c8:	601d      	str	r5, [r3, #0]
 80078ca:	615e      	str	r6, [r3, #20]
 80078cc:	e723      	b.n	8007716 <__kernel_rem_pio2+0x4be>
 80078ce:	bf00      	nop
 80078d0:	41700000 	.word	0x41700000
 80078d4:	3e700000 	.word	0x3e700000

080078d8 <scalbn>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	4616      	mov	r6, r2
 80078dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	460b      	mov	r3, r1
 80078e6:	b992      	cbnz	r2, 800790e <scalbn+0x36>
 80078e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078ec:	4303      	orrs	r3, r0
 80078ee:	d03c      	beq.n	800796a <scalbn+0x92>
 80078f0:	4b31      	ldr	r3, [pc, #196]	; (80079b8 <scalbn+0xe0>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	f7f8 fde8 	bl	80004c8 <__aeabi_dmul>
 80078f8:	4b30      	ldr	r3, [pc, #192]	; (80079bc <scalbn+0xe4>)
 80078fa:	4604      	mov	r4, r0
 80078fc:	429e      	cmp	r6, r3
 80078fe:	460d      	mov	r5, r1
 8007900:	da0f      	bge.n	8007922 <scalbn+0x4a>
 8007902:	a329      	add	r3, pc, #164	; (adr r3, 80079a8 <scalbn+0xd0>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fdde 	bl	80004c8 <__aeabi_dmul>
 800790c:	e006      	b.n	800791c <scalbn+0x44>
 800790e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007912:	42ba      	cmp	r2, r7
 8007914:	d109      	bne.n	800792a <scalbn+0x52>
 8007916:	4602      	mov	r2, r0
 8007918:	f7f8 fc20 	bl	800015c <__adddf3>
 800791c:	4604      	mov	r4, r0
 800791e:	460d      	mov	r5, r1
 8007920:	e023      	b.n	800796a <scalbn+0x92>
 8007922:	460b      	mov	r3, r1
 8007924:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007928:	3a36      	subs	r2, #54	; 0x36
 800792a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800792e:	428e      	cmp	r6, r1
 8007930:	dd0e      	ble.n	8007950 <scalbn+0x78>
 8007932:	a31f      	add	r3, pc, #124	; (adr r3, 80079b0 <scalbn+0xd8>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800793c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007940:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007944:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007948:	481d      	ldr	r0, [pc, #116]	; (80079c0 <scalbn+0xe8>)
 800794a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800794e:	e7db      	b.n	8007908 <scalbn+0x30>
 8007950:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007954:	4432      	add	r2, r6
 8007956:	428a      	cmp	r2, r1
 8007958:	dceb      	bgt.n	8007932 <scalbn+0x5a>
 800795a:	2a00      	cmp	r2, #0
 800795c:	dd08      	ble.n	8007970 <scalbn+0x98>
 800795e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007962:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007966:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007970:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007974:	da0c      	bge.n	8007990 <scalbn+0xb8>
 8007976:	a30c      	add	r3, pc, #48	; (adr r3, 80079a8 <scalbn+0xd0>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007980:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007984:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007988:	480e      	ldr	r0, [pc, #56]	; (80079c4 <scalbn+0xec>)
 800798a:	f041 011f 	orr.w	r1, r1, #31
 800798e:	e7bb      	b.n	8007908 <scalbn+0x30>
 8007990:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007994:	3236      	adds	r2, #54	; 0x36
 8007996:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800799a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	2200      	movs	r2, #0
 80079a4:	4b08      	ldr	r3, [pc, #32]	; (80079c8 <scalbn+0xf0>)
 80079a6:	e7af      	b.n	8007908 <scalbn+0x30>
 80079a8:	c2f8f359 	.word	0xc2f8f359
 80079ac:	01a56e1f 	.word	0x01a56e1f
 80079b0:	8800759c 	.word	0x8800759c
 80079b4:	7e37e43c 	.word	0x7e37e43c
 80079b8:	43500000 	.word	0x43500000
 80079bc:	ffff3cb0 	.word	0xffff3cb0
 80079c0:	8800759c 	.word	0x8800759c
 80079c4:	c2f8f359 	.word	0xc2f8f359
 80079c8:	3c900000 	.word	0x3c900000
 80079cc:	00000000 	.word	0x00000000

080079d0 <floor>:
 80079d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80079dc:	2e13      	cmp	r6, #19
 80079de:	460b      	mov	r3, r1
 80079e0:	4607      	mov	r7, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	4605      	mov	r5, r0
 80079e6:	dc32      	bgt.n	8007a4e <floor+0x7e>
 80079e8:	2e00      	cmp	r6, #0
 80079ea:	da14      	bge.n	8007a16 <floor+0x46>
 80079ec:	a334      	add	r3, pc, #208	; (adr r3, 8007ac0 <floor+0xf0>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 fbb3 	bl	800015c <__adddf3>
 80079f6:	2200      	movs	r2, #0
 80079f8:	2300      	movs	r3, #0
 80079fa:	f7f8 fff5 	bl	80009e8 <__aeabi_dcmpgt>
 80079fe:	b138      	cbz	r0, 8007a10 <floor+0x40>
 8007a00:	2c00      	cmp	r4, #0
 8007a02:	da56      	bge.n	8007ab2 <floor+0xe2>
 8007a04:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007a08:	4325      	orrs	r5, r4
 8007a0a:	d055      	beq.n	8007ab8 <floor+0xe8>
 8007a0c:	2500      	movs	r5, #0
 8007a0e:	4c2e      	ldr	r4, [pc, #184]	; (8007ac8 <floor+0xf8>)
 8007a10:	4623      	mov	r3, r4
 8007a12:	462f      	mov	r7, r5
 8007a14:	e025      	b.n	8007a62 <floor+0x92>
 8007a16:	4a2d      	ldr	r2, [pc, #180]	; (8007acc <floor+0xfc>)
 8007a18:	fa42 f806 	asr.w	r8, r2, r6
 8007a1c:	ea01 0208 	and.w	r2, r1, r8
 8007a20:	4302      	orrs	r2, r0
 8007a22:	d01e      	beq.n	8007a62 <floor+0x92>
 8007a24:	a326      	add	r3, pc, #152	; (adr r3, 8007ac0 <floor+0xf0>)
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f7f8 fb97 	bl	800015c <__adddf3>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2300      	movs	r3, #0
 8007a32:	f7f8 ffd9 	bl	80009e8 <__aeabi_dcmpgt>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0ea      	beq.n	8007a10 <floor+0x40>
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	bfbe      	ittt	lt
 8007a3e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007a42:	4133      	asrlt	r3, r6
 8007a44:	18e4      	addlt	r4, r4, r3
 8007a46:	2500      	movs	r5, #0
 8007a48:	ea24 0408 	bic.w	r4, r4, r8
 8007a4c:	e7e0      	b.n	8007a10 <floor+0x40>
 8007a4e:	2e33      	cmp	r6, #51	; 0x33
 8007a50:	dd0b      	ble.n	8007a6a <floor+0x9a>
 8007a52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007a56:	d104      	bne.n	8007a62 <floor+0x92>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	f7f8 fb7f 	bl	800015c <__adddf3>
 8007a5e:	4607      	mov	r7, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4638      	mov	r0, r7
 8007a64:	4619      	mov	r1, r3
 8007a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6a:	f04f 38ff 	mov.w	r8, #4294967295
 8007a6e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007a72:	fa28 f802 	lsr.w	r8, r8, r2
 8007a76:	ea10 0f08 	tst.w	r0, r8
 8007a7a:	d0f2      	beq.n	8007a62 <floor+0x92>
 8007a7c:	a310      	add	r3, pc, #64	; (adr r3, 8007ac0 <floor+0xf0>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fb6b 	bl	800015c <__adddf3>
 8007a86:	2200      	movs	r2, #0
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f7f8 ffad 	bl	80009e8 <__aeabi_dcmpgt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d0be      	beq.n	8007a10 <floor+0x40>
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	da0a      	bge.n	8007aac <floor+0xdc>
 8007a96:	2e14      	cmp	r6, #20
 8007a98:	d101      	bne.n	8007a9e <floor+0xce>
 8007a9a:	3401      	adds	r4, #1
 8007a9c:	e006      	b.n	8007aac <floor+0xdc>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007aa4:	40b3      	lsls	r3, r6
 8007aa6:	441d      	add	r5, r3
 8007aa8:	42af      	cmp	r7, r5
 8007aaa:	d8f6      	bhi.n	8007a9a <floor+0xca>
 8007aac:	ea25 0508 	bic.w	r5, r5, r8
 8007ab0:	e7ae      	b.n	8007a10 <floor+0x40>
 8007ab2:	2500      	movs	r5, #0
 8007ab4:	462c      	mov	r4, r5
 8007ab6:	e7ab      	b.n	8007a10 <floor+0x40>
 8007ab8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007abc:	e7a8      	b.n	8007a10 <floor+0x40>
 8007abe:	bf00      	nop
 8007ac0:	8800759c 	.word	0x8800759c
 8007ac4:	7e37e43c 	.word	0x7e37e43c
 8007ac8:	bff00000 	.word	0xbff00000
 8007acc:	000fffff 	.word	0x000fffff

08007ad0 <_init>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr

08007adc <_fini>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	bf00      	nop
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr
