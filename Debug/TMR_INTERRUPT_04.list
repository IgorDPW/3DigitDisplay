
TMR_INTERRUPT_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800ee40  0800ee40  0001ee40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f058  0800f058  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800f058  0800f058  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f058  0800f058  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f058  0800f058  0001f058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f05c  0800f05c  0001f05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800f060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  20000180  0800f1e0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bd4  0800f1e0  00021bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a45b  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca6  00000000  00000000  0002a647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008fc  00000000  00000000  0002ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020b2  00000000  00000000  0002d784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e0b5  00000000  00000000  0002f836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d0dc  00000000  00000000  0003d8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033b8  00000000  00000000  000ca9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000cdd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ee28 	.word	0x0800ee28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800ee28 	.word	0x0800ee28

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <ADC_Select_CH0>:
int32_t Sensor_Out;

int datasentflag = 0;


void ADC_Select_CH0 (void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	609a      	str	r2, [r3, #8]
//  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5e:	4905      	ldr	r1, [pc, #20]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <ADC_Select_CH0+0x30>)
 8000d62:	f00a f945 	bl	800aff0 <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <ADC_Select_CH0+0x28>
  {
    Error_Handler();
 8000d6c:	f009 fc6c 	bl	800a648 <Error_Handler>

  }
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000019c 	.word	0x2000019c
 8000d78:	200001a8 	.word	0x200001a8

08000d7c <ADC_Select_CH1>:

void ADC_Select_CH1 (void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	4905      	ldr	r1, [pc, #20]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <ADC_Select_CH1+0x30>)
 8000d96:	f00a f92b 	bl	800aff0 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <ADC_Select_CH1+0x28>
  {
    Error_Handler();
 8000da0:	f009 fc52 	bl	800a648 <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000019c 	.word	0x2000019c
 8000dac:	200001a8 	.word	0x200001a8

08000db0 <ADC_Select_CH9>:

void ADC_Select_CH9 (void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000db6:	2209      	movs	r2, #9
 8000db8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <ADC_Select_CH9+0x30>)
 8000dca:	f00a f911 	bl	800aff0 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <ADC_Select_CH9+0x28>
  {
    Error_Handler();
 8000dd4:	f009 fc38 	bl	800a648 <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000019c 	.word	0x2000019c
 8000de0:	200001a8 	.word	0x200001a8

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f009 fddc 	bl	800a9a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f854 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f000 fa30 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df4:	f000 fa10 	bl	8001218 <MX_DMA_Init>
  MX_TIM4_Init();
 8000df8:	f000 f9c0 	bl	800117c <MX_TIM4_Init>
  MX_TIM3_Init();
 8000dfc:	f000 f970 	bl	80010e0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e00:	f000 f8a6 	bl	8000f50 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e04:	f000 f8cc 	bl	8000fa0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim4);
 8000e08:	481d      	ldr	r0, [pc, #116]	; (8000e80 <main+0x9c>)
 8000e0a:	f00b fd7f 	bl	800c90c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000e0e:	481d      	ldr	r0, [pc, #116]	; (8000e84 <main+0xa0>)
 8000e10:	f00b fd7c 	bl	800c90c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	481b      	ldr	r0, [pc, #108]	; (8000e88 <main+0xa4>)
 8000e1c:	f00a ff74 	bl	800bd08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG2, 2);
 8000e20:	2202      	movs	r2, #2
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <main+0xa4>)
 8000e28:	f00a ff6e 	bl	800bd08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG3, 3);
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <main+0xa4>)
 8000e34:	f00a ff68 	bl	800bd08 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000e38:	4814      	ldr	r0, [pc, #80]	; (8000e8c <main+0xa8>)
 8000e3a:	f009 feed 	bl	800ac18 <HAL_ADC_Start>

	 WS2512_Send();
 8000e3e:	f009 fb95 	bl	800a56c <WS2512_Send>

    /* USER CODE BEGIN 3 */



		ADC_Handler();						//realiza captação dos valores analógicos
 8000e42:	f000 faa3 	bl	800138c <ADC_Handler>

		Analog_Buffer();					//Buffer para estabilização dos sinais
 8000e46:	f009 f819 	bl	8009e7c <Analog_Buffer>

		AnalogHandler();					//Conversão dos sinais
 8000e4a:	f000 fae1 	bl	8001410 <AnalogHandler>

		var = Value[2];						//variável utilizada para acionamento display
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <main+0xac>)
 8000e50:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <main+0xb0>)
 8000e56:	801a      	strh	r2, [r3, #0]
		DigitExtract(var);					//Atribuição dos valores usados nos 3 digitos 7 segmentos
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <main+0xb0>)
 8000e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f009 f8de 	bl	800a020 <DigitExtract>

		ColorModeSelect();					//Identificação do Modo de atuação do SPEED
 8000e64:	f000 fb38 	bl	80014d8 <ColorModeSelect>

		var = Value[1];						//variável utilizada para acionamento dos LEDs
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <main+0xac>)
 8000e6a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <main+0xb0>)
 8000e70:	801a      	strh	r2, [r3, #0]

		//ApagaLeds();

		LEDHandler(var);					//Acionamento dos LEDs WS2812  utilizando o sinal do Speed
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <main+0xb0>)
 8000e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fc3b 	bl	80016f4 <LEDHandler>
		ADC_Handler();						//realiza captação dos valores analógicos
 8000e7e:	e7e0      	b.n	8000e42 <main+0x5e>
 8000e80:	20000268 	.word	0x20000268
 8000e84:	20000220 	.word	0x20000220
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	200001a8 	.word	0x200001a8
 8000e90:	20000320 	.word	0x20000320
 8000e94:	20000318 	.word	0x20000318

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea2:	2228      	movs	r2, #40	; 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f00c ff37 	bl	800dd1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ee4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00a ff54 	bl	800bd9c <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000efa:	f009 fba5 	bl	800a648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00b f9c0 	bl	800c2a0 <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f26:	f009 fb8f 	bl	800a648 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00b fb2c 	bl	800c594 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f42:	f009 fb81 	bl	800a648 <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3750      	adds	r7, #80	; 0x50
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <MX_ADC1_Init+0x4c>)
 8000f58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f70:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f84:	f009 fd70 	bl	800aa68 <HAL_ADC_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8000f8e:	f009 fb5b 	bl	800a648 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001a8 	.word	0x200001a8
 8000f9c:	40012400 	.word	0x40012400

08000fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b096      	sub	sp, #88	; 0x58
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00c fe9e 	bl	800dd1a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000fe0:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <MX_TIM1_Init+0x13c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000ff2:	2259      	movs	r2, #89	; 0x59
 8000ff4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001008:	4833      	ldr	r0, [pc, #204]	; (80010d8 <MX_TIM1_Init+0x138>)
 800100a:	f00b fc2f 	bl	800c86c <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001014:	f009 fb18 	bl	800a648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001022:	4619      	mov	r1, r3
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001026:	f00c f94d 	bl	800d2c4 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001030:	f009 fb0a 	bl	800a648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001036:	f00b fcbb 	bl	800c9b0 <HAL_TIM_PWM_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001040:	f009 fb02 	bl	800a648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800104c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001050:	4619      	mov	r1, r3
 8001052:	4821      	ldr	r0, [pc, #132]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001054:	f00c fda0 	bl	800db98 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800105e:	f009 faf3 	bl	800a648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001062:	2360      	movs	r3, #96	; 0x60
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	4814      	ldr	r0, [pc, #80]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001088:	f00c f85a 	bl	800d140 <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001092:	f009 fad9 	bl	800a648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <MX_TIM1_Init+0x138>)
 80010ba:	f00c fdcb 	bl	800dc54 <HAL_TIMEx_ConfigBreakDeadTime>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80010c4:	f009 fac0 	bl	800a648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <MX_TIM1_Init+0x138>)
 80010ca:	f009 fbbb 	bl	800a844 <HAL_TIM_MspPostInit>

}
 80010ce:	bf00      	nop
 80010d0:	3758      	adds	r7, #88	; 0x58
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200001d8 	.word	0x200001d8
 80010dc:	40012c00 	.word	0x40012c00

080010e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_TIM3_Init+0x94>)
 80010fe:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <MX_TIM3_Init+0x98>)
 8001100:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_TIM3_Init+0x94>)
 8001104:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001108:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM3_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_TIM3_Init+0x94>)
 8001112:	2201      	movs	r2, #1
 8001114:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_TIM3_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM3_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <MX_TIM3_Init+0x94>)
 8001124:	f00b fba2 	bl	800c86c <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800112e:	f009 fa8b 	bl	800a648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_TIM3_Init+0x94>)
 8001140:	f00c f8c0 	bl	800d2c4 <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800114a:	f009 fa7d 	bl	800a648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_TIM3_Init+0x94>)
 800115c:	f00c fd1c 	bl	800db98 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001166:	f009 fa6f 	bl	800a648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000220 	.word	0x20000220
 8001178:	40000400 	.word	0x40000400

0800117c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_TIM4_Init+0x94>)
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <MX_TIM4_Init+0x98>)
 800119c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_TIM4_Init+0x94>)
 80011a0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80011a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_TIM4_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_TIM4_Init+0x94>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_TIM4_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_TIM4_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <MX_TIM4_Init+0x94>)
 80011c0:	f00b fb54 	bl	800c86c <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011ca:	f009 fa3d 	bl	800a648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_TIM4_Init+0x94>)
 80011dc:	f00c f872 	bl	800d2c4 <HAL_TIM_ConfigClockSource>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011e6:	f009 fa2f 	bl	800a648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_TIM4_Init+0x94>)
 80011f8:	f00c fcce 	bl	800db98 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001202:	f009 fa21 	bl	800a648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000268 	.word	0x20000268
 8001214:	40000800 	.word	0x40000800

08001218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_DMA_Init+0x38>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <MX_DMA_Init+0x38>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_DMA_Init+0x38>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	200c      	movs	r0, #12
 800123c:	f00a f943 	bl	800b4c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001240:	200c      	movs	r0, #12
 8001242:	f00a f95c 	bl	800b4fe <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <MX_GPIO_Init+0x124>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a42      	ldr	r2, [pc, #264]	; (8001378 <MX_GPIO_Init+0x124>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <MX_GPIO_Init+0x124>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001280:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <MX_GPIO_Init+0x124>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <MX_GPIO_Init+0x124>)
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <MX_GPIO_Init+0x124>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <MX_GPIO_Init+0x124>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a36      	ldr	r2, [pc, #216]	; (8001378 <MX_GPIO_Init+0x124>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MX_GPIO_Init+0x124>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <MX_GPIO_Init+0x124>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a30      	ldr	r2, [pc, #192]	; (8001378 <MX_GPIO_Init+0x124>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <MX_GPIO_Init+0x124>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80012ce:	482b      	ldr	r0, [pc, #172]	; (800137c <MX_GPIO_Init+0x128>)
 80012d0:	f00a fd1a 	bl	800bd08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin|TRACK_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 80012da:	4829      	ldr	r0, [pc, #164]	; (8001380 <MX_GPIO_Init+0x12c>)
 80012dc:	f00a fd14 	bl	800bd08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin|ECO_Pin|SPORT_Pin|PERFORMANCE_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80012e6:	4827      	ldr	r0, [pc, #156]	; (8001384 <MX_GPIO_Init+0x130>)
 80012e8:	f00a fd0e 	bl	800bd08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
 80012ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	481d      	ldr	r0, [pc, #116]	; (800137c <MX_GPIO_Init+0x128>)
 8001306:	f00a fb7b 	bl	800ba00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_GPIO_Init+0x134>)
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	4818      	ldr	r0, [pc, #96]	; (8001380 <MX_GPIO_Init+0x12c>)
 800131e:	f00a fb6f 	bl	800ba00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHCP_pin_Pin STCP_pin_Pin DS_pin_Pin TRACK_Pin */
  GPIO_InitStruct.Pin = SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin|TRACK_Pin;
 8001322:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <MX_GPIO_Init+0x12c>)
 800133c:	f00a fb60 	bl	800ba00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ORIGINAL_Pin ECO_Pin SPORT_Pin PERFORMANCE_Pin TRACK_Pin */
  GPIO_InitStruct.Pin = ORIGINAL_Pin|ECO_Pin|SPORT_Pin|PERFORMANCE_Pin;
 8001340:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <MX_GPIO_Init+0x130>)
 800135a:	f00a fb51 	bl	800ba00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2006      	movs	r0, #6
 8001364:	f00a f8af 	bl	800b4c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001368:	2006      	movs	r0, #6
 800136a:	f00a f8c8 	bl	800b4fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136e:	bf00      	nop
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	40011000 	.word	0x40011000
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40010800 	.word	0x40010800
 8001388:	10110000 	.word	0x10110000

0800138c <ADC_Handler>:

/* USER CODE BEGIN 4 */

void ADC_Handler() {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

	ADC_Select_CH0();
 8001390:	f7ff fcda 	bl	8000d48 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 8001394:	481c      	ldr	r0, [pc, #112]	; (8001408 <ADC_Handler+0x7c>)
 8001396:	f009 fc3f 	bl	800ac18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);		//TODO definir se está correto. Padrão = 1000
 800139a:	2101      	movs	r1, #1
 800139c:	481a      	ldr	r0, [pc, #104]	; (8001408 <ADC_Handler+0x7c>)
 800139e:	f009 fd15 	bl	800adcc <HAL_ADC_PollForConversion>
	readValue[0] = HAL_ADC_GetValue(&hadc1);
 80013a2:	4819      	ldr	r0, [pc, #100]	; (8001408 <ADC_Handler+0x7c>)
 80013a4:	f009 fe18 	bl	800afd8 <HAL_ADC_GetValue>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <ADC_Handler+0x80>)
 80013ae:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80013b0:	4815      	ldr	r0, [pc, #84]	; (8001408 <ADC_Handler+0x7c>)
 80013b2:	f009 fcdf 	bl	800ad74 <HAL_ADC_Stop>

	ADC_Select_CH1();
 80013b6:	f7ff fce1 	bl	8000d7c <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 80013ba:	4813      	ldr	r0, [pc, #76]	; (8001408 <ADC_Handler+0x7c>)
 80013bc:	f009 fc2c 	bl	800ac18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80013c0:	2101      	movs	r1, #1
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <ADC_Handler+0x7c>)
 80013c4:	f009 fd02 	bl	800adcc <HAL_ADC_PollForConversion>
	readValue[1] = HAL_ADC_GetValue(&hadc1);
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <ADC_Handler+0x7c>)
 80013ca:	f009 fe05 	bl	800afd8 <HAL_ADC_GetValue>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <ADC_Handler+0x80>)
 80013d4:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <ADC_Handler+0x7c>)
 80013d8:	f009 fccc 	bl	800ad74 <HAL_ADC_Stop>

	ADC_Select_CH9();
 80013dc:	f7ff fce8 	bl	8000db0 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <ADC_Handler+0x7c>)
 80013e2:	f009 fc19 	bl	800ac18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80013e6:	2101      	movs	r1, #1
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <ADC_Handler+0x7c>)
 80013ea:	f009 fcef 	bl	800adcc <HAL_ADC_PollForConversion>
	readValue[2] = HAL_ADC_GetValue(&hadc1);
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <ADC_Handler+0x7c>)
 80013f0:	f009 fdf2 	bl	800afd8 <HAL_ADC_GetValue>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <ADC_Handler+0x80>)
 80013fa:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <ADC_Handler+0x7c>)
 80013fe:	f009 fcb9 	bl	800ad74 <HAL_ADC_Stop>

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200001a8 	.word	0x200001a8
 800140c:	200006b0 	.word	0x200006b0

08001410 <AnalogHandler>:

void AnalogHandler() {
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0

	//Adequa a escala de cada sinal

		////conversao de 0 a 100% para uso do pedal Ranger
		int max1 = 3350;//3000;//3350;
 8001416:	f640 5316 	movw	r3, #3350	; 0xd16
 800141a:	60fb      	str	r3, [r7, #12]
		int min1 = 690;//595;
 800141c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001420:	60bb      	str	r3, [r7, #8]

		Value[1] = ( Sensor_in - min1 ) *100 / (max1 - min1 );
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <AnalogHandler+0xa8>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2264      	movs	r2, #100	; 0x64
 800142c:	fb03 f202 	mul.w	r2, r3, r2
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1acb      	subs	r3, r1, r3
 8001436:	fb92 f3f3 	sdiv	r3, r2, r3
 800143a:	b21a      	sxth	r2, r3
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <AnalogHandler+0xac>)
 800143e:	805a      	strh	r2, [r3, #2]
		if ( Value[1] > 100){
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <AnalogHandler+0xac>)
 8001442:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	dd03      	ble.n	8001452 <AnalogHandler+0x42>
			Value[1] = 100;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <AnalogHandler+0xac>)
 800144c:	2264      	movs	r2, #100	; 0x64
 800144e:	805a      	strh	r2, [r3, #2]
 8001450:	e007      	b.n	8001462 <AnalogHandler+0x52>
		}else if ( Value[1] < 0){
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <AnalogHandler+0xac>)
 8001454:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da02      	bge.n	8001462 <AnalogHandler+0x52>
			Value[1] = 0;
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <AnalogHandler+0xac>)
 800145e:	2200      	movs	r2, #0
 8001460:	805a      	strh	r2, [r3, #2]
		}




		int max2 = 3350;//2370;
 8001462:	f640 5316 	movw	r3, #3350	; 0xd16
 8001466:	607b      	str	r3, [r7, #4]
		int min2 = 690;//595;
 8001468:	f240 23b2 	movw	r3, #690	; 0x2b2
 800146c:	603b      	str	r3, [r7, #0]

		Value[2] = ( Sensor_Out - min2 ) *100 / (max2 - min2 );
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <AnalogHandler+0xb0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2264      	movs	r2, #100	; 0x64
 8001478:	fb03 f202 	mul.w	r2, r3, r2
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	1acb      	subs	r3, r1, r3
 8001482:	fb92 f3f3 	sdiv	r3, r2, r3
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <AnalogHandler+0xac>)
 800148a:	809a      	strh	r2, [r3, #4]
		if ( Value[2] > 100){
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <AnalogHandler+0xac>)
 800148e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	dd03      	ble.n	800149e <AnalogHandler+0x8e>
			Value[2] = 100;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <AnalogHandler+0xac>)
 8001498:	2264      	movs	r2, #100	; 0x64
 800149a:	809a      	strh	r2, [r3, #4]
		}else if ( Value[2] < 0){
			Value[2] = 0;
		}

}
 800149c:	e007      	b.n	80014ae <AnalogHandler+0x9e>
		}else if ( Value[2] < 0){
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <AnalogHandler+0xac>)
 80014a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da02      	bge.n	80014ae <AnalogHandler+0x9e>
			Value[2] = 0;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <AnalogHandler+0xac>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	809a      	strh	r2, [r3, #4]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	200006bc 	.word	0x200006bc
 80014bc:	20000320 	.word	0x20000320
 80014c0:	200006c0 	.word	0x200006c0

080014c4 <HAL_GPIO_EXTI_Callback>:

//TODO Documentar
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
//	if ((currentMillis - previousMillis) > 200) {
//
//		previousMillis = currentMillis;

//	}
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <ColorModeSelect>:

//TODO Documentar método
void ColorModeSelect() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

	//Define o modo de atuação SPEED

	if(SpeedMode<1120){			//modo original
 80014dc:	4b7e      	ldr	r3, [pc, #504]	; (80016d8 <ColorModeSelect+0x200>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 80014e4:	da03      	bge.n	80014ee <ColorModeSelect+0x16>
		Value[0] = 0;
 80014e6:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <ColorModeSelect+0x204>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	e02e      	b.n	800154c <ColorModeSelect+0x74>
	} else if(SpeedMode<1660){	//modo Eco
 80014ee:	4b7a      	ldr	r3, [pc, #488]	; (80016d8 <ColorModeSelect+0x200>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f240 627b 	movw	r2, #1659	; 0x67b
 80014f6:	4293      	cmp	r3, r2
 80014f8:	dc03      	bgt.n	8001502 <ColorModeSelect+0x2a>
		Value[0] = 1;
 80014fa:	4b78      	ldr	r3, [pc, #480]	; (80016dc <ColorModeSelect+0x204>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	801a      	strh	r2, [r3, #0]
 8001500:	e024      	b.n	800154c <ColorModeSelect+0x74>
	} else if(SpeedMode<2250){	//modo Sport
 8001502:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <ColorModeSelect+0x200>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f640 02c9 	movw	r2, #2249	; 0x8c9
 800150a:	4293      	cmp	r3, r2
 800150c:	dc03      	bgt.n	8001516 <ColorModeSelect+0x3e>
		Value[0] = 2;
 800150e:	4b73      	ldr	r3, [pc, #460]	; (80016dc <ColorModeSelect+0x204>)
 8001510:	2202      	movs	r2, #2
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	e01a      	b.n	800154c <ColorModeSelect+0x74>
	} else if(SpeedMode<2800){	//modo Performance
 8001516:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <ColorModeSelect+0x200>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800151e:	da03      	bge.n	8001528 <ColorModeSelect+0x50>
		Value[0] = 3;
 8001520:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <ColorModeSelect+0x204>)
 8001522:	2203      	movs	r2, #3
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	e011      	b.n	800154c <ColorModeSelect+0x74>
	} else if(SpeedMode<3500){	//modo Track
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <ColorModeSelect+0x200>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001530:	4293      	cmp	r3, r2
 8001532:	dc03      	bgt.n	800153c <ColorModeSelect+0x64>
		Value[0] = 4;
 8001534:	4b69      	ldr	r3, [pc, #420]	; (80016dc <ColorModeSelect+0x204>)
 8001536:	2204      	movs	r2, #4
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	e007      	b.n	800154c <ColorModeSelect+0x74>
	} else if(SpeedMode<4000){	//modo Valet
 800153c:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <ColorModeSelect+0x200>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001544:	da02      	bge.n	800154c <ColorModeSelect+0x74>
		Value[0] = 5;
 8001546:	4b65      	ldr	r3, [pc, #404]	; (80016dc <ColorModeSelect+0x204>)
 8001548:	2205      	movs	r2, #5
 800154a:	801a      	strh	r2, [r3, #0]
	}

	switch (Value[0]) {
 800154c:	4b63      	ldr	r3, [pc, #396]	; (80016dc <ColorModeSelect+0x204>)
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	2b05      	cmp	r3, #5
 8001554:	f200 80ac 	bhi.w	80016b0 <ColorModeSelect+0x1d8>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <ColorModeSelect+0x88>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001579 	.word	0x08001579
 8001564:	080015af 	.word	0x080015af
 8001568:	080015e5 	.word	0x080015e5
 800156c:	0800161b 	.word	0x0800161b
 8001570:	08001651 	.word	0x08001651
 8001574:	0800167b 	.word	0x0800167b

	case branco:
		Red = 255;
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <ColorModeSelect+0x208>)
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	601a      	str	r2, [r3, #0]
		Green = 255;
 800157e:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <ColorModeSelect+0x20c>)
 8001580:	22ff      	movs	r2, #255	; 0xff
 8001582:	601a      	str	r2, [r3, #0]
		Blue = 255;
 8001584:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <ColorModeSelect+0x210>)
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	601a      	str	r2, [r3, #0]

//		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_SET);

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001590:	4856      	ldr	r0, [pc, #344]	; (80016ec <ColorModeSelect+0x214>)
 8001592:	f00a fbb9 	bl	800bd08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159c:	4853      	ldr	r0, [pc, #332]	; (80016ec <ColorModeSelect+0x214>)
 800159e:	f00a fbb3 	bl	800bd08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2120      	movs	r1, #32
 80015a6:	4852      	ldr	r0, [pc, #328]	; (80016f0 <ColorModeSelect+0x218>)
 80015a8:	f00a fbae 	bl	800bd08 <HAL_GPIO_WritePin>

		break;
 80015ac:	e092      	b.n	80016d4 <ColorModeSelect+0x1fc>

	case eco:
		Red = 0;
 80015ae:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <ColorModeSelect+0x208>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
		Green = 180;
 80015b4:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <ColorModeSelect+0x20c>)
 80015b6:	22b4      	movs	r2, #180	; 0xb4
 80015b8:	601a      	str	r2, [r3, #0]
		Blue = 255;
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <ColorModeSelect+0x210>)
 80015bc:	22ff      	movs	r2, #255	; 0xff
 80015be:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA, ECO_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c6:	4849      	ldr	r0, [pc, #292]	; (80016ec <ColorModeSelect+0x214>)
 80015c8:	f00a fb9e 	bl	800bd08 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin | SPORT_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80015d2:	4846      	ldr	r0, [pc, #280]	; (80016ec <ColorModeSelect+0x214>)
 80015d4:	f00a fb98 	bl	800bd08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2120      	movs	r1, #32
 80015dc:	4844      	ldr	r0, [pc, #272]	; (80016f0 <ColorModeSelect+0x218>)
 80015de:	f00a fb93 	bl	800bd08 <HAL_GPIO_WritePin>


		break;
 80015e2:	e077      	b.n	80016d4 <ColorModeSelect+0x1fc>

	case verde:
		Red = 0;
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <ColorModeSelect+0x208>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
		Green = 255;
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <ColorModeSelect+0x20c>)
 80015ec:	22ff      	movs	r2, #255	; 0xff
 80015ee:	601a      	str	r2, [r3, #0]
		Blue = 0;
 80015f0:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <ColorModeSelect+0x210>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA, SPORT_Pin , GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fc:	483b      	ldr	r0, [pc, #236]	; (80016ec <ColorModeSelect+0x214>)
 80015fe:	f00a fb83 	bl	800bd08 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | ORIGINAL_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001608:	4838      	ldr	r0, [pc, #224]	; (80016ec <ColorModeSelect+0x214>)
 800160a:	f00a fb7d 	bl	800bd08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2120      	movs	r1, #32
 8001612:	4837      	ldr	r0, [pc, #220]	; (80016f0 <ColorModeSelect+0x218>)
 8001614:	f00a fb78 	bl	800bd08 <HAL_GPIO_WritePin>

		break;
 8001618:	e05c      	b.n	80016d4 <ColorModeSelect+0x1fc>

	case amarelo:
		Red = 255;
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <ColorModeSelect+0x208>)
 800161c:	22ff      	movs	r2, #255	; 0xff
 800161e:	601a      	str	r2, [r3, #0]
		Green = 255;
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <ColorModeSelect+0x20c>)
 8001622:	22ff      	movs	r2, #255	; 0xff
 8001624:	601a      	str	r2, [r3, #0]
		Blue = 0;
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <ColorModeSelect+0x210>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA, PERFORMANCE_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001632:	482e      	ldr	r0, [pc, #184]	; (80016ec <ColorModeSelect+0x214>)
 8001634:	f00a fb68 	bl	800bd08 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | ORIGINAL_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800163e:	482b      	ldr	r0, [pc, #172]	; (80016ec <ColorModeSelect+0x214>)
 8001640:	f00a fb62 	bl	800bd08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2120      	movs	r1, #32
 8001648:	4829      	ldr	r0, [pc, #164]	; (80016f0 <ColorModeSelect+0x218>)
 800164a:	f00a fb5d 	bl	800bd08 <HAL_GPIO_WritePin>

		break;
 800164e:	e041      	b.n	80016d4 <ColorModeSelect+0x1fc>

	case vermelho:
		Red = 255;
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <ColorModeSelect+0x208>)
 8001652:	22ff      	movs	r2, #255	; 0xff
 8001654:	601a      	str	r2, [r3, #0]
		Green = 0;
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <ColorModeSelect+0x20c>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
		Blue = 0;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <ColorModeSelect+0x210>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2120      	movs	r1, #32
 8001666:	4822      	ldr	r0, [pc, #136]	; (80016f0 <ColorModeSelect+0x218>)
 8001668:	f00a fb4e 	bl	800bd08 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | PERFORMANCE_Pin | ORIGINAL_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001672:	481e      	ldr	r0, [pc, #120]	; (80016ec <ColorModeSelect+0x214>)
 8001674:	f00a fb48 	bl	800bd08 <HAL_GPIO_WritePin>

		break;
 8001678:	e02c      	b.n	80016d4 <ColorModeSelect+0x1fc>

	case azul:
		Red = 0;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <ColorModeSelect+0x208>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
		Green = 0;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <ColorModeSelect+0x20c>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
		Blue = 255;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <ColorModeSelect+0x210>)
 8001688:	22ff      	movs	r2, #255	; 0xff
 800168a:	601a      	str	r2, [r3, #0]

		//HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_SET);

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001692:	4816      	ldr	r0, [pc, #88]	; (80016ec <ColorModeSelect+0x214>)
 8001694:	f00a fb38 	bl	800bd08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2120      	movs	r1, #32
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <ColorModeSelect+0x218>)
 800169e:	f00a fb33 	bl	800bd08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <ColorModeSelect+0x214>)
 80016aa:	f00a fb2d 	bl	800bd08 <HAL_GPIO_WritePin>

		break;
 80016ae:	e011      	b.n	80016d4 <ColorModeSelect+0x1fc>

	default:

		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <ColorModeSelect+0x214>)
 80016b8:	f00a fb26 	bl	800bd08 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80016c2:	480a      	ldr	r0, [pc, #40]	; (80016ec <ColorModeSelect+0x214>)
 80016c4:	f00a fb20 	bl	800bd08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2120      	movs	r1, #32
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <ColorModeSelect+0x218>)
 80016ce:	f00a fb1b 	bl	800bd08 <HAL_GPIO_WritePin>

		break;
 80016d2:	bf00      	nop
	}
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200006b8 	.word	0x200006b8
 80016dc:	20000320 	.word	0x20000320
 80016e0:	20000008 	.word	0x20000008
 80016e4:	2000000c 	.word	0x2000000c
 80016e8:	20000010 	.word	0x20000010
 80016ec:	40010800 	.word	0x40010800
 80016f0:	40010c00 	.word	0x40010c00

080016f4 <LEDHandler>:

void LEDHandler(int Valor) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

	int led = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]

	//apagar todos os leds
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0); led++;
 8001700:	2300      	movs	r3, #0
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f008 fc5e 	bl	8009fc8 <Set_LED>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	2300      	movs	r3, #0
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f008 fc55 	bl	8009fc8 <Set_LED>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3301      	adds	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	2300      	movs	r3, #0
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f008 fc4c 	bl	8009fc8 <Set_LED>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	2300      	movs	r3, #0
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f008 fc43 	bl	8009fc8 <Set_LED>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	2300      	movs	r3, #0
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f008 fc3a 	bl	8009fc8 <Set_LED>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3301      	adds	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f008 fc31 	bl	8009fc8 <Set_LED>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	2300      	movs	r3, #0
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f008 fc28 	bl	8009fc8 <Set_LED>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 800177e:	2300      	movs	r3, #0
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f008 fc1f 	bl	8009fc8 <Set_LED>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	2300      	movs	r3, #0
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f008 fc16 	bl	8009fc8 <Set_LED>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f008 fc0d 	bl	8009fc8 <Set_LED>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	2300      	movs	r3, #0
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f008 fc04 	bl	8009fc8 <Set_LED>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	2300      	movs	r3, #0
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f008 fbfb 	bl	8009fc8 <Set_LED>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	2300      	movs	r3, #0
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f008 fbf2 	bl	8009fc8 <Set_LED>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	2300      	movs	r3, #0
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f008 fbe9 	bl	8009fc8 <Set_LED>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3301      	adds	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 80017fc:	2300      	movs	r3, #0
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f008 fbe0 	bl	8009fc8 <Set_LED>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	2300      	movs	r3, #0
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f008 fbd7 	bl	8009fc8 <Set_LED>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	2300      	movs	r3, #0
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f008 fbce 	bl	8009fc8 <Set_LED>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3301      	adds	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	2300      	movs	r3, #0
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f008 fbc5 	bl	8009fc8 <Set_LED>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	2300      	movs	r3, #0
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f008 fbbc 	bl	8009fc8 <Set_LED>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3301      	adds	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	2300      	movs	r3, #0
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f008 fbb3 	bl	8009fc8 <Set_LED>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	2300      	movs	r3, #0
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f008 fbaa 	bl	8009fc8 <Set_LED>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 800187a:	2300      	movs	r3, #0
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f008 fba1 	bl	8009fc8 <Set_LED>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	2300      	movs	r3, #0
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f008 fb98 	bl	8009fc8 <Set_LED>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	2300      	movs	r3, #0
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f008 fb8f 	bl	8009fc8 <Set_LED>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	2300      	movs	r3, #0
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f008 fb86 	bl	8009fc8 <Set_LED>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2200      	movs	r2, #0
 80018c6:	2100      	movs	r1, #0
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f008 fb7d 	bl	8009fc8 <Set_LED>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	2300      	movs	r3, #0
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f008 fb74 	bl	8009fc8 <Set_LED>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	2300      	movs	r3, #0
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f008 fb6b 	bl	8009fc8 <Set_LED>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 80018f8:	2300      	movs	r3, #0
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f008 fb62 	bl	8009fc8 <Set_LED>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	2300      	movs	r3, #0
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f008 fb59 	bl	8009fc8 <Set_LED>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3301      	adds	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	2300      	movs	r3, #0
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f008 fb50 	bl	8009fc8 <Set_LED>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	2300      	movs	r3, #0
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f008 fb47 	bl	8009fc8 <Set_LED>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	2300      	movs	r3, #0
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f008 fb3e 	bl	8009fc8 <Set_LED>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3301      	adds	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	2300      	movs	r3, #0
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f008 fb35 	bl	8009fc8 <Set_LED>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	2300      	movs	r3, #0
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f008 fb2c 	bl	8009fc8 <Set_LED>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001976:	2300      	movs	r3, #0
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f008 fb23 	bl	8009fc8 <Set_LED>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3301      	adds	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	2300      	movs	r3, #0
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f008 fb1a 	bl	8009fc8 <Set_LED>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	2300      	movs	r3, #0
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f008 fb11 	bl	8009fc8 <Set_LED>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	2300      	movs	r3, #0
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f008 fb08 	bl	8009fc8 <Set_LED>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	2300      	movs	r3, #0
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f008 faff 	bl	8009fc8 <Set_LED>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	2300      	movs	r3, #0
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f008 faf6 	bl	8009fc8 <Set_LED>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	2300      	movs	r3, #0
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f008 faed 	bl	8009fc8 <Set_LED>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 80019f4:	2300      	movs	r3, #0
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f008 fae4 	bl	8009fc8 <Set_LED>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f008 fadb 	bl	8009fc8 <Set_LED>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f008 fad2 	bl	8009fc8 <Set_LED>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f008 fac9 	bl	8009fc8 <Set_LED>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f008 fac0 	bl	8009fc8 <Set_LED>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f008 fab7 	bl	8009fc8 <Set_LED>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	2300      	movs	r3, #0
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f008 faae 	bl	8009fc8 <Set_LED>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001a72:	2300      	movs	r3, #0
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f008 faa5 	bl	8009fc8 <Set_LED>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	2300      	movs	r3, #0
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f008 fa9c 	bl	8009fc8 <Set_LED>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	2300      	movs	r3, #0
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f008 fa93 	bl	8009fc8 <Set_LED>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f008 fa8a 	bl	8009fc8 <Set_LED>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	2300      	movs	r3, #0
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f008 fa81 	bl	8009fc8 <Set_LED>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	2300      	movs	r3, #0
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f008 fa78 	bl	8009fc8 <Set_LED>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f008 fa6f 	bl	8009fc8 <Set_LED>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001af0:	2300      	movs	r3, #0
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f008 fa66 	bl	8009fc8 <Set_LED>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	2300      	movs	r3, #0
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f008 fa5d 	bl	8009fc8 <Set_LED>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f008 fa54 	bl	8009fc8 <Set_LED>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	2300      	movs	r3, #0
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f008 fa4b 	bl	8009fc8 <Set_LED>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3301      	adds	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f008 fa42 	bl	8009fc8 <Set_LED>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f008 fa39 	bl	8009fc8 <Set_LED>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f008 fa30 	bl	8009fc8 <Set_LED>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f008 fa27 	bl	8009fc8 <Set_LED>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	2300      	movs	r3, #0
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f008 fa1e 	bl	8009fc8 <Set_LED>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	2300      	movs	r3, #0
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f008 fa15 	bl	8009fc8 <Set_LED>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f008 fa0c 	bl	8009fc8 <Set_LED>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f008 fa03 	bl	8009fc8 <Set_LED>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f008 f9fa 	bl	8009fc8 <Set_LED>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f008 f9f1 	bl	8009fc8 <Set_LED>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3301      	adds	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001bec:	2300      	movs	r3, #0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f008 f9e8 	bl	8009fc8 <Set_LED>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f008 f9df 	bl	8009fc8 <Set_LED>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	2300      	movs	r3, #0
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f008 f9d6 	bl	8009fc8 <Set_LED>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	2300      	movs	r3, #0
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f008 f9cd 	bl	8009fc8 <Set_LED>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3301      	adds	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	2300      	movs	r3, #0
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f008 f9c4 	bl	8009fc8 <Set_LED>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f008 f9bb 	bl	8009fc8 <Set_LED>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f008 f9b2 	bl	8009fc8 <Set_LED>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3301      	adds	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f008 f9a9 	bl	8009fc8 <Set_LED>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f008 f9a0 	bl	8009fc8 <Set_LED>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f008 f997 	bl	8009fc8 <Set_LED>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f008 f98e 	bl	8009fc8 <Set_LED>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f008 f985 	bl	8009fc8 <Set_LED>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f008 f97c 	bl	8009fc8 <Set_LED>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f008 f973 	bl	8009fc8 <Set_LED>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0); 	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f008 f96a 	bl	8009fc8 <Set_LED>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f008 f961 	bl	8009fc8 <Set_LED>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f008 f958 	bl	8009fc8 <Set_LED>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f008 f94f 	bl	8009fc8 <Set_LED>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	2300      	movs	r3, #0
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f008 f946 	bl	8009fc8 <Set_LED>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f008 f93d 	bl	8009fc8 <Set_LED>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	2300      	movs	r3, #0
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f008 f934 	bl	8009fc8 <Set_LED>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3301      	adds	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0); 	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001d66:	2300      	movs	r3, #0
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f008 f92b 	bl	8009fc8 <Set_LED>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f008 f922 	bl	8009fc8 <Set_LED>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f008 f919 	bl	8009fc8 <Set_LED>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f008 f910 	bl	8009fc8 <Set_LED>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	2300      	movs	r3, #0
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f008 f907 	bl	8009fc8 <Set_LED>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f008 f8fe 	bl	8009fc8 <Set_LED>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f008 f8f5 	bl	8009fc8 <Set_LED>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3301      	adds	r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0); 	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001de4:	2300      	movs	r3, #0
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f008 f8ec 	bl	8009fc8 <Set_LED>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	2300      	movs	r3, #0
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f008 f8e3 	bl	8009fc8 <Set_LED>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3301      	adds	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f008 f8da 	bl	8009fc8 <Set_LED>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f008 f8d1 	bl	8009fc8 <Set_LED>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f008 f8c8 	bl	8009fc8 <Set_LED>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f008 f8bf 	bl	8009fc8 <Set_LED>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	2300      	movs	r3, #0
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f008 f8b6 	bl	8009fc8 <Set_LED>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]

	var1 = Value[2];	var2 =  Value[0] * 21;
 8001e62:	4bb7      	ldr	r3, [pc, #732]	; (8002140 <LEDHandler+0xa4c>)
 8001e64:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001e68:	4bb6      	ldr	r3, [pc, #728]	; (8002144 <LEDHandler+0xa50>)
 8001e6a:	801a      	strh	r2, [r3, #0]
 8001e6c:	4bb4      	ldr	r3, [pc, #720]	; (8002140 <LEDHandler+0xa4c>)
 8001e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	0052      	lsls	r2, r2, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	00d2      	lsls	r2, r2, #3
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	4bb0      	ldr	r3, [pc, #704]	; (8002148 <LEDHandler+0xa54>)
 8001e86:	801a      	strh	r2, [r3, #0]

	if ( (Value[0] != 0) && (Value[0] != 5)) {
 8001e88:	4bad      	ldr	r3, [pc, #692]	; (8002140 <LEDHandler+0xa4c>)
 8001e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f004 8528 	beq.w	80068e4 <LEDHandler+0x51f0>
 8001e94:	4baa      	ldr	r3, [pc, #680]	; (8002140 <LEDHandler+0xa4c>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	f004 8522 	beq.w	80068e4 <LEDHandler+0x51f0>

		if (Valor == 0) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 8186 	bne.w	80021b4 <LEDHandler+0xac0>

			Set_LED(var2, 0, 0, 0);			var2++;		//LED1
 8001ea8:	4ba7      	ldr	r3, [pc, #668]	; (8002148 <LEDHandler+0xa54>)
 8001eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	f008 f887 	bl	8009fc8 <Set_LED>
 8001eba:	4ba3      	ldr	r3, [pc, #652]	; (8002148 <LEDHandler+0xa54>)
 8001ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	4b9f      	ldr	r3, [pc, #636]	; (8002148 <LEDHandler+0xa54>)
 8001eca:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED2
 8001ecc:	4b9e      	ldr	r3, [pc, #632]	; (8002148 <LEDHandler+0xa54>)
 8001ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	f008 f875 	bl	8009fc8 <Set_LED>
 8001ede:	4b9a      	ldr	r3, [pc, #616]	; (8002148 <LEDHandler+0xa54>)
 8001ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	4b96      	ldr	r3, [pc, #600]	; (8002148 <LEDHandler+0xa54>)
 8001eee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED3
 8001ef0:	4b95      	ldr	r3, [pc, #596]	; (8002148 <LEDHandler+0xa54>)
 8001ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	f008 f863 	bl	8009fc8 <Set_LED>
 8001f02:	4b91      	ldr	r3, [pc, #580]	; (8002148 <LEDHandler+0xa54>)
 8001f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b8d      	ldr	r3, [pc, #564]	; (8002148 <LEDHandler+0xa54>)
 8001f12:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED4
 8001f14:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <LEDHandler+0xa54>)
 8001f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	f008 f851 	bl	8009fc8 <Set_LED>
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <LEDHandler+0xa54>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	4b84      	ldr	r3, [pc, #528]	; (8002148 <LEDHandler+0xa54>)
 8001f36:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED5
 8001f38:	4b83      	ldr	r3, [pc, #524]	; (8002148 <LEDHandler+0xa54>)
 8001f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	f008 f83f 	bl	8009fc8 <Set_LED>
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <LEDHandler+0xa54>)
 8001f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	4b7b      	ldr	r3, [pc, #492]	; (8002148 <LEDHandler+0xa54>)
 8001f5a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED6
 8001f5c:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <LEDHandler+0xa54>)
 8001f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f62:	4618      	mov	r0, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f008 f82d 	bl	8009fc8 <Set_LED>
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <LEDHandler+0xa54>)
 8001f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	4b72      	ldr	r3, [pc, #456]	; (8002148 <LEDHandler+0xa54>)
 8001f7e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED7
 8001f80:	4b71      	ldr	r3, [pc, #452]	; (8002148 <LEDHandler+0xa54>)
 8001f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f86:	4618      	mov	r0, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	f008 f81b 	bl	8009fc8 <Set_LED>
 8001f92:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <LEDHandler+0xa54>)
 8001f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	4b69      	ldr	r3, [pc, #420]	; (8002148 <LEDHandler+0xa54>)
 8001fa2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED8
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <LEDHandler+0xa54>)
 8001fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001faa:	4618      	mov	r0, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f008 f809 	bl	8009fc8 <Set_LED>
 8001fb6:	4b64      	ldr	r3, [pc, #400]	; (8002148 <LEDHandler+0xa54>)
 8001fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	4b60      	ldr	r3, [pc, #384]	; (8002148 <LEDHandler+0xa54>)
 8001fc6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED9
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <LEDHandler+0xa54>)
 8001fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f007 fff7 	bl	8009fc8 <Set_LED>
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <LEDHandler+0xa54>)
 8001fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	4b57      	ldr	r3, [pc, #348]	; (8002148 <LEDHandler+0xa54>)
 8001fea:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED10
 8001fec:	4b56      	ldr	r3, [pc, #344]	; (8002148 <LEDHandler+0xa54>)
 8001fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f007 ffe5 	bl	8009fc8 <Set_LED>
 8001ffe:	4b52      	ldr	r3, [pc, #328]	; (8002148 <LEDHandler+0xa54>)
 8002000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002004:	b29b      	uxth	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	b29b      	uxth	r3, r3
 800200a:	b21a      	sxth	r2, r3
 800200c:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <LEDHandler+0xa54>)
 800200e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED11
 8002010:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <LEDHandler+0xa54>)
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	4618      	mov	r0, r3
 8002018:	2300      	movs	r3, #0
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	f007 ffd3 	bl	8009fc8 <Set_LED>
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <LEDHandler+0xa54>)
 8002024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002028:	b29b      	uxth	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	b29b      	uxth	r3, r3
 800202e:	b21a      	sxth	r2, r3
 8002030:	4b45      	ldr	r3, [pc, #276]	; (8002148 <LEDHandler+0xa54>)
 8002032:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED12
 8002034:	4b44      	ldr	r3, [pc, #272]	; (8002148 <LEDHandler+0xa54>)
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	4618      	mov	r0, r3
 800203c:	2300      	movs	r3, #0
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	f007 ffc1 	bl	8009fc8 <Set_LED>
 8002046:	4b40      	ldr	r3, [pc, #256]	; (8002148 <LEDHandler+0xa54>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	b29b      	uxth	r3, r3
 800204e:	3301      	adds	r3, #1
 8002050:	b29b      	uxth	r3, r3
 8002052:	b21a      	sxth	r2, r3
 8002054:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <LEDHandler+0xa54>)
 8002056:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED13
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <LEDHandler+0xa54>)
 800205a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205e:	4618      	mov	r0, r3
 8002060:	2300      	movs	r3, #0
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	f007 ffaf 	bl	8009fc8 <Set_LED>
 800206a:	4b37      	ldr	r3, [pc, #220]	; (8002148 <LEDHandler+0xa54>)
 800206c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002070:	b29b      	uxth	r3, r3
 8002072:	3301      	adds	r3, #1
 8002074:	b29b      	uxth	r3, r3
 8002076:	b21a      	sxth	r2, r3
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <LEDHandler+0xa54>)
 800207a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED14
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <LEDHandler+0xa54>)
 800207e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002082:	4618      	mov	r0, r3
 8002084:	2300      	movs	r3, #0
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	f007 ff9d 	bl	8009fc8 <Set_LED>
 800208e:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <LEDHandler+0xa54>)
 8002090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002094:	b29b      	uxth	r3, r3
 8002096:	3301      	adds	r3, #1
 8002098:	b29b      	uxth	r3, r3
 800209a:	b21a      	sxth	r2, r3
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <LEDHandler+0xa54>)
 800209e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED15
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <LEDHandler+0xa54>)
 80020a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a6:	4618      	mov	r0, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	f007 ff8b 	bl	8009fc8 <Set_LED>
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <LEDHandler+0xa54>)
 80020b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b21a      	sxth	r2, r3
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <LEDHandler+0xa54>)
 80020c2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED16
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <LEDHandler+0xa54>)
 80020c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ca:	4618      	mov	r0, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	f007 ff79 	bl	8009fc8 <Set_LED>
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <LEDHandler+0xa54>)
 80020d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <LEDHandler+0xa54>)
 80020e6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED17
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <LEDHandler+0xa54>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	4618      	mov	r0, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	f007 ff67 	bl	8009fc8 <Set_LED>
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <LEDHandler+0xa54>)
 80020fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002100:	b29b      	uxth	r3, r3
 8002102:	3301      	adds	r3, #1
 8002104:	b29b      	uxth	r3, r3
 8002106:	b21a      	sxth	r2, r3
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <LEDHandler+0xa54>)
 800210a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <LEDHandler+0xa54>)
 800210e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002112:	4618      	mov	r0, r3
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	f007 ff55 	bl	8009fc8 <Set_LED>
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <LEDHandler+0xa54>)
 8002120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002124:	b29b      	uxth	r3, r3
 8002126:	3301      	adds	r3, #1
 8002128:	b29b      	uxth	r3, r3
 800212a:	b21a      	sxth	r2, r3
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <LEDHandler+0xa54>)
 800212e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <LEDHandler+0xa54>)
 8002132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002136:	4618      	mov	r0, r3
 8002138:	2300      	movs	r3, #0
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	e005      	b.n	800214c <LEDHandler+0xa58>
 8002140:	20000320 	.word	0x20000320
 8002144:	2000031a 	.word	0x2000031a
 8002148:	2000031c 	.word	0x2000031c
 800214c:	f007 ff3c 	bl	8009fc8 <Set_LED>
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <LEDHandler+0xabc>)
 8002152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002156:	b29b      	uxth	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	b29b      	uxth	r3, r3
 800215c:	b21a      	sxth	r2, r3
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <LEDHandler+0xabc>)
 8002160:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <LEDHandler+0xabc>)
 8002164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002168:	4618      	mov	r0, r3
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	f007 ff2a 	bl	8009fc8 <Set_LED>
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <LEDHandler+0xabc>)
 8002176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217a:	b29b      	uxth	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	b29b      	uxth	r3, r3
 8002180:	b21a      	sxth	r2, r3
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <LEDHandler+0xabc>)
 8002184:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <LEDHandler+0xabc>)
 8002188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218c:	4618      	mov	r0, r3
 800218e:	2300      	movs	r3, #0
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	f007 ff18 	bl	8009fc8 <Set_LED>
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <LEDHandler+0xabc>)
 800219a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <LEDHandler+0xabc>)
 80021a8:	801a      	strh	r2, [r3, #0]
 80021aa:	f004 bb9b 	b.w	80068e4 <LEDHandler+0x51f0>
 80021ae:	bf00      	nop
 80021b0:	2000031c 	.word	0x2000031c

		} else if (Valor >= 1 && Valor < 6) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f340 818e 	ble.w	80024d8 <LEDHandler+0xde4>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	f300 818a 	bgt.w	80024d8 <LEDHandler+0xde4>

			Set_LED(var2, Red, Green, Blue);			var2++;
 80021c4:	4bb4      	ldr	r3, [pc, #720]	; (8002498 <LEDHandler+0xda4>)
 80021c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ca:	4618      	mov	r0, r3
 80021cc:	4bb3      	ldr	r3, [pc, #716]	; (800249c <LEDHandler+0xda8>)
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	4bb3      	ldr	r3, [pc, #716]	; (80024a0 <LEDHandler+0xdac>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4bb3      	ldr	r3, [pc, #716]	; (80024a4 <LEDHandler+0xdb0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f007 fef6 	bl	8009fc8 <Set_LED>
 80021dc:	4bae      	ldr	r3, [pc, #696]	; (8002498 <LEDHandler+0xda4>)
 80021de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	4bab      	ldr	r3, [pc, #684]	; (8002498 <LEDHandler+0xda4>)
 80021ec:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED2
 80021ee:	4baa      	ldr	r3, [pc, #680]	; (8002498 <LEDHandler+0xda4>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	4618      	mov	r0, r3
 80021f6:	2300      	movs	r3, #0
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	f007 fee4 	bl	8009fc8 <Set_LED>
 8002200:	4ba5      	ldr	r3, [pc, #660]	; (8002498 <LEDHandler+0xda4>)
 8002202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002206:	b29b      	uxth	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	b29b      	uxth	r3, r3
 800220c:	b21a      	sxth	r2, r3
 800220e:	4ba2      	ldr	r3, [pc, #648]	; (8002498 <LEDHandler+0xda4>)
 8002210:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED3
 8002212:	4ba1      	ldr	r3, [pc, #644]	; (8002498 <LEDHandler+0xda4>)
 8002214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002218:	4618      	mov	r0, r3
 800221a:	2300      	movs	r3, #0
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	f007 fed2 	bl	8009fc8 <Set_LED>
 8002224:	4b9c      	ldr	r3, [pc, #624]	; (8002498 <LEDHandler+0xda4>)
 8002226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222a:	b29b      	uxth	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	b29b      	uxth	r3, r3
 8002230:	b21a      	sxth	r2, r3
 8002232:	4b99      	ldr	r3, [pc, #612]	; (8002498 <LEDHandler+0xda4>)
 8002234:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED4
 8002236:	4b98      	ldr	r3, [pc, #608]	; (8002498 <LEDHandler+0xda4>)
 8002238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223c:	4618      	mov	r0, r3
 800223e:	2300      	movs	r3, #0
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	f007 fec0 	bl	8009fc8 <Set_LED>
 8002248:	4b93      	ldr	r3, [pc, #588]	; (8002498 <LEDHandler+0xda4>)
 800224a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224e:	b29b      	uxth	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	b21a      	sxth	r2, r3
 8002256:	4b90      	ldr	r3, [pc, #576]	; (8002498 <LEDHandler+0xda4>)
 8002258:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED5
 800225a:	4b8f      	ldr	r3, [pc, #572]	; (8002498 <LEDHandler+0xda4>)
 800225c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002260:	4618      	mov	r0, r3
 8002262:	2300      	movs	r3, #0
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	f007 feae 	bl	8009fc8 <Set_LED>
 800226c:	4b8a      	ldr	r3, [pc, #552]	; (8002498 <LEDHandler+0xda4>)
 800226e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002272:	b29b      	uxth	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	b21a      	sxth	r2, r3
 800227a:	4b87      	ldr	r3, [pc, #540]	; (8002498 <LEDHandler+0xda4>)
 800227c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED6
 800227e:	4b86      	ldr	r3, [pc, #536]	; (8002498 <LEDHandler+0xda4>)
 8002280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002284:	4618      	mov	r0, r3
 8002286:	2300      	movs	r3, #0
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	f007 fe9c 	bl	8009fc8 <Set_LED>
 8002290:	4b81      	ldr	r3, [pc, #516]	; (8002498 <LEDHandler+0xda4>)
 8002292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002296:	b29b      	uxth	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	b29b      	uxth	r3, r3
 800229c:	b21a      	sxth	r2, r3
 800229e:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <LEDHandler+0xda4>)
 80022a0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED7
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <LEDHandler+0xda4>)
 80022a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a8:	4618      	mov	r0, r3
 80022aa:	2300      	movs	r3, #0
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	f007 fe8a 	bl	8009fc8 <Set_LED>
 80022b4:	4b78      	ldr	r3, [pc, #480]	; (8002498 <LEDHandler+0xda4>)
 80022b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	4b75      	ldr	r3, [pc, #468]	; (8002498 <LEDHandler+0xda4>)
 80022c4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED8
 80022c6:	4b74      	ldr	r3, [pc, #464]	; (8002498 <LEDHandler+0xda4>)
 80022c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022cc:	4618      	mov	r0, r3
 80022ce:	2300      	movs	r3, #0
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	f007 fe78 	bl	8009fc8 <Set_LED>
 80022d8:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <LEDHandler+0xda4>)
 80022da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <LEDHandler+0xda4>)
 80022e8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED9
 80022ea:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <LEDHandler+0xda4>)
 80022ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f0:	4618      	mov	r0, r3
 80022f2:	2300      	movs	r3, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	f007 fe66 	bl	8009fc8 <Set_LED>
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <LEDHandler+0xda4>)
 80022fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002302:	b29b      	uxth	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	b21a      	sxth	r2, r3
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <LEDHandler+0xda4>)
 800230c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED10
 800230e:	4b62      	ldr	r3, [pc, #392]	; (8002498 <LEDHandler+0xda4>)
 8002310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002314:	4618      	mov	r0, r3
 8002316:	2300      	movs	r3, #0
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	f007 fe54 	bl	8009fc8 <Set_LED>
 8002320:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <LEDHandler+0xda4>)
 8002322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002326:	b29b      	uxth	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	b29b      	uxth	r3, r3
 800232c:	b21a      	sxth	r2, r3
 800232e:	4b5a      	ldr	r3, [pc, #360]	; (8002498 <LEDHandler+0xda4>)
 8002330:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED11
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <LEDHandler+0xda4>)
 8002334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002338:	4618      	mov	r0, r3
 800233a:	2300      	movs	r3, #0
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	f007 fe42 	bl	8009fc8 <Set_LED>
 8002344:	4b54      	ldr	r3, [pc, #336]	; (8002498 <LEDHandler+0xda4>)
 8002346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234a:	b29b      	uxth	r3, r3
 800234c:	3301      	adds	r3, #1
 800234e:	b29b      	uxth	r3, r3
 8002350:	b21a      	sxth	r2, r3
 8002352:	4b51      	ldr	r3, [pc, #324]	; (8002498 <LEDHandler+0xda4>)
 8002354:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED12
 8002356:	4b50      	ldr	r3, [pc, #320]	; (8002498 <LEDHandler+0xda4>)
 8002358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235c:	4618      	mov	r0, r3
 800235e:	2300      	movs	r3, #0
 8002360:	2200      	movs	r2, #0
 8002362:	2100      	movs	r1, #0
 8002364:	f007 fe30 	bl	8009fc8 <Set_LED>
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <LEDHandler+0xda4>)
 800236a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236e:	b29b      	uxth	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	b29b      	uxth	r3, r3
 8002374:	b21a      	sxth	r2, r3
 8002376:	4b48      	ldr	r3, [pc, #288]	; (8002498 <LEDHandler+0xda4>)
 8002378:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED13
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <LEDHandler+0xda4>)
 800237c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002380:	4618      	mov	r0, r3
 8002382:	2300      	movs	r3, #0
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	f007 fe1e 	bl	8009fc8 <Set_LED>
 800238c:	4b42      	ldr	r3, [pc, #264]	; (8002498 <LEDHandler+0xda4>)
 800238e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002392:	b29b      	uxth	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	b29b      	uxth	r3, r3
 8002398:	b21a      	sxth	r2, r3
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <LEDHandler+0xda4>)
 800239c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED14
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <LEDHandler+0xda4>)
 80023a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a4:	4618      	mov	r0, r3
 80023a6:	2300      	movs	r3, #0
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	f007 fe0c 	bl	8009fc8 <Set_LED>
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <LEDHandler+0xda4>)
 80023b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b21a      	sxth	r2, r3
 80023be:	4b36      	ldr	r3, [pc, #216]	; (8002498 <LEDHandler+0xda4>)
 80023c0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED15
 80023c2:	4b35      	ldr	r3, [pc, #212]	; (8002498 <LEDHandler+0xda4>)
 80023c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c8:	4618      	mov	r0, r3
 80023ca:	2300      	movs	r3, #0
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	f007 fdfa 	bl	8009fc8 <Set_LED>
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <LEDHandler+0xda4>)
 80023d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <LEDHandler+0xda4>)
 80023e4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED16
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <LEDHandler+0xda4>)
 80023e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ec:	4618      	mov	r0, r3
 80023ee:	2300      	movs	r3, #0
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	f007 fde8 	bl	8009fc8 <Set_LED>
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <LEDHandler+0xda4>)
 80023fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3301      	adds	r3, #1
 8002402:	b29b      	uxth	r3, r3
 8002404:	b21a      	sxth	r2, r3
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <LEDHandler+0xda4>)
 8002408:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED17
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <LEDHandler+0xda4>)
 800240c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002410:	4618      	mov	r0, r3
 8002412:	2300      	movs	r3, #0
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	f007 fdd6 	bl	8009fc8 <Set_LED>
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <LEDHandler+0xda4>)
 800241e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002422:	b29b      	uxth	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	b29b      	uxth	r3, r3
 8002428:	b21a      	sxth	r2, r3
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <LEDHandler+0xda4>)
 800242c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <LEDHandler+0xda4>)
 8002430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002434:	4618      	mov	r0, r3
 8002436:	2300      	movs	r3, #0
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	f007 fdc4 	bl	8009fc8 <Set_LED>
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <LEDHandler+0xda4>)
 8002442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002446:	b29b      	uxth	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	b29b      	uxth	r3, r3
 800244c:	b21a      	sxth	r2, r3
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <LEDHandler+0xda4>)
 8002450:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <LEDHandler+0xda4>)
 8002454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002458:	4618      	mov	r0, r3
 800245a:	2300      	movs	r3, #0
 800245c:	2200      	movs	r2, #0
 800245e:	2100      	movs	r1, #0
 8002460:	f007 fdb2 	bl	8009fc8 <Set_LED>
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <LEDHandler+0xda4>)
 8002466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246a:	b29b      	uxth	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	b21a      	sxth	r2, r3
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <LEDHandler+0xda4>)
 8002474:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <LEDHandler+0xda4>)
 8002478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247c:	4618      	mov	r0, r3
 800247e:	2300      	movs	r3, #0
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	f007 fda0 	bl	8009fc8 <Set_LED>
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <LEDHandler+0xda4>)
 800248a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248e:	b29b      	uxth	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	b29b      	uxth	r3, r3
 8002494:	b21a      	sxth	r2, r3
 8002496:	e007      	b.n	80024a8 <LEDHandler+0xdb4>
 8002498:	2000031c 	.word	0x2000031c
 800249c:	20000008 	.word	0x20000008
 80024a0:	2000000c 	.word	0x2000000c
 80024a4:	20000010 	.word	0x20000010
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <LEDHandler+0xde0>)
 80024aa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <LEDHandler+0xde0>)
 80024ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b2:	4618      	mov	r0, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	f007 fd85 	bl	8009fc8 <Set_LED>
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <LEDHandler+0xde0>)
 80024c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	4b01      	ldr	r3, [pc, #4]	; (80024d4 <LEDHandler+0xde0>)
 80024ce:	801a      	strh	r2, [r3, #0]
 80024d0:	f004 ba08 	b.w	80068e4 <LEDHandler+0x51f0>
 80024d4:	2000031c 	.word	0x2000031c

		} else if (Valor >= 6 && Valor < 11) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	f340 8192 	ble.w	8002804 <LEDHandler+0x1110>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b0a      	cmp	r3, #10
 80024e4:	f300 818e 	bgt.w	8002804 <LEDHandler+0x1110>

			Set_LED(var2, Red, Green, Blue);			var2++;	//LED1
 80024e8:	4bb4      	ldr	r3, [pc, #720]	; (80027bc <LEDHandler+0x10c8>)
 80024ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ee:	4618      	mov	r0, r3
 80024f0:	4bb3      	ldr	r3, [pc, #716]	; (80027c0 <LEDHandler+0x10cc>)
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	4bb3      	ldr	r3, [pc, #716]	; (80027c4 <LEDHandler+0x10d0>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4bb3      	ldr	r3, [pc, #716]	; (80027c8 <LEDHandler+0x10d4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f007 fd64 	bl	8009fc8 <Set_LED>
 8002500:	4bae      	ldr	r3, [pc, #696]	; (80027bc <LEDHandler+0x10c8>)
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	b29b      	uxth	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	b29b      	uxth	r3, r3
 800250c:	b21a      	sxth	r2, r3
 800250e:	4bab      	ldr	r3, [pc, #684]	; (80027bc <LEDHandler+0x10c8>)
 8002510:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED2
 8002512:	4baa      	ldr	r3, [pc, #680]	; (80027bc <LEDHandler+0x10c8>)
 8002514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002518:	4618      	mov	r0, r3
 800251a:	4ba9      	ldr	r3, [pc, #676]	; (80027c0 <LEDHandler+0x10cc>)
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	4ba9      	ldr	r3, [pc, #676]	; (80027c4 <LEDHandler+0x10d0>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4ba9      	ldr	r3, [pc, #676]	; (80027c8 <LEDHandler+0x10d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f007 fd4f 	bl	8009fc8 <Set_LED>
 800252a:	4ba4      	ldr	r3, [pc, #656]	; (80027bc <LEDHandler+0x10c8>)
 800252c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002530:	b29b      	uxth	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	b29b      	uxth	r3, r3
 8002536:	b21a      	sxth	r2, r3
 8002538:	4ba0      	ldr	r3, [pc, #640]	; (80027bc <LEDHandler+0x10c8>)
 800253a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED3
 800253c:	4b9f      	ldr	r3, [pc, #636]	; (80027bc <LEDHandler+0x10c8>)
 800253e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002542:	4618      	mov	r0, r3
 8002544:	2300      	movs	r3, #0
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	f007 fd3d 	bl	8009fc8 <Set_LED>
 800254e:	4b9b      	ldr	r3, [pc, #620]	; (80027bc <LEDHandler+0x10c8>)
 8002550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002554:	b29b      	uxth	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	b29b      	uxth	r3, r3
 800255a:	b21a      	sxth	r2, r3
 800255c:	4b97      	ldr	r3, [pc, #604]	; (80027bc <LEDHandler+0x10c8>)
 800255e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED4
 8002560:	4b96      	ldr	r3, [pc, #600]	; (80027bc <LEDHandler+0x10c8>)
 8002562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002566:	4618      	mov	r0, r3
 8002568:	2300      	movs	r3, #0
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	f007 fd2b 	bl	8009fc8 <Set_LED>
 8002572:	4b92      	ldr	r3, [pc, #584]	; (80027bc <LEDHandler+0x10c8>)
 8002574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002578:	b29b      	uxth	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	b29b      	uxth	r3, r3
 800257e:	b21a      	sxth	r2, r3
 8002580:	4b8e      	ldr	r3, [pc, #568]	; (80027bc <LEDHandler+0x10c8>)
 8002582:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED5
 8002584:	4b8d      	ldr	r3, [pc, #564]	; (80027bc <LEDHandler+0x10c8>)
 8002586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258a:	4618      	mov	r0, r3
 800258c:	2300      	movs	r3, #0
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	f007 fd19 	bl	8009fc8 <Set_LED>
 8002596:	4b89      	ldr	r3, [pc, #548]	; (80027bc <LEDHandler+0x10c8>)
 8002598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259c:	b29b      	uxth	r3, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	4b85      	ldr	r3, [pc, #532]	; (80027bc <LEDHandler+0x10c8>)
 80025a6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED6
 80025a8:	4b84      	ldr	r3, [pc, #528]	; (80027bc <LEDHandler+0x10c8>)
 80025aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ae:	4618      	mov	r0, r3
 80025b0:	2300      	movs	r3, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	f007 fd07 	bl	8009fc8 <Set_LED>
 80025ba:	4b80      	ldr	r3, [pc, #512]	; (80027bc <LEDHandler+0x10c8>)
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	b21a      	sxth	r2, r3
 80025c8:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <LEDHandler+0x10c8>)
 80025ca:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED7
 80025cc:	4b7b      	ldr	r3, [pc, #492]	; (80027bc <LEDHandler+0x10c8>)
 80025ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d2:	4618      	mov	r0, r3
 80025d4:	2300      	movs	r3, #0
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	f007 fcf5 	bl	8009fc8 <Set_LED>
 80025de:	4b77      	ldr	r3, [pc, #476]	; (80027bc <LEDHandler+0x10c8>)
 80025e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	b21a      	sxth	r2, r3
 80025ec:	4b73      	ldr	r3, [pc, #460]	; (80027bc <LEDHandler+0x10c8>)
 80025ee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED8
 80025f0:	4b72      	ldr	r3, [pc, #456]	; (80027bc <LEDHandler+0x10c8>)
 80025f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f6:	4618      	mov	r0, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	f007 fce3 	bl	8009fc8 <Set_LED>
 8002602:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <LEDHandler+0x10c8>)
 8002604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002608:	b29b      	uxth	r3, r3
 800260a:	3301      	adds	r3, #1
 800260c:	b29b      	uxth	r3, r3
 800260e:	b21a      	sxth	r2, r3
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <LEDHandler+0x10c8>)
 8002612:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED9
 8002614:	4b69      	ldr	r3, [pc, #420]	; (80027bc <LEDHandler+0x10c8>)
 8002616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261a:	4618      	mov	r0, r3
 800261c:	2300      	movs	r3, #0
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	f007 fcd1 	bl	8009fc8 <Set_LED>
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <LEDHandler+0x10c8>)
 8002628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262c:	b29b      	uxth	r3, r3
 800262e:	3301      	adds	r3, #1
 8002630:	b29b      	uxth	r3, r3
 8002632:	b21a      	sxth	r2, r3
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <LEDHandler+0x10c8>)
 8002636:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED10
 8002638:	4b60      	ldr	r3, [pc, #384]	; (80027bc <LEDHandler+0x10c8>)
 800263a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263e:	4618      	mov	r0, r3
 8002640:	2300      	movs	r3, #0
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	f007 fcbf 	bl	8009fc8 <Set_LED>
 800264a:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <LEDHandler+0x10c8>)
 800264c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002650:	b29b      	uxth	r3, r3
 8002652:	3301      	adds	r3, #1
 8002654:	b29b      	uxth	r3, r3
 8002656:	b21a      	sxth	r2, r3
 8002658:	4b58      	ldr	r3, [pc, #352]	; (80027bc <LEDHandler+0x10c8>)
 800265a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED11
 800265c:	4b57      	ldr	r3, [pc, #348]	; (80027bc <LEDHandler+0x10c8>)
 800265e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002662:	4618      	mov	r0, r3
 8002664:	2300      	movs	r3, #0
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	f007 fcad 	bl	8009fc8 <Set_LED>
 800266e:	4b53      	ldr	r3, [pc, #332]	; (80027bc <LEDHandler+0x10c8>)
 8002670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002674:	b29b      	uxth	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	b29b      	uxth	r3, r3
 800267a:	b21a      	sxth	r2, r3
 800267c:	4b4f      	ldr	r3, [pc, #316]	; (80027bc <LEDHandler+0x10c8>)
 800267e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED12
 8002680:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <LEDHandler+0x10c8>)
 8002682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002686:	4618      	mov	r0, r3
 8002688:	2300      	movs	r3, #0
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	f007 fc9b 	bl	8009fc8 <Set_LED>
 8002692:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <LEDHandler+0x10c8>)
 8002694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002698:	b29b      	uxth	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	b29b      	uxth	r3, r3
 800269e:	b21a      	sxth	r2, r3
 80026a0:	4b46      	ldr	r3, [pc, #280]	; (80027bc <LEDHandler+0x10c8>)
 80026a2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED13
 80026a4:	4b45      	ldr	r3, [pc, #276]	; (80027bc <LEDHandler+0x10c8>)
 80026a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026aa:	4618      	mov	r0, r3
 80026ac:	2300      	movs	r3, #0
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	f007 fc89 	bl	8009fc8 <Set_LED>
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <LEDHandler+0x10c8>)
 80026b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <LEDHandler+0x10c8>)
 80026c6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED14
 80026c8:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <LEDHandler+0x10c8>)
 80026ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ce:	4618      	mov	r0, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	f007 fc77 	bl	8009fc8 <Set_LED>
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <LEDHandler+0x10c8>)
 80026dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b21a      	sxth	r2, r3
 80026e8:	4b34      	ldr	r3, [pc, #208]	; (80027bc <LEDHandler+0x10c8>)
 80026ea:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED15
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <LEDHandler+0x10c8>)
 80026ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f2:	4618      	mov	r0, r3
 80026f4:	2300      	movs	r3, #0
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	f007 fc65 	bl	8009fc8 <Set_LED>
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <LEDHandler+0x10c8>)
 8002700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002704:	b29b      	uxth	r3, r3
 8002706:	3301      	adds	r3, #1
 8002708:	b29b      	uxth	r3, r3
 800270a:	b21a      	sxth	r2, r3
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <LEDHandler+0x10c8>)
 800270e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED16
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <LEDHandler+0x10c8>)
 8002712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002716:	4618      	mov	r0, r3
 8002718:	2300      	movs	r3, #0
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	f007 fc53 	bl	8009fc8 <Set_LED>
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <LEDHandler+0x10c8>)
 8002724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002728:	b29b      	uxth	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	b29b      	uxth	r3, r3
 800272e:	b21a      	sxth	r2, r3
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <LEDHandler+0x10c8>)
 8002732:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED17
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <LEDHandler+0x10c8>)
 8002736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273a:	4618      	mov	r0, r3
 800273c:	2300      	movs	r3, #0
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	f007 fc41 	bl	8009fc8 <Set_LED>
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <LEDHandler+0x10c8>)
 8002748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274c:	b29b      	uxth	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	b29b      	uxth	r3, r3
 8002752:	b21a      	sxth	r2, r3
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <LEDHandler+0x10c8>)
 8002756:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <LEDHandler+0x10c8>)
 800275a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275e:	4618      	mov	r0, r3
 8002760:	2300      	movs	r3, #0
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	f007 fc2f 	bl	8009fc8 <Set_LED>
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <LEDHandler+0x10c8>)
 800276c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002770:	b29b      	uxth	r3, r3
 8002772:	3301      	adds	r3, #1
 8002774:	b29b      	uxth	r3, r3
 8002776:	b21a      	sxth	r2, r3
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <LEDHandler+0x10c8>)
 800277a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <LEDHandler+0x10c8>)
 800277e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002782:	4618      	mov	r0, r3
 8002784:	2300      	movs	r3, #0
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	f007 fc1d 	bl	8009fc8 <Set_LED>
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <LEDHandler+0x10c8>)
 8002790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002794:	b29b      	uxth	r3, r3
 8002796:	3301      	adds	r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	b21a      	sxth	r2, r3
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <LEDHandler+0x10c8>)
 800279e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <LEDHandler+0x10c8>)
 80027a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a6:	4618      	mov	r0, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	f007 fc0b 	bl	8009fc8 <Set_LED>
 80027b2:	4b02      	ldr	r3, [pc, #8]	; (80027bc <LEDHandler+0x10c8>)
 80027b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b8:	e008      	b.n	80027cc <LEDHandler+0x10d8>
 80027ba:	bf00      	nop
 80027bc:	2000031c 	.word	0x2000031c
 80027c0:	20000008 	.word	0x20000008
 80027c4:	2000000c 	.word	0x2000000c
 80027c8:	20000010 	.word	0x20000010
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <LEDHandler+0x110c>)
 80027d6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <LEDHandler+0x110c>)
 80027da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027de:	4618      	mov	r0, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	f007 fbef 	bl	8009fc8 <Set_LED>
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <LEDHandler+0x110c>)
 80027ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	4b01      	ldr	r3, [pc, #4]	; (8002800 <LEDHandler+0x110c>)
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	f004 b872 	b.w	80068e4 <LEDHandler+0x51f0>
 8002800:	2000031c 	.word	0x2000031c

		} else if (Valor >= 11 && Valor < 16) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b0a      	cmp	r3, #10
 8002808:	f340 8196 	ble.w	8002b38 <LEDHandler+0x1444>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	f300 8192 	bgt.w	8002b38 <LEDHandler+0x1444>

			Set_LED(var2, Red, Green, Blue);			var2++;	//LED1
 8002814:	4bb2      	ldr	r3, [pc, #712]	; (8002ae0 <LEDHandler+0x13ec>)
 8002816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800281a:	4618      	mov	r0, r3
 800281c:	4bb1      	ldr	r3, [pc, #708]	; (8002ae4 <LEDHandler+0x13f0>)
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	4bb1      	ldr	r3, [pc, #708]	; (8002ae8 <LEDHandler+0x13f4>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4bb1      	ldr	r3, [pc, #708]	; (8002aec <LEDHandler+0x13f8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f007 fbce 	bl	8009fc8 <Set_LED>
 800282c:	4bac      	ldr	r3, [pc, #688]	; (8002ae0 <LEDHandler+0x13ec>)
 800282e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002832:	b29b      	uxth	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	b29b      	uxth	r3, r3
 8002838:	b21a      	sxth	r2, r3
 800283a:	4ba9      	ldr	r3, [pc, #676]	; (8002ae0 <LEDHandler+0x13ec>)
 800283c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED2
 800283e:	4ba8      	ldr	r3, [pc, #672]	; (8002ae0 <LEDHandler+0x13ec>)
 8002840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002844:	4618      	mov	r0, r3
 8002846:	4ba7      	ldr	r3, [pc, #668]	; (8002ae4 <LEDHandler+0x13f0>)
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	4ba7      	ldr	r3, [pc, #668]	; (8002ae8 <LEDHandler+0x13f4>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4ba7      	ldr	r3, [pc, #668]	; (8002aec <LEDHandler+0x13f8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f007 fbb9 	bl	8009fc8 <Set_LED>
 8002856:	4ba2      	ldr	r3, [pc, #648]	; (8002ae0 <LEDHandler+0x13ec>)
 8002858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285c:	b29b      	uxth	r3, r3
 800285e:	3301      	adds	r3, #1
 8002860:	b29b      	uxth	r3, r3
 8002862:	b21a      	sxth	r2, r3
 8002864:	4b9e      	ldr	r3, [pc, #632]	; (8002ae0 <LEDHandler+0x13ec>)
 8002866:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED3
 8002868:	4b9d      	ldr	r3, [pc, #628]	; (8002ae0 <LEDHandler+0x13ec>)
 800286a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286e:	4618      	mov	r0, r3
 8002870:	4b9c      	ldr	r3, [pc, #624]	; (8002ae4 <LEDHandler+0x13f0>)
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	4b9c      	ldr	r3, [pc, #624]	; (8002ae8 <LEDHandler+0x13f4>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b9c      	ldr	r3, [pc, #624]	; (8002aec <LEDHandler+0x13f8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f007 fba4 	bl	8009fc8 <Set_LED>
 8002880:	4b97      	ldr	r3, [pc, #604]	; (8002ae0 <LEDHandler+0x13ec>)
 8002882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002886:	b29b      	uxth	r3, r3
 8002888:	3301      	adds	r3, #1
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b94      	ldr	r3, [pc, #592]	; (8002ae0 <LEDHandler+0x13ec>)
 8002890:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED4
 8002892:	4b93      	ldr	r3, [pc, #588]	; (8002ae0 <LEDHandler+0x13ec>)
 8002894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002898:	4618      	mov	r0, r3
 800289a:	2300      	movs	r3, #0
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	f007 fb92 	bl	8009fc8 <Set_LED>
 80028a4:	4b8e      	ldr	r3, [pc, #568]	; (8002ae0 <LEDHandler+0x13ec>)
 80028a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b21a      	sxth	r2, r3
 80028b2:	4b8b      	ldr	r3, [pc, #556]	; (8002ae0 <LEDHandler+0x13ec>)
 80028b4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED5
 80028b6:	4b8a      	ldr	r3, [pc, #552]	; (8002ae0 <LEDHandler+0x13ec>)
 80028b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028bc:	4618      	mov	r0, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	2200      	movs	r2, #0
 80028c2:	2100      	movs	r1, #0
 80028c4:	f007 fb80 	bl	8009fc8 <Set_LED>
 80028c8:	4b85      	ldr	r3, [pc, #532]	; (8002ae0 <LEDHandler+0x13ec>)
 80028ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <LEDHandler+0x13ec>)
 80028d8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED6
 80028da:	4b81      	ldr	r3, [pc, #516]	; (8002ae0 <LEDHandler+0x13ec>)
 80028dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e0:	4618      	mov	r0, r3
 80028e2:	2300      	movs	r3, #0
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	f007 fb6e 	bl	8009fc8 <Set_LED>
 80028ec:	4b7c      	ldr	r3, [pc, #496]	; (8002ae0 <LEDHandler+0x13ec>)
 80028ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	b21a      	sxth	r2, r3
 80028fa:	4b79      	ldr	r3, [pc, #484]	; (8002ae0 <LEDHandler+0x13ec>)
 80028fc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED7
 80028fe:	4b78      	ldr	r3, [pc, #480]	; (8002ae0 <LEDHandler+0x13ec>)
 8002900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002904:	4618      	mov	r0, r3
 8002906:	2300      	movs	r3, #0
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	f007 fb5c 	bl	8009fc8 <Set_LED>
 8002910:	4b73      	ldr	r3, [pc, #460]	; (8002ae0 <LEDHandler+0x13ec>)
 8002912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002916:	b29b      	uxth	r3, r3
 8002918:	3301      	adds	r3, #1
 800291a:	b29b      	uxth	r3, r3
 800291c:	b21a      	sxth	r2, r3
 800291e:	4b70      	ldr	r3, [pc, #448]	; (8002ae0 <LEDHandler+0x13ec>)
 8002920:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED8
 8002922:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <LEDHandler+0x13ec>)
 8002924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002928:	4618      	mov	r0, r3
 800292a:	2300      	movs	r3, #0
 800292c:	2200      	movs	r2, #0
 800292e:	2100      	movs	r1, #0
 8002930:	f007 fb4a 	bl	8009fc8 <Set_LED>
 8002934:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <LEDHandler+0x13ec>)
 8002936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293a:	b29b      	uxth	r3, r3
 800293c:	3301      	adds	r3, #1
 800293e:	b29b      	uxth	r3, r3
 8002940:	b21a      	sxth	r2, r3
 8002942:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <LEDHandler+0x13ec>)
 8002944:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED9
 8002946:	4b66      	ldr	r3, [pc, #408]	; (8002ae0 <LEDHandler+0x13ec>)
 8002948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294c:	4618      	mov	r0, r3
 800294e:	2300      	movs	r3, #0
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	f007 fb38 	bl	8009fc8 <Set_LED>
 8002958:	4b61      	ldr	r3, [pc, #388]	; (8002ae0 <LEDHandler+0x13ec>)
 800295a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295e:	b29b      	uxth	r3, r3
 8002960:	3301      	adds	r3, #1
 8002962:	b29b      	uxth	r3, r3
 8002964:	b21a      	sxth	r2, r3
 8002966:	4b5e      	ldr	r3, [pc, #376]	; (8002ae0 <LEDHandler+0x13ec>)
 8002968:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED10
 800296a:	4b5d      	ldr	r3, [pc, #372]	; (8002ae0 <LEDHandler+0x13ec>)
 800296c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002970:	4618      	mov	r0, r3
 8002972:	2300      	movs	r3, #0
 8002974:	2200      	movs	r2, #0
 8002976:	2100      	movs	r1, #0
 8002978:	f007 fb26 	bl	8009fc8 <Set_LED>
 800297c:	4b58      	ldr	r3, [pc, #352]	; (8002ae0 <LEDHandler+0x13ec>)
 800297e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002982:	b29b      	uxth	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	b29b      	uxth	r3, r3
 8002988:	b21a      	sxth	r2, r3
 800298a:	4b55      	ldr	r3, [pc, #340]	; (8002ae0 <LEDHandler+0x13ec>)
 800298c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED11
 800298e:	4b54      	ldr	r3, [pc, #336]	; (8002ae0 <LEDHandler+0x13ec>)
 8002990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002994:	4618      	mov	r0, r3
 8002996:	2300      	movs	r3, #0
 8002998:	2200      	movs	r2, #0
 800299a:	2100      	movs	r1, #0
 800299c:	f007 fb14 	bl	8009fc8 <Set_LED>
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <LEDHandler+0x13ec>)
 80029a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <LEDHandler+0x13ec>)
 80029b0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED12
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <LEDHandler+0x13ec>)
 80029b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b8:	4618      	mov	r0, r3
 80029ba:	2300      	movs	r3, #0
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	f007 fb02 	bl	8009fc8 <Set_LED>
 80029c4:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <LEDHandler+0x13ec>)
 80029c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	4b43      	ldr	r3, [pc, #268]	; (8002ae0 <LEDHandler+0x13ec>)
 80029d4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED13
 80029d6:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <LEDHandler+0x13ec>)
 80029d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029dc:	4618      	mov	r0, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	f007 faf0 	bl	8009fc8 <Set_LED>
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <LEDHandler+0x13ec>)
 80029ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	b21a      	sxth	r2, r3
 80029f6:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <LEDHandler+0x13ec>)
 80029f8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED14
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <LEDHandler+0x13ec>)
 80029fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a00:	4618      	mov	r0, r3
 8002a02:	2300      	movs	r3, #0
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	f007 fade 	bl	8009fc8 <Set_LED>
 8002a0c:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	b21a      	sxth	r2, r3
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a1c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED15
 8002a1e:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a24:	4618      	mov	r0, r3
 8002a26:	2300      	movs	r3, #0
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	f007 facc 	bl	8009fc8 <Set_LED>
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a40:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED16
 8002a42:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f007 faba 	bl	8009fc8 <Set_LED>
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a64:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED17
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	f007 faa8 	bl	8009fc8 <Set_LED>
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a88:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a90:	4618      	mov	r0, r3
 8002a92:	2300      	movs	r3, #0
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	f007 fa96 	bl	8009fc8 <Set_LED>
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <LEDHandler+0x13ec>)
 8002a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <LEDHandler+0x13ec>)
 8002aac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <LEDHandler+0x13ec>)
 8002ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	f007 fa84 	bl	8009fc8 <Set_LED>
 8002ac0:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <LEDHandler+0x13ec>)
 8002ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	b21a      	sxth	r2, r3
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <LEDHandler+0x13ec>)
 8002ad0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8002ad2:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <LEDHandler+0x13ec>)
 8002ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	2300      	movs	r3, #0
 8002adc:	e008      	b.n	8002af0 <LEDHandler+0x13fc>
 8002ade:	bf00      	nop
 8002ae0:	2000031c 	.word	0x2000031c
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	2000000c 	.word	0x2000000c
 8002aec:	20000010 	.word	0x20000010
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	f007 fa68 	bl	8009fc8 <Set_LED>
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <LEDHandler+0x1440>)
 8002afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	b21a      	sxth	r2, r3
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <LEDHandler+0x1440>)
 8002b08:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <LEDHandler+0x1440>)
 8002b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b10:	4618      	mov	r0, r3
 8002b12:	2300      	movs	r3, #0
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	f007 fa56 	bl	8009fc8 <Set_LED>
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <LEDHandler+0x1440>)
 8002b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <LEDHandler+0x1440>)
 8002b2c:	801a      	strh	r2, [r3, #0]
 8002b2e:	f003 bed9 	b.w	80068e4 <LEDHandler+0x51f0>
 8002b32:	bf00      	nop
 8002b34:	2000031c 	.word	0x2000031c

		} else if (Valor >= 16 && Valor < 21) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	f340 8198 	ble.w	8002e70 <LEDHandler+0x177c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b14      	cmp	r3, #20
 8002b44:	f300 8194 	bgt.w	8002e70 <LEDHandler+0x177c>

			Set_LED(var2, Red, Green, Blue);			var2++;	//LED1
 8002b48:	4bb0      	ldr	r3, [pc, #704]	; (8002e0c <LEDHandler+0x1718>)
 8002b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	4baf      	ldr	r3, [pc, #700]	; (8002e10 <LEDHandler+0x171c>)
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	4baf      	ldr	r3, [pc, #700]	; (8002e14 <LEDHandler+0x1720>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4baf      	ldr	r3, [pc, #700]	; (8002e18 <LEDHandler+0x1724>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f007 fa34 	bl	8009fc8 <Set_LED>
 8002b60:	4baa      	ldr	r3, [pc, #680]	; (8002e0c <LEDHandler+0x1718>)
 8002b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	b21a      	sxth	r2, r3
 8002b6e:	4ba7      	ldr	r3, [pc, #668]	; (8002e0c <LEDHandler+0x1718>)
 8002b70:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED2
 8002b72:	4ba6      	ldr	r3, [pc, #664]	; (8002e0c <LEDHandler+0x1718>)
 8002b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4ba5      	ldr	r3, [pc, #660]	; (8002e10 <LEDHandler+0x171c>)
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	4ba5      	ldr	r3, [pc, #660]	; (8002e14 <LEDHandler+0x1720>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4ba5      	ldr	r3, [pc, #660]	; (8002e18 <LEDHandler+0x1724>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f007 fa1f 	bl	8009fc8 <Set_LED>
 8002b8a:	4ba0      	ldr	r3, [pc, #640]	; (8002e0c <LEDHandler+0x1718>)
 8002b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	4b9c      	ldr	r3, [pc, #624]	; (8002e0c <LEDHandler+0x1718>)
 8002b9a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED3
 8002b9c:	4b9b      	ldr	r3, [pc, #620]	; (8002e0c <LEDHandler+0x1718>)
 8002b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	4b9a      	ldr	r3, [pc, #616]	; (8002e10 <LEDHandler+0x171c>)
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	4b9a      	ldr	r3, [pc, #616]	; (8002e14 <LEDHandler+0x1720>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b9a      	ldr	r3, [pc, #616]	; (8002e18 <LEDHandler+0x1724>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f007 fa0a 	bl	8009fc8 <Set_LED>
 8002bb4:	4b95      	ldr	r3, [pc, #596]	; (8002e0c <LEDHandler+0x1718>)
 8002bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	b21a      	sxth	r2, r3
 8002bc2:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <LEDHandler+0x1718>)
 8002bc4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED4
 8002bc6:	4b91      	ldr	r3, [pc, #580]	; (8002e0c <LEDHandler+0x1718>)
 8002bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	4b90      	ldr	r3, [pc, #576]	; (8002e10 <LEDHandler+0x171c>)
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	4b90      	ldr	r3, [pc, #576]	; (8002e14 <LEDHandler+0x1720>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b90      	ldr	r3, [pc, #576]	; (8002e18 <LEDHandler+0x1724>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f007 f9f5 	bl	8009fc8 <Set_LED>
 8002bde:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <LEDHandler+0x1718>)
 8002be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	4b87      	ldr	r3, [pc, #540]	; (8002e0c <LEDHandler+0x1718>)
 8002bee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED5
 8002bf0:	4b86      	ldr	r3, [pc, #536]	; (8002e0c <LEDHandler+0x1718>)
 8002bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	f007 f9e3 	bl	8009fc8 <Set_LED>
 8002c02:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <LEDHandler+0x1718>)
 8002c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <LEDHandler+0x1718>)
 8002c12:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED6
 8002c14:	4b7d      	ldr	r3, [pc, #500]	; (8002e0c <LEDHandler+0x1718>)
 8002c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	f007 f9d1 	bl	8009fc8 <Set_LED>
 8002c26:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <LEDHandler+0x1718>)
 8002c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	b21a      	sxth	r2, r3
 8002c34:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <LEDHandler+0x1718>)
 8002c36:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED7
 8002c38:	4b74      	ldr	r3, [pc, #464]	; (8002e0c <LEDHandler+0x1718>)
 8002c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	2300      	movs	r3, #0
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	f007 f9bf 	bl	8009fc8 <Set_LED>
 8002c4a:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <LEDHandler+0x1718>)
 8002c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b21a      	sxth	r2, r3
 8002c58:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <LEDHandler+0x1718>)
 8002c5a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED8
 8002c5c:	4b6b      	ldr	r3, [pc, #428]	; (8002e0c <LEDHandler+0x1718>)
 8002c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c62:	4618      	mov	r0, r3
 8002c64:	2300      	movs	r3, #0
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	f007 f9ad 	bl	8009fc8 <Set_LED>
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <LEDHandler+0x1718>)
 8002c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <LEDHandler+0x1718>)
 8002c7e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED9
 8002c80:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <LEDHandler+0x1718>)
 8002c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c86:	4618      	mov	r0, r3
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f007 f99b 	bl	8009fc8 <Set_LED>
 8002c92:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <LEDHandler+0x1718>)
 8002c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b21a      	sxth	r2, r3
 8002ca0:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <LEDHandler+0x1718>)
 8002ca2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED10
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <LEDHandler+0x1718>)
 8002ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002caa:	4618      	mov	r0, r3
 8002cac:	2300      	movs	r3, #0
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f007 f989 	bl	8009fc8 <Set_LED>
 8002cb6:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <LEDHandler+0x1718>)
 8002cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	4b51      	ldr	r3, [pc, #324]	; (8002e0c <LEDHandler+0x1718>)
 8002cc6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED11
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <LEDHandler+0x1718>)
 8002cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f007 f977 	bl	8009fc8 <Set_LED>
 8002cda:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <LEDHandler+0x1718>)
 8002cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b21a      	sxth	r2, r3
 8002ce8:	4b48      	ldr	r3, [pc, #288]	; (8002e0c <LEDHandler+0x1718>)
 8002cea:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED12
 8002cec:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <LEDHandler+0x1718>)
 8002cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	f007 f965 	bl	8009fc8 <Set_LED>
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <LEDHandler+0x1718>)
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <LEDHandler+0x1718>)
 8002d0e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED13
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <LEDHandler+0x1718>)
 8002d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d16:	4618      	mov	r0, r3
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f007 f953 	bl	8009fc8 <Set_LED>
 8002d22:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <LEDHandler+0x1718>)
 8002d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b21a      	sxth	r2, r3
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <LEDHandler+0x1718>)
 8002d32:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED14
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <LEDHandler+0x1718>)
 8002d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	f007 f941 	bl	8009fc8 <Set_LED>
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <LEDHandler+0x1718>)
 8002d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	b21a      	sxth	r2, r3
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <LEDHandler+0x1718>)
 8002d56:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED15
 8002d58:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <LEDHandler+0x1718>)
 8002d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	2300      	movs	r3, #0
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	f007 f92f 	bl	8009fc8 <Set_LED>
 8002d6a:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <LEDHandler+0x1718>)
 8002d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <LEDHandler+0x1718>)
 8002d7a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED16
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <LEDHandler+0x1718>)
 8002d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d82:	4618      	mov	r0, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	2200      	movs	r2, #0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f007 f91d 	bl	8009fc8 <Set_LED>
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <LEDHandler+0x1718>)
 8002d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b21a      	sxth	r2, r3
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <LEDHandler+0x1718>)
 8002d9e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED17
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <LEDHandler+0x1718>)
 8002da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da6:	4618      	mov	r0, r3
 8002da8:	2300      	movs	r3, #0
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	f007 f90b 	bl	8009fc8 <Set_LED>
 8002db2:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <LEDHandler+0x1718>)
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	b21a      	sxth	r2, r3
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <LEDHandler+0x1718>)
 8002dc2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <LEDHandler+0x1718>)
 8002dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	f007 f8f9 	bl	8009fc8 <Set_LED>
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <LEDHandler+0x1718>)
 8002dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <LEDHandler+0x1718>)
 8002de6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <LEDHandler+0x1718>)
 8002dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dee:	4618      	mov	r0, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	f007 f8e7 	bl	8009fc8 <Set_LED>
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <LEDHandler+0x1718>)
 8002dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b21a      	sxth	r2, r3
 8002e08:	e008      	b.n	8002e1c <LEDHandler+0x1728>
 8002e0a:	bf00      	nop
 8002e0c:	2000031c 	.word	0x2000031c
 8002e10:	20000008 	.word	0x20000008
 8002e14:	2000000c 	.word	0x2000000c
 8002e18:	20000010 	.word	0x20000010
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <LEDHandler+0x1778>)
 8002e1e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <LEDHandler+0x1778>)
 8002e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e26:	4618      	mov	r0, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	f007 f8cb 	bl	8009fc8 <Set_LED>
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <LEDHandler+0x1778>)
 8002e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b21a      	sxth	r2, r3
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <LEDHandler+0x1778>)
 8002e42:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <LEDHandler+0x1778>)
 8002e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	f007 f8b9 	bl	8009fc8 <Set_LED>
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <LEDHandler+0x1778>)
 8002e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	4b01      	ldr	r3, [pc, #4]	; (8002e6c <LEDHandler+0x1778>)
 8002e66:	801a      	strh	r2, [r3, #0]
 8002e68:	f003 bd3c 	b.w	80068e4 <LEDHandler+0x51f0>
 8002e6c:	2000031c 	.word	0x2000031c

		} else if (Valor >= 21 && Valor < 26) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b14      	cmp	r3, #20
 8002e74:	f340 819c 	ble.w	80031b0 <LEDHandler+0x1abc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b19      	cmp	r3, #25
 8002e7c:	f300 8198 	bgt.w	80031b0 <LEDHandler+0x1abc>

			Set_LED(var2, Red, Green, Blue);			var2++;	//LED1
 8002e80:	4bae      	ldr	r3, [pc, #696]	; (800313c <LEDHandler+0x1a48>)
 8002e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e86:	4618      	mov	r0, r3
 8002e88:	4bad      	ldr	r3, [pc, #692]	; (8003140 <LEDHandler+0x1a4c>)
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	4bad      	ldr	r3, [pc, #692]	; (8003144 <LEDHandler+0x1a50>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4bad      	ldr	r3, [pc, #692]	; (8003148 <LEDHandler+0x1a54>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f007 f898 	bl	8009fc8 <Set_LED>
 8002e98:	4ba8      	ldr	r3, [pc, #672]	; (800313c <LEDHandler+0x1a48>)
 8002e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	4ba5      	ldr	r3, [pc, #660]	; (800313c <LEDHandler+0x1a48>)
 8002ea8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED2
 8002eaa:	4ba4      	ldr	r3, [pc, #656]	; (800313c <LEDHandler+0x1a48>)
 8002eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	4ba3      	ldr	r3, [pc, #652]	; (8003140 <LEDHandler+0x1a4c>)
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	4ba3      	ldr	r3, [pc, #652]	; (8003144 <LEDHandler+0x1a50>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4ba3      	ldr	r3, [pc, #652]	; (8003148 <LEDHandler+0x1a54>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f007 f883 	bl	8009fc8 <Set_LED>
 8002ec2:	4b9e      	ldr	r3, [pc, #632]	; (800313c <LEDHandler+0x1a48>)
 8002ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	4b9a      	ldr	r3, [pc, #616]	; (800313c <LEDHandler+0x1a48>)
 8002ed2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED3
 8002ed4:	4b99      	ldr	r3, [pc, #612]	; (800313c <LEDHandler+0x1a48>)
 8002ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eda:	4618      	mov	r0, r3
 8002edc:	4b98      	ldr	r3, [pc, #608]	; (8003140 <LEDHandler+0x1a4c>)
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	4b98      	ldr	r3, [pc, #608]	; (8003144 <LEDHandler+0x1a50>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b98      	ldr	r3, [pc, #608]	; (8003148 <LEDHandler+0x1a54>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f007 f86e 	bl	8009fc8 <Set_LED>
 8002eec:	4b93      	ldr	r3, [pc, #588]	; (800313c <LEDHandler+0x1a48>)
 8002eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	b21a      	sxth	r2, r3
 8002efa:	4b90      	ldr	r3, [pc, #576]	; (800313c <LEDHandler+0x1a48>)
 8002efc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED4
 8002efe:	4b8f      	ldr	r3, [pc, #572]	; (800313c <LEDHandler+0x1a48>)
 8002f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f04:	4618      	mov	r0, r3
 8002f06:	4b8e      	ldr	r3, [pc, #568]	; (8003140 <LEDHandler+0x1a4c>)
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	4b8e      	ldr	r3, [pc, #568]	; (8003144 <LEDHandler+0x1a50>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b8e      	ldr	r3, [pc, #568]	; (8003148 <LEDHandler+0x1a54>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f007 f859 	bl	8009fc8 <Set_LED>
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <LEDHandler+0x1a48>)
 8002f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	b21a      	sxth	r2, r3
 8002f24:	4b85      	ldr	r3, [pc, #532]	; (800313c <LEDHandler+0x1a48>)
 8002f26:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED5
 8002f28:	4b84      	ldr	r3, [pc, #528]	; (800313c <LEDHandler+0x1a48>)
 8002f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	4b83      	ldr	r3, [pc, #524]	; (8003140 <LEDHandler+0x1a4c>)
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	4b83      	ldr	r3, [pc, #524]	; (8003144 <LEDHandler+0x1a50>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b83      	ldr	r3, [pc, #524]	; (8003148 <LEDHandler+0x1a54>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f007 f844 	bl	8009fc8 <Set_LED>
 8002f40:	4b7e      	ldr	r3, [pc, #504]	; (800313c <LEDHandler+0x1a48>)
 8002f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b21a      	sxth	r2, r3
 8002f4e:	4b7b      	ldr	r3, [pc, #492]	; (800313c <LEDHandler+0x1a48>)
 8002f50:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED6
 8002f52:	4b7a      	ldr	r3, [pc, #488]	; (800313c <LEDHandler+0x1a48>)
 8002f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	f007 f832 	bl	8009fc8 <Set_LED>
 8002f64:	4b75      	ldr	r3, [pc, #468]	; (800313c <LEDHandler+0x1a48>)
 8002f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <LEDHandler+0x1a48>)
 8002f74:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED7
 8002f76:	4b71      	ldr	r3, [pc, #452]	; (800313c <LEDHandler+0x1a48>)
 8002f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	f007 f820 	bl	8009fc8 <Set_LED>
 8002f88:	4b6c      	ldr	r3, [pc, #432]	; (800313c <LEDHandler+0x1a48>)
 8002f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	4b69      	ldr	r3, [pc, #420]	; (800313c <LEDHandler+0x1a48>)
 8002f98:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED8
 8002f9a:	4b68      	ldr	r3, [pc, #416]	; (800313c <LEDHandler+0x1a48>)
 8002f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f007 f80e 	bl	8009fc8 <Set_LED>
 8002fac:	4b63      	ldr	r3, [pc, #396]	; (800313c <LEDHandler+0x1a48>)
 8002fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	b21a      	sxth	r2, r3
 8002fba:	4b60      	ldr	r3, [pc, #384]	; (800313c <LEDHandler+0x1a48>)
 8002fbc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED9
 8002fbe:	4b5f      	ldr	r3, [pc, #380]	; (800313c <LEDHandler+0x1a48>)
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	f006 fffc 	bl	8009fc8 <Set_LED>
 8002fd0:	4b5a      	ldr	r3, [pc, #360]	; (800313c <LEDHandler+0x1a48>)
 8002fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	b21a      	sxth	r2, r3
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <LEDHandler+0x1a48>)
 8002fe0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED10
 8002fe2:	4b56      	ldr	r3, [pc, #344]	; (800313c <LEDHandler+0x1a48>)
 8002fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	2300      	movs	r3, #0
 8002fec:	2200      	movs	r2, #0
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f006 ffea 	bl	8009fc8 <Set_LED>
 8002ff4:	4b51      	ldr	r3, [pc, #324]	; (800313c <LEDHandler+0x1a48>)
 8002ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	b21a      	sxth	r2, r3
 8003002:	4b4e      	ldr	r3, [pc, #312]	; (800313c <LEDHandler+0x1a48>)
 8003004:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED11
 8003006:	4b4d      	ldr	r3, [pc, #308]	; (800313c <LEDHandler+0x1a48>)
 8003008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300c:	4618      	mov	r0, r3
 800300e:	2300      	movs	r3, #0
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	f006 ffd8 	bl	8009fc8 <Set_LED>
 8003018:	4b48      	ldr	r3, [pc, #288]	; (800313c <LEDHandler+0x1a48>)
 800301a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301e:	b29b      	uxth	r3, r3
 8003020:	3301      	adds	r3, #1
 8003022:	b29b      	uxth	r3, r3
 8003024:	b21a      	sxth	r2, r3
 8003026:	4b45      	ldr	r3, [pc, #276]	; (800313c <LEDHandler+0x1a48>)
 8003028:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED12
 800302a:	4b44      	ldr	r3, [pc, #272]	; (800313c <LEDHandler+0x1a48>)
 800302c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003030:	4618      	mov	r0, r3
 8003032:	2300      	movs	r3, #0
 8003034:	2200      	movs	r2, #0
 8003036:	2100      	movs	r1, #0
 8003038:	f006 ffc6 	bl	8009fc8 <Set_LED>
 800303c:	4b3f      	ldr	r3, [pc, #252]	; (800313c <LEDHandler+0x1a48>)
 800303e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003042:	b29b      	uxth	r3, r3
 8003044:	3301      	adds	r3, #1
 8003046:	b29b      	uxth	r3, r3
 8003048:	b21a      	sxth	r2, r3
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <LEDHandler+0x1a48>)
 800304c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED13
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <LEDHandler+0x1a48>)
 8003050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003054:	4618      	mov	r0, r3
 8003056:	2300      	movs	r3, #0
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	f006 ffb4 	bl	8009fc8 <Set_LED>
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <LEDHandler+0x1a48>)
 8003062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003066:	b29b      	uxth	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	b29b      	uxth	r3, r3
 800306c:	b21a      	sxth	r2, r3
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <LEDHandler+0x1a48>)
 8003070:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED14
 8003072:	4b32      	ldr	r3, [pc, #200]	; (800313c <LEDHandler+0x1a48>)
 8003074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003078:	4618      	mov	r0, r3
 800307a:	2300      	movs	r3, #0
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	f006 ffa2 	bl	8009fc8 <Set_LED>
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <LEDHandler+0x1a48>)
 8003086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800308a:	b29b      	uxth	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	b21a      	sxth	r2, r3
 8003092:	4b2a      	ldr	r3, [pc, #168]	; (800313c <LEDHandler+0x1a48>)
 8003094:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED15
 8003096:	4b29      	ldr	r3, [pc, #164]	; (800313c <LEDHandler+0x1a48>)
 8003098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800309c:	4618      	mov	r0, r3
 800309e:	2300      	movs	r3, #0
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	f006 ff90 	bl	8009fc8 <Set_LED>
 80030a8:	4b24      	ldr	r3, [pc, #144]	; (800313c <LEDHandler+0x1a48>)
 80030aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <LEDHandler+0x1a48>)
 80030b8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED16
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <LEDHandler+0x1a48>)
 80030bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c0:	4618      	mov	r0, r3
 80030c2:	2300      	movs	r3, #0
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	f006 ff7e 	bl	8009fc8 <Set_LED>
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <LEDHandler+0x1a48>)
 80030ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	b21a      	sxth	r2, r3
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <LEDHandler+0x1a48>)
 80030dc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED17
 80030de:	4b17      	ldr	r3, [pc, #92]	; (800313c <LEDHandler+0x1a48>)
 80030e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e4:	4618      	mov	r0, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	2200      	movs	r2, #0
 80030ea:	2100      	movs	r1, #0
 80030ec:	f006 ff6c 	bl	8009fc8 <Set_LED>
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <LEDHandler+0x1a48>)
 80030f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	b21a      	sxth	r2, r3
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <LEDHandler+0x1a48>)
 8003100:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <LEDHandler+0x1a48>)
 8003104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003108:	4618      	mov	r0, r3
 800310a:	2300      	movs	r3, #0
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	f006 ff5a 	bl	8009fc8 <Set_LED>
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <LEDHandler+0x1a48>)
 8003116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800311a:	b29b      	uxth	r3, r3
 800311c:	3301      	adds	r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	b21a      	sxth	r2, r3
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <LEDHandler+0x1a48>)
 8003124:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <LEDHandler+0x1a48>)
 8003128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312c:	4618      	mov	r0, r3
 800312e:	2300      	movs	r3, #0
 8003130:	2200      	movs	r2, #0
 8003132:	2100      	movs	r1, #0
 8003134:	f006 ff48 	bl	8009fc8 <Set_LED>
 8003138:	e008      	b.n	800314c <LEDHandler+0x1a58>
 800313a:	bf00      	nop
 800313c:	2000031c 	.word	0x2000031c
 8003140:	20000008 	.word	0x20000008
 8003144:	2000000c 	.word	0x2000000c
 8003148:	20000010 	.word	0x20000010
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <LEDHandler+0x1ab8>)
 800314e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003152:	b29b      	uxth	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	b21a      	sxth	r2, r3
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <LEDHandler+0x1ab8>)
 800315c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <LEDHandler+0x1ab8>)
 8003160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003164:	4618      	mov	r0, r3
 8003166:	2300      	movs	r3, #0
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	f006 ff2c 	bl	8009fc8 <Set_LED>
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <LEDHandler+0x1ab8>)
 8003172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003176:	b29b      	uxth	r3, r3
 8003178:	3301      	adds	r3, #1
 800317a:	b29b      	uxth	r3, r3
 800317c:	b21a      	sxth	r2, r3
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <LEDHandler+0x1ab8>)
 8003180:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <LEDHandler+0x1ab8>)
 8003184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003188:	4618      	mov	r0, r3
 800318a:	2300      	movs	r3, #0
 800318c:	2200      	movs	r2, #0
 800318e:	2100      	movs	r1, #0
 8003190:	f006 ff1a 	bl	8009fc8 <Set_LED>
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <LEDHandler+0x1ab8>)
 8003196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800319a:	b29b      	uxth	r3, r3
 800319c:	3301      	adds	r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	b21a      	sxth	r2, r3
 80031a2:	4b02      	ldr	r3, [pc, #8]	; (80031ac <LEDHandler+0x1ab8>)
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	f003 bb9d 	b.w	80068e4 <LEDHandler+0x51f0>
 80031aa:	bf00      	nop
 80031ac:	2000031c 	.word	0x2000031c

		} else if (Valor >= 26 && Valor < 31) {
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b19      	cmp	r3, #25
 80031b4:	f340 819e 	ble.w	80034f4 <LEDHandler+0x1e00>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b1e      	cmp	r3, #30
 80031bc:	f300 819a 	bgt.w	80034f4 <LEDHandler+0x1e00>

			Set_LED(var2, Red, Green, Blue);			var2++;//LED1
 80031c0:	4bac      	ldr	r3, [pc, #688]	; (8003474 <LEDHandler+0x1d80>)
 80031c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c6:	4618      	mov	r0, r3
 80031c8:	4bab      	ldr	r3, [pc, #684]	; (8003478 <LEDHandler+0x1d84>)
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	4bab      	ldr	r3, [pc, #684]	; (800347c <LEDHandler+0x1d88>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4bab      	ldr	r3, [pc, #684]	; (8003480 <LEDHandler+0x1d8c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f006 fef8 	bl	8009fc8 <Set_LED>
 80031d8:	4ba6      	ldr	r3, [pc, #664]	; (8003474 <LEDHandler+0x1d80>)
 80031da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	b21a      	sxth	r2, r3
 80031e6:	4ba3      	ldr	r3, [pc, #652]	; (8003474 <LEDHandler+0x1d80>)
 80031e8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED2
 80031ea:	4ba2      	ldr	r3, [pc, #648]	; (8003474 <LEDHandler+0x1d80>)
 80031ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f0:	4618      	mov	r0, r3
 80031f2:	4ba1      	ldr	r3, [pc, #644]	; (8003478 <LEDHandler+0x1d84>)
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	4ba1      	ldr	r3, [pc, #644]	; (800347c <LEDHandler+0x1d88>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4ba1      	ldr	r3, [pc, #644]	; (8003480 <LEDHandler+0x1d8c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f006 fee3 	bl	8009fc8 <Set_LED>
 8003202:	4b9c      	ldr	r3, [pc, #624]	; (8003474 <LEDHandler+0x1d80>)
 8003204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003208:	b29b      	uxth	r3, r3
 800320a:	3301      	adds	r3, #1
 800320c:	b29b      	uxth	r3, r3
 800320e:	b21a      	sxth	r2, r3
 8003210:	4b98      	ldr	r3, [pc, #608]	; (8003474 <LEDHandler+0x1d80>)
 8003212:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED3
 8003214:	4b97      	ldr	r3, [pc, #604]	; (8003474 <LEDHandler+0x1d80>)
 8003216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800321a:	4618      	mov	r0, r3
 800321c:	4b96      	ldr	r3, [pc, #600]	; (8003478 <LEDHandler+0x1d84>)
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	4b96      	ldr	r3, [pc, #600]	; (800347c <LEDHandler+0x1d88>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b96      	ldr	r3, [pc, #600]	; (8003480 <LEDHandler+0x1d8c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f006 fece 	bl	8009fc8 <Set_LED>
 800322c:	4b91      	ldr	r3, [pc, #580]	; (8003474 <LEDHandler+0x1d80>)
 800322e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003232:	b29b      	uxth	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	b21a      	sxth	r2, r3
 800323a:	4b8e      	ldr	r3, [pc, #568]	; (8003474 <LEDHandler+0x1d80>)
 800323c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED4
 800323e:	4b8d      	ldr	r3, [pc, #564]	; (8003474 <LEDHandler+0x1d80>)
 8003240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003244:	4618      	mov	r0, r3
 8003246:	4b8c      	ldr	r3, [pc, #560]	; (8003478 <LEDHandler+0x1d84>)
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	4b8c      	ldr	r3, [pc, #560]	; (800347c <LEDHandler+0x1d88>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <LEDHandler+0x1d8c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f006 feb9 	bl	8009fc8 <Set_LED>
 8003256:	4b87      	ldr	r3, [pc, #540]	; (8003474 <LEDHandler+0x1d80>)
 8003258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800325c:	b29b      	uxth	r3, r3
 800325e:	3301      	adds	r3, #1
 8003260:	b29b      	uxth	r3, r3
 8003262:	b21a      	sxth	r2, r3
 8003264:	4b83      	ldr	r3, [pc, #524]	; (8003474 <LEDHandler+0x1d80>)
 8003266:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED5
 8003268:	4b82      	ldr	r3, [pc, #520]	; (8003474 <LEDHandler+0x1d80>)
 800326a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800326e:	4618      	mov	r0, r3
 8003270:	4b81      	ldr	r3, [pc, #516]	; (8003478 <LEDHandler+0x1d84>)
 8003272:	6819      	ldr	r1, [r3, #0]
 8003274:	4b81      	ldr	r3, [pc, #516]	; (800347c <LEDHandler+0x1d88>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b81      	ldr	r3, [pc, #516]	; (8003480 <LEDHandler+0x1d8c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f006 fea4 	bl	8009fc8 <Set_LED>
 8003280:	4b7c      	ldr	r3, [pc, #496]	; (8003474 <LEDHandler+0x1d80>)
 8003282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003286:	b29b      	uxth	r3, r3
 8003288:	3301      	adds	r3, #1
 800328a:	b29b      	uxth	r3, r3
 800328c:	b21a      	sxth	r2, r3
 800328e:	4b79      	ldr	r3, [pc, #484]	; (8003474 <LEDHandler+0x1d80>)
 8003290:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED6
 8003292:	4b78      	ldr	r3, [pc, #480]	; (8003474 <LEDHandler+0x1d80>)
 8003294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003298:	4618      	mov	r0, r3
 800329a:	4b77      	ldr	r3, [pc, #476]	; (8003478 <LEDHandler+0x1d84>)
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	4b77      	ldr	r3, [pc, #476]	; (800347c <LEDHandler+0x1d88>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b77      	ldr	r3, [pc, #476]	; (8003480 <LEDHandler+0x1d8c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f006 fe8f 	bl	8009fc8 <Set_LED>
 80032aa:	4b72      	ldr	r3, [pc, #456]	; (8003474 <LEDHandler+0x1d80>)
 80032ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	b21a      	sxth	r2, r3
 80032b8:	4b6e      	ldr	r3, [pc, #440]	; (8003474 <LEDHandler+0x1d80>)
 80032ba:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;				//LED7
 80032bc:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <LEDHandler+0x1d80>)
 80032be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c2:	4618      	mov	r0, r3
 80032c4:	2300      	movs	r3, #0
 80032c6:	2200      	movs	r2, #0
 80032c8:	2100      	movs	r1, #0
 80032ca:	f006 fe7d 	bl	8009fc8 <Set_LED>
 80032ce:	4b69      	ldr	r3, [pc, #420]	; (8003474 <LEDHandler+0x1d80>)
 80032d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	b29b      	uxth	r3, r3
 80032da:	b21a      	sxth	r2, r3
 80032dc:	4b65      	ldr	r3, [pc, #404]	; (8003474 <LEDHandler+0x1d80>)
 80032de:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED8
 80032e0:	4b64      	ldr	r3, [pc, #400]	; (8003474 <LEDHandler+0x1d80>)
 80032e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e6:	4618      	mov	r0, r3
 80032e8:	2300      	movs	r3, #0
 80032ea:	2200      	movs	r2, #0
 80032ec:	2100      	movs	r1, #0
 80032ee:	f006 fe6b 	bl	8009fc8 <Set_LED>
 80032f2:	4b60      	ldr	r3, [pc, #384]	; (8003474 <LEDHandler+0x1d80>)
 80032f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	b21a      	sxth	r2, r3
 8003300:	4b5c      	ldr	r3, [pc, #368]	; (8003474 <LEDHandler+0x1d80>)
 8003302:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED9
 8003304:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <LEDHandler+0x1d80>)
 8003306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330a:	4618      	mov	r0, r3
 800330c:	2300      	movs	r3, #0
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	f006 fe59 	bl	8009fc8 <Set_LED>
 8003316:	4b57      	ldr	r3, [pc, #348]	; (8003474 <LEDHandler+0x1d80>)
 8003318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800331c:	b29b      	uxth	r3, r3
 800331e:	3301      	adds	r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	b21a      	sxth	r2, r3
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <LEDHandler+0x1d80>)
 8003326:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED10
 8003328:	4b52      	ldr	r3, [pc, #328]	; (8003474 <LEDHandler+0x1d80>)
 800332a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800332e:	4618      	mov	r0, r3
 8003330:	2300      	movs	r3, #0
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	f006 fe47 	bl	8009fc8 <Set_LED>
 800333a:	4b4e      	ldr	r3, [pc, #312]	; (8003474 <LEDHandler+0x1d80>)
 800333c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003340:	b29b      	uxth	r3, r3
 8003342:	3301      	adds	r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	b21a      	sxth	r2, r3
 8003348:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <LEDHandler+0x1d80>)
 800334a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED11
 800334c:	4b49      	ldr	r3, [pc, #292]	; (8003474 <LEDHandler+0x1d80>)
 800334e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003352:	4618      	mov	r0, r3
 8003354:	2300      	movs	r3, #0
 8003356:	2200      	movs	r2, #0
 8003358:	2100      	movs	r1, #0
 800335a:	f006 fe35 	bl	8009fc8 <Set_LED>
 800335e:	4b45      	ldr	r3, [pc, #276]	; (8003474 <LEDHandler+0x1d80>)
 8003360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003364:	b29b      	uxth	r3, r3
 8003366:	3301      	adds	r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	b21a      	sxth	r2, r3
 800336c:	4b41      	ldr	r3, [pc, #260]	; (8003474 <LEDHandler+0x1d80>)
 800336e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED12
 8003370:	4b40      	ldr	r3, [pc, #256]	; (8003474 <LEDHandler+0x1d80>)
 8003372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003376:	4618      	mov	r0, r3
 8003378:	2300      	movs	r3, #0
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	f006 fe23 	bl	8009fc8 <Set_LED>
 8003382:	4b3c      	ldr	r3, [pc, #240]	; (8003474 <LEDHandler+0x1d80>)
 8003384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003388:	b29b      	uxth	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	b29b      	uxth	r3, r3
 800338e:	b21a      	sxth	r2, r3
 8003390:	4b38      	ldr	r3, [pc, #224]	; (8003474 <LEDHandler+0x1d80>)
 8003392:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED13
 8003394:	4b37      	ldr	r3, [pc, #220]	; (8003474 <LEDHandler+0x1d80>)
 8003396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339a:	4618      	mov	r0, r3
 800339c:	2300      	movs	r3, #0
 800339e:	2200      	movs	r2, #0
 80033a0:	2100      	movs	r1, #0
 80033a2:	f006 fe11 	bl	8009fc8 <Set_LED>
 80033a6:	4b33      	ldr	r3, [pc, #204]	; (8003474 <LEDHandler+0x1d80>)
 80033a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	b21a      	sxth	r2, r3
 80033b4:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <LEDHandler+0x1d80>)
 80033b6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED14
 80033b8:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <LEDHandler+0x1d80>)
 80033ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033be:	4618      	mov	r0, r3
 80033c0:	2300      	movs	r3, #0
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	f006 fdff 	bl	8009fc8 <Set_LED>
 80033ca:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <LEDHandler+0x1d80>)
 80033cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	4b26      	ldr	r3, [pc, #152]	; (8003474 <LEDHandler+0x1d80>)
 80033da:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED15
 80033dc:	4b25      	ldr	r3, [pc, #148]	; (8003474 <LEDHandler+0x1d80>)
 80033de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e2:	4618      	mov	r0, r3
 80033e4:	2300      	movs	r3, #0
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	f006 fded 	bl	8009fc8 <Set_LED>
 80033ee:	4b21      	ldr	r3, [pc, #132]	; (8003474 <LEDHandler+0x1d80>)
 80033f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	b21a      	sxth	r2, r3
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <LEDHandler+0x1d80>)
 80033fe:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED16
 8003400:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <LEDHandler+0x1d80>)
 8003402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003406:	4618      	mov	r0, r3
 8003408:	2300      	movs	r3, #0
 800340a:	2200      	movs	r2, #0
 800340c:	2100      	movs	r1, #0
 800340e:	f006 fddb 	bl	8009fc8 <Set_LED>
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <LEDHandler+0x1d80>)
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	b29b      	uxth	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	b21a      	sxth	r2, r3
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <LEDHandler+0x1d80>)
 8003422:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED17
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <LEDHandler+0x1d80>)
 8003426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342a:	4618      	mov	r0, r3
 800342c:	2300      	movs	r3, #0
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	f006 fdc9 	bl	8009fc8 <Set_LED>
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <LEDHandler+0x1d80>)
 8003438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343c:	b29b      	uxth	r3, r3
 800343e:	3301      	adds	r3, #1
 8003440:	b29b      	uxth	r3, r3
 8003442:	b21a      	sxth	r2, r3
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <LEDHandler+0x1d80>)
 8003446:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <LEDHandler+0x1d80>)
 800344a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800344e:	4618      	mov	r0, r3
 8003450:	2300      	movs	r3, #0
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	f006 fdb7 	bl	8009fc8 <Set_LED>
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <LEDHandler+0x1d80>)
 800345c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003460:	b29b      	uxth	r3, r3
 8003462:	3301      	adds	r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	b21a      	sxth	r2, r3
 8003468:	4b02      	ldr	r3, [pc, #8]	; (8003474 <LEDHandler+0x1d80>)
 800346a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 800346c:	4b01      	ldr	r3, [pc, #4]	; (8003474 <LEDHandler+0x1d80>)
 800346e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003472:	e007      	b.n	8003484 <LEDHandler+0x1d90>
 8003474:	2000031c 	.word	0x2000031c
 8003478:	20000008 	.word	0x20000008
 800347c:	2000000c 	.word	0x2000000c
 8003480:	20000010 	.word	0x20000010
 8003484:	4618      	mov	r0, r3
 8003486:	2300      	movs	r3, #0
 8003488:	2200      	movs	r2, #0
 800348a:	2100      	movs	r1, #0
 800348c:	f006 fd9c 	bl	8009fc8 <Set_LED>
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <LEDHandler+0x1dfc>)
 8003492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003496:	b29b      	uxth	r3, r3
 8003498:	3301      	adds	r3, #1
 800349a:	b29b      	uxth	r3, r3
 800349c:	b21a      	sxth	r2, r3
 800349e:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <LEDHandler+0x1dfc>)
 80034a0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <LEDHandler+0x1dfc>)
 80034a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a8:	4618      	mov	r0, r3
 80034aa:	2300      	movs	r3, #0
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	f006 fd8a 	bl	8009fc8 <Set_LED>
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <LEDHandler+0x1dfc>)
 80034b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	b29b      	uxth	r3, r3
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <LEDHandler+0x1dfc>)
 80034c4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <LEDHandler+0x1dfc>)
 80034c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034cc:	4618      	mov	r0, r3
 80034ce:	2300      	movs	r3, #0
 80034d0:	2200      	movs	r2, #0
 80034d2:	2100      	movs	r1, #0
 80034d4:	f006 fd78 	bl	8009fc8 <Set_LED>
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <LEDHandler+0x1dfc>)
 80034da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	b21a      	sxth	r2, r3
 80034e6:	4b02      	ldr	r3, [pc, #8]	; (80034f0 <LEDHandler+0x1dfc>)
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	f003 b9fb 	b.w	80068e4 <LEDHandler+0x51f0>
 80034ee:	bf00      	nop
 80034f0:	2000031c 	.word	0x2000031c

		} else if (Valor >= 31 && Valor < 36) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b1e      	cmp	r3, #30
 80034f8:	f340 81a2 	ble.w	8003840 <LEDHandler+0x214c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b23      	cmp	r3, #35	; 0x23
 8003500:	f300 819e 	bgt.w	8003840 <LEDHandler+0x214c>

			Set_LED(var2, Red, Green, Blue);			var2++;//LED1
 8003504:	4bab      	ldr	r3, [pc, #684]	; (80037b4 <LEDHandler+0x20c0>)
 8003506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800350a:	4618      	mov	r0, r3
 800350c:	4baa      	ldr	r3, [pc, #680]	; (80037b8 <LEDHandler+0x20c4>)
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	4baa      	ldr	r3, [pc, #680]	; (80037bc <LEDHandler+0x20c8>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4baa      	ldr	r3, [pc, #680]	; (80037c0 <LEDHandler+0x20cc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f006 fd56 	bl	8009fc8 <Set_LED>
 800351c:	4ba5      	ldr	r3, [pc, #660]	; (80037b4 <LEDHandler+0x20c0>)
 800351e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003522:	b29b      	uxth	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	b29b      	uxth	r3, r3
 8003528:	b21a      	sxth	r2, r3
 800352a:	4ba2      	ldr	r3, [pc, #648]	; (80037b4 <LEDHandler+0x20c0>)
 800352c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED2
 800352e:	4ba1      	ldr	r3, [pc, #644]	; (80037b4 <LEDHandler+0x20c0>)
 8003530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003534:	4618      	mov	r0, r3
 8003536:	4ba0      	ldr	r3, [pc, #640]	; (80037b8 <LEDHandler+0x20c4>)
 8003538:	6819      	ldr	r1, [r3, #0]
 800353a:	4ba0      	ldr	r3, [pc, #640]	; (80037bc <LEDHandler+0x20c8>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4ba0      	ldr	r3, [pc, #640]	; (80037c0 <LEDHandler+0x20cc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f006 fd41 	bl	8009fc8 <Set_LED>
 8003546:	4b9b      	ldr	r3, [pc, #620]	; (80037b4 <LEDHandler+0x20c0>)
 8003548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354c:	b29b      	uxth	r3, r3
 800354e:	3301      	adds	r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	b21a      	sxth	r2, r3
 8003554:	4b97      	ldr	r3, [pc, #604]	; (80037b4 <LEDHandler+0x20c0>)
 8003556:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED3
 8003558:	4b96      	ldr	r3, [pc, #600]	; (80037b4 <LEDHandler+0x20c0>)
 800355a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800355e:	4618      	mov	r0, r3
 8003560:	4b95      	ldr	r3, [pc, #596]	; (80037b8 <LEDHandler+0x20c4>)
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	4b95      	ldr	r3, [pc, #596]	; (80037bc <LEDHandler+0x20c8>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b95      	ldr	r3, [pc, #596]	; (80037c0 <LEDHandler+0x20cc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f006 fd2c 	bl	8009fc8 <Set_LED>
 8003570:	4b90      	ldr	r3, [pc, #576]	; (80037b4 <LEDHandler+0x20c0>)
 8003572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003576:	b29b      	uxth	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	b29b      	uxth	r3, r3
 800357c:	b21a      	sxth	r2, r3
 800357e:	4b8d      	ldr	r3, [pc, #564]	; (80037b4 <LEDHandler+0x20c0>)
 8003580:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED4
 8003582:	4b8c      	ldr	r3, [pc, #560]	; (80037b4 <LEDHandler+0x20c0>)
 8003584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003588:	4618      	mov	r0, r3
 800358a:	4b8b      	ldr	r3, [pc, #556]	; (80037b8 <LEDHandler+0x20c4>)
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	4b8b      	ldr	r3, [pc, #556]	; (80037bc <LEDHandler+0x20c8>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b8b      	ldr	r3, [pc, #556]	; (80037c0 <LEDHandler+0x20cc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f006 fd17 	bl	8009fc8 <Set_LED>
 800359a:	4b86      	ldr	r3, [pc, #536]	; (80037b4 <LEDHandler+0x20c0>)
 800359c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3301      	adds	r3, #1
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b21a      	sxth	r2, r3
 80035a8:	4b82      	ldr	r3, [pc, #520]	; (80037b4 <LEDHandler+0x20c0>)
 80035aa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED5
 80035ac:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <LEDHandler+0x20c0>)
 80035ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b2:	4618      	mov	r0, r3
 80035b4:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <LEDHandler+0x20c4>)
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	4b80      	ldr	r3, [pc, #512]	; (80037bc <LEDHandler+0x20c8>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <LEDHandler+0x20cc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f006 fd02 	bl	8009fc8 <Set_LED>
 80035c4:	4b7b      	ldr	r3, [pc, #492]	; (80037b4 <LEDHandler+0x20c0>)
 80035c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	4b78      	ldr	r3, [pc, #480]	; (80037b4 <LEDHandler+0x20c0>)
 80035d4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED6
 80035d6:	4b77      	ldr	r3, [pc, #476]	; (80037b4 <LEDHandler+0x20c0>)
 80035d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035dc:	4618      	mov	r0, r3
 80035de:	4b76      	ldr	r3, [pc, #472]	; (80037b8 <LEDHandler+0x20c4>)
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <LEDHandler+0x20c8>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <LEDHandler+0x20cc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f006 fced 	bl	8009fc8 <Set_LED>
 80035ee:	4b71      	ldr	r3, [pc, #452]	; (80037b4 <LEDHandler+0x20c0>)
 80035f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b21a      	sxth	r2, r3
 80035fc:	4b6d      	ldr	r3, [pc, #436]	; (80037b4 <LEDHandler+0x20c0>)
 80035fe:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED7
 8003600:	4b6c      	ldr	r3, [pc, #432]	; (80037b4 <LEDHandler+0x20c0>)
 8003602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003606:	4618      	mov	r0, r3
 8003608:	4b6b      	ldr	r3, [pc, #428]	; (80037b8 <LEDHandler+0x20c4>)
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	4b6b      	ldr	r3, [pc, #428]	; (80037bc <LEDHandler+0x20c8>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b6b      	ldr	r3, [pc, #428]	; (80037c0 <LEDHandler+0x20cc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f006 fcd8 	bl	8009fc8 <Set_LED>
 8003618:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <LEDHandler+0x20c0>)
 800361a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361e:	b29b      	uxth	r3, r3
 8003620:	3301      	adds	r3, #1
 8003622:	b29b      	uxth	r3, r3
 8003624:	b21a      	sxth	r2, r3
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <LEDHandler+0x20c0>)
 8003628:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED8
 800362a:	4b62      	ldr	r3, [pc, #392]	; (80037b4 <LEDHandler+0x20c0>)
 800362c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003630:	4618      	mov	r0, r3
 8003632:	2300      	movs	r3, #0
 8003634:	2200      	movs	r2, #0
 8003636:	2100      	movs	r1, #0
 8003638:	f006 fcc6 	bl	8009fc8 <Set_LED>
 800363c:	4b5d      	ldr	r3, [pc, #372]	; (80037b4 <LEDHandler+0x20c0>)
 800363e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003642:	b29b      	uxth	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	b21a      	sxth	r2, r3
 800364a:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <LEDHandler+0x20c0>)
 800364c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED9
 800364e:	4b59      	ldr	r3, [pc, #356]	; (80037b4 <LEDHandler+0x20c0>)
 8003650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003654:	4618      	mov	r0, r3
 8003656:	2300      	movs	r3, #0
 8003658:	2200      	movs	r2, #0
 800365a:	2100      	movs	r1, #0
 800365c:	f006 fcb4 	bl	8009fc8 <Set_LED>
 8003660:	4b54      	ldr	r3, [pc, #336]	; (80037b4 <LEDHandler+0x20c0>)
 8003662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003666:	b29b      	uxth	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	b29b      	uxth	r3, r3
 800366c:	b21a      	sxth	r2, r3
 800366e:	4b51      	ldr	r3, [pc, #324]	; (80037b4 <LEDHandler+0x20c0>)
 8003670:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED10
 8003672:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <LEDHandler+0x20c0>)
 8003674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003678:	4618      	mov	r0, r3
 800367a:	2300      	movs	r3, #0
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	f006 fca2 	bl	8009fc8 <Set_LED>
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <LEDHandler+0x20c0>)
 8003686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800368a:	b29b      	uxth	r3, r3
 800368c:	3301      	adds	r3, #1
 800368e:	b29b      	uxth	r3, r3
 8003690:	b21a      	sxth	r2, r3
 8003692:	4b48      	ldr	r3, [pc, #288]	; (80037b4 <LEDHandler+0x20c0>)
 8003694:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED11
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <LEDHandler+0x20c0>)
 8003698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369c:	4618      	mov	r0, r3
 800369e:	2300      	movs	r3, #0
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	f006 fc90 	bl	8009fc8 <Set_LED>
 80036a8:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <LEDHandler+0x20c0>)
 80036aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	b21a      	sxth	r2, r3
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <LEDHandler+0x20c0>)
 80036b8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED12
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <LEDHandler+0x20c0>)
 80036bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c0:	4618      	mov	r0, r3
 80036c2:	2300      	movs	r3, #0
 80036c4:	2200      	movs	r2, #0
 80036c6:	2100      	movs	r1, #0
 80036c8:	f006 fc7e 	bl	8009fc8 <Set_LED>
 80036cc:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <LEDHandler+0x20c0>)
 80036ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	b21a      	sxth	r2, r3
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <LEDHandler+0x20c0>)
 80036dc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED13
 80036de:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <LEDHandler+0x20c0>)
 80036e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e4:	4618      	mov	r0, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	2200      	movs	r2, #0
 80036ea:	2100      	movs	r1, #0
 80036ec:	f006 fc6c 	bl	8009fc8 <Set_LED>
 80036f0:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <LEDHandler+0x20c0>)
 80036f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	b21a      	sxth	r2, r3
 80036fe:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <LEDHandler+0x20c0>)
 8003700:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED14
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <LEDHandler+0x20c0>)
 8003704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003708:	4618      	mov	r0, r3
 800370a:	2300      	movs	r3, #0
 800370c:	2200      	movs	r2, #0
 800370e:	2100      	movs	r1, #0
 8003710:	f006 fc5a 	bl	8009fc8 <Set_LED>
 8003714:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <LEDHandler+0x20c0>)
 8003716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371a:	b29b      	uxth	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	b21a      	sxth	r2, r3
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <LEDHandler+0x20c0>)
 8003724:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED15
 8003726:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <LEDHandler+0x20c0>)
 8003728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372c:	4618      	mov	r0, r3
 800372e:	2300      	movs	r3, #0
 8003730:	2200      	movs	r2, #0
 8003732:	2100      	movs	r1, #0
 8003734:	f006 fc48 	bl	8009fc8 <Set_LED>
 8003738:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <LEDHandler+0x20c0>)
 800373a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373e:	b29b      	uxth	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	b29b      	uxth	r3, r3
 8003744:	b21a      	sxth	r2, r3
 8003746:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <LEDHandler+0x20c0>)
 8003748:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED16
 800374a:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <LEDHandler+0x20c0>)
 800374c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003750:	4618      	mov	r0, r3
 8003752:	2300      	movs	r3, #0
 8003754:	2200      	movs	r2, #0
 8003756:	2100      	movs	r1, #0
 8003758:	f006 fc36 	bl	8009fc8 <Set_LED>
 800375c:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <LEDHandler+0x20c0>)
 800375e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003762:	b29b      	uxth	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	b29b      	uxth	r3, r3
 8003768:	b21a      	sxth	r2, r3
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <LEDHandler+0x20c0>)
 800376c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED17
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <LEDHandler+0x20c0>)
 8003770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003774:	4618      	mov	r0, r3
 8003776:	2300      	movs	r3, #0
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	f006 fc24 	bl	8009fc8 <Set_LED>
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <LEDHandler+0x20c0>)
 8003782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003786:	b29b      	uxth	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	b21a      	sxth	r2, r3
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <LEDHandler+0x20c0>)
 8003790:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <LEDHandler+0x20c0>)
 8003794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003798:	4618      	mov	r0, r3
 800379a:	2300      	movs	r3, #0
 800379c:	2200      	movs	r2, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	f006 fc12 	bl	8009fc8 <Set_LED>
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <LEDHandler+0x20c0>)
 80037a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	e008      	b.n	80037c4 <LEDHandler+0x20d0>
 80037b2:	bf00      	nop
 80037b4:	2000031c 	.word	0x2000031c
 80037b8:	20000008 	.word	0x20000008
 80037bc:	2000000c 	.word	0x2000000c
 80037c0:	20000010 	.word	0x20000010
 80037c4:	b21a      	sxth	r2, r3
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <LEDHandler+0x2148>)
 80037c8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 80037ca:	4b1c      	ldr	r3, [pc, #112]	; (800383c <LEDHandler+0x2148>)
 80037cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d0:	4618      	mov	r0, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	f006 fbf6 	bl	8009fc8 <Set_LED>
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <LEDHandler+0x2148>)
 80037de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	b21a      	sxth	r2, r3
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <LEDHandler+0x2148>)
 80037ec:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <LEDHandler+0x2148>)
 80037f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f4:	4618      	mov	r0, r3
 80037f6:	2300      	movs	r3, #0
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	f006 fbe4 	bl	8009fc8 <Set_LED>
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <LEDHandler+0x2148>)
 8003802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003806:	b29b      	uxth	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	b21a      	sxth	r2, r3
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <LEDHandler+0x2148>)
 8003810:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <LEDHandler+0x2148>)
 8003814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003818:	4618      	mov	r0, r3
 800381a:	2300      	movs	r3, #0
 800381c:	2200      	movs	r2, #0
 800381e:	2100      	movs	r1, #0
 8003820:	f006 fbd2 	bl	8009fc8 <Set_LED>
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <LEDHandler+0x2148>)
 8003826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382a:	b29b      	uxth	r3, r3
 800382c:	3301      	adds	r3, #1
 800382e:	b29b      	uxth	r3, r3
 8003830:	b21a      	sxth	r2, r3
 8003832:	4b02      	ldr	r3, [pc, #8]	; (800383c <LEDHandler+0x2148>)
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	f003 b855 	b.w	80068e4 <LEDHandler+0x51f0>
 800383a:	bf00      	nop
 800383c:	2000031c 	.word	0x2000031c

		} else if (Valor >= 36 && Valor < 41) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b23      	cmp	r3, #35	; 0x23
 8003844:	f340 81a4 	ble.w	8003b90 <LEDHandler+0x249c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b28      	cmp	r3, #40	; 0x28
 800384c:	f300 81a0 	bgt.w	8003b90 <LEDHandler+0x249c>

			Set_LED(var2, Red, Green, Blue);			var2++;//LED1
 8003850:	4ba9      	ldr	r3, [pc, #676]	; (8003af8 <LEDHandler+0x2404>)
 8003852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003856:	4618      	mov	r0, r3
 8003858:	4ba8      	ldr	r3, [pc, #672]	; (8003afc <LEDHandler+0x2408>)
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	4ba8      	ldr	r3, [pc, #672]	; (8003b00 <LEDHandler+0x240c>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4ba8      	ldr	r3, [pc, #672]	; (8003b04 <LEDHandler+0x2410>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f006 fbb0 	bl	8009fc8 <Set_LED>
 8003868:	4ba3      	ldr	r3, [pc, #652]	; (8003af8 <LEDHandler+0x2404>)
 800386a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386e:	b29b      	uxth	r3, r3
 8003870:	3301      	adds	r3, #1
 8003872:	b29b      	uxth	r3, r3
 8003874:	b21a      	sxth	r2, r3
 8003876:	4ba0      	ldr	r3, [pc, #640]	; (8003af8 <LEDHandler+0x2404>)
 8003878:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED2
 800387a:	4b9f      	ldr	r3, [pc, #636]	; (8003af8 <LEDHandler+0x2404>)
 800387c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003880:	4618      	mov	r0, r3
 8003882:	4b9e      	ldr	r3, [pc, #632]	; (8003afc <LEDHandler+0x2408>)
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	4b9e      	ldr	r3, [pc, #632]	; (8003b00 <LEDHandler+0x240c>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b9e      	ldr	r3, [pc, #632]	; (8003b04 <LEDHandler+0x2410>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f006 fb9b 	bl	8009fc8 <Set_LED>
 8003892:	4b99      	ldr	r3, [pc, #612]	; (8003af8 <LEDHandler+0x2404>)
 8003894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003898:	b29b      	uxth	r3, r3
 800389a:	3301      	adds	r3, #1
 800389c:	b29b      	uxth	r3, r3
 800389e:	b21a      	sxth	r2, r3
 80038a0:	4b95      	ldr	r3, [pc, #596]	; (8003af8 <LEDHandler+0x2404>)
 80038a2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED3
 80038a4:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <LEDHandler+0x2404>)
 80038a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038aa:	4618      	mov	r0, r3
 80038ac:	4b93      	ldr	r3, [pc, #588]	; (8003afc <LEDHandler+0x2408>)
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	4b93      	ldr	r3, [pc, #588]	; (8003b00 <LEDHandler+0x240c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b93      	ldr	r3, [pc, #588]	; (8003b04 <LEDHandler+0x2410>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f006 fb86 	bl	8009fc8 <Set_LED>
 80038bc:	4b8e      	ldr	r3, [pc, #568]	; (8003af8 <LEDHandler+0x2404>)
 80038be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b21a      	sxth	r2, r3
 80038ca:	4b8b      	ldr	r3, [pc, #556]	; (8003af8 <LEDHandler+0x2404>)
 80038cc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED4
 80038ce:	4b8a      	ldr	r3, [pc, #552]	; (8003af8 <LEDHandler+0x2404>)
 80038d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d4:	4618      	mov	r0, r3
 80038d6:	4b89      	ldr	r3, [pc, #548]	; (8003afc <LEDHandler+0x2408>)
 80038d8:	6819      	ldr	r1, [r3, #0]
 80038da:	4b89      	ldr	r3, [pc, #548]	; (8003b00 <LEDHandler+0x240c>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b89      	ldr	r3, [pc, #548]	; (8003b04 <LEDHandler+0x2410>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f006 fb71 	bl	8009fc8 <Set_LED>
 80038e6:	4b84      	ldr	r3, [pc, #528]	; (8003af8 <LEDHandler+0x2404>)
 80038e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	b21a      	sxth	r2, r3
 80038f4:	4b80      	ldr	r3, [pc, #512]	; (8003af8 <LEDHandler+0x2404>)
 80038f6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED5
 80038f8:	4b7f      	ldr	r3, [pc, #508]	; (8003af8 <LEDHandler+0x2404>)
 80038fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038fe:	4618      	mov	r0, r3
 8003900:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <LEDHandler+0x2408>)
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <LEDHandler+0x240c>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b7e      	ldr	r3, [pc, #504]	; (8003b04 <LEDHandler+0x2410>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f006 fb5c 	bl	8009fc8 <Set_LED>
 8003910:	4b79      	ldr	r3, [pc, #484]	; (8003af8 <LEDHandler+0x2404>)
 8003912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003916:	b29b      	uxth	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	b29b      	uxth	r3, r3
 800391c:	b21a      	sxth	r2, r3
 800391e:	4b76      	ldr	r3, [pc, #472]	; (8003af8 <LEDHandler+0x2404>)
 8003920:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED6
 8003922:	4b75      	ldr	r3, [pc, #468]	; (8003af8 <LEDHandler+0x2404>)
 8003924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003928:	4618      	mov	r0, r3
 800392a:	4b74      	ldr	r3, [pc, #464]	; (8003afc <LEDHandler+0x2408>)
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	4b74      	ldr	r3, [pc, #464]	; (8003b00 <LEDHandler+0x240c>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b74      	ldr	r3, [pc, #464]	; (8003b04 <LEDHandler+0x2410>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f006 fb47 	bl	8009fc8 <Set_LED>
 800393a:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <LEDHandler+0x2404>)
 800393c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003940:	b29b      	uxth	r3, r3
 8003942:	3301      	adds	r3, #1
 8003944:	b29b      	uxth	r3, r3
 8003946:	b21a      	sxth	r2, r3
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <LEDHandler+0x2404>)
 800394a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED7
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <LEDHandler+0x2404>)
 800394e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003952:	4618      	mov	r0, r3
 8003954:	4b69      	ldr	r3, [pc, #420]	; (8003afc <LEDHandler+0x2408>)
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	4b69      	ldr	r3, [pc, #420]	; (8003b00 <LEDHandler+0x240c>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b69      	ldr	r3, [pc, #420]	; (8003b04 <LEDHandler+0x2410>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f006 fb32 	bl	8009fc8 <Set_LED>
 8003964:	4b64      	ldr	r3, [pc, #400]	; (8003af8 <LEDHandler+0x2404>)
 8003966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800396a:	b29b      	uxth	r3, r3
 800396c:	3301      	adds	r3, #1
 800396e:	b29b      	uxth	r3, r3
 8003970:	b21a      	sxth	r2, r3
 8003972:	4b61      	ldr	r3, [pc, #388]	; (8003af8 <LEDHandler+0x2404>)
 8003974:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED8
 8003976:	4b60      	ldr	r3, [pc, #384]	; (8003af8 <LEDHandler+0x2404>)
 8003978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800397c:	4618      	mov	r0, r3
 800397e:	4b5f      	ldr	r3, [pc, #380]	; (8003afc <LEDHandler+0x2408>)
 8003980:	6819      	ldr	r1, [r3, #0]
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <LEDHandler+0x240c>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b5f      	ldr	r3, [pc, #380]	; (8003b04 <LEDHandler+0x2410>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f006 fb1d 	bl	8009fc8 <Set_LED>
 800398e:	4b5a      	ldr	r3, [pc, #360]	; (8003af8 <LEDHandler+0x2404>)
 8003990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003994:	b29b      	uxth	r3, r3
 8003996:	3301      	adds	r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	b21a      	sxth	r2, r3
 800399c:	4b56      	ldr	r3, [pc, #344]	; (8003af8 <LEDHandler+0x2404>)
 800399e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED9
 80039a0:	4b55      	ldr	r3, [pc, #340]	; (8003af8 <LEDHandler+0x2404>)
 80039a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039a6:	4618      	mov	r0, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	f006 fb0b 	bl	8009fc8 <Set_LED>
 80039b2:	4b51      	ldr	r3, [pc, #324]	; (8003af8 <LEDHandler+0x2404>)
 80039b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b21a      	sxth	r2, r3
 80039c0:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <LEDHandler+0x2404>)
 80039c2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED10
 80039c4:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <LEDHandler+0x2404>)
 80039c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ca:	4618      	mov	r0, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	2200      	movs	r2, #0
 80039d0:	2100      	movs	r1, #0
 80039d2:	f006 faf9 	bl	8009fc8 <Set_LED>
 80039d6:	4b48      	ldr	r3, [pc, #288]	; (8003af8 <LEDHandler+0x2404>)
 80039d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b21a      	sxth	r2, r3
 80039e4:	4b44      	ldr	r3, [pc, #272]	; (8003af8 <LEDHandler+0x2404>)
 80039e6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED11
 80039e8:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <LEDHandler+0x2404>)
 80039ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ee:	4618      	mov	r0, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	2200      	movs	r2, #0
 80039f4:	2100      	movs	r1, #0
 80039f6:	f006 fae7 	bl	8009fc8 <Set_LED>
 80039fa:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <LEDHandler+0x2404>)
 80039fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	b21a      	sxth	r2, r3
 8003a08:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <LEDHandler+0x2404>)
 8003a0a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED12
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <LEDHandler+0x2404>)
 8003a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a12:	4618      	mov	r0, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	f006 fad5 	bl	8009fc8 <Set_LED>
 8003a1e:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <LEDHandler+0x2404>)
 8003a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	b21a      	sxth	r2, r3
 8003a2c:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <LEDHandler+0x2404>)
 8003a2e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED13
 8003a30:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <LEDHandler+0x2404>)
 8003a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a36:	4618      	mov	r0, r3
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	f006 fac3 	bl	8009fc8 <Set_LED>
 8003a42:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <LEDHandler+0x2404>)
 8003a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	b21a      	sxth	r2, r3
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <LEDHandler+0x2404>)
 8003a52:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED14
 8003a54:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <LEDHandler+0x2404>)
 8003a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	f006 fab1 	bl	8009fc8 <Set_LED>
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <LEDHandler+0x2404>)
 8003a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b21a      	sxth	r2, r3
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <LEDHandler+0x2404>)
 8003a76:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED15
 8003a78:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <LEDHandler+0x2404>)
 8003a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	2300      	movs	r3, #0
 8003a82:	2200      	movs	r2, #0
 8003a84:	2100      	movs	r1, #0
 8003a86:	f006 fa9f 	bl	8009fc8 <Set_LED>
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <LEDHandler+0x2404>)
 8003a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	b21a      	sxth	r2, r3
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <LEDHandler+0x2404>)
 8003a9a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED16
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <LEDHandler+0x2404>)
 8003a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	f006 fa8d 	bl	8009fc8 <Set_LED>
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <LEDHandler+0x2404>)
 8003ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b21a      	sxth	r2, r3
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <LEDHandler+0x2404>)
 8003abe:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED17
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <LEDHandler+0x2404>)
 8003ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2200      	movs	r2, #0
 8003acc:	2100      	movs	r1, #0
 8003ace:	f006 fa7b 	bl	8009fc8 <Set_LED>
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <LEDHandler+0x2404>)
 8003ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b21a      	sxth	r2, r3
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <LEDHandler+0x2404>)
 8003ae2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <LEDHandler+0x2404>)
 8003ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aea:	4618      	mov	r0, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	2200      	movs	r2, #0
 8003af0:	2100      	movs	r1, #0
 8003af2:	f006 fa69 	bl	8009fc8 <Set_LED>
 8003af6:	e007      	b.n	8003b08 <LEDHandler+0x2414>
 8003af8:	2000031c 	.word	0x2000031c
 8003afc:	20000008 	.word	0x20000008
 8003b00:	2000000c 	.word	0x2000000c
 8003b04:	20000010 	.word	0x20000010
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <LEDHandler+0x2498>)
 8003b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b21a      	sxth	r2, r3
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <LEDHandler+0x2498>)
 8003b18:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <LEDHandler+0x2498>)
 8003b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b20:	4618      	mov	r0, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	2200      	movs	r2, #0
 8003b26:	2100      	movs	r1, #0
 8003b28:	f006 fa4e 	bl	8009fc8 <Set_LED>
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <LEDHandler+0x2498>)
 8003b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	b21a      	sxth	r2, r3
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <LEDHandler+0x2498>)
 8003b3c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <LEDHandler+0x2498>)
 8003b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b44:	4618      	mov	r0, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f006 fa3c 	bl	8009fc8 <Set_LED>
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <LEDHandler+0x2498>)
 8003b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b21a      	sxth	r2, r3
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <LEDHandler+0x2498>)
 8003b60:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <LEDHandler+0x2498>)
 8003b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2100      	movs	r1, #0
 8003b70:	f006 fa2a 	bl	8009fc8 <Set_LED>
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <LEDHandler+0x2498>)
 8003b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	b21a      	sxth	r2, r3
 8003b82:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <LEDHandler+0x2498>)
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	f002 bead 	b.w	80068e4 <LEDHandler+0x51f0>
 8003b8a:	bf00      	nop
 8003b8c:	2000031c 	.word	0x2000031c

		} else if (Valor >= 41 && Valor < 46) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b28      	cmp	r3, #40	; 0x28
 8003b94:	f340 81a6 	ble.w	8003ee4 <LEDHandler+0x27f0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b2d      	cmp	r3, #45	; 0x2d
 8003b9c:	f300 81a2 	bgt.w	8003ee4 <LEDHandler+0x27f0>

			Set_LED(var2, Red, Green, Blue);			var2++;//LED1
 8003ba0:	4ba6      	ldr	r3, [pc, #664]	; (8003e3c <LEDHandler+0x2748>)
 8003ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	4ba5      	ldr	r3, [pc, #660]	; (8003e40 <LEDHandler+0x274c>)
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	4ba5      	ldr	r3, [pc, #660]	; (8003e44 <LEDHandler+0x2750>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4ba5      	ldr	r3, [pc, #660]	; (8003e48 <LEDHandler+0x2754>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f006 fa08 	bl	8009fc8 <Set_LED>
 8003bb8:	4ba0      	ldr	r3, [pc, #640]	; (8003e3c <LEDHandler+0x2748>)
 8003bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	b21a      	sxth	r2, r3
 8003bc6:	4b9d      	ldr	r3, [pc, #628]	; (8003e3c <LEDHandler+0x2748>)
 8003bc8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED2
 8003bca:	4b9c      	ldr	r3, [pc, #624]	; (8003e3c <LEDHandler+0x2748>)
 8003bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	4b9b      	ldr	r3, [pc, #620]	; (8003e40 <LEDHandler+0x274c>)
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	4b9b      	ldr	r3, [pc, #620]	; (8003e44 <LEDHandler+0x2750>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b9b      	ldr	r3, [pc, #620]	; (8003e48 <LEDHandler+0x2754>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f006 f9f3 	bl	8009fc8 <Set_LED>
 8003be2:	4b96      	ldr	r3, [pc, #600]	; (8003e3c <LEDHandler+0x2748>)
 8003be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b21a      	sxth	r2, r3
 8003bf0:	4b92      	ldr	r3, [pc, #584]	; (8003e3c <LEDHandler+0x2748>)
 8003bf2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED3
 8003bf4:	4b91      	ldr	r3, [pc, #580]	; (8003e3c <LEDHandler+0x2748>)
 8003bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	4b90      	ldr	r3, [pc, #576]	; (8003e40 <LEDHandler+0x274c>)
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	4b90      	ldr	r3, [pc, #576]	; (8003e44 <LEDHandler+0x2750>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b90      	ldr	r3, [pc, #576]	; (8003e48 <LEDHandler+0x2754>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f006 f9de 	bl	8009fc8 <Set_LED>
 8003c0c:	4b8b      	ldr	r3, [pc, #556]	; (8003e3c <LEDHandler+0x2748>)
 8003c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <LEDHandler+0x2748>)
 8003c1c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED4
 8003c1e:	4b87      	ldr	r3, [pc, #540]	; (8003e3c <LEDHandler+0x2748>)
 8003c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c24:	4618      	mov	r0, r3
 8003c26:	4b86      	ldr	r3, [pc, #536]	; (8003e40 <LEDHandler+0x274c>)
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	4b86      	ldr	r3, [pc, #536]	; (8003e44 <LEDHandler+0x2750>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b86      	ldr	r3, [pc, #536]	; (8003e48 <LEDHandler+0x2754>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f006 f9c9 	bl	8009fc8 <Set_LED>
 8003c36:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <LEDHandler+0x2748>)
 8003c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	4b7d      	ldr	r3, [pc, #500]	; (8003e3c <LEDHandler+0x2748>)
 8003c46:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED5
 8003c48:	4b7c      	ldr	r3, [pc, #496]	; (8003e3c <LEDHandler+0x2748>)
 8003c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <LEDHandler+0x274c>)
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	4b7b      	ldr	r3, [pc, #492]	; (8003e44 <LEDHandler+0x2750>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <LEDHandler+0x2754>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f006 f9b4 	bl	8009fc8 <Set_LED>
 8003c60:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <LEDHandler+0x2748>)
 8003c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	b21a      	sxth	r2, r3
 8003c6e:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <LEDHandler+0x2748>)
 8003c70:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED6
 8003c72:	4b72      	ldr	r3, [pc, #456]	; (8003e3c <LEDHandler+0x2748>)
 8003c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	4b71      	ldr	r3, [pc, #452]	; (8003e40 <LEDHandler+0x274c>)
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	4b71      	ldr	r3, [pc, #452]	; (8003e44 <LEDHandler+0x2750>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b71      	ldr	r3, [pc, #452]	; (8003e48 <LEDHandler+0x2754>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f006 f99f 	bl	8009fc8 <Set_LED>
 8003c8a:	4b6c      	ldr	r3, [pc, #432]	; (8003e3c <LEDHandler+0x2748>)
 8003c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	b21a      	sxth	r2, r3
 8003c98:	4b68      	ldr	r3, [pc, #416]	; (8003e3c <LEDHandler+0x2748>)
 8003c9a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED7
 8003c9c:	4b67      	ldr	r3, [pc, #412]	; (8003e3c <LEDHandler+0x2748>)
 8003c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	4b66      	ldr	r3, [pc, #408]	; (8003e40 <LEDHandler+0x274c>)
 8003ca6:	6819      	ldr	r1, [r3, #0]
 8003ca8:	4b66      	ldr	r3, [pc, #408]	; (8003e44 <LEDHandler+0x2750>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b66      	ldr	r3, [pc, #408]	; (8003e48 <LEDHandler+0x2754>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f006 f98a 	bl	8009fc8 <Set_LED>
 8003cb4:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <LEDHandler+0x2748>)
 8003cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	b21a      	sxth	r2, r3
 8003cc2:	4b5e      	ldr	r3, [pc, #376]	; (8003e3c <LEDHandler+0x2748>)
 8003cc4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED8
 8003cc6:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <LEDHandler+0x2748>)
 8003cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <LEDHandler+0x274c>)
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <LEDHandler+0x2750>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <LEDHandler+0x2754>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f006 f975 	bl	8009fc8 <Set_LED>
 8003cde:	4b57      	ldr	r3, [pc, #348]	; (8003e3c <LEDHandler+0x2748>)
 8003ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b21a      	sxth	r2, r3
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <LEDHandler+0x2748>)
 8003cee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED9
 8003cf0:	4b52      	ldr	r3, [pc, #328]	; (8003e3c <LEDHandler+0x2748>)
 8003cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <LEDHandler+0x274c>)
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	4b51      	ldr	r3, [pc, #324]	; (8003e44 <LEDHandler+0x2750>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b51      	ldr	r3, [pc, #324]	; (8003e48 <LEDHandler+0x2754>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f006 f960 	bl	8009fc8 <Set_LED>
 8003d08:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <LEDHandler+0x2748>)
 8003d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <LEDHandler+0x2748>)
 8003d18:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED10
 8003d1a:	4b48      	ldr	r3, [pc, #288]	; (8003e3c <LEDHandler+0x2748>)
 8003d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d20:	4618      	mov	r0, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	2200      	movs	r2, #0
 8003d26:	2100      	movs	r1, #0
 8003d28:	f006 f94e 	bl	8009fc8 <Set_LED>
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <LEDHandler+0x2748>)
 8003d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	4b40      	ldr	r3, [pc, #256]	; (8003e3c <LEDHandler+0x2748>)
 8003d3c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED11
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <LEDHandler+0x2748>)
 8003d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d44:	4618      	mov	r0, r3
 8003d46:	2300      	movs	r3, #0
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	f006 f93c 	bl	8009fc8 <Set_LED>
 8003d50:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <LEDHandler+0x2748>)
 8003d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b21a      	sxth	r2, r3
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <LEDHandler+0x2748>)
 8003d60:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED12
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <LEDHandler+0x2748>)
 8003d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2100      	movs	r1, #0
 8003d70:	f006 f92a 	bl	8009fc8 <Set_LED>
 8003d74:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <LEDHandler+0x2748>)
 8003d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	b21a      	sxth	r2, r3
 8003d82:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <LEDHandler+0x2748>)
 8003d84:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED13
 8003d86:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <LEDHandler+0x2748>)
 8003d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2200      	movs	r2, #0
 8003d92:	2100      	movs	r1, #0
 8003d94:	f006 f918 	bl	8009fc8 <Set_LED>
 8003d98:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <LEDHandler+0x2748>)
 8003d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3301      	adds	r3, #1
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	b21a      	sxth	r2, r3
 8003da6:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <LEDHandler+0x2748>)
 8003da8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED14
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <LEDHandler+0x2748>)
 8003dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db0:	4618      	mov	r0, r3
 8003db2:	2300      	movs	r3, #0
 8003db4:	2200      	movs	r2, #0
 8003db6:	2100      	movs	r1, #0
 8003db8:	f006 f906 	bl	8009fc8 <Set_LED>
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <LEDHandler+0x2748>)
 8003dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	b21a      	sxth	r2, r3
 8003dca:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <LEDHandler+0x2748>)
 8003dcc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED15
 8003dce:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <LEDHandler+0x2748>)
 8003dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f006 f8f4 	bl	8009fc8 <Set_LED>
 8003de0:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <LEDHandler+0x2748>)
 8003de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	b21a      	sxth	r2, r3
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <LEDHandler+0x2748>)
 8003df0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED16
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <LEDHandler+0x2748>)
 8003df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f006 f8e2 	bl	8009fc8 <Set_LED>
 8003e04:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <LEDHandler+0x2748>)
 8003e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	b21a      	sxth	r2, r3
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <LEDHandler+0x2748>)
 8003e14:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED17
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <LEDHandler+0x2748>)
 8003e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2200      	movs	r2, #0
 8003e22:	2100      	movs	r1, #0
 8003e24:	f006 f8d0 	bl	8009fc8 <Set_LED>
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <LEDHandler+0x2748>)
 8003e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	b21a      	sxth	r2, r3
 8003e36:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <LEDHandler+0x2748>)
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	e007      	b.n	8003e4c <LEDHandler+0x2758>
 8003e3c:	2000031c 	.word	0x2000031c
 8003e40:	20000008 	.word	0x20000008
 8003e44:	2000000c 	.word	0x2000000c
 8003e48:	20000010 	.word	0x20000010
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <LEDHandler+0x27ec>)
 8003e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e52:	4618      	mov	r0, r3
 8003e54:	2300      	movs	r3, #0
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	f006 f8b5 	bl	8009fc8 <Set_LED>
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <LEDHandler+0x27ec>)
 8003e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3301      	adds	r3, #1
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	b21a      	sxth	r2, r3
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <LEDHandler+0x27ec>)
 8003e6e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <LEDHandler+0x27ec>)
 8003e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e76:	4618      	mov	r0, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f006 f8a3 	bl	8009fc8 <Set_LED>
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <LEDHandler+0x27ec>)
 8003e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	b21a      	sxth	r2, r3
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <LEDHandler+0x27ec>)
 8003e92:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <LEDHandler+0x27ec>)
 8003e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	f006 f891 	bl	8009fc8 <Set_LED>
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <LEDHandler+0x27ec>)
 8003ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	b21a      	sxth	r2, r3
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <LEDHandler+0x27ec>)
 8003eb6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <LEDHandler+0x27ec>)
 8003eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	f006 f87f 	bl	8009fc8 <Set_LED>
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <LEDHandler+0x27ec>)
 8003ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b21a      	sxth	r2, r3
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <LEDHandler+0x27ec>)
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	f002 bd02 	b.w	80068e4 <LEDHandler+0x51f0>
 8003ee0:	2000031c 	.word	0x2000031c

		} else if (Valor >= 46 && Valor < 51) {
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b2d      	cmp	r3, #45	; 0x2d
 8003ee8:	f340 81aa 	ble.w	8004240 <LEDHandler+0x2b4c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b32      	cmp	r3, #50	; 0x32
 8003ef0:	f300 81a6 	bgt.w	8004240 <LEDHandler+0x2b4c>

			Set_LED(var2, Red, Green, Blue);			var2++;//LED1
 8003ef4:	4ba6      	ldr	r3, [pc, #664]	; (8004190 <LEDHandler+0x2a9c>)
 8003ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003efa:	4618      	mov	r0, r3
 8003efc:	4ba5      	ldr	r3, [pc, #660]	; (8004194 <LEDHandler+0x2aa0>)
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	4ba5      	ldr	r3, [pc, #660]	; (8004198 <LEDHandler+0x2aa4>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4ba5      	ldr	r3, [pc, #660]	; (800419c <LEDHandler+0x2aa8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f006 f85e 	bl	8009fc8 <Set_LED>
 8003f0c:	4ba0      	ldr	r3, [pc, #640]	; (8004190 <LEDHandler+0x2a9c>)
 8003f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	b21a      	sxth	r2, r3
 8003f1a:	4b9d      	ldr	r3, [pc, #628]	; (8004190 <LEDHandler+0x2a9c>)
 8003f1c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED2
 8003f1e:	4b9c      	ldr	r3, [pc, #624]	; (8004190 <LEDHandler+0x2a9c>)
 8003f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f24:	4618      	mov	r0, r3
 8003f26:	4b9b      	ldr	r3, [pc, #620]	; (8004194 <LEDHandler+0x2aa0>)
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	4b9b      	ldr	r3, [pc, #620]	; (8004198 <LEDHandler+0x2aa4>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b9b      	ldr	r3, [pc, #620]	; (800419c <LEDHandler+0x2aa8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f006 f849 	bl	8009fc8 <Set_LED>
 8003f36:	4b96      	ldr	r3, [pc, #600]	; (8004190 <LEDHandler+0x2a9c>)
 8003f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	b21a      	sxth	r2, r3
 8003f44:	4b92      	ldr	r3, [pc, #584]	; (8004190 <LEDHandler+0x2a9c>)
 8003f46:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED3
 8003f48:	4b91      	ldr	r3, [pc, #580]	; (8004190 <LEDHandler+0x2a9c>)
 8003f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	4b90      	ldr	r3, [pc, #576]	; (8004194 <LEDHandler+0x2aa0>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	4b90      	ldr	r3, [pc, #576]	; (8004198 <LEDHandler+0x2aa4>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b90      	ldr	r3, [pc, #576]	; (800419c <LEDHandler+0x2aa8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f006 f834 	bl	8009fc8 <Set_LED>
 8003f60:	4b8b      	ldr	r3, [pc, #556]	; (8004190 <LEDHandler+0x2a9c>)
 8003f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	b21a      	sxth	r2, r3
 8003f6e:	4b88      	ldr	r3, [pc, #544]	; (8004190 <LEDHandler+0x2a9c>)
 8003f70:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED4
 8003f72:	4b87      	ldr	r3, [pc, #540]	; (8004190 <LEDHandler+0x2a9c>)
 8003f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	4b86      	ldr	r3, [pc, #536]	; (8004194 <LEDHandler+0x2aa0>)
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	4b86      	ldr	r3, [pc, #536]	; (8004198 <LEDHandler+0x2aa4>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b86      	ldr	r3, [pc, #536]	; (800419c <LEDHandler+0x2aa8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f006 f81f 	bl	8009fc8 <Set_LED>
 8003f8a:	4b81      	ldr	r3, [pc, #516]	; (8004190 <LEDHandler+0x2a9c>)
 8003f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3301      	adds	r3, #1
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	b21a      	sxth	r2, r3
 8003f98:	4b7d      	ldr	r3, [pc, #500]	; (8004190 <LEDHandler+0x2a9c>)
 8003f9a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED5
 8003f9c:	4b7c      	ldr	r3, [pc, #496]	; (8004190 <LEDHandler+0x2a9c>)
 8003f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	4b7b      	ldr	r3, [pc, #492]	; (8004194 <LEDHandler+0x2aa0>)
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	4b7b      	ldr	r3, [pc, #492]	; (8004198 <LEDHandler+0x2aa4>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b7b      	ldr	r3, [pc, #492]	; (800419c <LEDHandler+0x2aa8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f006 f80a 	bl	8009fc8 <Set_LED>
 8003fb4:	4b76      	ldr	r3, [pc, #472]	; (8004190 <LEDHandler+0x2a9c>)
 8003fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	b21a      	sxth	r2, r3
 8003fc2:	4b73      	ldr	r3, [pc, #460]	; (8004190 <LEDHandler+0x2a9c>)
 8003fc4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED6
 8003fc6:	4b72      	ldr	r3, [pc, #456]	; (8004190 <LEDHandler+0x2a9c>)
 8003fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	4b71      	ldr	r3, [pc, #452]	; (8004194 <LEDHandler+0x2aa0>)
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	4b71      	ldr	r3, [pc, #452]	; (8004198 <LEDHandler+0x2aa4>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b71      	ldr	r3, [pc, #452]	; (800419c <LEDHandler+0x2aa8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f005 fff5 	bl	8009fc8 <Set_LED>
 8003fde:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <LEDHandler+0x2a9c>)
 8003fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b21a      	sxth	r2, r3
 8003fec:	4b68      	ldr	r3, [pc, #416]	; (8004190 <LEDHandler+0x2a9c>)
 8003fee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED7
 8003ff0:	4b67      	ldr	r3, [pc, #412]	; (8004190 <LEDHandler+0x2a9c>)
 8003ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	4b66      	ldr	r3, [pc, #408]	; (8004194 <LEDHandler+0x2aa0>)
 8003ffa:	6819      	ldr	r1, [r3, #0]
 8003ffc:	4b66      	ldr	r3, [pc, #408]	; (8004198 <LEDHandler+0x2aa4>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b66      	ldr	r3, [pc, #408]	; (800419c <LEDHandler+0x2aa8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f005 ffe0 	bl	8009fc8 <Set_LED>
 8004008:	4b61      	ldr	r3, [pc, #388]	; (8004190 <LEDHandler+0x2a9c>)
 800400a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800400e:	b29b      	uxth	r3, r3
 8004010:	3301      	adds	r3, #1
 8004012:	b29b      	uxth	r3, r3
 8004014:	b21a      	sxth	r2, r3
 8004016:	4b5e      	ldr	r3, [pc, #376]	; (8004190 <LEDHandler+0x2a9c>)
 8004018:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED8
 800401a:	4b5d      	ldr	r3, [pc, #372]	; (8004190 <LEDHandler+0x2a9c>)
 800401c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004020:	4618      	mov	r0, r3
 8004022:	4b5c      	ldr	r3, [pc, #368]	; (8004194 <LEDHandler+0x2aa0>)
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <LEDHandler+0x2aa4>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b5c      	ldr	r3, [pc, #368]	; (800419c <LEDHandler+0x2aa8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f005 ffcb 	bl	8009fc8 <Set_LED>
 8004032:	4b57      	ldr	r3, [pc, #348]	; (8004190 <LEDHandler+0x2a9c>)
 8004034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004038:	b29b      	uxth	r3, r3
 800403a:	3301      	adds	r3, #1
 800403c:	b29b      	uxth	r3, r3
 800403e:	b21a      	sxth	r2, r3
 8004040:	4b53      	ldr	r3, [pc, #332]	; (8004190 <LEDHandler+0x2a9c>)
 8004042:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED9
 8004044:	4b52      	ldr	r3, [pc, #328]	; (8004190 <LEDHandler+0x2a9c>)
 8004046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800404a:	4618      	mov	r0, r3
 800404c:	4b51      	ldr	r3, [pc, #324]	; (8004194 <LEDHandler+0x2aa0>)
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	4b51      	ldr	r3, [pc, #324]	; (8004198 <LEDHandler+0x2aa4>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b51      	ldr	r3, [pc, #324]	; (800419c <LEDHandler+0x2aa8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f005 ffb6 	bl	8009fc8 <Set_LED>
 800405c:	4b4c      	ldr	r3, [pc, #304]	; (8004190 <LEDHandler+0x2a9c>)
 800405e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004062:	b29b      	uxth	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	b21a      	sxth	r2, r3
 800406a:	4b49      	ldr	r3, [pc, #292]	; (8004190 <LEDHandler+0x2a9c>)
 800406c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED10
 800406e:	4b48      	ldr	r3, [pc, #288]	; (8004190 <LEDHandler+0x2a9c>)
 8004070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004074:	4618      	mov	r0, r3
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <LEDHandler+0x2aa0>)
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <LEDHandler+0x2aa4>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b47      	ldr	r3, [pc, #284]	; (800419c <LEDHandler+0x2aa8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f005 ffa1 	bl	8009fc8 <Set_LED>
 8004086:	4b42      	ldr	r3, [pc, #264]	; (8004190 <LEDHandler+0x2a9c>)
 8004088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800408c:	b29b      	uxth	r3, r3
 800408e:	3301      	adds	r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	b21a      	sxth	r2, r3
 8004094:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <LEDHandler+0x2a9c>)
 8004096:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED11
 8004098:	4b3d      	ldr	r3, [pc, #244]	; (8004190 <LEDHandler+0x2a9c>)
 800409a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800409e:	4618      	mov	r0, r3
 80040a0:	2300      	movs	r3, #0
 80040a2:	2200      	movs	r2, #0
 80040a4:	2100      	movs	r1, #0
 80040a6:	f005 ff8f 	bl	8009fc8 <Set_LED>
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <LEDHandler+0x2a9c>)
 80040ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3301      	adds	r3, #1
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	b21a      	sxth	r2, r3
 80040b8:	4b35      	ldr	r3, [pc, #212]	; (8004190 <LEDHandler+0x2a9c>)
 80040ba:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED12
 80040bc:	4b34      	ldr	r3, [pc, #208]	; (8004190 <LEDHandler+0x2a9c>)
 80040be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c2:	4618      	mov	r0, r3
 80040c4:	2300      	movs	r3, #0
 80040c6:	2200      	movs	r2, #0
 80040c8:	2100      	movs	r1, #0
 80040ca:	f005 ff7d 	bl	8009fc8 <Set_LED>
 80040ce:	4b30      	ldr	r3, [pc, #192]	; (8004190 <LEDHandler+0x2a9c>)
 80040d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	b21a      	sxth	r2, r3
 80040dc:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <LEDHandler+0x2a9c>)
 80040de:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED13
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <LEDHandler+0x2a9c>)
 80040e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e6:	4618      	mov	r0, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	2200      	movs	r2, #0
 80040ec:	2100      	movs	r1, #0
 80040ee:	f005 ff6b 	bl	8009fc8 <Set_LED>
 80040f2:	4b27      	ldr	r3, [pc, #156]	; (8004190 <LEDHandler+0x2a9c>)
 80040f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	b21a      	sxth	r2, r3
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <LEDHandler+0x2a9c>)
 8004102:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED14
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <LEDHandler+0x2a9c>)
 8004106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800410a:	4618      	mov	r0, r3
 800410c:	2300      	movs	r3, #0
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	f005 ff59 	bl	8009fc8 <Set_LED>
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <LEDHandler+0x2a9c>)
 8004118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800411c:	b29b      	uxth	r3, r3
 800411e:	3301      	adds	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	b21a      	sxth	r2, r3
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <LEDHandler+0x2a9c>)
 8004126:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED15
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <LEDHandler+0x2a9c>)
 800412a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800412e:	4618      	mov	r0, r3
 8004130:	2300      	movs	r3, #0
 8004132:	2200      	movs	r2, #0
 8004134:	2100      	movs	r1, #0
 8004136:	f005 ff47 	bl	8009fc8 <Set_LED>
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <LEDHandler+0x2a9c>)
 800413c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004140:	b29b      	uxth	r3, r3
 8004142:	3301      	adds	r3, #1
 8004144:	b29b      	uxth	r3, r3
 8004146:	b21a      	sxth	r2, r3
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <LEDHandler+0x2a9c>)
 800414a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED16
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <LEDHandler+0x2a9c>)
 800414e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004152:	4618      	mov	r0, r3
 8004154:	2300      	movs	r3, #0
 8004156:	2200      	movs	r2, #0
 8004158:	2100      	movs	r1, #0
 800415a:	f005 ff35 	bl	8009fc8 <Set_LED>
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <LEDHandler+0x2a9c>)
 8004160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004164:	b29b      	uxth	r3, r3
 8004166:	3301      	adds	r3, #1
 8004168:	b29b      	uxth	r3, r3
 800416a:	b21a      	sxth	r2, r3
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <LEDHandler+0x2a9c>)
 800416e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED17
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <LEDHandler+0x2a9c>)
 8004172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004176:	4618      	mov	r0, r3
 8004178:	2300      	movs	r3, #0
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	f005 ff23 	bl	8009fc8 <Set_LED>
 8004182:	4b03      	ldr	r3, [pc, #12]	; (8004190 <LEDHandler+0x2a9c>)
 8004184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004188:	b29b      	uxth	r3, r3
 800418a:	3301      	adds	r3, #1
 800418c:	e008      	b.n	80041a0 <LEDHandler+0x2aac>
 800418e:	bf00      	nop
 8004190:	2000031c 	.word	0x2000031c
 8004194:	20000008 	.word	0x20000008
 8004198:	2000000c 	.word	0x2000000c
 800419c:	20000010 	.word	0x20000010
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	b21a      	sxth	r2, r3
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <LEDHandler+0x2b48>)
 80041a6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <LEDHandler+0x2b48>)
 80041aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ae:	4618      	mov	r0, r3
 80041b0:	2300      	movs	r3, #0
 80041b2:	2200      	movs	r2, #0
 80041b4:	2100      	movs	r1, #0
 80041b6:	f005 ff07 	bl	8009fc8 <Set_LED>
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <LEDHandler+0x2b48>)
 80041bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b21a      	sxth	r2, r3
 80041c8:	4b1c      	ldr	r3, [pc, #112]	; (800423c <LEDHandler+0x2b48>)
 80041ca:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <LEDHandler+0x2b48>)
 80041ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d2:	4618      	mov	r0, r3
 80041d4:	2300      	movs	r3, #0
 80041d6:	2200      	movs	r2, #0
 80041d8:	2100      	movs	r1, #0
 80041da:	f005 fef5 	bl	8009fc8 <Set_LED>
 80041de:	4b17      	ldr	r3, [pc, #92]	; (800423c <LEDHandler+0x2b48>)
 80041e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3301      	adds	r3, #1
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	b21a      	sxth	r2, r3
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <LEDHandler+0x2b48>)
 80041ee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 80041f0:	4b12      	ldr	r3, [pc, #72]	; (800423c <LEDHandler+0x2b48>)
 80041f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041f6:	4618      	mov	r0, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	f005 fee3 	bl	8009fc8 <Set_LED>
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <LEDHandler+0x2b48>)
 8004204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004208:	b29b      	uxth	r3, r3
 800420a:	3301      	adds	r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	b21a      	sxth	r2, r3
 8004210:	4b0a      	ldr	r3, [pc, #40]	; (800423c <LEDHandler+0x2b48>)
 8004212:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <LEDHandler+0x2b48>)
 8004216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800421a:	4618      	mov	r0, r3
 800421c:	2300      	movs	r3, #0
 800421e:	2200      	movs	r2, #0
 8004220:	2100      	movs	r1, #0
 8004222:	f005 fed1 	bl	8009fc8 <Set_LED>
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <LEDHandler+0x2b48>)
 8004228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800422c:	b29b      	uxth	r3, r3
 800422e:	3301      	adds	r3, #1
 8004230:	b29b      	uxth	r3, r3
 8004232:	b21a      	sxth	r2, r3
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <LEDHandler+0x2b48>)
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	f002 bb54 	b.w	80068e4 <LEDHandler+0x51f0>
 800423c:	2000031c 	.word	0x2000031c

		} else if (Valor >= 51 && Valor < 56) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b32      	cmp	r3, #50	; 0x32
 8004244:	f340 81ae 	ble.w	80045a4 <LEDHandler+0x2eb0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b37      	cmp	r3, #55	; 0x37
 800424c:	f300 81aa 	bgt.w	80045a4 <LEDHandler+0x2eb0>

			Set_LED(var2, Red, Green, Blue);			var2++;//LED1
 8004250:	4ba4      	ldr	r3, [pc, #656]	; (80044e4 <LEDHandler+0x2df0>)
 8004252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004256:	4618      	mov	r0, r3
 8004258:	4ba3      	ldr	r3, [pc, #652]	; (80044e8 <LEDHandler+0x2df4>)
 800425a:	6819      	ldr	r1, [r3, #0]
 800425c:	4ba3      	ldr	r3, [pc, #652]	; (80044ec <LEDHandler+0x2df8>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4ba3      	ldr	r3, [pc, #652]	; (80044f0 <LEDHandler+0x2dfc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f005 feb0 	bl	8009fc8 <Set_LED>
 8004268:	4b9e      	ldr	r3, [pc, #632]	; (80044e4 <LEDHandler+0x2df0>)
 800426a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426e:	b29b      	uxth	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	b21a      	sxth	r2, r3
 8004276:	4b9b      	ldr	r3, [pc, #620]	; (80044e4 <LEDHandler+0x2df0>)
 8004278:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED2
 800427a:	4b9a      	ldr	r3, [pc, #616]	; (80044e4 <LEDHandler+0x2df0>)
 800427c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004280:	4618      	mov	r0, r3
 8004282:	4b99      	ldr	r3, [pc, #612]	; (80044e8 <LEDHandler+0x2df4>)
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	4b99      	ldr	r3, [pc, #612]	; (80044ec <LEDHandler+0x2df8>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b99      	ldr	r3, [pc, #612]	; (80044f0 <LEDHandler+0x2dfc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f005 fe9b 	bl	8009fc8 <Set_LED>
 8004292:	4b94      	ldr	r3, [pc, #592]	; (80044e4 <LEDHandler+0x2df0>)
 8004294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004298:	b29b      	uxth	r3, r3
 800429a:	3301      	adds	r3, #1
 800429c:	b29b      	uxth	r3, r3
 800429e:	b21a      	sxth	r2, r3
 80042a0:	4b90      	ldr	r3, [pc, #576]	; (80044e4 <LEDHandler+0x2df0>)
 80042a2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED3
 80042a4:	4b8f      	ldr	r3, [pc, #572]	; (80044e4 <LEDHandler+0x2df0>)
 80042a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042aa:	4618      	mov	r0, r3
 80042ac:	4b8e      	ldr	r3, [pc, #568]	; (80044e8 <LEDHandler+0x2df4>)
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	4b8e      	ldr	r3, [pc, #568]	; (80044ec <LEDHandler+0x2df8>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b8e      	ldr	r3, [pc, #568]	; (80044f0 <LEDHandler+0x2dfc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f005 fe86 	bl	8009fc8 <Set_LED>
 80042bc:	4b89      	ldr	r3, [pc, #548]	; (80044e4 <LEDHandler+0x2df0>)
 80042be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	b21a      	sxth	r2, r3
 80042ca:	4b86      	ldr	r3, [pc, #536]	; (80044e4 <LEDHandler+0x2df0>)
 80042cc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED4
 80042ce:	4b85      	ldr	r3, [pc, #532]	; (80044e4 <LEDHandler+0x2df0>)
 80042d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d4:	4618      	mov	r0, r3
 80042d6:	4b84      	ldr	r3, [pc, #528]	; (80044e8 <LEDHandler+0x2df4>)
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	4b84      	ldr	r3, [pc, #528]	; (80044ec <LEDHandler+0x2df8>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b84      	ldr	r3, [pc, #528]	; (80044f0 <LEDHandler+0x2dfc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f005 fe71 	bl	8009fc8 <Set_LED>
 80042e6:	4b7f      	ldr	r3, [pc, #508]	; (80044e4 <LEDHandler+0x2df0>)
 80042e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	b21a      	sxth	r2, r3
 80042f4:	4b7b      	ldr	r3, [pc, #492]	; (80044e4 <LEDHandler+0x2df0>)
 80042f6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED5
 80042f8:	4b7a      	ldr	r3, [pc, #488]	; (80044e4 <LEDHandler+0x2df0>)
 80042fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042fe:	4618      	mov	r0, r3
 8004300:	4b79      	ldr	r3, [pc, #484]	; (80044e8 <LEDHandler+0x2df4>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	4b79      	ldr	r3, [pc, #484]	; (80044ec <LEDHandler+0x2df8>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b79      	ldr	r3, [pc, #484]	; (80044f0 <LEDHandler+0x2dfc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f005 fe5c 	bl	8009fc8 <Set_LED>
 8004310:	4b74      	ldr	r3, [pc, #464]	; (80044e4 <LEDHandler+0x2df0>)
 8004312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004316:	b29b      	uxth	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	b29b      	uxth	r3, r3
 800431c:	b21a      	sxth	r2, r3
 800431e:	4b71      	ldr	r3, [pc, #452]	; (80044e4 <LEDHandler+0x2df0>)
 8004320:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED6
 8004322:	4b70      	ldr	r3, [pc, #448]	; (80044e4 <LEDHandler+0x2df0>)
 8004324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004328:	4618      	mov	r0, r3
 800432a:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <LEDHandler+0x2df4>)
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <LEDHandler+0x2df8>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <LEDHandler+0x2dfc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f005 fe47 	bl	8009fc8 <Set_LED>
 800433a:	4b6a      	ldr	r3, [pc, #424]	; (80044e4 <LEDHandler+0x2df0>)
 800433c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004340:	b29b      	uxth	r3, r3
 8004342:	3301      	adds	r3, #1
 8004344:	b29b      	uxth	r3, r3
 8004346:	b21a      	sxth	r2, r3
 8004348:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <LEDHandler+0x2df0>)
 800434a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED7
 800434c:	4b65      	ldr	r3, [pc, #404]	; (80044e4 <LEDHandler+0x2df0>)
 800434e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004352:	4618      	mov	r0, r3
 8004354:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <LEDHandler+0x2df4>)
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	4b64      	ldr	r3, [pc, #400]	; (80044ec <LEDHandler+0x2df8>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b64      	ldr	r3, [pc, #400]	; (80044f0 <LEDHandler+0x2dfc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f005 fe32 	bl	8009fc8 <Set_LED>
 8004364:	4b5f      	ldr	r3, [pc, #380]	; (80044e4 <LEDHandler+0x2df0>)
 8004366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436a:	b29b      	uxth	r3, r3
 800436c:	3301      	adds	r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	b21a      	sxth	r2, r3
 8004372:	4b5c      	ldr	r3, [pc, #368]	; (80044e4 <LEDHandler+0x2df0>)
 8004374:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED8
 8004376:	4b5b      	ldr	r3, [pc, #364]	; (80044e4 <LEDHandler+0x2df0>)
 8004378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800437c:	4618      	mov	r0, r3
 800437e:	4b5a      	ldr	r3, [pc, #360]	; (80044e8 <LEDHandler+0x2df4>)
 8004380:	6819      	ldr	r1, [r3, #0]
 8004382:	4b5a      	ldr	r3, [pc, #360]	; (80044ec <LEDHandler+0x2df8>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4b5a      	ldr	r3, [pc, #360]	; (80044f0 <LEDHandler+0x2dfc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f005 fe1d 	bl	8009fc8 <Set_LED>
 800438e:	4b55      	ldr	r3, [pc, #340]	; (80044e4 <LEDHandler+0x2df0>)
 8004390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004394:	b29b      	uxth	r3, r3
 8004396:	3301      	adds	r3, #1
 8004398:	b29b      	uxth	r3, r3
 800439a:	b21a      	sxth	r2, r3
 800439c:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <LEDHandler+0x2df0>)
 800439e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED9
 80043a0:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <LEDHandler+0x2df0>)
 80043a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a6:	4618      	mov	r0, r3
 80043a8:	4b4f      	ldr	r3, [pc, #316]	; (80044e8 <LEDHandler+0x2df4>)
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <LEDHandler+0x2df8>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <LEDHandler+0x2dfc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f005 fe08 	bl	8009fc8 <Set_LED>
 80043b8:	4b4a      	ldr	r3, [pc, #296]	; (80044e4 <LEDHandler+0x2df0>)
 80043ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	b21a      	sxth	r2, r3
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <LEDHandler+0x2df0>)
 80043c8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED10
 80043ca:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <LEDHandler+0x2df0>)
 80043cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d0:	4618      	mov	r0, r3
 80043d2:	4b45      	ldr	r3, [pc, #276]	; (80044e8 <LEDHandler+0x2df4>)
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	4b45      	ldr	r3, [pc, #276]	; (80044ec <LEDHandler+0x2df8>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <LEDHandler+0x2dfc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f005 fdf3 	bl	8009fc8 <Set_LED>
 80043e2:	4b40      	ldr	r3, [pc, #256]	; (80044e4 <LEDHandler+0x2df0>)
 80043e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	b21a      	sxth	r2, r3
 80043f0:	4b3c      	ldr	r3, [pc, #240]	; (80044e4 <LEDHandler+0x2df0>)
 80043f2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED11
 80043f4:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <LEDHandler+0x2df0>)
 80043f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fa:	4618      	mov	r0, r3
 80043fc:	4b3a      	ldr	r3, [pc, #232]	; (80044e8 <LEDHandler+0x2df4>)
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	4b3a      	ldr	r3, [pc, #232]	; (80044ec <LEDHandler+0x2df8>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <LEDHandler+0x2dfc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f005 fdde 	bl	8009fc8 <Set_LED>
 800440c:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <LEDHandler+0x2df0>)
 800440e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004412:	b29b      	uxth	r3, r3
 8004414:	3301      	adds	r3, #1
 8004416:	b29b      	uxth	r3, r3
 8004418:	b21a      	sxth	r2, r3
 800441a:	4b32      	ldr	r3, [pc, #200]	; (80044e4 <LEDHandler+0x2df0>)
 800441c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED12
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <LEDHandler+0x2df0>)
 8004420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004424:	4618      	mov	r0, r3
 8004426:	2300      	movs	r3, #0
 8004428:	2200      	movs	r2, #0
 800442a:	2100      	movs	r1, #0
 800442c:	f005 fdcc 	bl	8009fc8 <Set_LED>
 8004430:	4b2c      	ldr	r3, [pc, #176]	; (80044e4 <LEDHandler+0x2df0>)
 8004432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004436:	b29b      	uxth	r3, r3
 8004438:	3301      	adds	r3, #1
 800443a:	b29b      	uxth	r3, r3
 800443c:	b21a      	sxth	r2, r3
 800443e:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <LEDHandler+0x2df0>)
 8004440:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED13
 8004442:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <LEDHandler+0x2df0>)
 8004444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004448:	4618      	mov	r0, r3
 800444a:	2300      	movs	r3, #0
 800444c:	2200      	movs	r2, #0
 800444e:	2100      	movs	r1, #0
 8004450:	f005 fdba 	bl	8009fc8 <Set_LED>
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <LEDHandler+0x2df0>)
 8004456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800445a:	b29b      	uxth	r3, r3
 800445c:	3301      	adds	r3, #1
 800445e:	b29b      	uxth	r3, r3
 8004460:	b21a      	sxth	r2, r3
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <LEDHandler+0x2df0>)
 8004464:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED14
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <LEDHandler+0x2df0>)
 8004468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800446c:	4618      	mov	r0, r3
 800446e:	2300      	movs	r3, #0
 8004470:	2200      	movs	r2, #0
 8004472:	2100      	movs	r1, #0
 8004474:	f005 fda8 	bl	8009fc8 <Set_LED>
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <LEDHandler+0x2df0>)
 800447a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800447e:	b29b      	uxth	r3, r3
 8004480:	3301      	adds	r3, #1
 8004482:	b29b      	uxth	r3, r3
 8004484:	b21a      	sxth	r2, r3
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <LEDHandler+0x2df0>)
 8004488:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED15
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <LEDHandler+0x2df0>)
 800448c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004490:	4618      	mov	r0, r3
 8004492:	2300      	movs	r3, #0
 8004494:	2200      	movs	r2, #0
 8004496:	2100      	movs	r1, #0
 8004498:	f005 fd96 	bl	8009fc8 <Set_LED>
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <LEDHandler+0x2df0>)
 800449e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3301      	adds	r3, #1
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	b21a      	sxth	r2, r3
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <LEDHandler+0x2df0>)
 80044ac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED16
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <LEDHandler+0x2df0>)
 80044b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044b4:	4618      	mov	r0, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	f005 fd84 	bl	8009fc8 <Set_LED>
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <LEDHandler+0x2df0>)
 80044c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	b21a      	sxth	r2, r3
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <LEDHandler+0x2df0>)
 80044d0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED17
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <LEDHandler+0x2df0>)
 80044d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044d8:	4618      	mov	r0, r3
 80044da:	2300      	movs	r3, #0
 80044dc:	2200      	movs	r2, #0
 80044de:	2100      	movs	r1, #0
 80044e0:	e008      	b.n	80044f4 <LEDHandler+0x2e00>
 80044e2:	bf00      	nop
 80044e4:	2000031c 	.word	0x2000031c
 80044e8:	20000008 	.word	0x20000008
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	20000010 	.word	0x20000010
 80044f4:	f005 fd68 	bl	8009fc8 <Set_LED>
 80044f8:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <LEDHandler+0x2eac>)
 80044fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	b29b      	uxth	r3, r3
 8004504:	b21a      	sxth	r2, r3
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <LEDHandler+0x2eac>)
 8004508:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 800450a:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <LEDHandler+0x2eac>)
 800450c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004510:	4618      	mov	r0, r3
 8004512:	2300      	movs	r3, #0
 8004514:	2200      	movs	r2, #0
 8004516:	2100      	movs	r1, #0
 8004518:	f005 fd56 	bl	8009fc8 <Set_LED>
 800451c:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <LEDHandler+0x2eac>)
 800451e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004522:	b29b      	uxth	r3, r3
 8004524:	3301      	adds	r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	b21a      	sxth	r2, r3
 800452a:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <LEDHandler+0x2eac>)
 800452c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <LEDHandler+0x2eac>)
 8004530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004534:	4618      	mov	r0, r3
 8004536:	2300      	movs	r3, #0
 8004538:	2200      	movs	r2, #0
 800453a:	2100      	movs	r1, #0
 800453c:	f005 fd44 	bl	8009fc8 <Set_LED>
 8004540:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <LEDHandler+0x2eac>)
 8004542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004546:	b29b      	uxth	r3, r3
 8004548:	3301      	adds	r3, #1
 800454a:	b29b      	uxth	r3, r3
 800454c:	b21a      	sxth	r2, r3
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <LEDHandler+0x2eac>)
 8004550:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8004552:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <LEDHandler+0x2eac>)
 8004554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004558:	4618      	mov	r0, r3
 800455a:	2300      	movs	r3, #0
 800455c:	2200      	movs	r2, #0
 800455e:	2100      	movs	r1, #0
 8004560:	f005 fd32 	bl	8009fc8 <Set_LED>
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <LEDHandler+0x2eac>)
 8004566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800456a:	b29b      	uxth	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	b29b      	uxth	r3, r3
 8004570:	b21a      	sxth	r2, r3
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <LEDHandler+0x2eac>)
 8004574:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <LEDHandler+0x2eac>)
 8004578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800457c:	4618      	mov	r0, r3
 800457e:	2300      	movs	r3, #0
 8004580:	2200      	movs	r2, #0
 8004582:	2100      	movs	r1, #0
 8004584:	f005 fd20 	bl	8009fc8 <Set_LED>
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <LEDHandler+0x2eac>)
 800458a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800458e:	b29b      	uxth	r3, r3
 8004590:	3301      	adds	r3, #1
 8004592:	b29b      	uxth	r3, r3
 8004594:	b21a      	sxth	r2, r3
 8004596:	4b02      	ldr	r3, [pc, #8]	; (80045a0 <LEDHandler+0x2eac>)
 8004598:	801a      	strh	r2, [r3, #0]
 800459a:	f002 b9a3 	b.w	80068e4 <LEDHandler+0x51f0>
 800459e:	bf00      	nop
 80045a0:	2000031c 	.word	0x2000031c

		} else if (Valor >= 56 && Valor < 61) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b37      	cmp	r3, #55	; 0x37
 80045a8:	f340 81b0 	ble.w	800490c <LEDHandler+0x3218>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b3c      	cmp	r3, #60	; 0x3c
 80045b0:	f300 81ac 	bgt.w	800490c <LEDHandler+0x3218>

			Set_LED(var2, Red, Green, Blue);			var2++;//LED1
 80045b4:	4ba2      	ldr	r3, [pc, #648]	; (8004840 <LEDHandler+0x314c>)
 80045b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ba:	4618      	mov	r0, r3
 80045bc:	4ba1      	ldr	r3, [pc, #644]	; (8004844 <LEDHandler+0x3150>)
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	4ba1      	ldr	r3, [pc, #644]	; (8004848 <LEDHandler+0x3154>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4ba1      	ldr	r3, [pc, #644]	; (800484c <LEDHandler+0x3158>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f005 fcfe 	bl	8009fc8 <Set_LED>
 80045cc:	4b9c      	ldr	r3, [pc, #624]	; (8004840 <LEDHandler+0x314c>)
 80045ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	b21a      	sxth	r2, r3
 80045da:	4b99      	ldr	r3, [pc, #612]	; (8004840 <LEDHandler+0x314c>)
 80045dc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED2
 80045de:	4b98      	ldr	r3, [pc, #608]	; (8004840 <LEDHandler+0x314c>)
 80045e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e4:	4618      	mov	r0, r3
 80045e6:	4b97      	ldr	r3, [pc, #604]	; (8004844 <LEDHandler+0x3150>)
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	4b97      	ldr	r3, [pc, #604]	; (8004848 <LEDHandler+0x3154>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b97      	ldr	r3, [pc, #604]	; (800484c <LEDHandler+0x3158>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f005 fce9 	bl	8009fc8 <Set_LED>
 80045f6:	4b92      	ldr	r3, [pc, #584]	; (8004840 <LEDHandler+0x314c>)
 80045f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3301      	adds	r3, #1
 8004600:	b29b      	uxth	r3, r3
 8004602:	b21a      	sxth	r2, r3
 8004604:	4b8e      	ldr	r3, [pc, #568]	; (8004840 <LEDHandler+0x314c>)
 8004606:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED3
 8004608:	4b8d      	ldr	r3, [pc, #564]	; (8004840 <LEDHandler+0x314c>)
 800460a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800460e:	4618      	mov	r0, r3
 8004610:	4b8c      	ldr	r3, [pc, #560]	; (8004844 <LEDHandler+0x3150>)
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	4b8c      	ldr	r3, [pc, #560]	; (8004848 <LEDHandler+0x3154>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b8c      	ldr	r3, [pc, #560]	; (800484c <LEDHandler+0x3158>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f005 fcd4 	bl	8009fc8 <Set_LED>
 8004620:	4b87      	ldr	r3, [pc, #540]	; (8004840 <LEDHandler+0x314c>)
 8004622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004626:	b29b      	uxth	r3, r3
 8004628:	3301      	adds	r3, #1
 800462a:	b29b      	uxth	r3, r3
 800462c:	b21a      	sxth	r2, r3
 800462e:	4b84      	ldr	r3, [pc, #528]	; (8004840 <LEDHandler+0x314c>)
 8004630:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED4
 8004632:	4b83      	ldr	r3, [pc, #524]	; (8004840 <LEDHandler+0x314c>)
 8004634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004638:	4618      	mov	r0, r3
 800463a:	4b82      	ldr	r3, [pc, #520]	; (8004844 <LEDHandler+0x3150>)
 800463c:	6819      	ldr	r1, [r3, #0]
 800463e:	4b82      	ldr	r3, [pc, #520]	; (8004848 <LEDHandler+0x3154>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b82      	ldr	r3, [pc, #520]	; (800484c <LEDHandler+0x3158>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f005 fcbf 	bl	8009fc8 <Set_LED>
 800464a:	4b7d      	ldr	r3, [pc, #500]	; (8004840 <LEDHandler+0x314c>)
 800464c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004650:	b29b      	uxth	r3, r3
 8004652:	3301      	adds	r3, #1
 8004654:	b29b      	uxth	r3, r3
 8004656:	b21a      	sxth	r2, r3
 8004658:	4b79      	ldr	r3, [pc, #484]	; (8004840 <LEDHandler+0x314c>)
 800465a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED5
 800465c:	4b78      	ldr	r3, [pc, #480]	; (8004840 <LEDHandler+0x314c>)
 800465e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004662:	4618      	mov	r0, r3
 8004664:	4b77      	ldr	r3, [pc, #476]	; (8004844 <LEDHandler+0x3150>)
 8004666:	6819      	ldr	r1, [r3, #0]
 8004668:	4b77      	ldr	r3, [pc, #476]	; (8004848 <LEDHandler+0x3154>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b77      	ldr	r3, [pc, #476]	; (800484c <LEDHandler+0x3158>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f005 fcaa 	bl	8009fc8 <Set_LED>
 8004674:	4b72      	ldr	r3, [pc, #456]	; (8004840 <LEDHandler+0x314c>)
 8004676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800467a:	b29b      	uxth	r3, r3
 800467c:	3301      	adds	r3, #1
 800467e:	b29b      	uxth	r3, r3
 8004680:	b21a      	sxth	r2, r3
 8004682:	4b6f      	ldr	r3, [pc, #444]	; (8004840 <LEDHandler+0x314c>)
 8004684:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED6
 8004686:	4b6e      	ldr	r3, [pc, #440]	; (8004840 <LEDHandler+0x314c>)
 8004688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800468c:	4618      	mov	r0, r3
 800468e:	4b6d      	ldr	r3, [pc, #436]	; (8004844 <LEDHandler+0x3150>)
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	4b6d      	ldr	r3, [pc, #436]	; (8004848 <LEDHandler+0x3154>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b6d      	ldr	r3, [pc, #436]	; (800484c <LEDHandler+0x3158>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f005 fc95 	bl	8009fc8 <Set_LED>
 800469e:	4b68      	ldr	r3, [pc, #416]	; (8004840 <LEDHandler+0x314c>)
 80046a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3301      	adds	r3, #1
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	b21a      	sxth	r2, r3
 80046ac:	4b64      	ldr	r3, [pc, #400]	; (8004840 <LEDHandler+0x314c>)
 80046ae:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED7
 80046b0:	4b63      	ldr	r3, [pc, #396]	; (8004840 <LEDHandler+0x314c>)
 80046b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b6:	4618      	mov	r0, r3
 80046b8:	4b62      	ldr	r3, [pc, #392]	; (8004844 <LEDHandler+0x3150>)
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	4b62      	ldr	r3, [pc, #392]	; (8004848 <LEDHandler+0x3154>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b62      	ldr	r3, [pc, #392]	; (800484c <LEDHandler+0x3158>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f005 fc80 	bl	8009fc8 <Set_LED>
 80046c8:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <LEDHandler+0x314c>)
 80046ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	b21a      	sxth	r2, r3
 80046d6:	4b5a      	ldr	r3, [pc, #360]	; (8004840 <LEDHandler+0x314c>)
 80046d8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED8
 80046da:	4b59      	ldr	r3, [pc, #356]	; (8004840 <LEDHandler+0x314c>)
 80046dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046e0:	4618      	mov	r0, r3
 80046e2:	4b58      	ldr	r3, [pc, #352]	; (8004844 <LEDHandler+0x3150>)
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	4b58      	ldr	r3, [pc, #352]	; (8004848 <LEDHandler+0x3154>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b58      	ldr	r3, [pc, #352]	; (800484c <LEDHandler+0x3158>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f005 fc6b 	bl	8009fc8 <Set_LED>
 80046f2:	4b53      	ldr	r3, [pc, #332]	; (8004840 <LEDHandler+0x314c>)
 80046f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b21a      	sxth	r2, r3
 8004700:	4b4f      	ldr	r3, [pc, #316]	; (8004840 <LEDHandler+0x314c>)
 8004702:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED9
 8004704:	4b4e      	ldr	r3, [pc, #312]	; (8004840 <LEDHandler+0x314c>)
 8004706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800470a:	4618      	mov	r0, r3
 800470c:	4b4d      	ldr	r3, [pc, #308]	; (8004844 <LEDHandler+0x3150>)
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	4b4d      	ldr	r3, [pc, #308]	; (8004848 <LEDHandler+0x3154>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b4d      	ldr	r3, [pc, #308]	; (800484c <LEDHandler+0x3158>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f005 fc56 	bl	8009fc8 <Set_LED>
 800471c:	4b48      	ldr	r3, [pc, #288]	; (8004840 <LEDHandler+0x314c>)
 800471e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004722:	b29b      	uxth	r3, r3
 8004724:	3301      	adds	r3, #1
 8004726:	b29b      	uxth	r3, r3
 8004728:	b21a      	sxth	r2, r3
 800472a:	4b45      	ldr	r3, [pc, #276]	; (8004840 <LEDHandler+0x314c>)
 800472c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED10
 800472e:	4b44      	ldr	r3, [pc, #272]	; (8004840 <LEDHandler+0x314c>)
 8004730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004734:	4618      	mov	r0, r3
 8004736:	4b43      	ldr	r3, [pc, #268]	; (8004844 <LEDHandler+0x3150>)
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	4b43      	ldr	r3, [pc, #268]	; (8004848 <LEDHandler+0x3154>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b43      	ldr	r3, [pc, #268]	; (800484c <LEDHandler+0x3158>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f005 fc41 	bl	8009fc8 <Set_LED>
 8004746:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <LEDHandler+0x314c>)
 8004748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800474c:	b29b      	uxth	r3, r3
 800474e:	3301      	adds	r3, #1
 8004750:	b29b      	uxth	r3, r3
 8004752:	b21a      	sxth	r2, r3
 8004754:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <LEDHandler+0x314c>)
 8004756:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED11
 8004758:	4b39      	ldr	r3, [pc, #228]	; (8004840 <LEDHandler+0x314c>)
 800475a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800475e:	4618      	mov	r0, r3
 8004760:	4b38      	ldr	r3, [pc, #224]	; (8004844 <LEDHandler+0x3150>)
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	4b38      	ldr	r3, [pc, #224]	; (8004848 <LEDHandler+0x3154>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b38      	ldr	r3, [pc, #224]	; (800484c <LEDHandler+0x3158>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f005 fc2c 	bl	8009fc8 <Set_LED>
 8004770:	4b33      	ldr	r3, [pc, #204]	; (8004840 <LEDHandler+0x314c>)
 8004772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004776:	b29b      	uxth	r3, r3
 8004778:	3301      	adds	r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	b21a      	sxth	r2, r3
 800477e:	4b30      	ldr	r3, [pc, #192]	; (8004840 <LEDHandler+0x314c>)
 8004780:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;//LED12
 8004782:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <LEDHandler+0x314c>)
 8004784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004788:	4618      	mov	r0, r3
 800478a:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <LEDHandler+0x3150>)
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <LEDHandler+0x3154>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <LEDHandler+0x3158>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f005 fc17 	bl	8009fc8 <Set_LED>
 800479a:	4b29      	ldr	r3, [pc, #164]	; (8004840 <LEDHandler+0x314c>)
 800479c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	b21a      	sxth	r2, r3
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <LEDHandler+0x314c>)
 80047aa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED13
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <LEDHandler+0x314c>)
 80047ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047b2:	4618      	mov	r0, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	2200      	movs	r2, #0
 80047b8:	2100      	movs	r1, #0
 80047ba:	f005 fc05 	bl	8009fc8 <Set_LED>
 80047be:	4b20      	ldr	r3, [pc, #128]	; (8004840 <LEDHandler+0x314c>)
 80047c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <LEDHandler+0x314c>)
 80047ce:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED14
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <LEDHandler+0x314c>)
 80047d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047d6:	4618      	mov	r0, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	f005 fbf3 	bl	8009fc8 <Set_LED>
 80047e2:	4b17      	ldr	r3, [pc, #92]	; (8004840 <LEDHandler+0x314c>)
 80047e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b21a      	sxth	r2, r3
 80047f0:	4b13      	ldr	r3, [pc, #76]	; (8004840 <LEDHandler+0x314c>)
 80047f2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED15
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <LEDHandler+0x314c>)
 80047f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047fa:	4618      	mov	r0, r3
 80047fc:	2300      	movs	r3, #0
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	f005 fbe1 	bl	8009fc8 <Set_LED>
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <LEDHandler+0x314c>)
 8004808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800480c:	b29b      	uxth	r3, r3
 800480e:	3301      	adds	r3, #1
 8004810:	b29b      	uxth	r3, r3
 8004812:	b21a      	sxth	r2, r3
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <LEDHandler+0x314c>)
 8004816:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;//LED16
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <LEDHandler+0x314c>)
 800481a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800481e:	4618      	mov	r0, r3
 8004820:	2300      	movs	r3, #0
 8004822:	2200      	movs	r2, #0
 8004824:	2100      	movs	r1, #0
 8004826:	f005 fbcf 	bl	8009fc8 <Set_LED>
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <LEDHandler+0x314c>)
 800482c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004830:	b29b      	uxth	r3, r3
 8004832:	3301      	adds	r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	b21a      	sxth	r2, r3
 8004838:	4b01      	ldr	r3, [pc, #4]	; (8004840 <LEDHandler+0x314c>)
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	e008      	b.n	8004850 <LEDHandler+0x315c>
 800483e:	bf00      	nop
 8004840:	2000031c 	.word	0x2000031c
 8004844:	20000008 	.word	0x20000008
 8004848:	2000000c 	.word	0x2000000c
 800484c:	20000010 	.word	0x20000010
			Set_LED(var2, 0, 0, 0);			var2++;//LED17
 8004850:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <LEDHandler+0x3214>)
 8004852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004856:	4618      	mov	r0, r3
 8004858:	2300      	movs	r3, #0
 800485a:	2200      	movs	r2, #0
 800485c:	2100      	movs	r1, #0
 800485e:	f005 fbb3 	bl	8009fc8 <Set_LED>
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <LEDHandler+0x3214>)
 8004864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004868:	b29b      	uxth	r3, r3
 800486a:	3301      	adds	r3, #1
 800486c:	b29b      	uxth	r3, r3
 800486e:	b21a      	sxth	r2, r3
 8004870:	4b25      	ldr	r3, [pc, #148]	; (8004908 <LEDHandler+0x3214>)
 8004872:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8004874:	4b24      	ldr	r3, [pc, #144]	; (8004908 <LEDHandler+0x3214>)
 8004876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800487a:	4618      	mov	r0, r3
 800487c:	2300      	movs	r3, #0
 800487e:	2200      	movs	r2, #0
 8004880:	2100      	movs	r1, #0
 8004882:	f005 fba1 	bl	8009fc8 <Set_LED>
 8004886:	4b20      	ldr	r3, [pc, #128]	; (8004908 <LEDHandler+0x3214>)
 8004888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800488c:	b29b      	uxth	r3, r3
 800488e:	3301      	adds	r3, #1
 8004890:	b29b      	uxth	r3, r3
 8004892:	b21a      	sxth	r2, r3
 8004894:	4b1c      	ldr	r3, [pc, #112]	; (8004908 <LEDHandler+0x3214>)
 8004896:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <LEDHandler+0x3214>)
 800489a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800489e:	4618      	mov	r0, r3
 80048a0:	2300      	movs	r3, #0
 80048a2:	2200      	movs	r2, #0
 80048a4:	2100      	movs	r1, #0
 80048a6:	f005 fb8f 	bl	8009fc8 <Set_LED>
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <LEDHandler+0x3214>)
 80048ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	b21a      	sxth	r2, r3
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <LEDHandler+0x3214>)
 80048ba:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 80048bc:	4b12      	ldr	r3, [pc, #72]	; (8004908 <LEDHandler+0x3214>)
 80048be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c2:	4618      	mov	r0, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	2200      	movs	r2, #0
 80048c8:	2100      	movs	r1, #0
 80048ca:	f005 fb7d 	bl	8009fc8 <Set_LED>
 80048ce:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <LEDHandler+0x3214>)
 80048d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3301      	adds	r3, #1
 80048d8:	b29b      	uxth	r3, r3
 80048da:	b21a      	sxth	r2, r3
 80048dc:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <LEDHandler+0x3214>)
 80048de:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <LEDHandler+0x3214>)
 80048e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048e6:	4618      	mov	r0, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	2200      	movs	r2, #0
 80048ec:	2100      	movs	r1, #0
 80048ee:	f005 fb6b 	bl	8009fc8 <Set_LED>
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <LEDHandler+0x3214>)
 80048f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3301      	adds	r3, #1
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	b21a      	sxth	r2, r3
 8004900:	4b01      	ldr	r3, [pc, #4]	; (8004908 <LEDHandler+0x3214>)
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	f001 bfee 	b.w	80068e4 <LEDHandler+0x51f0>
 8004908:	2000031c 	.word	0x2000031c

		} else if (Valor >= 61 && Valor < 66) {
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b3c      	cmp	r3, #60	; 0x3c
 8004910:	f340 81b4 	ble.w	8004c7c <LEDHandler+0x3588>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b41      	cmp	r3, #65	; 0x41
 8004918:	f300 81b0 	bgt.w	8004c7c <LEDHandler+0x3588>

			Set_LED(var2, Red, Green, Blue);			var2++;
 800491c:	4ba1      	ldr	r3, [pc, #644]	; (8004ba4 <LEDHandler+0x34b0>)
 800491e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004922:	4618      	mov	r0, r3
 8004924:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <LEDHandler+0x34b4>)
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	4ba0      	ldr	r3, [pc, #640]	; (8004bac <LEDHandler+0x34b8>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4ba0      	ldr	r3, [pc, #640]	; (8004bb0 <LEDHandler+0x34bc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f005 fb4a 	bl	8009fc8 <Set_LED>
 8004934:	4b9b      	ldr	r3, [pc, #620]	; (8004ba4 <LEDHandler+0x34b0>)
 8004936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800493a:	b29b      	uxth	r3, r3
 800493c:	3301      	adds	r3, #1
 800493e:	b29b      	uxth	r3, r3
 8004940:	b21a      	sxth	r2, r3
 8004942:	4b98      	ldr	r3, [pc, #608]	; (8004ba4 <LEDHandler+0x34b0>)
 8004944:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004946:	4b97      	ldr	r3, [pc, #604]	; (8004ba4 <LEDHandler+0x34b0>)
 8004948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800494c:	4618      	mov	r0, r3
 800494e:	4b96      	ldr	r3, [pc, #600]	; (8004ba8 <LEDHandler+0x34b4>)
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	4b96      	ldr	r3, [pc, #600]	; (8004bac <LEDHandler+0x34b8>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b96      	ldr	r3, [pc, #600]	; (8004bb0 <LEDHandler+0x34bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f005 fb35 	bl	8009fc8 <Set_LED>
 800495e:	4b91      	ldr	r3, [pc, #580]	; (8004ba4 <LEDHandler+0x34b0>)
 8004960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004964:	b29b      	uxth	r3, r3
 8004966:	3301      	adds	r3, #1
 8004968:	b29b      	uxth	r3, r3
 800496a:	b21a      	sxth	r2, r3
 800496c:	4b8d      	ldr	r3, [pc, #564]	; (8004ba4 <LEDHandler+0x34b0>)
 800496e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004970:	4b8c      	ldr	r3, [pc, #560]	; (8004ba4 <LEDHandler+0x34b0>)
 8004972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004976:	4618      	mov	r0, r3
 8004978:	4b8b      	ldr	r3, [pc, #556]	; (8004ba8 <LEDHandler+0x34b4>)
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	4b8b      	ldr	r3, [pc, #556]	; (8004bac <LEDHandler+0x34b8>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b8b      	ldr	r3, [pc, #556]	; (8004bb0 <LEDHandler+0x34bc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f005 fb20 	bl	8009fc8 <Set_LED>
 8004988:	4b86      	ldr	r3, [pc, #536]	; (8004ba4 <LEDHandler+0x34b0>)
 800498a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800498e:	b29b      	uxth	r3, r3
 8004990:	3301      	adds	r3, #1
 8004992:	b29b      	uxth	r3, r3
 8004994:	b21a      	sxth	r2, r3
 8004996:	4b83      	ldr	r3, [pc, #524]	; (8004ba4 <LEDHandler+0x34b0>)
 8004998:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800499a:	4b82      	ldr	r3, [pc, #520]	; (8004ba4 <LEDHandler+0x34b0>)
 800499c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a0:	4618      	mov	r0, r3
 80049a2:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <LEDHandler+0x34b4>)
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	4b81      	ldr	r3, [pc, #516]	; (8004bac <LEDHandler+0x34b8>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b81      	ldr	r3, [pc, #516]	; (8004bb0 <LEDHandler+0x34bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f005 fb0b 	bl	8009fc8 <Set_LED>
 80049b2:	4b7c      	ldr	r3, [pc, #496]	; (8004ba4 <LEDHandler+0x34b0>)
 80049b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	b29b      	uxth	r3, r3
 80049be:	b21a      	sxth	r2, r3
 80049c0:	4b78      	ldr	r3, [pc, #480]	; (8004ba4 <LEDHandler+0x34b0>)
 80049c2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80049c4:	4b77      	ldr	r3, [pc, #476]	; (8004ba4 <LEDHandler+0x34b0>)
 80049c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049ca:	4618      	mov	r0, r3
 80049cc:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <LEDHandler+0x34b4>)
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	4b76      	ldr	r3, [pc, #472]	; (8004bac <LEDHandler+0x34b8>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b76      	ldr	r3, [pc, #472]	; (8004bb0 <LEDHandler+0x34bc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f005 faf6 	bl	8009fc8 <Set_LED>
 80049dc:	4b71      	ldr	r3, [pc, #452]	; (8004ba4 <LEDHandler+0x34b0>)
 80049de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	b21a      	sxth	r2, r3
 80049ea:	4b6e      	ldr	r3, [pc, #440]	; (8004ba4 <LEDHandler+0x34b0>)
 80049ec:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80049ee:	4b6d      	ldr	r3, [pc, #436]	; (8004ba4 <LEDHandler+0x34b0>)
 80049f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f4:	4618      	mov	r0, r3
 80049f6:	4b6c      	ldr	r3, [pc, #432]	; (8004ba8 <LEDHandler+0x34b4>)
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <LEDHandler+0x34b8>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b6c      	ldr	r3, [pc, #432]	; (8004bb0 <LEDHandler+0x34bc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f005 fae1 	bl	8009fc8 <Set_LED>
 8004a06:	4b67      	ldr	r3, [pc, #412]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	b21a      	sxth	r2, r3
 8004a14:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a16:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004a18:	4b62      	ldr	r3, [pc, #392]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	4b61      	ldr	r3, [pc, #388]	; (8004ba8 <LEDHandler+0x34b4>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	4b61      	ldr	r3, [pc, #388]	; (8004bac <LEDHandler+0x34b8>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <LEDHandler+0x34bc>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f005 facc 	bl	8009fc8 <Set_LED>
 8004a30:	4b5c      	ldr	r3, [pc, #368]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	b21a      	sxth	r2, r3
 8004a3e:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a40:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004a42:	4b58      	ldr	r3, [pc, #352]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	4b57      	ldr	r3, [pc, #348]	; (8004ba8 <LEDHandler+0x34b4>)
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	4b57      	ldr	r3, [pc, #348]	; (8004bac <LEDHandler+0x34b8>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b57      	ldr	r3, [pc, #348]	; (8004bb0 <LEDHandler+0x34bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f005 fab7 	bl	8009fc8 <Set_LED>
 8004a5a:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	b21a      	sxth	r2, r3
 8004a68:	4b4e      	ldr	r3, [pc, #312]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a6a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004a6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a72:	4618      	mov	r0, r3
 8004a74:	4b4c      	ldr	r3, [pc, #304]	; (8004ba8 <LEDHandler+0x34b4>)
 8004a76:	6819      	ldr	r1, [r3, #0]
 8004a78:	4b4c      	ldr	r3, [pc, #304]	; (8004bac <LEDHandler+0x34b8>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <LEDHandler+0x34bc>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f005 faa2 	bl	8009fc8 <Set_LED>
 8004a84:	4b47      	ldr	r3, [pc, #284]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	b21a      	sxth	r2, r3
 8004a92:	4b44      	ldr	r3, [pc, #272]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a94:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004a96:	4b43      	ldr	r3, [pc, #268]	; (8004ba4 <LEDHandler+0x34b0>)
 8004a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	4b42      	ldr	r3, [pc, #264]	; (8004ba8 <LEDHandler+0x34b4>)
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	4b42      	ldr	r3, [pc, #264]	; (8004bac <LEDHandler+0x34b8>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <LEDHandler+0x34bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f005 fa8d 	bl	8009fc8 <Set_LED>
 8004aae:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <LEDHandler+0x34b0>)
 8004ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	b21a      	sxth	r2, r3
 8004abc:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <LEDHandler+0x34b0>)
 8004abe:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004ac0:	4b38      	ldr	r3, [pc, #224]	; (8004ba4 <LEDHandler+0x34b0>)
 8004ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	4b37      	ldr	r3, [pc, #220]	; (8004ba8 <LEDHandler+0x34b4>)
 8004aca:	6819      	ldr	r1, [r3, #0]
 8004acc:	4b37      	ldr	r3, [pc, #220]	; (8004bac <LEDHandler+0x34b8>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <LEDHandler+0x34bc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f005 fa78 	bl	8009fc8 <Set_LED>
 8004ad8:	4b32      	ldr	r3, [pc, #200]	; (8004ba4 <LEDHandler+0x34b0>)
 8004ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b21a      	sxth	r2, r3
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <LEDHandler+0x34b0>)
 8004ae8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004aea:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <LEDHandler+0x34b0>)
 8004aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004af0:	4618      	mov	r0, r3
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <LEDHandler+0x34b4>)
 8004af4:	6819      	ldr	r1, [r3, #0]
 8004af6:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <LEDHandler+0x34b8>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <LEDHandler+0x34bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f005 fa63 	bl	8009fc8 <Set_LED>
 8004b02:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	b21a      	sxth	r2, r3
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b12:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004b14:	4b23      	ldr	r3, [pc, #140]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <LEDHandler+0x34b4>)
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	4b22      	ldr	r3, [pc, #136]	; (8004bac <LEDHandler+0x34b8>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <LEDHandler+0x34bc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f005 fa4e 	bl	8009fc8 <Set_LED>
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	b21a      	sxth	r2, r3
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b3c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004b3e:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b44:	4618      	mov	r0, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	f005 fa3c 	bl	8009fc8 <Set_LED>
 8004b50:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b60:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004b62:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2100      	movs	r1, #0
 8004b70:	f005 fa2a 	bl	8009fc8 <Set_LED>
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	b21a      	sxth	r2, r3
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b84:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004b86:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2200      	movs	r2, #0
 8004b92:	2100      	movs	r1, #0
 8004b94:	f005 fa18 	bl	8009fc8 <Set_LED>
 8004b98:	4b02      	ldr	r3, [pc, #8]	; (8004ba4 <LEDHandler+0x34b0>)
 8004b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	e008      	b.n	8004bb4 <LEDHandler+0x34c0>
 8004ba2:	bf00      	nop
 8004ba4:	2000031c 	.word	0x2000031c
 8004ba8:	20000008 	.word	0x20000008
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	20000010 	.word	0x20000010
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	b21a      	sxth	r2, r3
 8004bba:	4b2f      	ldr	r3, [pc, #188]	; (8004c78 <LEDHandler+0x3584>)
 8004bbc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <LEDHandler+0x3584>)
 8004bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f005 f9fc 	bl	8009fc8 <Set_LED>
 8004bd0:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <LEDHandler+0x3584>)
 8004bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	b21a      	sxth	r2, r3
 8004bde:	4b26      	ldr	r3, [pc, #152]	; (8004c78 <LEDHandler+0x3584>)
 8004be0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8004be2:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <LEDHandler+0x3584>)
 8004be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be8:	4618      	mov	r0, r3
 8004bea:	2300      	movs	r3, #0
 8004bec:	2200      	movs	r2, #0
 8004bee:	2100      	movs	r1, #0
 8004bf0:	f005 f9ea 	bl	8009fc8 <Set_LED>
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <LEDHandler+0x3584>)
 8004bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	b21a      	sxth	r2, r3
 8004c02:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <LEDHandler+0x3584>)
 8004c04:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <LEDHandler+0x3584>)
 8004c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2200      	movs	r2, #0
 8004c12:	2100      	movs	r1, #0
 8004c14:	f005 f9d8 	bl	8009fc8 <Set_LED>
 8004c18:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <LEDHandler+0x3584>)
 8004c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3301      	adds	r3, #1
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	b21a      	sxth	r2, r3
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <LEDHandler+0x3584>)
 8004c28:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8004c2a:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <LEDHandler+0x3584>)
 8004c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c30:	4618      	mov	r0, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	2200      	movs	r2, #0
 8004c36:	2100      	movs	r1, #0
 8004c38:	f005 f9c6 	bl	8009fc8 <Set_LED>
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <LEDHandler+0x3584>)
 8004c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3301      	adds	r3, #1
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	b21a      	sxth	r2, r3
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <LEDHandler+0x3584>)
 8004c4c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <LEDHandler+0x3584>)
 8004c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c54:	4618      	mov	r0, r3
 8004c56:	2300      	movs	r3, #0
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	f005 f9b4 	bl	8009fc8 <Set_LED>
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <LEDHandler+0x3584>)
 8004c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	b21a      	sxth	r2, r3
 8004c6e:	4b02      	ldr	r3, [pc, #8]	; (8004c78 <LEDHandler+0x3584>)
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	f001 be37 	b.w	80068e4 <LEDHandler+0x51f0>
 8004c76:	bf00      	nop
 8004c78:	2000031c 	.word	0x2000031c

		} else if (Valor >= 66 && Valor < 71) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b41      	cmp	r3, #65	; 0x41
 8004c80:	f340 81b6 	ble.w	8004ff0 <LEDHandler+0x38fc>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b46      	cmp	r3, #70	; 0x46
 8004c88:	f300 81b2 	bgt.w	8004ff0 <LEDHandler+0x38fc>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8004c8c:	4b9f      	ldr	r3, [pc, #636]	; (8004f0c <LEDHandler+0x3818>)
 8004c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c92:	4618      	mov	r0, r3
 8004c94:	4b9e      	ldr	r3, [pc, #632]	; (8004f10 <LEDHandler+0x381c>)
 8004c96:	6819      	ldr	r1, [r3, #0]
 8004c98:	4b9e      	ldr	r3, [pc, #632]	; (8004f14 <LEDHandler+0x3820>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b9e      	ldr	r3, [pc, #632]	; (8004f18 <LEDHandler+0x3824>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f005 f992 	bl	8009fc8 <Set_LED>
 8004ca4:	4b99      	ldr	r3, [pc, #612]	; (8004f0c <LEDHandler+0x3818>)
 8004ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	b21a      	sxth	r2, r3
 8004cb2:	4b96      	ldr	r3, [pc, #600]	; (8004f0c <LEDHandler+0x3818>)
 8004cb4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004cb6:	4b95      	ldr	r3, [pc, #596]	; (8004f0c <LEDHandler+0x3818>)
 8004cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	4b94      	ldr	r3, [pc, #592]	; (8004f10 <LEDHandler+0x381c>)
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	4b94      	ldr	r3, [pc, #592]	; (8004f14 <LEDHandler+0x3820>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b94      	ldr	r3, [pc, #592]	; (8004f18 <LEDHandler+0x3824>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f005 f97d 	bl	8009fc8 <Set_LED>
 8004cce:	4b8f      	ldr	r3, [pc, #572]	; (8004f0c <LEDHandler+0x3818>)
 8004cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b21a      	sxth	r2, r3
 8004cdc:	4b8b      	ldr	r3, [pc, #556]	; (8004f0c <LEDHandler+0x3818>)
 8004cde:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004ce0:	4b8a      	ldr	r3, [pc, #552]	; (8004f0c <LEDHandler+0x3818>)
 8004ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	4b89      	ldr	r3, [pc, #548]	; (8004f10 <LEDHandler+0x381c>)
 8004cea:	6819      	ldr	r1, [r3, #0]
 8004cec:	4b89      	ldr	r3, [pc, #548]	; (8004f14 <LEDHandler+0x3820>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b89      	ldr	r3, [pc, #548]	; (8004f18 <LEDHandler+0x3824>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f005 f968 	bl	8009fc8 <Set_LED>
 8004cf8:	4b84      	ldr	r3, [pc, #528]	; (8004f0c <LEDHandler+0x3818>)
 8004cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	b21a      	sxth	r2, r3
 8004d06:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <LEDHandler+0x3818>)
 8004d08:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004d0a:	4b80      	ldr	r3, [pc, #512]	; (8004f0c <LEDHandler+0x3818>)
 8004d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d10:	4618      	mov	r0, r3
 8004d12:	4b7f      	ldr	r3, [pc, #508]	; (8004f10 <LEDHandler+0x381c>)
 8004d14:	6819      	ldr	r1, [r3, #0]
 8004d16:	4b7f      	ldr	r3, [pc, #508]	; (8004f14 <LEDHandler+0x3820>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b7f      	ldr	r3, [pc, #508]	; (8004f18 <LEDHandler+0x3824>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f005 f953 	bl	8009fc8 <Set_LED>
 8004d22:	4b7a      	ldr	r3, [pc, #488]	; (8004f0c <LEDHandler+0x3818>)
 8004d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	b21a      	sxth	r2, r3
 8004d30:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <LEDHandler+0x3818>)
 8004d32:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004d34:	4b75      	ldr	r3, [pc, #468]	; (8004f0c <LEDHandler+0x3818>)
 8004d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	4b74      	ldr	r3, [pc, #464]	; (8004f10 <LEDHandler+0x381c>)
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	4b74      	ldr	r3, [pc, #464]	; (8004f14 <LEDHandler+0x3820>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b74      	ldr	r3, [pc, #464]	; (8004f18 <LEDHandler+0x3824>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f005 f93e 	bl	8009fc8 <Set_LED>
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <LEDHandler+0x3818>)
 8004d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3301      	adds	r3, #1
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	b21a      	sxth	r2, r3
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <LEDHandler+0x3818>)
 8004d5c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004d5e:	4b6b      	ldr	r3, [pc, #428]	; (8004f0c <LEDHandler+0x3818>)
 8004d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d64:	4618      	mov	r0, r3
 8004d66:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <LEDHandler+0x381c>)
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <LEDHandler+0x3820>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <LEDHandler+0x3824>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f005 f929 	bl	8009fc8 <Set_LED>
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <LEDHandler+0x3818>)
 8004d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	b21a      	sxth	r2, r3
 8004d84:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <LEDHandler+0x3818>)
 8004d86:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004d88:	4b60      	ldr	r3, [pc, #384]	; (8004f0c <LEDHandler+0x3818>)
 8004d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	4b5f      	ldr	r3, [pc, #380]	; (8004f10 <LEDHandler+0x381c>)
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	4b5f      	ldr	r3, [pc, #380]	; (8004f14 <LEDHandler+0x3820>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b5f      	ldr	r3, [pc, #380]	; (8004f18 <LEDHandler+0x3824>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f005 f914 	bl	8009fc8 <Set_LED>
 8004da0:	4b5a      	ldr	r3, [pc, #360]	; (8004f0c <LEDHandler+0x3818>)
 8004da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3301      	adds	r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	4b57      	ldr	r3, [pc, #348]	; (8004f0c <LEDHandler+0x3818>)
 8004db0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004db2:	4b56      	ldr	r3, [pc, #344]	; (8004f0c <LEDHandler+0x3818>)
 8004db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db8:	4618      	mov	r0, r3
 8004dba:	4b55      	ldr	r3, [pc, #340]	; (8004f10 <LEDHandler+0x381c>)
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <LEDHandler+0x3820>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b55      	ldr	r3, [pc, #340]	; (8004f18 <LEDHandler+0x3824>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f005 f8ff 	bl	8009fc8 <Set_LED>
 8004dca:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <LEDHandler+0x3818>)
 8004dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	b21a      	sxth	r2, r3
 8004dd8:	4b4c      	ldr	r3, [pc, #304]	; (8004f0c <LEDHandler+0x3818>)
 8004dda:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004ddc:	4b4b      	ldr	r3, [pc, #300]	; (8004f0c <LEDHandler+0x3818>)
 8004dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004de2:	4618      	mov	r0, r3
 8004de4:	4b4a      	ldr	r3, [pc, #296]	; (8004f10 <LEDHandler+0x381c>)
 8004de6:	6819      	ldr	r1, [r3, #0]
 8004de8:	4b4a      	ldr	r3, [pc, #296]	; (8004f14 <LEDHandler+0x3820>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b4a      	ldr	r3, [pc, #296]	; (8004f18 <LEDHandler+0x3824>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f005 f8ea 	bl	8009fc8 <Set_LED>
 8004df4:	4b45      	ldr	r3, [pc, #276]	; (8004f0c <LEDHandler+0x3818>)
 8004df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	b21a      	sxth	r2, r3
 8004e02:	4b42      	ldr	r3, [pc, #264]	; (8004f0c <LEDHandler+0x3818>)
 8004e04:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004e06:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <LEDHandler+0x3818>)
 8004e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	4b40      	ldr	r3, [pc, #256]	; (8004f10 <LEDHandler+0x381c>)
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	4b40      	ldr	r3, [pc, #256]	; (8004f14 <LEDHandler+0x3820>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <LEDHandler+0x3824>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f005 f8d5 	bl	8009fc8 <Set_LED>
 8004e1e:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <LEDHandler+0x3818>)
 8004e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3301      	adds	r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	b21a      	sxth	r2, r3
 8004e2c:	4b37      	ldr	r3, [pc, #220]	; (8004f0c <LEDHandler+0x3818>)
 8004e2e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004e30:	4b36      	ldr	r3, [pc, #216]	; (8004f0c <LEDHandler+0x3818>)
 8004e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e36:	4618      	mov	r0, r3
 8004e38:	4b35      	ldr	r3, [pc, #212]	; (8004f10 <LEDHandler+0x381c>)
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <LEDHandler+0x3820>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b35      	ldr	r3, [pc, #212]	; (8004f18 <LEDHandler+0x3824>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f005 f8c0 	bl	8009fc8 <Set_LED>
 8004e48:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <LEDHandler+0x3818>)
 8004e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	b21a      	sxth	r2, r3
 8004e56:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <LEDHandler+0x3818>)
 8004e58:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004e5a:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <LEDHandler+0x3818>)
 8004e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e60:	4618      	mov	r0, r3
 8004e62:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <LEDHandler+0x381c>)
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <LEDHandler+0x3820>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <LEDHandler+0x3824>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f005 f8ab 	bl	8009fc8 <Set_LED>
 8004e72:	4b26      	ldr	r3, [pc, #152]	; (8004f0c <LEDHandler+0x3818>)
 8004e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	b21a      	sxth	r2, r3
 8004e80:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <LEDHandler+0x3818>)
 8004e82:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004e84:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <LEDHandler+0x3818>)
 8004e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <LEDHandler+0x381c>)
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <LEDHandler+0x3820>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <LEDHandler+0x3824>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f005 f896 	bl	8009fc8 <Set_LED>
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <LEDHandler+0x3818>)
 8004e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	b21a      	sxth	r2, r3
 8004eaa:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <LEDHandler+0x3818>)
 8004eac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004eae:	4b17      	ldr	r3, [pc, #92]	; (8004f0c <LEDHandler+0x3818>)
 8004eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <LEDHandler+0x381c>)
 8004eb8:	6819      	ldr	r1, [r3, #0]
 8004eba:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <LEDHandler+0x3820>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <LEDHandler+0x3824>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f005 f881 	bl	8009fc8 <Set_LED>
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <LEDHandler+0x3818>)
 8004ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	b21a      	sxth	r2, r3
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <LEDHandler+0x3818>)
 8004ed6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <LEDHandler+0x3818>)
 8004eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	f005 f86f 	bl	8009fc8 <Set_LED>
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <LEDHandler+0x3818>)
 8004eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	b21a      	sxth	r2, r3
 8004ef8:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <LEDHandler+0x3818>)
 8004efa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <LEDHandler+0x3818>)
 8004efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f02:	4618      	mov	r0, r3
 8004f04:	2300      	movs	r3, #0
 8004f06:	2200      	movs	r2, #0
 8004f08:	e008      	b.n	8004f1c <LEDHandler+0x3828>
 8004f0a:	bf00      	nop
 8004f0c:	2000031c 	.word	0x2000031c
 8004f10:	20000008 	.word	0x20000008
 8004f14:	2000000c 	.word	0x2000000c
 8004f18:	20000010 	.word	0x20000010
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	f005 f853 	bl	8009fc8 <Set_LED>
 8004f22:	4b32      	ldr	r3, [pc, #200]	; (8004fec <LEDHandler+0x38f8>)
 8004f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	b21a      	sxth	r2, r3
 8004f30:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <LEDHandler+0x38f8>)
 8004f32:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <LEDHandler+0x38f8>)
 8004f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2100      	movs	r1, #0
 8004f42:	f005 f841 	bl	8009fc8 <Set_LED>
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <LEDHandler+0x38f8>)
 8004f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3301      	adds	r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b21a      	sxth	r2, r3
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <LEDHandler+0x38f8>)
 8004f56:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 8004f58:	4b24      	ldr	r3, [pc, #144]	; (8004fec <LEDHandler+0x38f8>)
 8004f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	2300      	movs	r3, #0
 8004f62:	2200      	movs	r2, #0
 8004f64:	2100      	movs	r1, #0
 8004f66:	f005 f82f 	bl	8009fc8 <Set_LED>
 8004f6a:	4b20      	ldr	r3, [pc, #128]	; (8004fec <LEDHandler+0x38f8>)
 8004f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3301      	adds	r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	b21a      	sxth	r2, r3
 8004f78:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <LEDHandler+0x38f8>)
 8004f7a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <LEDHandler+0x38f8>)
 8004f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f82:	4618      	mov	r0, r3
 8004f84:	2300      	movs	r3, #0
 8004f86:	2200      	movs	r2, #0
 8004f88:	2100      	movs	r1, #0
 8004f8a:	f005 f81d 	bl	8009fc8 <Set_LED>
 8004f8e:	4b17      	ldr	r3, [pc, #92]	; (8004fec <LEDHandler+0x38f8>)
 8004f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3301      	adds	r3, #1
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	b21a      	sxth	r2, r3
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <LEDHandler+0x38f8>)
 8004f9e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <LEDHandler+0x38f8>)
 8004fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	f005 f80b 	bl	8009fc8 <Set_LED>
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <LEDHandler+0x38f8>)
 8004fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	b21a      	sxth	r2, r3
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <LEDHandler+0x38f8>)
 8004fc2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <LEDHandler+0x38f8>)
 8004fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	f004 fff9 	bl	8009fc8 <Set_LED>
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <LEDHandler+0x38f8>)
 8004fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	b21a      	sxth	r2, r3
 8004fe4:	4b01      	ldr	r3, [pc, #4]	; (8004fec <LEDHandler+0x38f8>)
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	f001 bc7c 	b.w	80068e4 <LEDHandler+0x51f0>
 8004fec:	2000031c 	.word	0x2000031c

		} else if (Valor >= 71 && Valor < 76) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b46      	cmp	r3, #70	; 0x46
 8004ff4:	f340 81b8 	ble.w	8005368 <LEDHandler+0x3c74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b4b      	cmp	r3, #75	; 0x4b
 8004ffc:	f300 81b4 	bgt.w	8005368 <LEDHandler+0x3c74>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8005000:	4b9c      	ldr	r3, [pc, #624]	; (8005274 <LEDHandler+0x3b80>)
 8005002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005006:	4618      	mov	r0, r3
 8005008:	4b9b      	ldr	r3, [pc, #620]	; (8005278 <LEDHandler+0x3b84>)
 800500a:	6819      	ldr	r1, [r3, #0]
 800500c:	4b9b      	ldr	r3, [pc, #620]	; (800527c <LEDHandler+0x3b88>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4b9b      	ldr	r3, [pc, #620]	; (8005280 <LEDHandler+0x3b8c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f004 ffd8 	bl	8009fc8 <Set_LED>
 8005018:	4b96      	ldr	r3, [pc, #600]	; (8005274 <LEDHandler+0x3b80>)
 800501a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800501e:	b29b      	uxth	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	b21a      	sxth	r2, r3
 8005026:	4b93      	ldr	r3, [pc, #588]	; (8005274 <LEDHandler+0x3b80>)
 8005028:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800502a:	4b92      	ldr	r3, [pc, #584]	; (8005274 <LEDHandler+0x3b80>)
 800502c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005030:	4618      	mov	r0, r3
 8005032:	4b91      	ldr	r3, [pc, #580]	; (8005278 <LEDHandler+0x3b84>)
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	4b91      	ldr	r3, [pc, #580]	; (800527c <LEDHandler+0x3b88>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b91      	ldr	r3, [pc, #580]	; (8005280 <LEDHandler+0x3b8c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f004 ffc3 	bl	8009fc8 <Set_LED>
 8005042:	4b8c      	ldr	r3, [pc, #560]	; (8005274 <LEDHandler+0x3b80>)
 8005044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005048:	b29b      	uxth	r3, r3
 800504a:	3301      	adds	r3, #1
 800504c:	b29b      	uxth	r3, r3
 800504e:	b21a      	sxth	r2, r3
 8005050:	4b88      	ldr	r3, [pc, #544]	; (8005274 <LEDHandler+0x3b80>)
 8005052:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005054:	4b87      	ldr	r3, [pc, #540]	; (8005274 <LEDHandler+0x3b80>)
 8005056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800505a:	4618      	mov	r0, r3
 800505c:	4b86      	ldr	r3, [pc, #536]	; (8005278 <LEDHandler+0x3b84>)
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	4b86      	ldr	r3, [pc, #536]	; (800527c <LEDHandler+0x3b88>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4b86      	ldr	r3, [pc, #536]	; (8005280 <LEDHandler+0x3b8c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f004 ffae 	bl	8009fc8 <Set_LED>
 800506c:	4b81      	ldr	r3, [pc, #516]	; (8005274 <LEDHandler+0x3b80>)
 800506e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005072:	b29b      	uxth	r3, r3
 8005074:	3301      	adds	r3, #1
 8005076:	b29b      	uxth	r3, r3
 8005078:	b21a      	sxth	r2, r3
 800507a:	4b7e      	ldr	r3, [pc, #504]	; (8005274 <LEDHandler+0x3b80>)
 800507c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800507e:	4b7d      	ldr	r3, [pc, #500]	; (8005274 <LEDHandler+0x3b80>)
 8005080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005084:	4618      	mov	r0, r3
 8005086:	4b7c      	ldr	r3, [pc, #496]	; (8005278 <LEDHandler+0x3b84>)
 8005088:	6819      	ldr	r1, [r3, #0]
 800508a:	4b7c      	ldr	r3, [pc, #496]	; (800527c <LEDHandler+0x3b88>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b7c      	ldr	r3, [pc, #496]	; (8005280 <LEDHandler+0x3b8c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f004 ff99 	bl	8009fc8 <Set_LED>
 8005096:	4b77      	ldr	r3, [pc, #476]	; (8005274 <LEDHandler+0x3b80>)
 8005098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800509c:	b29b      	uxth	r3, r3
 800509e:	3301      	adds	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	b21a      	sxth	r2, r3
 80050a4:	4b73      	ldr	r3, [pc, #460]	; (8005274 <LEDHandler+0x3b80>)
 80050a6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80050a8:	4b72      	ldr	r3, [pc, #456]	; (8005274 <LEDHandler+0x3b80>)
 80050aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ae:	4618      	mov	r0, r3
 80050b0:	4b71      	ldr	r3, [pc, #452]	; (8005278 <LEDHandler+0x3b84>)
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	4b71      	ldr	r3, [pc, #452]	; (800527c <LEDHandler+0x3b88>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	4b71      	ldr	r3, [pc, #452]	; (8005280 <LEDHandler+0x3b8c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f004 ff84 	bl	8009fc8 <Set_LED>
 80050c0:	4b6c      	ldr	r3, [pc, #432]	; (8005274 <LEDHandler+0x3b80>)
 80050c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3301      	adds	r3, #1
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	b21a      	sxth	r2, r3
 80050ce:	4b69      	ldr	r3, [pc, #420]	; (8005274 <LEDHandler+0x3b80>)
 80050d0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80050d2:	4b68      	ldr	r3, [pc, #416]	; (8005274 <LEDHandler+0x3b80>)
 80050d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050d8:	4618      	mov	r0, r3
 80050da:	4b67      	ldr	r3, [pc, #412]	; (8005278 <LEDHandler+0x3b84>)
 80050dc:	6819      	ldr	r1, [r3, #0]
 80050de:	4b67      	ldr	r3, [pc, #412]	; (800527c <LEDHandler+0x3b88>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b67      	ldr	r3, [pc, #412]	; (8005280 <LEDHandler+0x3b8c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f004 ff6f 	bl	8009fc8 <Set_LED>
 80050ea:	4b62      	ldr	r3, [pc, #392]	; (8005274 <LEDHandler+0x3b80>)
 80050ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3301      	adds	r3, #1
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	b21a      	sxth	r2, r3
 80050f8:	4b5e      	ldr	r3, [pc, #376]	; (8005274 <LEDHandler+0x3b80>)
 80050fa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80050fc:	4b5d      	ldr	r3, [pc, #372]	; (8005274 <LEDHandler+0x3b80>)
 80050fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005102:	4618      	mov	r0, r3
 8005104:	4b5c      	ldr	r3, [pc, #368]	; (8005278 <LEDHandler+0x3b84>)
 8005106:	6819      	ldr	r1, [r3, #0]
 8005108:	4b5c      	ldr	r3, [pc, #368]	; (800527c <LEDHandler+0x3b88>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	4b5c      	ldr	r3, [pc, #368]	; (8005280 <LEDHandler+0x3b8c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f004 ff5a 	bl	8009fc8 <Set_LED>
 8005114:	4b57      	ldr	r3, [pc, #348]	; (8005274 <LEDHandler+0x3b80>)
 8005116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800511a:	b29b      	uxth	r3, r3
 800511c:	3301      	adds	r3, #1
 800511e:	b29b      	uxth	r3, r3
 8005120:	b21a      	sxth	r2, r3
 8005122:	4b54      	ldr	r3, [pc, #336]	; (8005274 <LEDHandler+0x3b80>)
 8005124:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005126:	4b53      	ldr	r3, [pc, #332]	; (8005274 <LEDHandler+0x3b80>)
 8005128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800512c:	4618      	mov	r0, r3
 800512e:	4b52      	ldr	r3, [pc, #328]	; (8005278 <LEDHandler+0x3b84>)
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	4b52      	ldr	r3, [pc, #328]	; (800527c <LEDHandler+0x3b88>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4b52      	ldr	r3, [pc, #328]	; (8005280 <LEDHandler+0x3b8c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f004 ff45 	bl	8009fc8 <Set_LED>
 800513e:	4b4d      	ldr	r3, [pc, #308]	; (8005274 <LEDHandler+0x3b80>)
 8005140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005144:	b29b      	uxth	r3, r3
 8005146:	3301      	adds	r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	b21a      	sxth	r2, r3
 800514c:	4b49      	ldr	r3, [pc, #292]	; (8005274 <LEDHandler+0x3b80>)
 800514e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005150:	4b48      	ldr	r3, [pc, #288]	; (8005274 <LEDHandler+0x3b80>)
 8005152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005156:	4618      	mov	r0, r3
 8005158:	4b47      	ldr	r3, [pc, #284]	; (8005278 <LEDHandler+0x3b84>)
 800515a:	6819      	ldr	r1, [r3, #0]
 800515c:	4b47      	ldr	r3, [pc, #284]	; (800527c <LEDHandler+0x3b88>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4b47      	ldr	r3, [pc, #284]	; (8005280 <LEDHandler+0x3b8c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f004 ff30 	bl	8009fc8 <Set_LED>
 8005168:	4b42      	ldr	r3, [pc, #264]	; (8005274 <LEDHandler+0x3b80>)
 800516a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800516e:	b29b      	uxth	r3, r3
 8005170:	3301      	adds	r3, #1
 8005172:	b29b      	uxth	r3, r3
 8005174:	b21a      	sxth	r2, r3
 8005176:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <LEDHandler+0x3b80>)
 8005178:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800517a:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <LEDHandler+0x3b80>)
 800517c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005180:	4618      	mov	r0, r3
 8005182:	4b3d      	ldr	r3, [pc, #244]	; (8005278 <LEDHandler+0x3b84>)
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	4b3d      	ldr	r3, [pc, #244]	; (800527c <LEDHandler+0x3b88>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <LEDHandler+0x3b8c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f004 ff1b 	bl	8009fc8 <Set_LED>
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <LEDHandler+0x3b80>)
 8005194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005198:	b29b      	uxth	r3, r3
 800519a:	3301      	adds	r3, #1
 800519c:	b29b      	uxth	r3, r3
 800519e:	b21a      	sxth	r2, r3
 80051a0:	4b34      	ldr	r3, [pc, #208]	; (8005274 <LEDHandler+0x3b80>)
 80051a2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80051a4:	4b33      	ldr	r3, [pc, #204]	; (8005274 <LEDHandler+0x3b80>)
 80051a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051aa:	4618      	mov	r0, r3
 80051ac:	4b32      	ldr	r3, [pc, #200]	; (8005278 <LEDHandler+0x3b84>)
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	4b32      	ldr	r3, [pc, #200]	; (800527c <LEDHandler+0x3b88>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b32      	ldr	r3, [pc, #200]	; (8005280 <LEDHandler+0x3b8c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f004 ff06 	bl	8009fc8 <Set_LED>
 80051bc:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <LEDHandler+0x3b80>)
 80051be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3301      	adds	r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	b21a      	sxth	r2, r3
 80051ca:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <LEDHandler+0x3b80>)
 80051cc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80051ce:	4b29      	ldr	r3, [pc, #164]	; (8005274 <LEDHandler+0x3b80>)
 80051d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051d4:	4618      	mov	r0, r3
 80051d6:	4b28      	ldr	r3, [pc, #160]	; (8005278 <LEDHandler+0x3b84>)
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	4b28      	ldr	r3, [pc, #160]	; (800527c <LEDHandler+0x3b88>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b28      	ldr	r3, [pc, #160]	; (8005280 <LEDHandler+0x3b8c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f004 fef1 	bl	8009fc8 <Set_LED>
 80051e6:	4b23      	ldr	r3, [pc, #140]	; (8005274 <LEDHandler+0x3b80>)
 80051e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3301      	adds	r3, #1
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	b21a      	sxth	r2, r3
 80051f4:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <LEDHandler+0x3b80>)
 80051f6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80051f8:	4b1e      	ldr	r3, [pc, #120]	; (8005274 <LEDHandler+0x3b80>)
 80051fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051fe:	4618      	mov	r0, r3
 8005200:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <LEDHandler+0x3b84>)
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	4b1d      	ldr	r3, [pc, #116]	; (800527c <LEDHandler+0x3b88>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <LEDHandler+0x3b8c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f004 fedc 	bl	8009fc8 <Set_LED>
 8005210:	4b18      	ldr	r3, [pc, #96]	; (8005274 <LEDHandler+0x3b80>)
 8005212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005216:	b29b      	uxth	r3, r3
 8005218:	3301      	adds	r3, #1
 800521a:	b29b      	uxth	r3, r3
 800521c:	b21a      	sxth	r2, r3
 800521e:	4b15      	ldr	r3, [pc, #84]	; (8005274 <LEDHandler+0x3b80>)
 8005220:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <LEDHandler+0x3b80>)
 8005224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005228:	4618      	mov	r0, r3
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <LEDHandler+0x3b84>)
 800522c:	6819      	ldr	r1, [r3, #0]
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <LEDHandler+0x3b88>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b13      	ldr	r3, [pc, #76]	; (8005280 <LEDHandler+0x3b8c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f004 fec7 	bl	8009fc8 <Set_LED>
 800523a:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <LEDHandler+0x3b80>)
 800523c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005240:	b29b      	uxth	r3, r3
 8005242:	3301      	adds	r3, #1
 8005244:	b29b      	uxth	r3, r3
 8005246:	b21a      	sxth	r2, r3
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <LEDHandler+0x3b80>)
 800524a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <LEDHandler+0x3b80>)
 800524e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005252:	4618      	mov	r0, r3
 8005254:	4b08      	ldr	r3, [pc, #32]	; (8005278 <LEDHandler+0x3b84>)
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <LEDHandler+0x3b88>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <LEDHandler+0x3b8c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f004 feb2 	bl	8009fc8 <Set_LED>
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <LEDHandler+0x3b80>)
 8005266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800526a:	b29b      	uxth	r3, r3
 800526c:	3301      	adds	r3, #1
 800526e:	b29b      	uxth	r3, r3
 8005270:	b21a      	sxth	r2, r3
 8005272:	e007      	b.n	8005284 <LEDHandler+0x3b90>
 8005274:	2000031c 	.word	0x2000031c
 8005278:	20000008 	.word	0x20000008
 800527c:	2000000c 	.word	0x2000000c
 8005280:	20000010 	.word	0x20000010
 8005284:	4b37      	ldr	r3, [pc, #220]	; (8005364 <LEDHandler+0x3c70>)
 8005286:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8005288:	4b36      	ldr	r3, [pc, #216]	; (8005364 <LEDHandler+0x3c70>)
 800528a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800528e:	4618      	mov	r0, r3
 8005290:	2300      	movs	r3, #0
 8005292:	2200      	movs	r2, #0
 8005294:	2100      	movs	r1, #0
 8005296:	f004 fe97 	bl	8009fc8 <Set_LED>
 800529a:	4b32      	ldr	r3, [pc, #200]	; (8005364 <LEDHandler+0x3c70>)
 800529c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	b21a      	sxth	r2, r3
 80052a8:	4b2e      	ldr	r3, [pc, #184]	; (8005364 <LEDHandler+0x3c70>)
 80052aa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80052ac:	4b2d      	ldr	r3, [pc, #180]	; (8005364 <LEDHandler+0x3c70>)
 80052ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052b2:	4618      	mov	r0, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	2200      	movs	r2, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	f004 fe85 	bl	8009fc8 <Set_LED>
 80052be:	4b29      	ldr	r3, [pc, #164]	; (8005364 <LEDHandler+0x3c70>)
 80052c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3301      	adds	r3, #1
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	b21a      	sxth	r2, r3
 80052cc:	4b25      	ldr	r3, [pc, #148]	; (8005364 <LEDHandler+0x3c70>)
 80052ce:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 80052d0:	4b24      	ldr	r3, [pc, #144]	; (8005364 <LEDHandler+0x3c70>)
 80052d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052d6:	4618      	mov	r0, r3
 80052d8:	2300      	movs	r3, #0
 80052da:	2200      	movs	r2, #0
 80052dc:	2100      	movs	r1, #0
 80052de:	f004 fe73 	bl	8009fc8 <Set_LED>
 80052e2:	4b20      	ldr	r3, [pc, #128]	; (8005364 <LEDHandler+0x3c70>)
 80052e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	b21a      	sxth	r2, r3
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <LEDHandler+0x3c70>)
 80052f2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 80052f4:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <LEDHandler+0x3c70>)
 80052f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052fa:	4618      	mov	r0, r3
 80052fc:	2300      	movs	r3, #0
 80052fe:	2200      	movs	r2, #0
 8005300:	2100      	movs	r1, #0
 8005302:	f004 fe61 	bl	8009fc8 <Set_LED>
 8005306:	4b17      	ldr	r3, [pc, #92]	; (8005364 <LEDHandler+0x3c70>)
 8005308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800530c:	b29b      	uxth	r3, r3
 800530e:	3301      	adds	r3, #1
 8005310:	b29b      	uxth	r3, r3
 8005312:	b21a      	sxth	r2, r3
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <LEDHandler+0x3c70>)
 8005316:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8005318:	4b12      	ldr	r3, [pc, #72]	; (8005364 <LEDHandler+0x3c70>)
 800531a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800531e:	4618      	mov	r0, r3
 8005320:	2300      	movs	r3, #0
 8005322:	2200      	movs	r2, #0
 8005324:	2100      	movs	r1, #0
 8005326:	f004 fe4f 	bl	8009fc8 <Set_LED>
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <LEDHandler+0x3c70>)
 800532c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005330:	b29b      	uxth	r3, r3
 8005332:	3301      	adds	r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	b21a      	sxth	r2, r3
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <LEDHandler+0x3c70>)
 800533a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <LEDHandler+0x3c70>)
 800533e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005342:	4618      	mov	r0, r3
 8005344:	2300      	movs	r3, #0
 8005346:	2200      	movs	r2, #0
 8005348:	2100      	movs	r1, #0
 800534a:	f004 fe3d 	bl	8009fc8 <Set_LED>
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <LEDHandler+0x3c70>)
 8005350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005354:	b29b      	uxth	r3, r3
 8005356:	3301      	adds	r3, #1
 8005358:	b29b      	uxth	r3, r3
 800535a:	b21a      	sxth	r2, r3
 800535c:	4b01      	ldr	r3, [pc, #4]	; (8005364 <LEDHandler+0x3c70>)
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	f001 bac0 	b.w	80068e4 <LEDHandler+0x51f0>
 8005364:	2000031c 	.word	0x2000031c

		} else if (Valor >= 76 && Valor < 81) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b4b      	cmp	r3, #75	; 0x4b
 800536c:	f340 81c2 	ble.w	80056f4 <LEDHandler+0x4000>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b50      	cmp	r3, #80	; 0x50
 8005374:	f300 81be 	bgt.w	80056f4 <LEDHandler+0x4000>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8005378:	4b9c      	ldr	r3, [pc, #624]	; (80055ec <LEDHandler+0x3ef8>)
 800537a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800537e:	4618      	mov	r0, r3
 8005380:	4b9b      	ldr	r3, [pc, #620]	; (80055f0 <LEDHandler+0x3efc>)
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	4b9b      	ldr	r3, [pc, #620]	; (80055f4 <LEDHandler+0x3f00>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b9b      	ldr	r3, [pc, #620]	; (80055f8 <LEDHandler+0x3f04>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f004 fe1c 	bl	8009fc8 <Set_LED>
 8005390:	4b96      	ldr	r3, [pc, #600]	; (80055ec <LEDHandler+0x3ef8>)
 8005392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005396:	b29b      	uxth	r3, r3
 8005398:	3301      	adds	r3, #1
 800539a:	b29b      	uxth	r3, r3
 800539c:	b21a      	sxth	r2, r3
 800539e:	4b93      	ldr	r3, [pc, #588]	; (80055ec <LEDHandler+0x3ef8>)
 80053a0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80053a2:	4b92      	ldr	r3, [pc, #584]	; (80055ec <LEDHandler+0x3ef8>)
 80053a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053a8:	4618      	mov	r0, r3
 80053aa:	4b91      	ldr	r3, [pc, #580]	; (80055f0 <LEDHandler+0x3efc>)
 80053ac:	6819      	ldr	r1, [r3, #0]
 80053ae:	4b91      	ldr	r3, [pc, #580]	; (80055f4 <LEDHandler+0x3f00>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b91      	ldr	r3, [pc, #580]	; (80055f8 <LEDHandler+0x3f04>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f004 fe07 	bl	8009fc8 <Set_LED>
 80053ba:	4b8c      	ldr	r3, [pc, #560]	; (80055ec <LEDHandler+0x3ef8>)
 80053bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3301      	adds	r3, #1
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	b21a      	sxth	r2, r3
 80053c8:	4b88      	ldr	r3, [pc, #544]	; (80055ec <LEDHandler+0x3ef8>)
 80053ca:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80053cc:	4b87      	ldr	r3, [pc, #540]	; (80055ec <LEDHandler+0x3ef8>)
 80053ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053d2:	4618      	mov	r0, r3
 80053d4:	4b86      	ldr	r3, [pc, #536]	; (80055f0 <LEDHandler+0x3efc>)
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	4b86      	ldr	r3, [pc, #536]	; (80055f4 <LEDHandler+0x3f00>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b86      	ldr	r3, [pc, #536]	; (80055f8 <LEDHandler+0x3f04>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f004 fdf2 	bl	8009fc8 <Set_LED>
 80053e4:	4b81      	ldr	r3, [pc, #516]	; (80055ec <LEDHandler+0x3ef8>)
 80053e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3301      	adds	r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	b21a      	sxth	r2, r3
 80053f2:	4b7e      	ldr	r3, [pc, #504]	; (80055ec <LEDHandler+0x3ef8>)
 80053f4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80053f6:	4b7d      	ldr	r3, [pc, #500]	; (80055ec <LEDHandler+0x3ef8>)
 80053f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053fc:	4618      	mov	r0, r3
 80053fe:	4b7c      	ldr	r3, [pc, #496]	; (80055f0 <LEDHandler+0x3efc>)
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	4b7c      	ldr	r3, [pc, #496]	; (80055f4 <LEDHandler+0x3f00>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b7c      	ldr	r3, [pc, #496]	; (80055f8 <LEDHandler+0x3f04>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f004 fddd 	bl	8009fc8 <Set_LED>
 800540e:	4b77      	ldr	r3, [pc, #476]	; (80055ec <LEDHandler+0x3ef8>)
 8005410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005414:	b29b      	uxth	r3, r3
 8005416:	3301      	adds	r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	b21a      	sxth	r2, r3
 800541c:	4b73      	ldr	r3, [pc, #460]	; (80055ec <LEDHandler+0x3ef8>)
 800541e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005420:	4b72      	ldr	r3, [pc, #456]	; (80055ec <LEDHandler+0x3ef8>)
 8005422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005426:	4618      	mov	r0, r3
 8005428:	4b71      	ldr	r3, [pc, #452]	; (80055f0 <LEDHandler+0x3efc>)
 800542a:	6819      	ldr	r1, [r3, #0]
 800542c:	4b71      	ldr	r3, [pc, #452]	; (80055f4 <LEDHandler+0x3f00>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b71      	ldr	r3, [pc, #452]	; (80055f8 <LEDHandler+0x3f04>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f004 fdc8 	bl	8009fc8 <Set_LED>
 8005438:	4b6c      	ldr	r3, [pc, #432]	; (80055ec <LEDHandler+0x3ef8>)
 800543a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800543e:	b29b      	uxth	r3, r3
 8005440:	3301      	adds	r3, #1
 8005442:	b29b      	uxth	r3, r3
 8005444:	b21a      	sxth	r2, r3
 8005446:	4b69      	ldr	r3, [pc, #420]	; (80055ec <LEDHandler+0x3ef8>)
 8005448:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800544a:	4b68      	ldr	r3, [pc, #416]	; (80055ec <LEDHandler+0x3ef8>)
 800544c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005450:	4618      	mov	r0, r3
 8005452:	4b67      	ldr	r3, [pc, #412]	; (80055f0 <LEDHandler+0x3efc>)
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	4b67      	ldr	r3, [pc, #412]	; (80055f4 <LEDHandler+0x3f00>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b67      	ldr	r3, [pc, #412]	; (80055f8 <LEDHandler+0x3f04>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f004 fdb3 	bl	8009fc8 <Set_LED>
 8005462:	4b62      	ldr	r3, [pc, #392]	; (80055ec <LEDHandler+0x3ef8>)
 8005464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005468:	b29b      	uxth	r3, r3
 800546a:	3301      	adds	r3, #1
 800546c:	b29b      	uxth	r3, r3
 800546e:	b21a      	sxth	r2, r3
 8005470:	4b5e      	ldr	r3, [pc, #376]	; (80055ec <LEDHandler+0x3ef8>)
 8005472:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005474:	4b5d      	ldr	r3, [pc, #372]	; (80055ec <LEDHandler+0x3ef8>)
 8005476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800547a:	4618      	mov	r0, r3
 800547c:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <LEDHandler+0x3efc>)
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	4b5c      	ldr	r3, [pc, #368]	; (80055f4 <LEDHandler+0x3f00>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b5c      	ldr	r3, [pc, #368]	; (80055f8 <LEDHandler+0x3f04>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f004 fd9e 	bl	8009fc8 <Set_LED>
 800548c:	4b57      	ldr	r3, [pc, #348]	; (80055ec <LEDHandler+0x3ef8>)
 800548e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005492:	b29b      	uxth	r3, r3
 8005494:	3301      	adds	r3, #1
 8005496:	b29b      	uxth	r3, r3
 8005498:	b21a      	sxth	r2, r3
 800549a:	4b54      	ldr	r3, [pc, #336]	; (80055ec <LEDHandler+0x3ef8>)
 800549c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800549e:	4b53      	ldr	r3, [pc, #332]	; (80055ec <LEDHandler+0x3ef8>)
 80054a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054a4:	4618      	mov	r0, r3
 80054a6:	4b52      	ldr	r3, [pc, #328]	; (80055f0 <LEDHandler+0x3efc>)
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	4b52      	ldr	r3, [pc, #328]	; (80055f4 <LEDHandler+0x3f00>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b52      	ldr	r3, [pc, #328]	; (80055f8 <LEDHandler+0x3f04>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f004 fd89 	bl	8009fc8 <Set_LED>
 80054b6:	4b4d      	ldr	r3, [pc, #308]	; (80055ec <LEDHandler+0x3ef8>)
 80054b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	b21a      	sxth	r2, r3
 80054c4:	4b49      	ldr	r3, [pc, #292]	; (80055ec <LEDHandler+0x3ef8>)
 80054c6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80054c8:	4b48      	ldr	r3, [pc, #288]	; (80055ec <LEDHandler+0x3ef8>)
 80054ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ce:	4618      	mov	r0, r3
 80054d0:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <LEDHandler+0x3efc>)
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	4b47      	ldr	r3, [pc, #284]	; (80055f4 <LEDHandler+0x3f00>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <LEDHandler+0x3f04>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f004 fd74 	bl	8009fc8 <Set_LED>
 80054e0:	4b42      	ldr	r3, [pc, #264]	; (80055ec <LEDHandler+0x3ef8>)
 80054e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3301      	adds	r3, #1
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	b21a      	sxth	r2, r3
 80054ee:	4b3f      	ldr	r3, [pc, #252]	; (80055ec <LEDHandler+0x3ef8>)
 80054f0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80054f2:	4b3e      	ldr	r3, [pc, #248]	; (80055ec <LEDHandler+0x3ef8>)
 80054f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054f8:	4618      	mov	r0, r3
 80054fa:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <LEDHandler+0x3efc>)
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	4b3d      	ldr	r3, [pc, #244]	; (80055f4 <LEDHandler+0x3f00>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b3d      	ldr	r3, [pc, #244]	; (80055f8 <LEDHandler+0x3f04>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f004 fd5f 	bl	8009fc8 <Set_LED>
 800550a:	4b38      	ldr	r3, [pc, #224]	; (80055ec <LEDHandler+0x3ef8>)
 800550c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005510:	b29b      	uxth	r3, r3
 8005512:	3301      	adds	r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	b21a      	sxth	r2, r3
 8005518:	4b34      	ldr	r3, [pc, #208]	; (80055ec <LEDHandler+0x3ef8>)
 800551a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800551c:	4b33      	ldr	r3, [pc, #204]	; (80055ec <LEDHandler+0x3ef8>)
 800551e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005522:	4618      	mov	r0, r3
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <LEDHandler+0x3efc>)
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	4b32      	ldr	r3, [pc, #200]	; (80055f4 <LEDHandler+0x3f00>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b32      	ldr	r3, [pc, #200]	; (80055f8 <LEDHandler+0x3f04>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f004 fd4a 	bl	8009fc8 <Set_LED>
 8005534:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <LEDHandler+0x3ef8>)
 8005536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800553a:	b29b      	uxth	r3, r3
 800553c:	3301      	adds	r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	b21a      	sxth	r2, r3
 8005542:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <LEDHandler+0x3ef8>)
 8005544:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005546:	4b29      	ldr	r3, [pc, #164]	; (80055ec <LEDHandler+0x3ef8>)
 8005548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800554c:	4618      	mov	r0, r3
 800554e:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <LEDHandler+0x3efc>)
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	4b28      	ldr	r3, [pc, #160]	; (80055f4 <LEDHandler+0x3f00>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <LEDHandler+0x3f04>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f004 fd35 	bl	8009fc8 <Set_LED>
 800555e:	4b23      	ldr	r3, [pc, #140]	; (80055ec <LEDHandler+0x3ef8>)
 8005560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005564:	b29b      	uxth	r3, r3
 8005566:	3301      	adds	r3, #1
 8005568:	b29b      	uxth	r3, r3
 800556a:	b21a      	sxth	r2, r3
 800556c:	4b1f      	ldr	r3, [pc, #124]	; (80055ec <LEDHandler+0x3ef8>)
 800556e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005570:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <LEDHandler+0x3ef8>)
 8005572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005576:	4618      	mov	r0, r3
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <LEDHandler+0x3efc>)
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <LEDHandler+0x3f00>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <LEDHandler+0x3f04>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f004 fd20 	bl	8009fc8 <Set_LED>
 8005588:	4b18      	ldr	r3, [pc, #96]	; (80055ec <LEDHandler+0x3ef8>)
 800558a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800558e:	b29b      	uxth	r3, r3
 8005590:	3301      	adds	r3, #1
 8005592:	b29b      	uxth	r3, r3
 8005594:	b21a      	sxth	r2, r3
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <LEDHandler+0x3ef8>)
 8005598:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800559a:	4b14      	ldr	r3, [pc, #80]	; (80055ec <LEDHandler+0x3ef8>)
 800559c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a0:	4618      	mov	r0, r3
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <LEDHandler+0x3efc>)
 80055a4:	6819      	ldr	r1, [r3, #0]
 80055a6:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <LEDHandler+0x3f00>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <LEDHandler+0x3f04>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f004 fd0b 	bl	8009fc8 <Set_LED>
 80055b2:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <LEDHandler+0x3ef8>)
 80055b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3301      	adds	r3, #1
 80055bc:	b29b      	uxth	r3, r3
 80055be:	b21a      	sxth	r2, r3
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <LEDHandler+0x3ef8>)
 80055c2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <LEDHandler+0x3ef8>)
 80055c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ca:	4618      	mov	r0, r3
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <LEDHandler+0x3efc>)
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <LEDHandler+0x3f00>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <LEDHandler+0x3f04>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f004 fcf6 	bl	8009fc8 <Set_LED>
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <LEDHandler+0x3ef8>)
 80055de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3301      	adds	r3, #1
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	b21a      	sxth	r2, r3
 80055ea:	e007      	b.n	80055fc <LEDHandler+0x3f08>
 80055ec:	2000031c 	.word	0x2000031c
 80055f0:	20000008 	.word	0x20000008
 80055f4:	2000000c 	.word	0x2000000c
 80055f8:	20000010 	.word	0x20000010
 80055fc:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <LEDHandler+0x3ff0>)
 80055fe:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005600:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <LEDHandler+0x3ff0>)
 8005602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005606:	4618      	mov	r0, r3
 8005608:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <LEDHandler+0x3ff4>)
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	4b37      	ldr	r3, [pc, #220]	; (80056ec <LEDHandler+0x3ff8>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <LEDHandler+0x3ffc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f004 fcd8 	bl	8009fc8 <Set_LED>
 8005618:	4b32      	ldr	r3, [pc, #200]	; (80056e4 <LEDHandler+0x3ff0>)
 800561a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800561e:	b29b      	uxth	r3, r3
 8005620:	3301      	adds	r3, #1
 8005622:	b29b      	uxth	r3, r3
 8005624:	b21a      	sxth	r2, r3
 8005626:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <LEDHandler+0x3ff0>)
 8005628:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800562a:	4b2e      	ldr	r3, [pc, #184]	; (80056e4 <LEDHandler+0x3ff0>)
 800562c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005630:	4618      	mov	r0, r3
 8005632:	2300      	movs	r3, #0
 8005634:	2200      	movs	r2, #0
 8005636:	2100      	movs	r1, #0
 8005638:	f004 fcc6 	bl	8009fc8 <Set_LED>
 800563c:	4b29      	ldr	r3, [pc, #164]	; (80056e4 <LEDHandler+0x3ff0>)
 800563e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005642:	b29b      	uxth	r3, r3
 8005644:	3301      	adds	r3, #1
 8005646:	b29b      	uxth	r3, r3
 8005648:	b21a      	sxth	r2, r3
 800564a:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <LEDHandler+0x3ff0>)
 800564c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 800564e:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <LEDHandler+0x3ff0>)
 8005650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005654:	4618      	mov	r0, r3
 8005656:	2300      	movs	r3, #0
 8005658:	2200      	movs	r2, #0
 800565a:	2100      	movs	r1, #0
 800565c:	f004 fcb4 	bl	8009fc8 <Set_LED>
 8005660:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <LEDHandler+0x3ff0>)
 8005662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005666:	b29b      	uxth	r3, r3
 8005668:	3301      	adds	r3, #1
 800566a:	b29b      	uxth	r3, r3
 800566c:	b21a      	sxth	r2, r3
 800566e:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <LEDHandler+0x3ff0>)
 8005670:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <LEDHandler+0x3ff0>)
 8005674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005678:	4618      	mov	r0, r3
 800567a:	2300      	movs	r3, #0
 800567c:	2200      	movs	r2, #0
 800567e:	2100      	movs	r1, #0
 8005680:	f004 fca2 	bl	8009fc8 <Set_LED>
 8005684:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <LEDHandler+0x3ff0>)
 8005686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800568a:	b29b      	uxth	r3, r3
 800568c:	3301      	adds	r3, #1
 800568e:	b29b      	uxth	r3, r3
 8005690:	b21a      	sxth	r2, r3
 8005692:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <LEDHandler+0x3ff0>)
 8005694:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <LEDHandler+0x3ff0>)
 8005698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800569c:	4618      	mov	r0, r3
 800569e:	2300      	movs	r3, #0
 80056a0:	2200      	movs	r2, #0
 80056a2:	2100      	movs	r1, #0
 80056a4:	f004 fc90 	bl	8009fc8 <Set_LED>
 80056a8:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <LEDHandler+0x3ff0>)
 80056aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3301      	adds	r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	b21a      	sxth	r2, r3
 80056b6:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <LEDHandler+0x3ff0>)
 80056b8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <LEDHandler+0x3ff0>)
 80056bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056c0:	4618      	mov	r0, r3
 80056c2:	2300      	movs	r3, #0
 80056c4:	2200      	movs	r2, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	f004 fc7e 	bl	8009fc8 <Set_LED>
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <LEDHandler+0x3ff0>)
 80056ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3301      	adds	r3, #1
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	b21a      	sxth	r2, r3
 80056da:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <LEDHandler+0x3ff0>)
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	f001 b901 	b.w	80068e4 <LEDHandler+0x51f0>
 80056e2:	bf00      	nop
 80056e4:	2000031c 	.word	0x2000031c
 80056e8:	20000008 	.word	0x20000008
 80056ec:	2000000c 	.word	0x2000000c
 80056f0:	20000010 	.word	0x20000010

		} else if (Valor >= 81 && Valor < 86) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b50      	cmp	r3, #80	; 0x50
 80056f8:	f340 81c4 	ble.w	8005a84 <LEDHandler+0x4390>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b55      	cmp	r3, #85	; 0x55
 8005700:	f300 81c0 	bgt.w	8005a84 <LEDHandler+0x4390>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8005704:	4b9c      	ldr	r3, [pc, #624]	; (8005978 <LEDHandler+0x4284>)
 8005706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800570a:	4618      	mov	r0, r3
 800570c:	4b9b      	ldr	r3, [pc, #620]	; (800597c <LEDHandler+0x4288>)
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	4b9b      	ldr	r3, [pc, #620]	; (8005980 <LEDHandler+0x428c>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b9b      	ldr	r3, [pc, #620]	; (8005984 <LEDHandler+0x4290>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f004 fc56 	bl	8009fc8 <Set_LED>
 800571c:	4b96      	ldr	r3, [pc, #600]	; (8005978 <LEDHandler+0x4284>)
 800571e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005722:	b29b      	uxth	r3, r3
 8005724:	3301      	adds	r3, #1
 8005726:	b29b      	uxth	r3, r3
 8005728:	b21a      	sxth	r2, r3
 800572a:	4b93      	ldr	r3, [pc, #588]	; (8005978 <LEDHandler+0x4284>)
 800572c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800572e:	4b92      	ldr	r3, [pc, #584]	; (8005978 <LEDHandler+0x4284>)
 8005730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005734:	4618      	mov	r0, r3
 8005736:	4b91      	ldr	r3, [pc, #580]	; (800597c <LEDHandler+0x4288>)
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	4b91      	ldr	r3, [pc, #580]	; (8005980 <LEDHandler+0x428c>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b91      	ldr	r3, [pc, #580]	; (8005984 <LEDHandler+0x4290>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f004 fc41 	bl	8009fc8 <Set_LED>
 8005746:	4b8c      	ldr	r3, [pc, #560]	; (8005978 <LEDHandler+0x4284>)
 8005748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800574c:	b29b      	uxth	r3, r3
 800574e:	3301      	adds	r3, #1
 8005750:	b29b      	uxth	r3, r3
 8005752:	b21a      	sxth	r2, r3
 8005754:	4b88      	ldr	r3, [pc, #544]	; (8005978 <LEDHandler+0x4284>)
 8005756:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005758:	4b87      	ldr	r3, [pc, #540]	; (8005978 <LEDHandler+0x4284>)
 800575a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800575e:	4618      	mov	r0, r3
 8005760:	4b86      	ldr	r3, [pc, #536]	; (800597c <LEDHandler+0x4288>)
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	4b86      	ldr	r3, [pc, #536]	; (8005980 <LEDHandler+0x428c>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4b86      	ldr	r3, [pc, #536]	; (8005984 <LEDHandler+0x4290>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f004 fc2c 	bl	8009fc8 <Set_LED>
 8005770:	4b81      	ldr	r3, [pc, #516]	; (8005978 <LEDHandler+0x4284>)
 8005772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005776:	b29b      	uxth	r3, r3
 8005778:	3301      	adds	r3, #1
 800577a:	b29b      	uxth	r3, r3
 800577c:	b21a      	sxth	r2, r3
 800577e:	4b7e      	ldr	r3, [pc, #504]	; (8005978 <LEDHandler+0x4284>)
 8005780:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005782:	4b7d      	ldr	r3, [pc, #500]	; (8005978 <LEDHandler+0x4284>)
 8005784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005788:	4618      	mov	r0, r3
 800578a:	4b7c      	ldr	r3, [pc, #496]	; (800597c <LEDHandler+0x4288>)
 800578c:	6819      	ldr	r1, [r3, #0]
 800578e:	4b7c      	ldr	r3, [pc, #496]	; (8005980 <LEDHandler+0x428c>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b7c      	ldr	r3, [pc, #496]	; (8005984 <LEDHandler+0x4290>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f004 fc17 	bl	8009fc8 <Set_LED>
 800579a:	4b77      	ldr	r3, [pc, #476]	; (8005978 <LEDHandler+0x4284>)
 800579c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3301      	adds	r3, #1
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	b21a      	sxth	r2, r3
 80057a8:	4b73      	ldr	r3, [pc, #460]	; (8005978 <LEDHandler+0x4284>)
 80057aa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80057ac:	4b72      	ldr	r3, [pc, #456]	; (8005978 <LEDHandler+0x4284>)
 80057ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057b2:	4618      	mov	r0, r3
 80057b4:	4b71      	ldr	r3, [pc, #452]	; (800597c <LEDHandler+0x4288>)
 80057b6:	6819      	ldr	r1, [r3, #0]
 80057b8:	4b71      	ldr	r3, [pc, #452]	; (8005980 <LEDHandler+0x428c>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b71      	ldr	r3, [pc, #452]	; (8005984 <LEDHandler+0x4290>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f004 fc02 	bl	8009fc8 <Set_LED>
 80057c4:	4b6c      	ldr	r3, [pc, #432]	; (8005978 <LEDHandler+0x4284>)
 80057c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3301      	adds	r3, #1
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	b21a      	sxth	r2, r3
 80057d2:	4b69      	ldr	r3, [pc, #420]	; (8005978 <LEDHandler+0x4284>)
 80057d4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80057d6:	4b68      	ldr	r3, [pc, #416]	; (8005978 <LEDHandler+0x4284>)
 80057d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057dc:	4618      	mov	r0, r3
 80057de:	4b67      	ldr	r3, [pc, #412]	; (800597c <LEDHandler+0x4288>)
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	4b67      	ldr	r3, [pc, #412]	; (8005980 <LEDHandler+0x428c>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4b67      	ldr	r3, [pc, #412]	; (8005984 <LEDHandler+0x4290>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f004 fbed 	bl	8009fc8 <Set_LED>
 80057ee:	4b62      	ldr	r3, [pc, #392]	; (8005978 <LEDHandler+0x4284>)
 80057f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3301      	adds	r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	b21a      	sxth	r2, r3
 80057fc:	4b5e      	ldr	r3, [pc, #376]	; (8005978 <LEDHandler+0x4284>)
 80057fe:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005800:	4b5d      	ldr	r3, [pc, #372]	; (8005978 <LEDHandler+0x4284>)
 8005802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005806:	4618      	mov	r0, r3
 8005808:	4b5c      	ldr	r3, [pc, #368]	; (800597c <LEDHandler+0x4288>)
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	4b5c      	ldr	r3, [pc, #368]	; (8005980 <LEDHandler+0x428c>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4b5c      	ldr	r3, [pc, #368]	; (8005984 <LEDHandler+0x4290>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f004 fbd8 	bl	8009fc8 <Set_LED>
 8005818:	4b57      	ldr	r3, [pc, #348]	; (8005978 <LEDHandler+0x4284>)
 800581a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800581e:	b29b      	uxth	r3, r3
 8005820:	3301      	adds	r3, #1
 8005822:	b29b      	uxth	r3, r3
 8005824:	b21a      	sxth	r2, r3
 8005826:	4b54      	ldr	r3, [pc, #336]	; (8005978 <LEDHandler+0x4284>)
 8005828:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800582a:	4b53      	ldr	r3, [pc, #332]	; (8005978 <LEDHandler+0x4284>)
 800582c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005830:	4618      	mov	r0, r3
 8005832:	4b52      	ldr	r3, [pc, #328]	; (800597c <LEDHandler+0x4288>)
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	4b52      	ldr	r3, [pc, #328]	; (8005980 <LEDHandler+0x428c>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b52      	ldr	r3, [pc, #328]	; (8005984 <LEDHandler+0x4290>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f004 fbc3 	bl	8009fc8 <Set_LED>
 8005842:	4b4d      	ldr	r3, [pc, #308]	; (8005978 <LEDHandler+0x4284>)
 8005844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005848:	b29b      	uxth	r3, r3
 800584a:	3301      	adds	r3, #1
 800584c:	b29b      	uxth	r3, r3
 800584e:	b21a      	sxth	r2, r3
 8005850:	4b49      	ldr	r3, [pc, #292]	; (8005978 <LEDHandler+0x4284>)
 8005852:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005854:	4b48      	ldr	r3, [pc, #288]	; (8005978 <LEDHandler+0x4284>)
 8005856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800585a:	4618      	mov	r0, r3
 800585c:	4b47      	ldr	r3, [pc, #284]	; (800597c <LEDHandler+0x4288>)
 800585e:	6819      	ldr	r1, [r3, #0]
 8005860:	4b47      	ldr	r3, [pc, #284]	; (8005980 <LEDHandler+0x428c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b47      	ldr	r3, [pc, #284]	; (8005984 <LEDHandler+0x4290>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f004 fbae 	bl	8009fc8 <Set_LED>
 800586c:	4b42      	ldr	r3, [pc, #264]	; (8005978 <LEDHandler+0x4284>)
 800586e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005872:	b29b      	uxth	r3, r3
 8005874:	3301      	adds	r3, #1
 8005876:	b29b      	uxth	r3, r3
 8005878:	b21a      	sxth	r2, r3
 800587a:	4b3f      	ldr	r3, [pc, #252]	; (8005978 <LEDHandler+0x4284>)
 800587c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800587e:	4b3e      	ldr	r3, [pc, #248]	; (8005978 <LEDHandler+0x4284>)
 8005880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005884:	4618      	mov	r0, r3
 8005886:	4b3d      	ldr	r3, [pc, #244]	; (800597c <LEDHandler+0x4288>)
 8005888:	6819      	ldr	r1, [r3, #0]
 800588a:	4b3d      	ldr	r3, [pc, #244]	; (8005980 <LEDHandler+0x428c>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b3d      	ldr	r3, [pc, #244]	; (8005984 <LEDHandler+0x4290>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f004 fb99 	bl	8009fc8 <Set_LED>
 8005896:	4b38      	ldr	r3, [pc, #224]	; (8005978 <LEDHandler+0x4284>)
 8005898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800589c:	b29b      	uxth	r3, r3
 800589e:	3301      	adds	r3, #1
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	b21a      	sxth	r2, r3
 80058a4:	4b34      	ldr	r3, [pc, #208]	; (8005978 <LEDHandler+0x4284>)
 80058a6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80058a8:	4b33      	ldr	r3, [pc, #204]	; (8005978 <LEDHandler+0x4284>)
 80058aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058ae:	4618      	mov	r0, r3
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <LEDHandler+0x4288>)
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	4b32      	ldr	r3, [pc, #200]	; (8005980 <LEDHandler+0x428c>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b32      	ldr	r3, [pc, #200]	; (8005984 <LEDHandler+0x4290>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f004 fb84 	bl	8009fc8 <Set_LED>
 80058c0:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <LEDHandler+0x4284>)
 80058c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3301      	adds	r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	b21a      	sxth	r2, r3
 80058ce:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <LEDHandler+0x4284>)
 80058d0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80058d2:	4b29      	ldr	r3, [pc, #164]	; (8005978 <LEDHandler+0x4284>)
 80058d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058d8:	4618      	mov	r0, r3
 80058da:	4b28      	ldr	r3, [pc, #160]	; (800597c <LEDHandler+0x4288>)
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	4b28      	ldr	r3, [pc, #160]	; (8005980 <LEDHandler+0x428c>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b28      	ldr	r3, [pc, #160]	; (8005984 <LEDHandler+0x4290>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f004 fb6f 	bl	8009fc8 <Set_LED>
 80058ea:	4b23      	ldr	r3, [pc, #140]	; (8005978 <LEDHandler+0x4284>)
 80058ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3301      	adds	r3, #1
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	b21a      	sxth	r2, r3
 80058f8:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <LEDHandler+0x4284>)
 80058fa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <LEDHandler+0x4284>)
 80058fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005902:	4618      	mov	r0, r3
 8005904:	4b1d      	ldr	r3, [pc, #116]	; (800597c <LEDHandler+0x4288>)
 8005906:	6819      	ldr	r1, [r3, #0]
 8005908:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <LEDHandler+0x428c>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <LEDHandler+0x4290>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f004 fb5a 	bl	8009fc8 <Set_LED>
 8005914:	4b18      	ldr	r3, [pc, #96]	; (8005978 <LEDHandler+0x4284>)
 8005916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800591a:	b29b      	uxth	r3, r3
 800591c:	3301      	adds	r3, #1
 800591e:	b29b      	uxth	r3, r3
 8005920:	b21a      	sxth	r2, r3
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <LEDHandler+0x4284>)
 8005924:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <LEDHandler+0x4284>)
 8005928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800592c:	4618      	mov	r0, r3
 800592e:	4b13      	ldr	r3, [pc, #76]	; (800597c <LEDHandler+0x4288>)
 8005930:	6819      	ldr	r1, [r3, #0]
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <LEDHandler+0x428c>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b13      	ldr	r3, [pc, #76]	; (8005984 <LEDHandler+0x4290>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f004 fb45 	bl	8009fc8 <Set_LED>
 800593e:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <LEDHandler+0x4284>)
 8005940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005944:	b29b      	uxth	r3, r3
 8005946:	3301      	adds	r3, #1
 8005948:	b29b      	uxth	r3, r3
 800594a:	b21a      	sxth	r2, r3
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <LEDHandler+0x4284>)
 800594e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <LEDHandler+0x4284>)
 8005952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005956:	4618      	mov	r0, r3
 8005958:	4b08      	ldr	r3, [pc, #32]	; (800597c <LEDHandler+0x4288>)
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	4b08      	ldr	r3, [pc, #32]	; (8005980 <LEDHandler+0x428c>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b08      	ldr	r3, [pc, #32]	; (8005984 <LEDHandler+0x4290>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f004 fb30 	bl	8009fc8 <Set_LED>
 8005968:	4b03      	ldr	r3, [pc, #12]	; (8005978 <LEDHandler+0x4284>)
 800596a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800596e:	b29b      	uxth	r3, r3
 8005970:	3301      	adds	r3, #1
 8005972:	b29b      	uxth	r3, r3
 8005974:	b21a      	sxth	r2, r3
 8005976:	e007      	b.n	8005988 <LEDHandler+0x4294>
 8005978:	2000031c 	.word	0x2000031c
 800597c:	20000008 	.word	0x20000008
 8005980:	2000000c 	.word	0x2000000c
 8005984:	20000010 	.word	0x20000010
 8005988:	4b3a      	ldr	r3, [pc, #232]	; (8005a74 <LEDHandler+0x4380>)
 800598a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800598c:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <LEDHandler+0x4380>)
 800598e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005992:	4618      	mov	r0, r3
 8005994:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <LEDHandler+0x4384>)
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <LEDHandler+0x4388>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b38      	ldr	r3, [pc, #224]	; (8005a80 <LEDHandler+0x438c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f004 fb12 	bl	8009fc8 <Set_LED>
 80059a4:	4b33      	ldr	r3, [pc, #204]	; (8005a74 <LEDHandler+0x4380>)
 80059a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3301      	adds	r3, #1
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	b21a      	sxth	r2, r3
 80059b2:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <LEDHandler+0x4380>)
 80059b4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80059b6:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <LEDHandler+0x4380>)
 80059b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059bc:	4618      	mov	r0, r3
 80059be:	4b2e      	ldr	r3, [pc, #184]	; (8005a78 <LEDHandler+0x4384>)
 80059c0:	6819      	ldr	r1, [r3, #0]
 80059c2:	4b2e      	ldr	r3, [pc, #184]	; (8005a7c <LEDHandler+0x4388>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4b2e      	ldr	r3, [pc, #184]	; (8005a80 <LEDHandler+0x438c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f004 fafd 	bl	8009fc8 <Set_LED>
 80059ce:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <LEDHandler+0x4380>)
 80059d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3301      	adds	r3, #1
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b21a      	sxth	r2, r3
 80059dc:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <LEDHandler+0x4380>)
 80059de:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED18
 80059e0:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <LEDHandler+0x4380>)
 80059e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059e6:	4618      	mov	r0, r3
 80059e8:	2300      	movs	r3, #0
 80059ea:	2200      	movs	r2, #0
 80059ec:	2100      	movs	r1, #0
 80059ee:	f004 faeb 	bl	8009fc8 <Set_LED>
 80059f2:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <LEDHandler+0x4380>)
 80059f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3301      	adds	r3, #1
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	b21a      	sxth	r2, r3
 8005a00:	4b1c      	ldr	r3, [pc, #112]	; (8005a74 <LEDHandler+0x4380>)
 8005a02:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <LEDHandler+0x4380>)
 8005a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2100      	movs	r1, #0
 8005a12:	f004 fad9 	bl	8009fc8 <Set_LED>
 8005a16:	4b17      	ldr	r3, [pc, #92]	; (8005a74 <LEDHandler+0x4380>)
 8005a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	b21a      	sxth	r2, r3
 8005a24:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <LEDHandler+0x4380>)
 8005a26:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8005a28:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <LEDHandler+0x4380>)
 8005a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	2300      	movs	r3, #0
 8005a32:	2200      	movs	r2, #0
 8005a34:	2100      	movs	r1, #0
 8005a36:	f004 fac7 	bl	8009fc8 <Set_LED>
 8005a3a:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <LEDHandler+0x4380>)
 8005a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3301      	adds	r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	b21a      	sxth	r2, r3
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <LEDHandler+0x4380>)
 8005a4a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <LEDHandler+0x4380>)
 8005a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a52:	4618      	mov	r0, r3
 8005a54:	2300      	movs	r3, #0
 8005a56:	2200      	movs	r2, #0
 8005a58:	2100      	movs	r1, #0
 8005a5a:	f004 fab5 	bl	8009fc8 <Set_LED>
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <LEDHandler+0x4380>)
 8005a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3301      	adds	r3, #1
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	b21a      	sxth	r2, r3
 8005a6c:	4b01      	ldr	r3, [pc, #4]	; (8005a74 <LEDHandler+0x4380>)
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	f000 bf38 	b.w	80068e4 <LEDHandler+0x51f0>
 8005a74:	2000031c 	.word	0x2000031c
 8005a78:	20000008 	.word	0x20000008
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	20000010 	.word	0x20000010


	} else if (Valor >= 86 && Valor < 91) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b55      	cmp	r3, #85	; 0x55
 8005a88:	f340 81c8 	ble.w	8005e1c <LEDHandler+0x4728>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b5a      	cmp	r3, #90	; 0x5a
 8005a90:	f300 81c4 	bgt.w	8005e1c <LEDHandler+0x4728>

		Set_LED(var2, Red, Green, Blue);			var2++;
 8005a94:	4b9c      	ldr	r3, [pc, #624]	; (8005d08 <LEDHandler+0x4614>)
 8005a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	4b9b      	ldr	r3, [pc, #620]	; (8005d0c <LEDHandler+0x4618>)
 8005a9e:	6819      	ldr	r1, [r3, #0]
 8005aa0:	4b9b      	ldr	r3, [pc, #620]	; (8005d10 <LEDHandler+0x461c>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	4b9b      	ldr	r3, [pc, #620]	; (8005d14 <LEDHandler+0x4620>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f004 fa8e 	bl	8009fc8 <Set_LED>
 8005aac:	4b96      	ldr	r3, [pc, #600]	; (8005d08 <LEDHandler+0x4614>)
 8005aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	b21a      	sxth	r2, r3
 8005aba:	4b93      	ldr	r3, [pc, #588]	; (8005d08 <LEDHandler+0x4614>)
 8005abc:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005abe:	4b92      	ldr	r3, [pc, #584]	; (8005d08 <LEDHandler+0x4614>)
 8005ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	4b91      	ldr	r3, [pc, #580]	; (8005d0c <LEDHandler+0x4618>)
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	4b91      	ldr	r3, [pc, #580]	; (8005d10 <LEDHandler+0x461c>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b91      	ldr	r3, [pc, #580]	; (8005d14 <LEDHandler+0x4620>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f004 fa79 	bl	8009fc8 <Set_LED>
 8005ad6:	4b8c      	ldr	r3, [pc, #560]	; (8005d08 <LEDHandler+0x4614>)
 8005ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3301      	adds	r3, #1
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b21a      	sxth	r2, r3
 8005ae4:	4b88      	ldr	r3, [pc, #544]	; (8005d08 <LEDHandler+0x4614>)
 8005ae6:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005ae8:	4b87      	ldr	r3, [pc, #540]	; (8005d08 <LEDHandler+0x4614>)
 8005aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aee:	4618      	mov	r0, r3
 8005af0:	4b86      	ldr	r3, [pc, #536]	; (8005d0c <LEDHandler+0x4618>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	4b86      	ldr	r3, [pc, #536]	; (8005d10 <LEDHandler+0x461c>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b86      	ldr	r3, [pc, #536]	; (8005d14 <LEDHandler+0x4620>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f004 fa64 	bl	8009fc8 <Set_LED>
 8005b00:	4b81      	ldr	r3, [pc, #516]	; (8005d08 <LEDHandler+0x4614>)
 8005b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3301      	adds	r3, #1
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	b21a      	sxth	r2, r3
 8005b0e:	4b7e      	ldr	r3, [pc, #504]	; (8005d08 <LEDHandler+0x4614>)
 8005b10:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005b12:	4b7d      	ldr	r3, [pc, #500]	; (8005d08 <LEDHandler+0x4614>)
 8005b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	4b7c      	ldr	r3, [pc, #496]	; (8005d0c <LEDHandler+0x4618>)
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	4b7c      	ldr	r3, [pc, #496]	; (8005d10 <LEDHandler+0x461c>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b7c      	ldr	r3, [pc, #496]	; (8005d14 <LEDHandler+0x4620>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f004 fa4f 	bl	8009fc8 <Set_LED>
 8005b2a:	4b77      	ldr	r3, [pc, #476]	; (8005d08 <LEDHandler+0x4614>)
 8005b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3301      	adds	r3, #1
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	b21a      	sxth	r2, r3
 8005b38:	4b73      	ldr	r3, [pc, #460]	; (8005d08 <LEDHandler+0x4614>)
 8005b3a:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005b3c:	4b72      	ldr	r3, [pc, #456]	; (8005d08 <LEDHandler+0x4614>)
 8005b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b42:	4618      	mov	r0, r3
 8005b44:	4b71      	ldr	r3, [pc, #452]	; (8005d0c <LEDHandler+0x4618>)
 8005b46:	6819      	ldr	r1, [r3, #0]
 8005b48:	4b71      	ldr	r3, [pc, #452]	; (8005d10 <LEDHandler+0x461c>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b71      	ldr	r3, [pc, #452]	; (8005d14 <LEDHandler+0x4620>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f004 fa3a 	bl	8009fc8 <Set_LED>
 8005b54:	4b6c      	ldr	r3, [pc, #432]	; (8005d08 <LEDHandler+0x4614>)
 8005b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	b21a      	sxth	r2, r3
 8005b62:	4b69      	ldr	r3, [pc, #420]	; (8005d08 <LEDHandler+0x4614>)
 8005b64:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005b66:	4b68      	ldr	r3, [pc, #416]	; (8005d08 <LEDHandler+0x4614>)
 8005b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	4b67      	ldr	r3, [pc, #412]	; (8005d0c <LEDHandler+0x4618>)
 8005b70:	6819      	ldr	r1, [r3, #0]
 8005b72:	4b67      	ldr	r3, [pc, #412]	; (8005d10 <LEDHandler+0x461c>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b67      	ldr	r3, [pc, #412]	; (8005d14 <LEDHandler+0x4620>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f004 fa25 	bl	8009fc8 <Set_LED>
 8005b7e:	4b62      	ldr	r3, [pc, #392]	; (8005d08 <LEDHandler+0x4614>)
 8005b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3301      	adds	r3, #1
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b21a      	sxth	r2, r3
 8005b8c:	4b5e      	ldr	r3, [pc, #376]	; (8005d08 <LEDHandler+0x4614>)
 8005b8e:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005b90:	4b5d      	ldr	r3, [pc, #372]	; (8005d08 <LEDHandler+0x4614>)
 8005b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b96:	4618      	mov	r0, r3
 8005b98:	4b5c      	ldr	r3, [pc, #368]	; (8005d0c <LEDHandler+0x4618>)
 8005b9a:	6819      	ldr	r1, [r3, #0]
 8005b9c:	4b5c      	ldr	r3, [pc, #368]	; (8005d10 <LEDHandler+0x461c>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b5c      	ldr	r3, [pc, #368]	; (8005d14 <LEDHandler+0x4620>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f004 fa10 	bl	8009fc8 <Set_LED>
 8005ba8:	4b57      	ldr	r3, [pc, #348]	; (8005d08 <LEDHandler+0x4614>)
 8005baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	b21a      	sxth	r2, r3
 8005bb6:	4b54      	ldr	r3, [pc, #336]	; (8005d08 <LEDHandler+0x4614>)
 8005bb8:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005bba:	4b53      	ldr	r3, [pc, #332]	; (8005d08 <LEDHandler+0x4614>)
 8005bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	4b52      	ldr	r3, [pc, #328]	; (8005d0c <LEDHandler+0x4618>)
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	4b52      	ldr	r3, [pc, #328]	; (8005d10 <LEDHandler+0x461c>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b52      	ldr	r3, [pc, #328]	; (8005d14 <LEDHandler+0x4620>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f004 f9fb 	bl	8009fc8 <Set_LED>
 8005bd2:	4b4d      	ldr	r3, [pc, #308]	; (8005d08 <LEDHandler+0x4614>)
 8005bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3301      	adds	r3, #1
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	b21a      	sxth	r2, r3
 8005be0:	4b49      	ldr	r3, [pc, #292]	; (8005d08 <LEDHandler+0x4614>)
 8005be2:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005be4:	4b48      	ldr	r3, [pc, #288]	; (8005d08 <LEDHandler+0x4614>)
 8005be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bea:	4618      	mov	r0, r3
 8005bec:	4b47      	ldr	r3, [pc, #284]	; (8005d0c <LEDHandler+0x4618>)
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	4b47      	ldr	r3, [pc, #284]	; (8005d10 <LEDHandler+0x461c>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4b47      	ldr	r3, [pc, #284]	; (8005d14 <LEDHandler+0x4620>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f004 f9e6 	bl	8009fc8 <Set_LED>
 8005bfc:	4b42      	ldr	r3, [pc, #264]	; (8005d08 <LEDHandler+0x4614>)
 8005bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3301      	adds	r3, #1
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	b21a      	sxth	r2, r3
 8005c0a:	4b3f      	ldr	r3, [pc, #252]	; (8005d08 <LEDHandler+0x4614>)
 8005c0c:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005c0e:	4b3e      	ldr	r3, [pc, #248]	; (8005d08 <LEDHandler+0x4614>)
 8005c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c14:	4618      	mov	r0, r3
 8005c16:	4b3d      	ldr	r3, [pc, #244]	; (8005d0c <LEDHandler+0x4618>)
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	; (8005d10 <LEDHandler+0x461c>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4b3d      	ldr	r3, [pc, #244]	; (8005d14 <LEDHandler+0x4620>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f004 f9d1 	bl	8009fc8 <Set_LED>
 8005c26:	4b38      	ldr	r3, [pc, #224]	; (8005d08 <LEDHandler+0x4614>)
 8005c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	b21a      	sxth	r2, r3
 8005c34:	4b34      	ldr	r3, [pc, #208]	; (8005d08 <LEDHandler+0x4614>)
 8005c36:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005c38:	4b33      	ldr	r3, [pc, #204]	; (8005d08 <LEDHandler+0x4614>)
 8005c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	4b32      	ldr	r3, [pc, #200]	; (8005d0c <LEDHandler+0x4618>)
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <LEDHandler+0x461c>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <LEDHandler+0x4620>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f004 f9bc 	bl	8009fc8 <Set_LED>
 8005c50:	4b2d      	ldr	r3, [pc, #180]	; (8005d08 <LEDHandler+0x4614>)
 8005c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3301      	adds	r3, #1
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	b21a      	sxth	r2, r3
 8005c5e:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <LEDHandler+0x4614>)
 8005c60:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005c62:	4b29      	ldr	r3, [pc, #164]	; (8005d08 <LEDHandler+0x4614>)
 8005c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <LEDHandler+0x4618>)
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <LEDHandler+0x461c>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <LEDHandler+0x4620>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f004 f9a7 	bl	8009fc8 <Set_LED>
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <LEDHandler+0x4614>)
 8005c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3301      	adds	r3, #1
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	b21a      	sxth	r2, r3
 8005c88:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <LEDHandler+0x4614>)
 8005c8a:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005c8c:	4b1e      	ldr	r3, [pc, #120]	; (8005d08 <LEDHandler+0x4614>)
 8005c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c92:	4618      	mov	r0, r3
 8005c94:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <LEDHandler+0x4618>)
 8005c96:	6819      	ldr	r1, [r3, #0]
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <LEDHandler+0x461c>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <LEDHandler+0x4620>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f004 f992 	bl	8009fc8 <Set_LED>
 8005ca4:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <LEDHandler+0x4614>)
 8005ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3301      	adds	r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	b21a      	sxth	r2, r3
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <LEDHandler+0x4614>)
 8005cb4:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <LEDHandler+0x4614>)
 8005cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <LEDHandler+0x4618>)
 8005cc0:	6819      	ldr	r1, [r3, #0]
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <LEDHandler+0x461c>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <LEDHandler+0x4620>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f004 f97d 	bl	8009fc8 <Set_LED>
 8005cce:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <LEDHandler+0x4614>)
 8005cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	b21a      	sxth	r2, r3
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <LEDHandler+0x4614>)
 8005cde:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005ce0:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <LEDHandler+0x4614>)
 8005ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <LEDHandler+0x4618>)
 8005cea:	6819      	ldr	r1, [r3, #0]
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <LEDHandler+0x461c>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <LEDHandler+0x4620>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f004 f968 	bl	8009fc8 <Set_LED>
 8005cf8:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <LEDHandler+0x4614>)
 8005cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3301      	adds	r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	b21a      	sxth	r2, r3
 8005d06:	e007      	b.n	8005d18 <LEDHandler+0x4624>
 8005d08:	2000031c 	.word	0x2000031c
 8005d0c:	20000008 	.word	0x20000008
 8005d10:	2000000c 	.word	0x2000000c
 8005d14:	20000010 	.word	0x20000010
 8005d18:	4b3c      	ldr	r3, [pc, #240]	; (8005e0c <LEDHandler+0x4718>)
 8005d1a:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005d1c:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <LEDHandler+0x4718>)
 8005d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d22:	4618      	mov	r0, r3
 8005d24:	4b3a      	ldr	r3, [pc, #232]	; (8005e10 <LEDHandler+0x471c>)
 8005d26:	6819      	ldr	r1, [r3, #0]
 8005d28:	4b3a      	ldr	r3, [pc, #232]	; (8005e14 <LEDHandler+0x4720>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4b3a      	ldr	r3, [pc, #232]	; (8005e18 <LEDHandler+0x4724>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f004 f94a 	bl	8009fc8 <Set_LED>
 8005d34:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <LEDHandler+0x4718>)
 8005d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	b21a      	sxth	r2, r3
 8005d42:	4b32      	ldr	r3, [pc, #200]	; (8005e0c <LEDHandler+0x4718>)
 8005d44:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;
 8005d46:	4b31      	ldr	r3, [pc, #196]	; (8005e0c <LEDHandler+0x4718>)
 8005d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	4b30      	ldr	r3, [pc, #192]	; (8005e10 <LEDHandler+0x471c>)
 8005d50:	6819      	ldr	r1, [r3, #0]
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <LEDHandler+0x4720>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <LEDHandler+0x4724>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f004 f935 	bl	8009fc8 <Set_LED>
 8005d5e:	4b2b      	ldr	r3, [pc, #172]	; (8005e0c <LEDHandler+0x4718>)
 8005d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3301      	adds	r3, #1
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	b21a      	sxth	r2, r3
 8005d6c:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <LEDHandler+0x4718>)
 8005d6e:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, Red, Green, Blue);			var2++;		//LED18
 8005d70:	4b26      	ldr	r3, [pc, #152]	; (8005e0c <LEDHandler+0x4718>)
 8005d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d76:	4618      	mov	r0, r3
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <LEDHandler+0x471c>)
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <LEDHandler+0x4720>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <LEDHandler+0x4724>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f004 f920 	bl	8009fc8 <Set_LED>
 8005d88:	4b20      	ldr	r3, [pc, #128]	; (8005e0c <LEDHandler+0x4718>)
 8005d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3301      	adds	r3, #1
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	b21a      	sxth	r2, r3
 8005d96:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <LEDHandler+0x4718>)
 8005d98:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, 0, 0, 0);			var2++;		//LED19
 8005d9a:	4b1c      	ldr	r3, [pc, #112]	; (8005e0c <LEDHandler+0x4718>)
 8005d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005da0:	4618      	mov	r0, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	2200      	movs	r2, #0
 8005da6:	2100      	movs	r1, #0
 8005da8:	f004 f90e 	bl	8009fc8 <Set_LED>
 8005dac:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <LEDHandler+0x4718>)
 8005dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3301      	adds	r3, #1
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	b21a      	sxth	r2, r3
 8005dba:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <LEDHandler+0x4718>)
 8005dbc:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 8005dbe:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <LEDHandler+0x4718>)
 8005dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f004 f8fc 	bl	8009fc8 <Set_LED>
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <LEDHandler+0x4718>)
 8005dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3301      	adds	r3, #1
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	b21a      	sxth	r2, r3
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <LEDHandler+0x4718>)
 8005de0:	801a      	strh	r2, [r3, #0]
		Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <LEDHandler+0x4718>)
 8005de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005de8:	4618      	mov	r0, r3
 8005dea:	2300      	movs	r3, #0
 8005dec:	2200      	movs	r2, #0
 8005dee:	2100      	movs	r1, #0
 8005df0:	f004 f8ea 	bl	8009fc8 <Set_LED>
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <LEDHandler+0x4718>)
 8005df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	b21a      	sxth	r2, r3
 8005e02:	4b02      	ldr	r3, [pc, #8]	; (8005e0c <LEDHandler+0x4718>)
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	f000 bd6d 	b.w	80068e4 <LEDHandler+0x51f0>
 8005e0a:	bf00      	nop
 8005e0c:	2000031c 	.word	0x2000031c
 8005e10:	20000008 	.word	0x20000008
 8005e14:	2000000c 	.word	0x2000000c
 8005e18:	20000010 	.word	0x20000010


} else if (Valor >= 91 && Valor < 96) {
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b5a      	cmp	r3, #90	; 0x5a
 8005e20:	f340 81ca 	ble.w	80061b8 <LEDHandler+0x4ac4>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b5f      	cmp	r3, #95	; 0x5f
 8005e28:	f300 81c6 	bgt.w	80061b8 <LEDHandler+0x4ac4>

	Set_LED(var2, Red, Green, Blue);			var2++;
 8005e2c:	4b9c      	ldr	r3, [pc, #624]	; (80060a0 <LEDHandler+0x49ac>)
 8005e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e32:	4618      	mov	r0, r3
 8005e34:	4b9b      	ldr	r3, [pc, #620]	; (80060a4 <LEDHandler+0x49b0>)
 8005e36:	6819      	ldr	r1, [r3, #0]
 8005e38:	4b9b      	ldr	r3, [pc, #620]	; (80060a8 <LEDHandler+0x49b4>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4b9b      	ldr	r3, [pc, #620]	; (80060ac <LEDHandler+0x49b8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f004 f8c2 	bl	8009fc8 <Set_LED>
 8005e44:	4b96      	ldr	r3, [pc, #600]	; (80060a0 <LEDHandler+0x49ac>)
 8005e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	b21a      	sxth	r2, r3
 8005e52:	4b93      	ldr	r3, [pc, #588]	; (80060a0 <LEDHandler+0x49ac>)
 8005e54:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005e56:	4b92      	ldr	r3, [pc, #584]	; (80060a0 <LEDHandler+0x49ac>)
 8005e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	4b91      	ldr	r3, [pc, #580]	; (80060a4 <LEDHandler+0x49b0>)
 8005e60:	6819      	ldr	r1, [r3, #0]
 8005e62:	4b91      	ldr	r3, [pc, #580]	; (80060a8 <LEDHandler+0x49b4>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b91      	ldr	r3, [pc, #580]	; (80060ac <LEDHandler+0x49b8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f004 f8ad 	bl	8009fc8 <Set_LED>
 8005e6e:	4b8c      	ldr	r3, [pc, #560]	; (80060a0 <LEDHandler+0x49ac>)
 8005e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3301      	adds	r3, #1
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	b21a      	sxth	r2, r3
 8005e7c:	4b88      	ldr	r3, [pc, #544]	; (80060a0 <LEDHandler+0x49ac>)
 8005e7e:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005e80:	4b87      	ldr	r3, [pc, #540]	; (80060a0 <LEDHandler+0x49ac>)
 8005e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e86:	4618      	mov	r0, r3
 8005e88:	4b86      	ldr	r3, [pc, #536]	; (80060a4 <LEDHandler+0x49b0>)
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	4b86      	ldr	r3, [pc, #536]	; (80060a8 <LEDHandler+0x49b4>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b86      	ldr	r3, [pc, #536]	; (80060ac <LEDHandler+0x49b8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f004 f898 	bl	8009fc8 <Set_LED>
 8005e98:	4b81      	ldr	r3, [pc, #516]	; (80060a0 <LEDHandler+0x49ac>)
 8005e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	b21a      	sxth	r2, r3
 8005ea6:	4b7e      	ldr	r3, [pc, #504]	; (80060a0 <LEDHandler+0x49ac>)
 8005ea8:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005eaa:	4b7d      	ldr	r3, [pc, #500]	; (80060a0 <LEDHandler+0x49ac>)
 8005eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	4b7c      	ldr	r3, [pc, #496]	; (80060a4 <LEDHandler+0x49b0>)
 8005eb4:	6819      	ldr	r1, [r3, #0]
 8005eb6:	4b7c      	ldr	r3, [pc, #496]	; (80060a8 <LEDHandler+0x49b4>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4b7c      	ldr	r3, [pc, #496]	; (80060ac <LEDHandler+0x49b8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f004 f883 	bl	8009fc8 <Set_LED>
 8005ec2:	4b77      	ldr	r3, [pc, #476]	; (80060a0 <LEDHandler+0x49ac>)
 8005ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3301      	adds	r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	b21a      	sxth	r2, r3
 8005ed0:	4b73      	ldr	r3, [pc, #460]	; (80060a0 <LEDHandler+0x49ac>)
 8005ed2:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005ed4:	4b72      	ldr	r3, [pc, #456]	; (80060a0 <LEDHandler+0x49ac>)
 8005ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eda:	4618      	mov	r0, r3
 8005edc:	4b71      	ldr	r3, [pc, #452]	; (80060a4 <LEDHandler+0x49b0>)
 8005ede:	6819      	ldr	r1, [r3, #0]
 8005ee0:	4b71      	ldr	r3, [pc, #452]	; (80060a8 <LEDHandler+0x49b4>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b71      	ldr	r3, [pc, #452]	; (80060ac <LEDHandler+0x49b8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f004 f86e 	bl	8009fc8 <Set_LED>
 8005eec:	4b6c      	ldr	r3, [pc, #432]	; (80060a0 <LEDHandler+0x49ac>)
 8005eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	b21a      	sxth	r2, r3
 8005efa:	4b69      	ldr	r3, [pc, #420]	; (80060a0 <LEDHandler+0x49ac>)
 8005efc:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005efe:	4b68      	ldr	r3, [pc, #416]	; (80060a0 <LEDHandler+0x49ac>)
 8005f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f04:	4618      	mov	r0, r3
 8005f06:	4b67      	ldr	r3, [pc, #412]	; (80060a4 <LEDHandler+0x49b0>)
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	4b67      	ldr	r3, [pc, #412]	; (80060a8 <LEDHandler+0x49b4>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b67      	ldr	r3, [pc, #412]	; (80060ac <LEDHandler+0x49b8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f004 f859 	bl	8009fc8 <Set_LED>
 8005f16:	4b62      	ldr	r3, [pc, #392]	; (80060a0 <LEDHandler+0x49ac>)
 8005f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3301      	adds	r3, #1
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	b21a      	sxth	r2, r3
 8005f24:	4b5e      	ldr	r3, [pc, #376]	; (80060a0 <LEDHandler+0x49ac>)
 8005f26:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005f28:	4b5d      	ldr	r3, [pc, #372]	; (80060a0 <LEDHandler+0x49ac>)
 8005f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	4b5c      	ldr	r3, [pc, #368]	; (80060a4 <LEDHandler+0x49b0>)
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	4b5c      	ldr	r3, [pc, #368]	; (80060a8 <LEDHandler+0x49b4>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b5c      	ldr	r3, [pc, #368]	; (80060ac <LEDHandler+0x49b8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f004 f844 	bl	8009fc8 <Set_LED>
 8005f40:	4b57      	ldr	r3, [pc, #348]	; (80060a0 <LEDHandler+0x49ac>)
 8005f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3301      	adds	r3, #1
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	b21a      	sxth	r2, r3
 8005f4e:	4b54      	ldr	r3, [pc, #336]	; (80060a0 <LEDHandler+0x49ac>)
 8005f50:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005f52:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <LEDHandler+0x49ac>)
 8005f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	4b52      	ldr	r3, [pc, #328]	; (80060a4 <LEDHandler+0x49b0>)
 8005f5c:	6819      	ldr	r1, [r3, #0]
 8005f5e:	4b52      	ldr	r3, [pc, #328]	; (80060a8 <LEDHandler+0x49b4>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b52      	ldr	r3, [pc, #328]	; (80060ac <LEDHandler+0x49b8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f004 f82f 	bl	8009fc8 <Set_LED>
 8005f6a:	4b4d      	ldr	r3, [pc, #308]	; (80060a0 <LEDHandler+0x49ac>)
 8005f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3301      	adds	r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	b21a      	sxth	r2, r3
 8005f78:	4b49      	ldr	r3, [pc, #292]	; (80060a0 <LEDHandler+0x49ac>)
 8005f7a:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005f7c:	4b48      	ldr	r3, [pc, #288]	; (80060a0 <LEDHandler+0x49ac>)
 8005f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f82:	4618      	mov	r0, r3
 8005f84:	4b47      	ldr	r3, [pc, #284]	; (80060a4 <LEDHandler+0x49b0>)
 8005f86:	6819      	ldr	r1, [r3, #0]
 8005f88:	4b47      	ldr	r3, [pc, #284]	; (80060a8 <LEDHandler+0x49b4>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4b47      	ldr	r3, [pc, #284]	; (80060ac <LEDHandler+0x49b8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f004 f81a 	bl	8009fc8 <Set_LED>
 8005f94:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <LEDHandler+0x49ac>)
 8005f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b21a      	sxth	r2, r3
 8005fa2:	4b3f      	ldr	r3, [pc, #252]	; (80060a0 <LEDHandler+0x49ac>)
 8005fa4:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005fa6:	4b3e      	ldr	r3, [pc, #248]	; (80060a0 <LEDHandler+0x49ac>)
 8005fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fac:	4618      	mov	r0, r3
 8005fae:	4b3d      	ldr	r3, [pc, #244]	; (80060a4 <LEDHandler+0x49b0>)
 8005fb0:	6819      	ldr	r1, [r3, #0]
 8005fb2:	4b3d      	ldr	r3, [pc, #244]	; (80060a8 <LEDHandler+0x49b4>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b3d      	ldr	r3, [pc, #244]	; (80060ac <LEDHandler+0x49b8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f004 f805 	bl	8009fc8 <Set_LED>
 8005fbe:	4b38      	ldr	r3, [pc, #224]	; (80060a0 <LEDHandler+0x49ac>)
 8005fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	b21a      	sxth	r2, r3
 8005fcc:	4b34      	ldr	r3, [pc, #208]	; (80060a0 <LEDHandler+0x49ac>)
 8005fce:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005fd0:	4b33      	ldr	r3, [pc, #204]	; (80060a0 <LEDHandler+0x49ac>)
 8005fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	4b32      	ldr	r3, [pc, #200]	; (80060a4 <LEDHandler+0x49b0>)
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	4b32      	ldr	r3, [pc, #200]	; (80060a8 <LEDHandler+0x49b4>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b32      	ldr	r3, [pc, #200]	; (80060ac <LEDHandler+0x49b8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 fff0 	bl	8009fc8 <Set_LED>
 8005fe8:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <LEDHandler+0x49ac>)
 8005fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	b21a      	sxth	r2, r3
 8005ff6:	4b2a      	ldr	r3, [pc, #168]	; (80060a0 <LEDHandler+0x49ac>)
 8005ff8:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8005ffa:	4b29      	ldr	r3, [pc, #164]	; (80060a0 <LEDHandler+0x49ac>)
 8005ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006000:	4618      	mov	r0, r3
 8006002:	4b28      	ldr	r3, [pc, #160]	; (80060a4 <LEDHandler+0x49b0>)
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	4b28      	ldr	r3, [pc, #160]	; (80060a8 <LEDHandler+0x49b4>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4b28      	ldr	r3, [pc, #160]	; (80060ac <LEDHandler+0x49b8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 ffdb 	bl	8009fc8 <Set_LED>
 8006012:	4b23      	ldr	r3, [pc, #140]	; (80060a0 <LEDHandler+0x49ac>)
 8006014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006018:	b29b      	uxth	r3, r3
 800601a:	3301      	adds	r3, #1
 800601c:	b29b      	uxth	r3, r3
 800601e:	b21a      	sxth	r2, r3
 8006020:	4b1f      	ldr	r3, [pc, #124]	; (80060a0 <LEDHandler+0x49ac>)
 8006022:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006024:	4b1e      	ldr	r3, [pc, #120]	; (80060a0 <LEDHandler+0x49ac>)
 8006026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800602a:	4618      	mov	r0, r3
 800602c:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <LEDHandler+0x49b0>)
 800602e:	6819      	ldr	r1, [r3, #0]
 8006030:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <LEDHandler+0x49b4>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <LEDHandler+0x49b8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 ffc6 	bl	8009fc8 <Set_LED>
 800603c:	4b18      	ldr	r3, [pc, #96]	; (80060a0 <LEDHandler+0x49ac>)
 800603e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006042:	b29b      	uxth	r3, r3
 8006044:	3301      	adds	r3, #1
 8006046:	b29b      	uxth	r3, r3
 8006048:	b21a      	sxth	r2, r3
 800604a:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <LEDHandler+0x49ac>)
 800604c:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <LEDHandler+0x49ac>)
 8006050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006054:	4618      	mov	r0, r3
 8006056:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <LEDHandler+0x49b0>)
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <LEDHandler+0x49b4>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b13      	ldr	r3, [pc, #76]	; (80060ac <LEDHandler+0x49b8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 ffb1 	bl	8009fc8 <Set_LED>
 8006066:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <LEDHandler+0x49ac>)
 8006068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800606c:	b29b      	uxth	r3, r3
 800606e:	3301      	adds	r3, #1
 8006070:	b29b      	uxth	r3, r3
 8006072:	b21a      	sxth	r2, r3
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <LEDHandler+0x49ac>)
 8006076:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006078:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <LEDHandler+0x49ac>)
 800607a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800607e:	4618      	mov	r0, r3
 8006080:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <LEDHandler+0x49b0>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <LEDHandler+0x49b4>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b08      	ldr	r3, [pc, #32]	; (80060ac <LEDHandler+0x49b8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 ff9c 	bl	8009fc8 <Set_LED>
 8006090:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <LEDHandler+0x49ac>)
 8006092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006096:	b29b      	uxth	r3, r3
 8006098:	3301      	adds	r3, #1
 800609a:	b29b      	uxth	r3, r3
 800609c:	b21a      	sxth	r2, r3
 800609e:	e007      	b.n	80060b0 <LEDHandler+0x49bc>
 80060a0:	2000031c 	.word	0x2000031c
 80060a4:	20000008 	.word	0x20000008
 80060a8:	2000000c 	.word	0x2000000c
 80060ac:	20000010 	.word	0x20000010
 80060b0:	4b3d      	ldr	r3, [pc, #244]	; (80061a8 <LEDHandler+0x4ab4>)
 80060b2:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80060b4:	4b3c      	ldr	r3, [pc, #240]	; (80061a8 <LEDHandler+0x4ab4>)
 80060b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ba:	4618      	mov	r0, r3
 80060bc:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <LEDHandler+0x4ab8>)
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	4b3b      	ldr	r3, [pc, #236]	; (80061b0 <LEDHandler+0x4abc>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <LEDHandler+0x4ac0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 ff7e 	bl	8009fc8 <Set_LED>
 80060cc:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <LEDHandler+0x4ab4>)
 80060ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3301      	adds	r3, #1
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	b21a      	sxth	r2, r3
 80060da:	4b33      	ldr	r3, [pc, #204]	; (80061a8 <LEDHandler+0x4ab4>)
 80060dc:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80060de:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <LEDHandler+0x4ab4>)
 80060e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060e4:	4618      	mov	r0, r3
 80060e6:	4b31      	ldr	r3, [pc, #196]	; (80061ac <LEDHandler+0x4ab8>)
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <LEDHandler+0x4abc>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <LEDHandler+0x4ac0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 ff69 	bl	8009fc8 <Set_LED>
 80060f6:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <LEDHandler+0x4ab4>)
 80060f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3301      	adds	r3, #1
 8006100:	b29b      	uxth	r3, r3
 8006102:	b21a      	sxth	r2, r3
 8006104:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <LEDHandler+0x4ab4>)
 8006106:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED18
 8006108:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <LEDHandler+0x4ab4>)
 800610a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800610e:	4618      	mov	r0, r3
 8006110:	4b26      	ldr	r3, [pc, #152]	; (80061ac <LEDHandler+0x4ab8>)
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <LEDHandler+0x4abc>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <LEDHandler+0x4ac0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 ff54 	bl	8009fc8 <Set_LED>
 8006120:	4b21      	ldr	r3, [pc, #132]	; (80061a8 <LEDHandler+0x4ab4>)
 8006122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006126:	b29b      	uxth	r3, r3
 8006128:	3301      	adds	r3, #1
 800612a:	b29b      	uxth	r3, r3
 800612c:	b21a      	sxth	r2, r3
 800612e:	4b1e      	ldr	r3, [pc, #120]	; (80061a8 <LEDHandler+0x4ab4>)
 8006130:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED19
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <LEDHandler+0x4ab4>)
 8006134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006138:	4618      	mov	r0, r3
 800613a:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <LEDHandler+0x4ab8>)
 800613c:	6819      	ldr	r1, [r3, #0]
 800613e:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <LEDHandler+0x4abc>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <LEDHandler+0x4ac0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 ff3f 	bl	8009fc8 <Set_LED>
 800614a:	4b17      	ldr	r3, [pc, #92]	; (80061a8 <LEDHandler+0x4ab4>)
 800614c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006150:	b29b      	uxth	r3, r3
 8006152:	3301      	adds	r3, #1
 8006154:	b29b      	uxth	r3, r3
 8006156:	b21a      	sxth	r2, r3
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <LEDHandler+0x4ab4>)
 800615a:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, 0, 0, 0);			var2++;		//LED20
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <LEDHandler+0x4ab4>)
 800615e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006162:	4618      	mov	r0, r3
 8006164:	2300      	movs	r3, #0
 8006166:	2200      	movs	r2, #0
 8006168:	2100      	movs	r1, #0
 800616a:	f003 ff2d 	bl	8009fc8 <Set_LED>
 800616e:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <LEDHandler+0x4ab4>)
 8006170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006174:	b29b      	uxth	r3, r3
 8006176:	3301      	adds	r3, #1
 8006178:	b29b      	uxth	r3, r3
 800617a:	b21a      	sxth	r2, r3
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <LEDHandler+0x4ab4>)
 800617e:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <LEDHandler+0x4ab4>)
 8006182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006186:	4618      	mov	r0, r3
 8006188:	2300      	movs	r3, #0
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	f003 ff1b 	bl	8009fc8 <Set_LED>
 8006192:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <LEDHandler+0x4ab4>)
 8006194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006198:	b29b      	uxth	r3, r3
 800619a:	3301      	adds	r3, #1
 800619c:	b29b      	uxth	r3, r3
 800619e:	b21a      	sxth	r2, r3
 80061a0:	4b01      	ldr	r3, [pc, #4]	; (80061a8 <LEDHandler+0x4ab4>)
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	e39e      	b.n	80068e4 <LEDHandler+0x51f0>
 80061a6:	bf00      	nop
 80061a8:	2000031c 	.word	0x2000031c
 80061ac:	20000008 	.word	0x20000008
 80061b0:	2000000c 	.word	0x2000000c
 80061b4:	20000010 	.word	0x20000010


} else if (Valor >= 96 && Valor < 100) {
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b5f      	cmp	r3, #95	; 0x5f
 80061bc:	f340 81cc 	ble.w	8006558 <LEDHandler+0x4e64>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b63      	cmp	r3, #99	; 0x63
 80061c4:	f300 81c8 	bgt.w	8006558 <LEDHandler+0x4e64>

	Set_LED(var2, Red, Green, Blue);			var2++;
 80061c8:	4b9c      	ldr	r3, [pc, #624]	; (800643c <LEDHandler+0x4d48>)
 80061ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ce:	4618      	mov	r0, r3
 80061d0:	4b9b      	ldr	r3, [pc, #620]	; (8006440 <LEDHandler+0x4d4c>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	4b9b      	ldr	r3, [pc, #620]	; (8006444 <LEDHandler+0x4d50>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b9b      	ldr	r3, [pc, #620]	; (8006448 <LEDHandler+0x4d54>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 fef4 	bl	8009fc8 <Set_LED>
 80061e0:	4b96      	ldr	r3, [pc, #600]	; (800643c <LEDHandler+0x4d48>)
 80061e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3301      	adds	r3, #1
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	b21a      	sxth	r2, r3
 80061ee:	4b93      	ldr	r3, [pc, #588]	; (800643c <LEDHandler+0x4d48>)
 80061f0:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80061f2:	4b92      	ldr	r3, [pc, #584]	; (800643c <LEDHandler+0x4d48>)
 80061f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061f8:	4618      	mov	r0, r3
 80061fa:	4b91      	ldr	r3, [pc, #580]	; (8006440 <LEDHandler+0x4d4c>)
 80061fc:	6819      	ldr	r1, [r3, #0]
 80061fe:	4b91      	ldr	r3, [pc, #580]	; (8006444 <LEDHandler+0x4d50>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b91      	ldr	r3, [pc, #580]	; (8006448 <LEDHandler+0x4d54>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 fedf 	bl	8009fc8 <Set_LED>
 800620a:	4b8c      	ldr	r3, [pc, #560]	; (800643c <LEDHandler+0x4d48>)
 800620c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006210:	b29b      	uxth	r3, r3
 8006212:	3301      	adds	r3, #1
 8006214:	b29b      	uxth	r3, r3
 8006216:	b21a      	sxth	r2, r3
 8006218:	4b88      	ldr	r3, [pc, #544]	; (800643c <LEDHandler+0x4d48>)
 800621a:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 800621c:	4b87      	ldr	r3, [pc, #540]	; (800643c <LEDHandler+0x4d48>)
 800621e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006222:	4618      	mov	r0, r3
 8006224:	4b86      	ldr	r3, [pc, #536]	; (8006440 <LEDHandler+0x4d4c>)
 8006226:	6819      	ldr	r1, [r3, #0]
 8006228:	4b86      	ldr	r3, [pc, #536]	; (8006444 <LEDHandler+0x4d50>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4b86      	ldr	r3, [pc, #536]	; (8006448 <LEDHandler+0x4d54>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 feca 	bl	8009fc8 <Set_LED>
 8006234:	4b81      	ldr	r3, [pc, #516]	; (800643c <LEDHandler+0x4d48>)
 8006236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800623a:	b29b      	uxth	r3, r3
 800623c:	3301      	adds	r3, #1
 800623e:	b29b      	uxth	r3, r3
 8006240:	b21a      	sxth	r2, r3
 8006242:	4b7e      	ldr	r3, [pc, #504]	; (800643c <LEDHandler+0x4d48>)
 8006244:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006246:	4b7d      	ldr	r3, [pc, #500]	; (800643c <LEDHandler+0x4d48>)
 8006248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800624c:	4618      	mov	r0, r3
 800624e:	4b7c      	ldr	r3, [pc, #496]	; (8006440 <LEDHandler+0x4d4c>)
 8006250:	6819      	ldr	r1, [r3, #0]
 8006252:	4b7c      	ldr	r3, [pc, #496]	; (8006444 <LEDHandler+0x4d50>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4b7c      	ldr	r3, [pc, #496]	; (8006448 <LEDHandler+0x4d54>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 feb5 	bl	8009fc8 <Set_LED>
 800625e:	4b77      	ldr	r3, [pc, #476]	; (800643c <LEDHandler+0x4d48>)
 8006260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006264:	b29b      	uxth	r3, r3
 8006266:	3301      	adds	r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	b21a      	sxth	r2, r3
 800626c:	4b73      	ldr	r3, [pc, #460]	; (800643c <LEDHandler+0x4d48>)
 800626e:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006270:	4b72      	ldr	r3, [pc, #456]	; (800643c <LEDHandler+0x4d48>)
 8006272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006276:	4618      	mov	r0, r3
 8006278:	4b71      	ldr	r3, [pc, #452]	; (8006440 <LEDHandler+0x4d4c>)
 800627a:	6819      	ldr	r1, [r3, #0]
 800627c:	4b71      	ldr	r3, [pc, #452]	; (8006444 <LEDHandler+0x4d50>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	4b71      	ldr	r3, [pc, #452]	; (8006448 <LEDHandler+0x4d54>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 fea0 	bl	8009fc8 <Set_LED>
 8006288:	4b6c      	ldr	r3, [pc, #432]	; (800643c <LEDHandler+0x4d48>)
 800628a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800628e:	b29b      	uxth	r3, r3
 8006290:	3301      	adds	r3, #1
 8006292:	b29b      	uxth	r3, r3
 8006294:	b21a      	sxth	r2, r3
 8006296:	4b69      	ldr	r3, [pc, #420]	; (800643c <LEDHandler+0x4d48>)
 8006298:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 800629a:	4b68      	ldr	r3, [pc, #416]	; (800643c <LEDHandler+0x4d48>)
 800629c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062a0:	4618      	mov	r0, r3
 80062a2:	4b67      	ldr	r3, [pc, #412]	; (8006440 <LEDHandler+0x4d4c>)
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	4b67      	ldr	r3, [pc, #412]	; (8006444 <LEDHandler+0x4d50>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b67      	ldr	r3, [pc, #412]	; (8006448 <LEDHandler+0x4d54>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 fe8b 	bl	8009fc8 <Set_LED>
 80062b2:	4b62      	ldr	r3, [pc, #392]	; (800643c <LEDHandler+0x4d48>)
 80062b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	b29b      	uxth	r3, r3
 80062be:	b21a      	sxth	r2, r3
 80062c0:	4b5e      	ldr	r3, [pc, #376]	; (800643c <LEDHandler+0x4d48>)
 80062c2:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80062c4:	4b5d      	ldr	r3, [pc, #372]	; (800643c <LEDHandler+0x4d48>)
 80062c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062ca:	4618      	mov	r0, r3
 80062cc:	4b5c      	ldr	r3, [pc, #368]	; (8006440 <LEDHandler+0x4d4c>)
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	4b5c      	ldr	r3, [pc, #368]	; (8006444 <LEDHandler+0x4d50>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4b5c      	ldr	r3, [pc, #368]	; (8006448 <LEDHandler+0x4d54>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 fe76 	bl	8009fc8 <Set_LED>
 80062dc:	4b57      	ldr	r3, [pc, #348]	; (800643c <LEDHandler+0x4d48>)
 80062de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3301      	adds	r3, #1
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	b21a      	sxth	r2, r3
 80062ea:	4b54      	ldr	r3, [pc, #336]	; (800643c <LEDHandler+0x4d48>)
 80062ec:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80062ee:	4b53      	ldr	r3, [pc, #332]	; (800643c <LEDHandler+0x4d48>)
 80062f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062f4:	4618      	mov	r0, r3
 80062f6:	4b52      	ldr	r3, [pc, #328]	; (8006440 <LEDHandler+0x4d4c>)
 80062f8:	6819      	ldr	r1, [r3, #0]
 80062fa:	4b52      	ldr	r3, [pc, #328]	; (8006444 <LEDHandler+0x4d50>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b52      	ldr	r3, [pc, #328]	; (8006448 <LEDHandler+0x4d54>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 fe61 	bl	8009fc8 <Set_LED>
 8006306:	4b4d      	ldr	r3, [pc, #308]	; (800643c <LEDHandler+0x4d48>)
 8006308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800630c:	b29b      	uxth	r3, r3
 800630e:	3301      	adds	r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	b21a      	sxth	r2, r3
 8006314:	4b49      	ldr	r3, [pc, #292]	; (800643c <LEDHandler+0x4d48>)
 8006316:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006318:	4b48      	ldr	r3, [pc, #288]	; (800643c <LEDHandler+0x4d48>)
 800631a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800631e:	4618      	mov	r0, r3
 8006320:	4b47      	ldr	r3, [pc, #284]	; (8006440 <LEDHandler+0x4d4c>)
 8006322:	6819      	ldr	r1, [r3, #0]
 8006324:	4b47      	ldr	r3, [pc, #284]	; (8006444 <LEDHandler+0x4d50>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b47      	ldr	r3, [pc, #284]	; (8006448 <LEDHandler+0x4d54>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 fe4c 	bl	8009fc8 <Set_LED>
 8006330:	4b42      	ldr	r3, [pc, #264]	; (800643c <LEDHandler+0x4d48>)
 8006332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006336:	b29b      	uxth	r3, r3
 8006338:	3301      	adds	r3, #1
 800633a:	b29b      	uxth	r3, r3
 800633c:	b21a      	sxth	r2, r3
 800633e:	4b3f      	ldr	r3, [pc, #252]	; (800643c <LEDHandler+0x4d48>)
 8006340:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006342:	4b3e      	ldr	r3, [pc, #248]	; (800643c <LEDHandler+0x4d48>)
 8006344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006348:	4618      	mov	r0, r3
 800634a:	4b3d      	ldr	r3, [pc, #244]	; (8006440 <LEDHandler+0x4d4c>)
 800634c:	6819      	ldr	r1, [r3, #0]
 800634e:	4b3d      	ldr	r3, [pc, #244]	; (8006444 <LEDHandler+0x4d50>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b3d      	ldr	r3, [pc, #244]	; (8006448 <LEDHandler+0x4d54>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 fe37 	bl	8009fc8 <Set_LED>
 800635a:	4b38      	ldr	r3, [pc, #224]	; (800643c <LEDHandler+0x4d48>)
 800635c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006360:	b29b      	uxth	r3, r3
 8006362:	3301      	adds	r3, #1
 8006364:	b29b      	uxth	r3, r3
 8006366:	b21a      	sxth	r2, r3
 8006368:	4b34      	ldr	r3, [pc, #208]	; (800643c <LEDHandler+0x4d48>)
 800636a:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 800636c:	4b33      	ldr	r3, [pc, #204]	; (800643c <LEDHandler+0x4d48>)
 800636e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006372:	4618      	mov	r0, r3
 8006374:	4b32      	ldr	r3, [pc, #200]	; (8006440 <LEDHandler+0x4d4c>)
 8006376:	6819      	ldr	r1, [r3, #0]
 8006378:	4b32      	ldr	r3, [pc, #200]	; (8006444 <LEDHandler+0x4d50>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b32      	ldr	r3, [pc, #200]	; (8006448 <LEDHandler+0x4d54>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 fe22 	bl	8009fc8 <Set_LED>
 8006384:	4b2d      	ldr	r3, [pc, #180]	; (800643c <LEDHandler+0x4d48>)
 8006386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800638a:	b29b      	uxth	r3, r3
 800638c:	3301      	adds	r3, #1
 800638e:	b29b      	uxth	r3, r3
 8006390:	b21a      	sxth	r2, r3
 8006392:	4b2a      	ldr	r3, [pc, #168]	; (800643c <LEDHandler+0x4d48>)
 8006394:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006396:	4b29      	ldr	r3, [pc, #164]	; (800643c <LEDHandler+0x4d48>)
 8006398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800639c:	4618      	mov	r0, r3
 800639e:	4b28      	ldr	r3, [pc, #160]	; (8006440 <LEDHandler+0x4d4c>)
 80063a0:	6819      	ldr	r1, [r3, #0]
 80063a2:	4b28      	ldr	r3, [pc, #160]	; (8006444 <LEDHandler+0x4d50>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b28      	ldr	r3, [pc, #160]	; (8006448 <LEDHandler+0x4d54>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 fe0d 	bl	8009fc8 <Set_LED>
 80063ae:	4b23      	ldr	r3, [pc, #140]	; (800643c <LEDHandler+0x4d48>)
 80063b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3301      	adds	r3, #1
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	b21a      	sxth	r2, r3
 80063bc:	4b1f      	ldr	r3, [pc, #124]	; (800643c <LEDHandler+0x4d48>)
 80063be:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80063c0:	4b1e      	ldr	r3, [pc, #120]	; (800643c <LEDHandler+0x4d48>)
 80063c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063c6:	4618      	mov	r0, r3
 80063c8:	4b1d      	ldr	r3, [pc, #116]	; (8006440 <LEDHandler+0x4d4c>)
 80063ca:	6819      	ldr	r1, [r3, #0]
 80063cc:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <LEDHandler+0x4d50>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <LEDHandler+0x4d54>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 fdf8 	bl	8009fc8 <Set_LED>
 80063d8:	4b18      	ldr	r3, [pc, #96]	; (800643c <LEDHandler+0x4d48>)
 80063da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3301      	adds	r3, #1
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	b21a      	sxth	r2, r3
 80063e6:	4b15      	ldr	r3, [pc, #84]	; (800643c <LEDHandler+0x4d48>)
 80063e8:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80063ea:	4b14      	ldr	r3, [pc, #80]	; (800643c <LEDHandler+0x4d48>)
 80063ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f0:	4618      	mov	r0, r3
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <LEDHandler+0x4d4c>)
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	4b13      	ldr	r3, [pc, #76]	; (8006444 <LEDHandler+0x4d50>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4b13      	ldr	r3, [pc, #76]	; (8006448 <LEDHandler+0x4d54>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 fde3 	bl	8009fc8 <Set_LED>
 8006402:	4b0e      	ldr	r3, [pc, #56]	; (800643c <LEDHandler+0x4d48>)
 8006404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006408:	b29b      	uxth	r3, r3
 800640a:	3301      	adds	r3, #1
 800640c:	b29b      	uxth	r3, r3
 800640e:	b21a      	sxth	r2, r3
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <LEDHandler+0x4d48>)
 8006412:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006414:	4b09      	ldr	r3, [pc, #36]	; (800643c <LEDHandler+0x4d48>)
 8006416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800641a:	4618      	mov	r0, r3
 800641c:	4b08      	ldr	r3, [pc, #32]	; (8006440 <LEDHandler+0x4d4c>)
 800641e:	6819      	ldr	r1, [r3, #0]
 8006420:	4b08      	ldr	r3, [pc, #32]	; (8006444 <LEDHandler+0x4d50>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <LEDHandler+0x4d54>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 fdce 	bl	8009fc8 <Set_LED>
 800642c:	4b03      	ldr	r3, [pc, #12]	; (800643c <LEDHandler+0x4d48>)
 800642e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006432:	b29b      	uxth	r3, r3
 8006434:	3301      	adds	r3, #1
 8006436:	b29b      	uxth	r3, r3
 8006438:	b21a      	sxth	r2, r3
 800643a:	e007      	b.n	800644c <LEDHandler+0x4d58>
 800643c:	2000031c 	.word	0x2000031c
 8006440:	20000008 	.word	0x20000008
 8006444:	2000000c 	.word	0x2000000c
 8006448:	20000010 	.word	0x20000010
 800644c:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <LEDHandler+0x4e54>)
 800644e:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006450:	4b3d      	ldr	r3, [pc, #244]	; (8006548 <LEDHandler+0x4e54>)
 8006452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006456:	4618      	mov	r0, r3
 8006458:	4b3c      	ldr	r3, [pc, #240]	; (800654c <LEDHandler+0x4e58>)
 800645a:	6819      	ldr	r1, [r3, #0]
 800645c:	4b3c      	ldr	r3, [pc, #240]	; (8006550 <LEDHandler+0x4e5c>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4b3c      	ldr	r3, [pc, #240]	; (8006554 <LEDHandler+0x4e60>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 fdb0 	bl	8009fc8 <Set_LED>
 8006468:	4b37      	ldr	r3, [pc, #220]	; (8006548 <LEDHandler+0x4e54>)
 800646a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646e:	b29b      	uxth	r3, r3
 8006470:	3301      	adds	r3, #1
 8006472:	b29b      	uxth	r3, r3
 8006474:	b21a      	sxth	r2, r3
 8006476:	4b34      	ldr	r3, [pc, #208]	; (8006548 <LEDHandler+0x4e54>)
 8006478:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 800647a:	4b33      	ldr	r3, [pc, #204]	; (8006548 <LEDHandler+0x4e54>)
 800647c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006480:	4618      	mov	r0, r3
 8006482:	4b32      	ldr	r3, [pc, #200]	; (800654c <LEDHandler+0x4e58>)
 8006484:	6819      	ldr	r1, [r3, #0]
 8006486:	4b32      	ldr	r3, [pc, #200]	; (8006550 <LEDHandler+0x4e5c>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b32      	ldr	r3, [pc, #200]	; (8006554 <LEDHandler+0x4e60>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 fd9b 	bl	8009fc8 <Set_LED>
 8006492:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <LEDHandler+0x4e54>)
 8006494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006498:	b29b      	uxth	r3, r3
 800649a:	3301      	adds	r3, #1
 800649c:	b29b      	uxth	r3, r3
 800649e:	b21a      	sxth	r2, r3
 80064a0:	4b29      	ldr	r3, [pc, #164]	; (8006548 <LEDHandler+0x4e54>)
 80064a2:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED18
 80064a4:	4b28      	ldr	r3, [pc, #160]	; (8006548 <LEDHandler+0x4e54>)
 80064a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064aa:	4618      	mov	r0, r3
 80064ac:	4b27      	ldr	r3, [pc, #156]	; (800654c <LEDHandler+0x4e58>)
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	4b27      	ldr	r3, [pc, #156]	; (8006550 <LEDHandler+0x4e5c>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b27      	ldr	r3, [pc, #156]	; (8006554 <LEDHandler+0x4e60>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 fd86 	bl	8009fc8 <Set_LED>
 80064bc:	4b22      	ldr	r3, [pc, #136]	; (8006548 <LEDHandler+0x4e54>)
 80064be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3301      	adds	r3, #1
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	b21a      	sxth	r2, r3
 80064ca:	4b1f      	ldr	r3, [pc, #124]	; (8006548 <LEDHandler+0x4e54>)
 80064cc:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED19
 80064ce:	4b1e      	ldr	r3, [pc, #120]	; (8006548 <LEDHandler+0x4e54>)
 80064d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d4:	4618      	mov	r0, r3
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <LEDHandler+0x4e58>)
 80064d8:	6819      	ldr	r1, [r3, #0]
 80064da:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <LEDHandler+0x4e5c>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <LEDHandler+0x4e60>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 fd71 	bl	8009fc8 <Set_LED>
 80064e6:	4b18      	ldr	r3, [pc, #96]	; (8006548 <LEDHandler+0x4e54>)
 80064e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3301      	adds	r3, #1
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	b21a      	sxth	r2, r3
 80064f4:	4b14      	ldr	r3, [pc, #80]	; (8006548 <LEDHandler+0x4e54>)
 80064f6:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED20
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <LEDHandler+0x4e54>)
 80064fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064fe:	4618      	mov	r0, r3
 8006500:	4b12      	ldr	r3, [pc, #72]	; (800654c <LEDHandler+0x4e58>)
 8006502:	6819      	ldr	r1, [r3, #0]
 8006504:	4b12      	ldr	r3, [pc, #72]	; (8006550 <LEDHandler+0x4e5c>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b12      	ldr	r3, [pc, #72]	; (8006554 <LEDHandler+0x4e60>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 fd5c 	bl	8009fc8 <Set_LED>
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <LEDHandler+0x4e54>)
 8006512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006516:	b29b      	uxth	r3, r3
 8006518:	3301      	adds	r3, #1
 800651a:	b29b      	uxth	r3, r3
 800651c:	b21a      	sxth	r2, r3
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <LEDHandler+0x4e54>)
 8006520:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, 0, 0, 0);			var2++;		//LED21
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <LEDHandler+0x4e54>)
 8006524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006528:	4618      	mov	r0, r3
 800652a:	2300      	movs	r3, #0
 800652c:	2200      	movs	r2, #0
 800652e:	2100      	movs	r1, #0
 8006530:	f003 fd4a 	bl	8009fc8 <Set_LED>
 8006534:	4b04      	ldr	r3, [pc, #16]	; (8006548 <LEDHandler+0x4e54>)
 8006536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800653a:	b29b      	uxth	r3, r3
 800653c:	3301      	adds	r3, #1
 800653e:	b29b      	uxth	r3, r3
 8006540:	b21a      	sxth	r2, r3
 8006542:	4b01      	ldr	r3, [pc, #4]	; (8006548 <LEDHandler+0x4e54>)
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e1cd      	b.n	80068e4 <LEDHandler+0x51f0>
 8006548:	2000031c 	.word	0x2000031c
 800654c:	20000008 	.word	0x20000008
 8006550:	2000000c 	.word	0x2000000c
 8006554:	20000010 	.word	0x20000010


} else if (Valor >= 100) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b63      	cmp	r3, #99	; 0x63
 800655c:	f340 81c2 	ble.w	80068e4 <LEDHandler+0x51f0>

	Set_LED(var2, Red, Green, Blue);			var2++;
 8006560:	4b9c      	ldr	r3, [pc, #624]	; (80067d4 <LEDHandler+0x50e0>)
 8006562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006566:	4618      	mov	r0, r3
 8006568:	4b9b      	ldr	r3, [pc, #620]	; (80067d8 <LEDHandler+0x50e4>)
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	4b9b      	ldr	r3, [pc, #620]	; (80067dc <LEDHandler+0x50e8>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b9b      	ldr	r3, [pc, #620]	; (80067e0 <LEDHandler+0x50ec>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 fd28 	bl	8009fc8 <Set_LED>
 8006578:	4b96      	ldr	r3, [pc, #600]	; (80067d4 <LEDHandler+0x50e0>)
 800657a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800657e:	b29b      	uxth	r3, r3
 8006580:	3301      	adds	r3, #1
 8006582:	b29b      	uxth	r3, r3
 8006584:	b21a      	sxth	r2, r3
 8006586:	4b93      	ldr	r3, [pc, #588]	; (80067d4 <LEDHandler+0x50e0>)
 8006588:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 800658a:	4b92      	ldr	r3, [pc, #584]	; (80067d4 <LEDHandler+0x50e0>)
 800658c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006590:	4618      	mov	r0, r3
 8006592:	4b91      	ldr	r3, [pc, #580]	; (80067d8 <LEDHandler+0x50e4>)
 8006594:	6819      	ldr	r1, [r3, #0]
 8006596:	4b91      	ldr	r3, [pc, #580]	; (80067dc <LEDHandler+0x50e8>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b91      	ldr	r3, [pc, #580]	; (80067e0 <LEDHandler+0x50ec>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 fd13 	bl	8009fc8 <Set_LED>
 80065a2:	4b8c      	ldr	r3, [pc, #560]	; (80067d4 <LEDHandler+0x50e0>)
 80065a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3301      	adds	r3, #1
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	b21a      	sxth	r2, r3
 80065b0:	4b88      	ldr	r3, [pc, #544]	; (80067d4 <LEDHandler+0x50e0>)
 80065b2:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80065b4:	4b87      	ldr	r3, [pc, #540]	; (80067d4 <LEDHandler+0x50e0>)
 80065b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065ba:	4618      	mov	r0, r3
 80065bc:	4b86      	ldr	r3, [pc, #536]	; (80067d8 <LEDHandler+0x50e4>)
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	4b86      	ldr	r3, [pc, #536]	; (80067dc <LEDHandler+0x50e8>)
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	4b86      	ldr	r3, [pc, #536]	; (80067e0 <LEDHandler+0x50ec>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 fcfe 	bl	8009fc8 <Set_LED>
 80065cc:	4b81      	ldr	r3, [pc, #516]	; (80067d4 <LEDHandler+0x50e0>)
 80065ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3301      	adds	r3, #1
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	b21a      	sxth	r2, r3
 80065da:	4b7e      	ldr	r3, [pc, #504]	; (80067d4 <LEDHandler+0x50e0>)
 80065dc:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80065de:	4b7d      	ldr	r3, [pc, #500]	; (80067d4 <LEDHandler+0x50e0>)
 80065e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065e4:	4618      	mov	r0, r3
 80065e6:	4b7c      	ldr	r3, [pc, #496]	; (80067d8 <LEDHandler+0x50e4>)
 80065e8:	6819      	ldr	r1, [r3, #0]
 80065ea:	4b7c      	ldr	r3, [pc, #496]	; (80067dc <LEDHandler+0x50e8>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b7c      	ldr	r3, [pc, #496]	; (80067e0 <LEDHandler+0x50ec>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 fce9 	bl	8009fc8 <Set_LED>
 80065f6:	4b77      	ldr	r3, [pc, #476]	; (80067d4 <LEDHandler+0x50e0>)
 80065f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3301      	adds	r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	b21a      	sxth	r2, r3
 8006604:	4b73      	ldr	r3, [pc, #460]	; (80067d4 <LEDHandler+0x50e0>)
 8006606:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006608:	4b72      	ldr	r3, [pc, #456]	; (80067d4 <LEDHandler+0x50e0>)
 800660a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800660e:	4618      	mov	r0, r3
 8006610:	4b71      	ldr	r3, [pc, #452]	; (80067d8 <LEDHandler+0x50e4>)
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	4b71      	ldr	r3, [pc, #452]	; (80067dc <LEDHandler+0x50e8>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4b71      	ldr	r3, [pc, #452]	; (80067e0 <LEDHandler+0x50ec>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 fcd4 	bl	8009fc8 <Set_LED>
 8006620:	4b6c      	ldr	r3, [pc, #432]	; (80067d4 <LEDHandler+0x50e0>)
 8006622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006626:	b29b      	uxth	r3, r3
 8006628:	3301      	adds	r3, #1
 800662a:	b29b      	uxth	r3, r3
 800662c:	b21a      	sxth	r2, r3
 800662e:	4b69      	ldr	r3, [pc, #420]	; (80067d4 <LEDHandler+0x50e0>)
 8006630:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006632:	4b68      	ldr	r3, [pc, #416]	; (80067d4 <LEDHandler+0x50e0>)
 8006634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006638:	4618      	mov	r0, r3
 800663a:	4b67      	ldr	r3, [pc, #412]	; (80067d8 <LEDHandler+0x50e4>)
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	4b67      	ldr	r3, [pc, #412]	; (80067dc <LEDHandler+0x50e8>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b67      	ldr	r3, [pc, #412]	; (80067e0 <LEDHandler+0x50ec>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 fcbf 	bl	8009fc8 <Set_LED>
 800664a:	4b62      	ldr	r3, [pc, #392]	; (80067d4 <LEDHandler+0x50e0>)
 800664c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006650:	b29b      	uxth	r3, r3
 8006652:	3301      	adds	r3, #1
 8006654:	b29b      	uxth	r3, r3
 8006656:	b21a      	sxth	r2, r3
 8006658:	4b5e      	ldr	r3, [pc, #376]	; (80067d4 <LEDHandler+0x50e0>)
 800665a:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 800665c:	4b5d      	ldr	r3, [pc, #372]	; (80067d4 <LEDHandler+0x50e0>)
 800665e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006662:	4618      	mov	r0, r3
 8006664:	4b5c      	ldr	r3, [pc, #368]	; (80067d8 <LEDHandler+0x50e4>)
 8006666:	6819      	ldr	r1, [r3, #0]
 8006668:	4b5c      	ldr	r3, [pc, #368]	; (80067dc <LEDHandler+0x50e8>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b5c      	ldr	r3, [pc, #368]	; (80067e0 <LEDHandler+0x50ec>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 fcaa 	bl	8009fc8 <Set_LED>
 8006674:	4b57      	ldr	r3, [pc, #348]	; (80067d4 <LEDHandler+0x50e0>)
 8006676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800667a:	b29b      	uxth	r3, r3
 800667c:	3301      	adds	r3, #1
 800667e:	b29b      	uxth	r3, r3
 8006680:	b21a      	sxth	r2, r3
 8006682:	4b54      	ldr	r3, [pc, #336]	; (80067d4 <LEDHandler+0x50e0>)
 8006684:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006686:	4b53      	ldr	r3, [pc, #332]	; (80067d4 <LEDHandler+0x50e0>)
 8006688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800668c:	4618      	mov	r0, r3
 800668e:	4b52      	ldr	r3, [pc, #328]	; (80067d8 <LEDHandler+0x50e4>)
 8006690:	6819      	ldr	r1, [r3, #0]
 8006692:	4b52      	ldr	r3, [pc, #328]	; (80067dc <LEDHandler+0x50e8>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b52      	ldr	r3, [pc, #328]	; (80067e0 <LEDHandler+0x50ec>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 fc95 	bl	8009fc8 <Set_LED>
 800669e:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <LEDHandler+0x50e0>)
 80066a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3301      	adds	r3, #1
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	b21a      	sxth	r2, r3
 80066ac:	4b49      	ldr	r3, [pc, #292]	; (80067d4 <LEDHandler+0x50e0>)
 80066ae:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80066b0:	4b48      	ldr	r3, [pc, #288]	; (80067d4 <LEDHandler+0x50e0>)
 80066b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066b6:	4618      	mov	r0, r3
 80066b8:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <LEDHandler+0x50e4>)
 80066ba:	6819      	ldr	r1, [r3, #0]
 80066bc:	4b47      	ldr	r3, [pc, #284]	; (80067dc <LEDHandler+0x50e8>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b47      	ldr	r3, [pc, #284]	; (80067e0 <LEDHandler+0x50ec>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 fc80 	bl	8009fc8 <Set_LED>
 80066c8:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <LEDHandler+0x50e0>)
 80066ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3301      	adds	r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	b21a      	sxth	r2, r3
 80066d6:	4b3f      	ldr	r3, [pc, #252]	; (80067d4 <LEDHandler+0x50e0>)
 80066d8:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80066da:	4b3e      	ldr	r3, [pc, #248]	; (80067d4 <LEDHandler+0x50e0>)
 80066dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066e0:	4618      	mov	r0, r3
 80066e2:	4b3d      	ldr	r3, [pc, #244]	; (80067d8 <LEDHandler+0x50e4>)
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	4b3d      	ldr	r3, [pc, #244]	; (80067dc <LEDHandler+0x50e8>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4b3d      	ldr	r3, [pc, #244]	; (80067e0 <LEDHandler+0x50ec>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 fc6b 	bl	8009fc8 <Set_LED>
 80066f2:	4b38      	ldr	r3, [pc, #224]	; (80067d4 <LEDHandler+0x50e0>)
 80066f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3301      	adds	r3, #1
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	b21a      	sxth	r2, r3
 8006700:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <LEDHandler+0x50e0>)
 8006702:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006704:	4b33      	ldr	r3, [pc, #204]	; (80067d4 <LEDHandler+0x50e0>)
 8006706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800670a:	4618      	mov	r0, r3
 800670c:	4b32      	ldr	r3, [pc, #200]	; (80067d8 <LEDHandler+0x50e4>)
 800670e:	6819      	ldr	r1, [r3, #0]
 8006710:	4b32      	ldr	r3, [pc, #200]	; (80067dc <LEDHandler+0x50e8>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <LEDHandler+0x50ec>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 fc56 	bl	8009fc8 <Set_LED>
 800671c:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <LEDHandler+0x50e0>)
 800671e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006722:	b29b      	uxth	r3, r3
 8006724:	3301      	adds	r3, #1
 8006726:	b29b      	uxth	r3, r3
 8006728:	b21a      	sxth	r2, r3
 800672a:	4b2a      	ldr	r3, [pc, #168]	; (80067d4 <LEDHandler+0x50e0>)
 800672c:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 800672e:	4b29      	ldr	r3, [pc, #164]	; (80067d4 <LEDHandler+0x50e0>)
 8006730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006734:	4618      	mov	r0, r3
 8006736:	4b28      	ldr	r3, [pc, #160]	; (80067d8 <LEDHandler+0x50e4>)
 8006738:	6819      	ldr	r1, [r3, #0]
 800673a:	4b28      	ldr	r3, [pc, #160]	; (80067dc <LEDHandler+0x50e8>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b28      	ldr	r3, [pc, #160]	; (80067e0 <LEDHandler+0x50ec>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 fc41 	bl	8009fc8 <Set_LED>
 8006746:	4b23      	ldr	r3, [pc, #140]	; (80067d4 <LEDHandler+0x50e0>)
 8006748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800674c:	b29b      	uxth	r3, r3
 800674e:	3301      	adds	r3, #1
 8006750:	b29b      	uxth	r3, r3
 8006752:	b21a      	sxth	r2, r3
 8006754:	4b1f      	ldr	r3, [pc, #124]	; (80067d4 <LEDHandler+0x50e0>)
 8006756:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <LEDHandler+0x50e0>)
 800675a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800675e:	4618      	mov	r0, r3
 8006760:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <LEDHandler+0x50e4>)
 8006762:	6819      	ldr	r1, [r3, #0]
 8006764:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <LEDHandler+0x50e8>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <LEDHandler+0x50ec>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 fc2c 	bl	8009fc8 <Set_LED>
 8006770:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <LEDHandler+0x50e0>)
 8006772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006776:	b29b      	uxth	r3, r3
 8006778:	3301      	adds	r3, #1
 800677a:	b29b      	uxth	r3, r3
 800677c:	b21a      	sxth	r2, r3
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <LEDHandler+0x50e0>)
 8006780:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006782:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <LEDHandler+0x50e0>)
 8006784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006788:	4618      	mov	r0, r3
 800678a:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <LEDHandler+0x50e4>)
 800678c:	6819      	ldr	r1, [r3, #0]
 800678e:	4b13      	ldr	r3, [pc, #76]	; (80067dc <LEDHandler+0x50e8>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <LEDHandler+0x50ec>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 fc17 	bl	8009fc8 <Set_LED>
 800679a:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <LEDHandler+0x50e0>)
 800679c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3301      	adds	r3, #1
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	b21a      	sxth	r2, r3
 80067a8:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <LEDHandler+0x50e0>)
 80067aa:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <LEDHandler+0x50e0>)
 80067ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067b2:	4618      	mov	r0, r3
 80067b4:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <LEDHandler+0x50e4>)
 80067b6:	6819      	ldr	r1, [r3, #0]
 80067b8:	4b08      	ldr	r3, [pc, #32]	; (80067dc <LEDHandler+0x50e8>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	4b08      	ldr	r3, [pc, #32]	; (80067e0 <LEDHandler+0x50ec>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 fc02 	bl	8009fc8 <Set_LED>
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <LEDHandler+0x50e0>)
 80067c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3301      	adds	r3, #1
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	b21a      	sxth	r2, r3
 80067d2:	e007      	b.n	80067e4 <LEDHandler+0x50f0>
 80067d4:	2000031c 	.word	0x2000031c
 80067d8:	20000008 	.word	0x20000008
 80067dc:	2000000c 	.word	0x2000000c
 80067e0:	20000010 	.word	0x20000010
 80067e4:	4bc9      	ldr	r3, [pc, #804]	; (8006b0c <LEDHandler+0x5418>)
 80067e6:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 80067e8:	4bc8      	ldr	r3, [pc, #800]	; (8006b0c <LEDHandler+0x5418>)
 80067ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067ee:	4618      	mov	r0, r3
 80067f0:	4bc7      	ldr	r3, [pc, #796]	; (8006b10 <LEDHandler+0x541c>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	4bc7      	ldr	r3, [pc, #796]	; (8006b14 <LEDHandler+0x5420>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	4bc7      	ldr	r3, [pc, #796]	; (8006b18 <LEDHandler+0x5424>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 fbe4 	bl	8009fc8 <Set_LED>
 8006800:	4bc2      	ldr	r3, [pc, #776]	; (8006b0c <LEDHandler+0x5418>)
 8006802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006806:	b29b      	uxth	r3, r3
 8006808:	3301      	adds	r3, #1
 800680a:	b29b      	uxth	r3, r3
 800680c:	b21a      	sxth	r2, r3
 800680e:	4bbf      	ldr	r3, [pc, #764]	; (8006b0c <LEDHandler+0x5418>)
 8006810:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;
 8006812:	4bbe      	ldr	r3, [pc, #760]	; (8006b0c <LEDHandler+0x5418>)
 8006814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006818:	4618      	mov	r0, r3
 800681a:	4bbd      	ldr	r3, [pc, #756]	; (8006b10 <LEDHandler+0x541c>)
 800681c:	6819      	ldr	r1, [r3, #0]
 800681e:	4bbd      	ldr	r3, [pc, #756]	; (8006b14 <LEDHandler+0x5420>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4bbd      	ldr	r3, [pc, #756]	; (8006b18 <LEDHandler+0x5424>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 fbcf 	bl	8009fc8 <Set_LED>
 800682a:	4bb8      	ldr	r3, [pc, #736]	; (8006b0c <LEDHandler+0x5418>)
 800682c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006830:	b29b      	uxth	r3, r3
 8006832:	3301      	adds	r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	b21a      	sxth	r2, r3
 8006838:	4bb4      	ldr	r3, [pc, #720]	; (8006b0c <LEDHandler+0x5418>)
 800683a:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED18
 800683c:	4bb3      	ldr	r3, [pc, #716]	; (8006b0c <LEDHandler+0x5418>)
 800683e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006842:	4618      	mov	r0, r3
 8006844:	4bb2      	ldr	r3, [pc, #712]	; (8006b10 <LEDHandler+0x541c>)
 8006846:	6819      	ldr	r1, [r3, #0]
 8006848:	4bb2      	ldr	r3, [pc, #712]	; (8006b14 <LEDHandler+0x5420>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4bb2      	ldr	r3, [pc, #712]	; (8006b18 <LEDHandler+0x5424>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 fbba 	bl	8009fc8 <Set_LED>
 8006854:	4bad      	ldr	r3, [pc, #692]	; (8006b0c <LEDHandler+0x5418>)
 8006856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800685a:	b29b      	uxth	r3, r3
 800685c:	3301      	adds	r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	b21a      	sxth	r2, r3
 8006862:	4baa      	ldr	r3, [pc, #680]	; (8006b0c <LEDHandler+0x5418>)
 8006864:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED19
 8006866:	4ba9      	ldr	r3, [pc, #676]	; (8006b0c <LEDHandler+0x5418>)
 8006868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800686c:	4618      	mov	r0, r3
 800686e:	4ba8      	ldr	r3, [pc, #672]	; (8006b10 <LEDHandler+0x541c>)
 8006870:	6819      	ldr	r1, [r3, #0]
 8006872:	4ba8      	ldr	r3, [pc, #672]	; (8006b14 <LEDHandler+0x5420>)
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4ba8      	ldr	r3, [pc, #672]	; (8006b18 <LEDHandler+0x5424>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 fba5 	bl	8009fc8 <Set_LED>
 800687e:	4ba3      	ldr	r3, [pc, #652]	; (8006b0c <LEDHandler+0x5418>)
 8006880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006884:	b29b      	uxth	r3, r3
 8006886:	3301      	adds	r3, #1
 8006888:	b29b      	uxth	r3, r3
 800688a:	b21a      	sxth	r2, r3
 800688c:	4b9f      	ldr	r3, [pc, #636]	; (8006b0c <LEDHandler+0x5418>)
 800688e:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED20
 8006890:	4b9e      	ldr	r3, [pc, #632]	; (8006b0c <LEDHandler+0x5418>)
 8006892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006896:	4618      	mov	r0, r3
 8006898:	4b9d      	ldr	r3, [pc, #628]	; (8006b10 <LEDHandler+0x541c>)
 800689a:	6819      	ldr	r1, [r3, #0]
 800689c:	4b9d      	ldr	r3, [pc, #628]	; (8006b14 <LEDHandler+0x5420>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b9d      	ldr	r3, [pc, #628]	; (8006b18 <LEDHandler+0x5424>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 fb90 	bl	8009fc8 <Set_LED>
 80068a8:	4b98      	ldr	r3, [pc, #608]	; (8006b0c <LEDHandler+0x5418>)
 80068aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3301      	adds	r3, #1
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	b21a      	sxth	r2, r3
 80068b6:	4b95      	ldr	r3, [pc, #596]	; (8006b0c <LEDHandler+0x5418>)
 80068b8:	801a      	strh	r2, [r3, #0]
	Set_LED(var2, Red, Green, Blue);			var2++;		//LED21
 80068ba:	4b94      	ldr	r3, [pc, #592]	; (8006b0c <LEDHandler+0x5418>)
 80068bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068c0:	4618      	mov	r0, r3
 80068c2:	4b93      	ldr	r3, [pc, #588]	; (8006b10 <LEDHandler+0x541c>)
 80068c4:	6819      	ldr	r1, [r3, #0]
 80068c6:	4b93      	ldr	r3, [pc, #588]	; (8006b14 <LEDHandler+0x5420>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b93      	ldr	r3, [pc, #588]	; (8006b18 <LEDHandler+0x5424>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 fb7b 	bl	8009fc8 <Set_LED>
 80068d2:	4b8e      	ldr	r3, [pc, #568]	; (8006b0c <LEDHandler+0x5418>)
 80068d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3301      	adds	r3, #1
 80068dc:	b29b      	uxth	r3, r3
 80068de:	b21a      	sxth	r2, r3
 80068e0:	4b8a      	ldr	r3, [pc, #552]	; (8006b0c <LEDHandler+0x5418>)
 80068e2:	801a      	strh	r2, [r3, #0]
}
	}

	if (Value[0] == 5) {
 80068e4:	4b8d      	ldr	r3, [pc, #564]	; (8006b1c <LEDHandler+0x5428>)
 80068e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	f041 86bd 	bne.w	800866a <LEDHandler+0x6f76>

		if (Valor == 0) {
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d17f      	bne.n	80069f6 <LEDHandler+0x5302>

			Set_LED	(	0	,	0	,	0	, 	0	)	;		//LED1
 80068f6:	2300      	movs	r3, #0
 80068f8:	2200      	movs	r2, #0
 80068fa:	2100      	movs	r1, #0
 80068fc:	2000      	movs	r0, #0
 80068fe:	f003 fb63 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	0	,	0	, 	0	)	;		//LED2
 8006902:	2300      	movs	r3, #0
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	2001      	movs	r0, #1
 800690a:	f003 fb5d 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 800690e:	2300      	movs	r3, #0
 8006910:	2200      	movs	r2, #0
 8006912:	2100      	movs	r1, #0
 8006914:	2002      	movs	r0, #2
 8006916:	f003 fb57 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 800691a:	2300      	movs	r3, #0
 800691c:	2200      	movs	r2, #0
 800691e:	2100      	movs	r1, #0
 8006920:	2003      	movs	r0, #3
 8006922:	f003 fb51 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 8006926:	2300      	movs	r3, #0
 8006928:	2200      	movs	r2, #0
 800692a:	2100      	movs	r1, #0
 800692c:	2004      	movs	r0, #4
 800692e:	f003 fb4b 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8006932:	2300      	movs	r3, #0
 8006934:	2200      	movs	r2, #0
 8006936:	2100      	movs	r1, #0
 8006938:	2005      	movs	r0, #5
 800693a:	f003 fb45 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 800693e:	2300      	movs	r3, #0
 8006940:	2200      	movs	r2, #0
 8006942:	2100      	movs	r1, #0
 8006944:	2006      	movs	r0, #6
 8006946:	f003 fb3f 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 800694a:	2300      	movs	r3, #0
 800694c:	2200      	movs	r2, #0
 800694e:	2100      	movs	r1, #0
 8006950:	2007      	movs	r0, #7
 8006952:	f003 fb39 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006956:	2300      	movs	r3, #0
 8006958:	2200      	movs	r2, #0
 800695a:	2100      	movs	r1, #0
 800695c:	2008      	movs	r0, #8
 800695e:	f003 fb33 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006962:	2300      	movs	r3, #0
 8006964:	2200      	movs	r2, #0
 8006966:	2100      	movs	r1, #0
 8006968:	2009      	movs	r0, #9
 800696a:	f003 fb2d 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	2100      	movs	r1, #0
 8006974:	200a      	movs	r0, #10
 8006976:	f003 fb27 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 800697a:	2300      	movs	r3, #0
 800697c:	2200      	movs	r2, #0
 800697e:	2100      	movs	r1, #0
 8006980:	200b      	movs	r0, #11
 8006982:	f003 fb21 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006986:	2300      	movs	r3, #0
 8006988:	2200      	movs	r2, #0
 800698a:	2100      	movs	r1, #0
 800698c:	200c      	movs	r0, #12
 800698e:	f003 fb1b 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006992:	2300      	movs	r3, #0
 8006994:	2200      	movs	r2, #0
 8006996:	2100      	movs	r1, #0
 8006998:	200d      	movs	r0, #13
 800699a:	f003 fb15 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800699e:	2300      	movs	r3, #0
 80069a0:	2200      	movs	r2, #0
 80069a2:	2100      	movs	r1, #0
 80069a4:	200e      	movs	r0, #14
 80069a6:	f003 fb0f 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80069aa:	2300      	movs	r3, #0
 80069ac:	2200      	movs	r2, #0
 80069ae:	2100      	movs	r1, #0
 80069b0:	200f      	movs	r0, #15
 80069b2:	f003 fb09 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80069b6:	2300      	movs	r3, #0
 80069b8:	2200      	movs	r2, #0
 80069ba:	2100      	movs	r1, #0
 80069bc:	2010      	movs	r0, #16
 80069be:	f003 fb03 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 80069c2:	2300      	movs	r3, #0
 80069c4:	2200      	movs	r2, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	2011      	movs	r0, #17
 80069ca:	f003 fafd 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	2012      	movs	r0, #18
 80069d6:	f003 faf7 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80069da:	2300      	movs	r3, #0
 80069dc:	2200      	movs	r2, #0
 80069de:	2100      	movs	r1, #0
 80069e0:	2013      	movs	r0, #19
 80069e2:	f003 faf1 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80069e6:	2300      	movs	r3, #0
 80069e8:	2200      	movs	r2, #0
 80069ea:	2100      	movs	r1, #0
 80069ec:	2014      	movs	r0, #20
 80069ee:	f003 faeb 	bl	8009fc8 <Set_LED>
 80069f2:	f003 ba34 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (Valor >= 1 && Valor < 6) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f340 8091 	ble.w	8006b20 <LEDHandler+0x542c>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	f300 808d 	bgt.w	8006b20 <LEDHandler+0x542c>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8006a06:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <LEDHandler+0x541c>)
 8006a08:	6819      	ldr	r1, [r3, #0]
 8006a0a:	4b42      	ldr	r3, [pc, #264]	; (8006b14 <LEDHandler+0x5420>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b42      	ldr	r3, [pc, #264]	; (8006b18 <LEDHandler+0x5424>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2000      	movs	r0, #0
 8006a14:	f003 fad8 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	0	,	0	, 	0	)	;		//LED2
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	2001      	movs	r0, #1
 8006a20:	f003 fad2 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 8006a24:	2300      	movs	r3, #0
 8006a26:	2200      	movs	r2, #0
 8006a28:	2100      	movs	r1, #0
 8006a2a:	2002      	movs	r0, #2
 8006a2c:	f003 facc 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 8006a30:	2300      	movs	r3, #0
 8006a32:	2200      	movs	r2, #0
 8006a34:	2100      	movs	r1, #0
 8006a36:	2003      	movs	r0, #3
 8006a38:	f003 fac6 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	2004      	movs	r0, #4
 8006a44:	f003 fac0 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	2005      	movs	r0, #5
 8006a50:	f003 faba 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8006a54:	2300      	movs	r3, #0
 8006a56:	2200      	movs	r2, #0
 8006a58:	2100      	movs	r1, #0
 8006a5a:	2006      	movs	r0, #6
 8006a5c:	f003 fab4 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006a60:	2300      	movs	r3, #0
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	2007      	movs	r0, #7
 8006a68:	f003 faae 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2100      	movs	r1, #0
 8006a72:	2008      	movs	r0, #8
 8006a74:	f003 faa8 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	2009      	movs	r0, #9
 8006a80:	f003 faa2 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006a84:	2300      	movs	r3, #0
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	200a      	movs	r0, #10
 8006a8c:	f003 fa9c 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006a90:	2300      	movs	r3, #0
 8006a92:	2200      	movs	r2, #0
 8006a94:	2100      	movs	r1, #0
 8006a96:	200b      	movs	r0, #11
 8006a98:	f003 fa96 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	200c      	movs	r0, #12
 8006aa4:	f003 fa90 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2100      	movs	r1, #0
 8006aae:	200d      	movs	r0, #13
 8006ab0:	f003 fa8a 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2100      	movs	r1, #0
 8006aba:	200e      	movs	r0, #14
 8006abc:	f003 fa84 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	200f      	movs	r0, #15
 8006ac8:	f003 fa7e 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006acc:	2300      	movs	r3, #0
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	2010      	movs	r0, #16
 8006ad4:	f003 fa78 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8006ad8:	2300      	movs	r3, #0
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	2011      	movs	r0, #17
 8006ae0:	f003 fa72 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2100      	movs	r1, #0
 8006aea:	2012      	movs	r0, #18
 8006aec:	f003 fa6c 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8006af0:	2300      	movs	r3, #0
 8006af2:	2200      	movs	r2, #0
 8006af4:	2100      	movs	r1, #0
 8006af6:	2013      	movs	r0, #19
 8006af8:	f003 fa66 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8006afc:	2300      	movs	r3, #0
 8006afe:	2200      	movs	r2, #0
 8006b00:	2100      	movs	r1, #0
 8006b02:	2014      	movs	r0, #20
 8006b04:	f003 fa60 	bl	8009fc8 <Set_LED>
 8006b08:	f003 b9a9 	b.w	8009e5e <LEDHandler+0x876a>
 8006b0c:	2000031c 	.word	0x2000031c
 8006b10:	20000008 	.word	0x20000008
 8006b14:	2000000c 	.word	0x2000000c
 8006b18:	20000010 	.word	0x20000010
 8006b1c:	20000320 	.word	0x20000320


		} else if (Valor >= 6 && Valor < 11) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	f340 808a 	ble.w	8006c3c <LEDHandler+0x5548>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b0a      	cmp	r3, #10
 8006b2c:	f300 8086 	bgt.w	8006c3c <LEDHandler+0x5548>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8006b30:	4bd5      	ldr	r3, [pc, #852]	; (8006e88 <LEDHandler+0x5794>)
 8006b32:	6819      	ldr	r1, [r3, #0]
 8006b34:	4bd5      	ldr	r3, [pc, #852]	; (8006e8c <LEDHandler+0x5798>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	4bd5      	ldr	r3, [pc, #852]	; (8006e90 <LEDHandler+0x579c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	f003 fa43 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8006b42:	4bd1      	ldr	r3, [pc, #836]	; (8006e88 <LEDHandler+0x5794>)
 8006b44:	6819      	ldr	r1, [r3, #0]
 8006b46:	4bd1      	ldr	r3, [pc, #836]	; (8006e8c <LEDHandler+0x5798>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4bd1      	ldr	r3, [pc, #836]	; (8006e90 <LEDHandler+0x579c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2001      	movs	r0, #1
 8006b50:	f003 fa3a 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 8006b54:	2300      	movs	r3, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	2002      	movs	r0, #2
 8006b5c:	f003 fa34 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 8006b60:	2300      	movs	r3, #0
 8006b62:	2200      	movs	r2, #0
 8006b64:	2100      	movs	r1, #0
 8006b66:	2003      	movs	r0, #3
 8006b68:	f003 fa2e 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2100      	movs	r1, #0
 8006b72:	2004      	movs	r0, #4
 8006b74:	f003 fa28 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	2005      	movs	r0, #5
 8006b80:	f003 fa22 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8006b84:	2300      	movs	r3, #0
 8006b86:	2200      	movs	r2, #0
 8006b88:	2100      	movs	r1, #0
 8006b8a:	2006      	movs	r0, #6
 8006b8c:	f003 fa1c 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006b90:	2300      	movs	r3, #0
 8006b92:	2200      	movs	r2, #0
 8006b94:	2100      	movs	r1, #0
 8006b96:	2007      	movs	r0, #7
 8006b98:	f003 fa16 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	2008      	movs	r0, #8
 8006ba4:	f003 fa10 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	2009      	movs	r0, #9
 8006bb0:	f003 fa0a 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	200a      	movs	r0, #10
 8006bbc:	f003 fa04 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	200b      	movs	r0, #11
 8006bc8:	f003 f9fe 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	200c      	movs	r0, #12
 8006bd4:	f003 f9f8 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2100      	movs	r1, #0
 8006bde:	200d      	movs	r0, #13
 8006be0:	f003 f9f2 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006be4:	2300      	movs	r3, #0
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	200e      	movs	r0, #14
 8006bec:	f003 f9ec 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	200f      	movs	r0, #15
 8006bf8:	f003 f9e6 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	2010      	movs	r0, #16
 8006c04:	f003 f9e0 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	2011      	movs	r0, #17
 8006c10:	f003 f9da 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8006c14:	2300      	movs	r3, #0
 8006c16:	2200      	movs	r2, #0
 8006c18:	2100      	movs	r1, #0
 8006c1a:	2012      	movs	r0, #18
 8006c1c:	f003 f9d4 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8006c20:	2300      	movs	r3, #0
 8006c22:	2200      	movs	r2, #0
 8006c24:	2100      	movs	r1, #0
 8006c26:	2013      	movs	r0, #19
 8006c28:	f003 f9ce 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	2014      	movs	r0, #20
 8006c34:	f003 f9c8 	bl	8009fc8 <Set_LED>
 8006c38:	f003 b911 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (Valor >= 11 && Valor < 16) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b0a      	cmp	r3, #10
 8006c40:	f340 808d 	ble.w	8006d5e <LEDHandler+0x566a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	f300 8089 	bgt.w	8006d5e <LEDHandler+0x566a>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8006c4c:	4b8e      	ldr	r3, [pc, #568]	; (8006e88 <LEDHandler+0x5794>)
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	4b8e      	ldr	r3, [pc, #568]	; (8006e8c <LEDHandler+0x5798>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b8e      	ldr	r3, [pc, #568]	; (8006e90 <LEDHandler+0x579c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f003 f9b5 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8006c5e:	4b8a      	ldr	r3, [pc, #552]	; (8006e88 <LEDHandler+0x5794>)
 8006c60:	6819      	ldr	r1, [r3, #0]
 8006c62:	4b8a      	ldr	r3, [pc, #552]	; (8006e8c <LEDHandler+0x5798>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b8a      	ldr	r3, [pc, #552]	; (8006e90 <LEDHandler+0x579c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	f003 f9ac 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8006c70:	4b85      	ldr	r3, [pc, #532]	; (8006e88 <LEDHandler+0x5794>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	4b85      	ldr	r3, [pc, #532]	; (8006e8c <LEDHandler+0x5798>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4b85      	ldr	r3, [pc, #532]	; (8006e90 <LEDHandler+0x579c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2002      	movs	r0, #2
 8006c7e:	f003 f9a3 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 8006c82:	2300      	movs	r3, #0
 8006c84:	2200      	movs	r2, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	2003      	movs	r0, #3
 8006c8a:	f003 f99d 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2200      	movs	r2, #0
 8006c92:	2100      	movs	r1, #0
 8006c94:	2004      	movs	r0, #4
 8006c96:	f003 f997 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	2005      	movs	r0, #5
 8006ca2:	f003 f991 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2100      	movs	r1, #0
 8006cac:	2006      	movs	r0, #6
 8006cae:	f003 f98b 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	2007      	movs	r0, #7
 8006cba:	f003 f985 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2008      	movs	r0, #8
 8006cc6:	f003 f97f 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	2009      	movs	r0, #9
 8006cd2:	f003 f979 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	200a      	movs	r0, #10
 8006cde:	f003 f973 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	200b      	movs	r0, #11
 8006cea:	f003 f96d 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	200c      	movs	r0, #12
 8006cf6:	f003 f967 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	200d      	movs	r0, #13
 8006d02:	f003 f961 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006d06:	2300      	movs	r3, #0
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	200e      	movs	r0, #14
 8006d0e:	f003 f95b 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006d12:	2300      	movs	r3, #0
 8006d14:	2200      	movs	r2, #0
 8006d16:	2100      	movs	r1, #0
 8006d18:	200f      	movs	r0, #15
 8006d1a:	f003 f955 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2200      	movs	r2, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	2010      	movs	r0, #16
 8006d26:	f003 f94f 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2100      	movs	r1, #0
 8006d30:	2011      	movs	r0, #17
 8006d32:	f003 f949 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8006d36:	2300      	movs	r3, #0
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	2012      	movs	r0, #18
 8006d3e:	f003 f943 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8006d42:	2300      	movs	r3, #0
 8006d44:	2200      	movs	r2, #0
 8006d46:	2100      	movs	r1, #0
 8006d48:	2013      	movs	r0, #19
 8006d4a:	f003 f93d 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2200      	movs	r2, #0
 8006d52:	2100      	movs	r1, #0
 8006d54:	2014      	movs	r0, #20
 8006d56:	f003 f937 	bl	8009fc8 <Set_LED>
 8006d5a:	f003 b880 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (Valor >= 16 && Valor < 21) {
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b0f      	cmp	r3, #15
 8006d62:	f340 8097 	ble.w	8006e94 <LEDHandler+0x57a0>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b14      	cmp	r3, #20
 8006d6a:	f300 8093 	bgt.w	8006e94 <LEDHandler+0x57a0>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8006d6e:	4b46      	ldr	r3, [pc, #280]	; (8006e88 <LEDHandler+0x5794>)
 8006d70:	6819      	ldr	r1, [r3, #0]
 8006d72:	4b46      	ldr	r3, [pc, #280]	; (8006e8c <LEDHandler+0x5798>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b46      	ldr	r3, [pc, #280]	; (8006e90 <LEDHandler+0x579c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	f003 f924 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8006d80:	4b41      	ldr	r3, [pc, #260]	; (8006e88 <LEDHandler+0x5794>)
 8006d82:	6819      	ldr	r1, [r3, #0]
 8006d84:	4b41      	ldr	r3, [pc, #260]	; (8006e8c <LEDHandler+0x5798>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	4b41      	ldr	r3, [pc, #260]	; (8006e90 <LEDHandler+0x579c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f003 f91b 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8006d92:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <LEDHandler+0x5794>)
 8006d94:	6819      	ldr	r1, [r3, #0]
 8006d96:	4b3d      	ldr	r3, [pc, #244]	; (8006e8c <LEDHandler+0x5798>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b3d      	ldr	r3, [pc, #244]	; (8006e90 <LEDHandler+0x579c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f003 f912 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8006da4:	4b38      	ldr	r3, [pc, #224]	; (8006e88 <LEDHandler+0x5794>)
 8006da6:	6819      	ldr	r1, [r3, #0]
 8006da8:	4b38      	ldr	r3, [pc, #224]	; (8006e8c <LEDHandler+0x5798>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	4b38      	ldr	r3, [pc, #224]	; (8006e90 <LEDHandler+0x579c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2003      	movs	r0, #3
 8006db2:	f003 f909 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 8006db6:	2300      	movs	r3, #0
 8006db8:	2200      	movs	r2, #0
 8006dba:	2100      	movs	r1, #0
 8006dbc:	2004      	movs	r0, #4
 8006dbe:	f003 f903 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	2005      	movs	r0, #5
 8006dca:	f003 f8fd 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	2006      	movs	r0, #6
 8006dd6:	f003 f8f7 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2100      	movs	r1, #0
 8006de0:	2007      	movs	r0, #7
 8006de2:	f003 f8f1 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006de6:	2300      	movs	r3, #0
 8006de8:	2200      	movs	r2, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	2008      	movs	r0, #8
 8006dee:	f003 f8eb 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006df2:	2300      	movs	r3, #0
 8006df4:	2200      	movs	r2, #0
 8006df6:	2100      	movs	r1, #0
 8006df8:	2009      	movs	r0, #9
 8006dfa:	f003 f8e5 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2200      	movs	r2, #0
 8006e02:	2100      	movs	r1, #0
 8006e04:	200a      	movs	r0, #10
 8006e06:	f003 f8df 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2100      	movs	r1, #0
 8006e10:	200b      	movs	r0, #11
 8006e12:	f003 f8d9 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006e16:	2300      	movs	r3, #0
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	200c      	movs	r0, #12
 8006e1e:	f003 f8d3 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006e22:	2300      	movs	r3, #0
 8006e24:	2200      	movs	r2, #0
 8006e26:	2100      	movs	r1, #0
 8006e28:	200d      	movs	r0, #13
 8006e2a:	f003 f8cd 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	200e      	movs	r0, #14
 8006e36:	f003 f8c7 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	200f      	movs	r0, #15
 8006e42:	f003 f8c1 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006e46:	2300      	movs	r3, #0
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2010      	movs	r0, #16
 8006e4e:	f003 f8bb 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8006e52:	2300      	movs	r3, #0
 8006e54:	2200      	movs	r2, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	2011      	movs	r0, #17
 8006e5a:	f003 f8b5 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2200      	movs	r2, #0
 8006e62:	2100      	movs	r1, #0
 8006e64:	2012      	movs	r0, #18
 8006e66:	f003 f8af 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	2013      	movs	r0, #19
 8006e72:	f003 f8a9 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8006e76:	2300      	movs	r3, #0
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	2014      	movs	r0, #20
 8006e7e:	f003 f8a3 	bl	8009fc8 <Set_LED>
 8006e82:	f002 bfec 	b.w	8009e5e <LEDHandler+0x876a>
 8006e86:	bf00      	nop
 8006e88:	20000008 	.word	0x20000008
 8006e8c:	2000000c 	.word	0x2000000c
 8006e90:	20000010 	.word	0x20000010


		} else if (Valor >= 21 && Valor < 26) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b14      	cmp	r3, #20
 8006e98:	f340 8093 	ble.w	8006fc2 <LEDHandler+0x58ce>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b19      	cmp	r3, #25
 8006ea0:	f300 808f 	bgt.w	8006fc2 <LEDHandler+0x58ce>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8006ea4:	4b94      	ldr	r3, [pc, #592]	; (80070f8 <LEDHandler+0x5a04>)
 8006ea6:	6819      	ldr	r1, [r3, #0]
 8006ea8:	4b94      	ldr	r3, [pc, #592]	; (80070fc <LEDHandler+0x5a08>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	4b94      	ldr	r3, [pc, #592]	; (8007100 <LEDHandler+0x5a0c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f003 f889 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8006eb6:	4b90      	ldr	r3, [pc, #576]	; (80070f8 <LEDHandler+0x5a04>)
 8006eb8:	6819      	ldr	r1, [r3, #0]
 8006eba:	4b90      	ldr	r3, [pc, #576]	; (80070fc <LEDHandler+0x5a08>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b90      	ldr	r3, [pc, #576]	; (8007100 <LEDHandler+0x5a0c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	f003 f880 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8006ec8:	4b8b      	ldr	r3, [pc, #556]	; (80070f8 <LEDHandler+0x5a04>)
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	4b8b      	ldr	r3, [pc, #556]	; (80070fc <LEDHandler+0x5a08>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	4b8b      	ldr	r3, [pc, #556]	; (8007100 <LEDHandler+0x5a0c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2002      	movs	r0, #2
 8006ed6:	f003 f877 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8006eda:	4b87      	ldr	r3, [pc, #540]	; (80070f8 <LEDHandler+0x5a04>)
 8006edc:	6819      	ldr	r1, [r3, #0]
 8006ede:	4b87      	ldr	r3, [pc, #540]	; (80070fc <LEDHandler+0x5a08>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b87      	ldr	r3, [pc, #540]	; (8007100 <LEDHandler+0x5a0c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2003      	movs	r0, #3
 8006ee8:	f003 f86e 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8006eec:	4b82      	ldr	r3, [pc, #520]	; (80070f8 <LEDHandler+0x5a04>)
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	4b82      	ldr	r3, [pc, #520]	; (80070fc <LEDHandler+0x5a08>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	4b82      	ldr	r3, [pc, #520]	; (8007100 <LEDHandler+0x5a0c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2004      	movs	r0, #4
 8006efa:	f003 f865 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8006efe:	2300      	movs	r3, #0
 8006f00:	2200      	movs	r2, #0
 8006f02:	2100      	movs	r1, #0
 8006f04:	2005      	movs	r0, #5
 8006f06:	f003 f85f 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2100      	movs	r1, #0
 8006f10:	2006      	movs	r0, #6
 8006f12:	f003 f859 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006f16:	2300      	movs	r3, #0
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	2007      	movs	r0, #7
 8006f1e:	f003 f853 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006f22:	2300      	movs	r3, #0
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	2008      	movs	r0, #8
 8006f2a:	f003 f84d 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2200      	movs	r2, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	2009      	movs	r0, #9
 8006f36:	f003 f847 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2100      	movs	r1, #0
 8006f40:	200a      	movs	r0, #10
 8006f42:	f003 f841 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006f46:	2300      	movs	r3, #0
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	200b      	movs	r0, #11
 8006f4e:	f003 f83b 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006f52:	2300      	movs	r3, #0
 8006f54:	2200      	movs	r2, #0
 8006f56:	2100      	movs	r1, #0
 8006f58:	200c      	movs	r0, #12
 8006f5a:	f003 f835 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2200      	movs	r2, #0
 8006f62:	2100      	movs	r1, #0
 8006f64:	200d      	movs	r0, #13
 8006f66:	f003 f82f 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	200e      	movs	r0, #14
 8006f72:	f003 f829 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006f76:	2300      	movs	r3, #0
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	200f      	movs	r0, #15
 8006f7e:	f003 f823 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006f82:	2300      	movs	r3, #0
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	2010      	movs	r0, #16
 8006f8a:	f003 f81d 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2200      	movs	r2, #0
 8006f92:	2100      	movs	r1, #0
 8006f94:	2011      	movs	r0, #17
 8006f96:	f003 f817 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	2012      	movs	r0, #18
 8006fa2:	f003 f811 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2100      	movs	r1, #0
 8006fac:	2013      	movs	r0, #19
 8006fae:	f003 f80b 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	2014      	movs	r0, #20
 8006fba:	f003 f805 	bl	8009fc8 <Set_LED>
 8006fbe:	f002 bf4e 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (Valor >= 26 && Valor < 30) {
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b19      	cmp	r3, #25
 8006fc6:	f340 809d 	ble.w	8007104 <LEDHandler+0x5a10>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b1d      	cmp	r3, #29
 8006fce:	f300 8099 	bgt.w	8007104 <LEDHandler+0x5a10>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8006fd2:	4b49      	ldr	r3, [pc, #292]	; (80070f8 <LEDHandler+0x5a04>)
 8006fd4:	6819      	ldr	r1, [r3, #0]
 8006fd6:	4b49      	ldr	r3, [pc, #292]	; (80070fc <LEDHandler+0x5a08>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b49      	ldr	r3, [pc, #292]	; (8007100 <LEDHandler+0x5a0c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2000      	movs	r0, #0
 8006fe0:	f002 fff2 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8006fe4:	4b44      	ldr	r3, [pc, #272]	; (80070f8 <LEDHandler+0x5a04>)
 8006fe6:	6819      	ldr	r1, [r3, #0]
 8006fe8:	4b44      	ldr	r3, [pc, #272]	; (80070fc <LEDHandler+0x5a08>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b44      	ldr	r3, [pc, #272]	; (8007100 <LEDHandler+0x5a0c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	f002 ffe9 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8006ff6:	4b40      	ldr	r3, [pc, #256]	; (80070f8 <LEDHandler+0x5a04>)
 8006ff8:	6819      	ldr	r1, [r3, #0]
 8006ffa:	4b40      	ldr	r3, [pc, #256]	; (80070fc <LEDHandler+0x5a08>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4b40      	ldr	r3, [pc, #256]	; (8007100 <LEDHandler+0x5a0c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2002      	movs	r0, #2
 8007004:	f002 ffe0 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8007008:	4b3b      	ldr	r3, [pc, #236]	; (80070f8 <LEDHandler+0x5a04>)
 800700a:	6819      	ldr	r1, [r3, #0]
 800700c:	4b3b      	ldr	r3, [pc, #236]	; (80070fc <LEDHandler+0x5a08>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b3b      	ldr	r3, [pc, #236]	; (8007100 <LEDHandler+0x5a0c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2003      	movs	r0, #3
 8007016:	f002 ffd7 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 800701a:	4b37      	ldr	r3, [pc, #220]	; (80070f8 <LEDHandler+0x5a04>)
 800701c:	6819      	ldr	r1, [r3, #0]
 800701e:	4b37      	ldr	r3, [pc, #220]	; (80070fc <LEDHandler+0x5a08>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b37      	ldr	r3, [pc, #220]	; (8007100 <LEDHandler+0x5a0c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2004      	movs	r0, #4
 8007028:	f002 ffce 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 800702c:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <LEDHandler+0x5a04>)
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	4b32      	ldr	r3, [pc, #200]	; (80070fc <LEDHandler+0x5a08>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b32      	ldr	r3, [pc, #200]	; (8007100 <LEDHandler+0x5a0c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2005      	movs	r0, #5
 800703a:	f002 ffc5 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 800703e:	2300      	movs	r3, #0
 8007040:	2200      	movs	r2, #0
 8007042:	2100      	movs	r1, #0
 8007044:	2006      	movs	r0, #6
 8007046:	f002 ffbf 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 800704a:	2300      	movs	r3, #0
 800704c:	2200      	movs	r2, #0
 800704e:	2100      	movs	r1, #0
 8007050:	2007      	movs	r0, #7
 8007052:	f002 ffb9 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8007056:	2300      	movs	r3, #0
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	2008      	movs	r0, #8
 800705e:	f002 ffb3 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8007062:	2300      	movs	r3, #0
 8007064:	2200      	movs	r2, #0
 8007066:	2100      	movs	r1, #0
 8007068:	2009      	movs	r0, #9
 800706a:	f002 ffad 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800706e:	2300      	movs	r3, #0
 8007070:	2200      	movs	r2, #0
 8007072:	2100      	movs	r1, #0
 8007074:	200a      	movs	r0, #10
 8007076:	f002 ffa7 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 800707a:	2300      	movs	r3, #0
 800707c:	2200      	movs	r2, #0
 800707e:	2100      	movs	r1, #0
 8007080:	200b      	movs	r0, #11
 8007082:	f002 ffa1 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8007086:	2300      	movs	r3, #0
 8007088:	2200      	movs	r2, #0
 800708a:	2100      	movs	r1, #0
 800708c:	200c      	movs	r0, #12
 800708e:	f002 ff9b 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8007092:	2300      	movs	r3, #0
 8007094:	2200      	movs	r2, #0
 8007096:	2100      	movs	r1, #0
 8007098:	200d      	movs	r0, #13
 800709a:	f002 ff95 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800709e:	2300      	movs	r3, #0
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	200e      	movs	r0, #14
 80070a6:	f002 ff8f 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80070aa:	2300      	movs	r3, #0
 80070ac:	2200      	movs	r2, #0
 80070ae:	2100      	movs	r1, #0
 80070b0:	200f      	movs	r0, #15
 80070b2:	f002 ff89 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80070b6:	2300      	movs	r3, #0
 80070b8:	2200      	movs	r2, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	2010      	movs	r0, #16
 80070be:	f002 ff83 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 80070c2:	2300      	movs	r3, #0
 80070c4:	2200      	movs	r2, #0
 80070c6:	2100      	movs	r1, #0
 80070c8:	2011      	movs	r0, #17
 80070ca:	f002 ff7d 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80070ce:	2300      	movs	r3, #0
 80070d0:	2200      	movs	r2, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	2012      	movs	r0, #18
 80070d6:	f002 ff77 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80070da:	2300      	movs	r3, #0
 80070dc:	2200      	movs	r2, #0
 80070de:	2100      	movs	r1, #0
 80070e0:	2013      	movs	r0, #19
 80070e2:	f002 ff71 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80070e6:	2300      	movs	r3, #0
 80070e8:	2200      	movs	r2, #0
 80070ea:	2100      	movs	r1, #0
 80070ec:	2014      	movs	r0, #20
 80070ee:	f002 ff6b 	bl	8009fc8 <Set_LED>
 80070f2:	f002 beb4 	b.w	8009e5e <LEDHandler+0x876a>
 80070f6:	bf00      	nop
 80070f8:	20000008 	.word	0x20000008
 80070fc:	2000000c 	.word	0x2000000c
 8007100:	20000010 	.word	0x20000010


		} else if (Valor >= 30 && Valor < 36) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b1d      	cmp	r3, #29
 8007108:	f340 8099 	ble.w	800723e <LEDHandler+0x5b4a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b23      	cmp	r3, #35	; 0x23
 8007110:	f300 8095 	bgt.w	800723e <LEDHandler+0x5b4a>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8007114:	4b9a      	ldr	r3, [pc, #616]	; (8007380 <LEDHandler+0x5c8c>)
 8007116:	6819      	ldr	r1, [r3, #0]
 8007118:	4b9a      	ldr	r3, [pc, #616]	; (8007384 <LEDHandler+0x5c90>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	4b9a      	ldr	r3, [pc, #616]	; (8007388 <LEDHandler+0x5c94>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2000      	movs	r0, #0
 8007122:	f002 ff51 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8007126:	4b96      	ldr	r3, [pc, #600]	; (8007380 <LEDHandler+0x5c8c>)
 8007128:	6819      	ldr	r1, [r3, #0]
 800712a:	4b96      	ldr	r3, [pc, #600]	; (8007384 <LEDHandler+0x5c90>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b96      	ldr	r3, [pc, #600]	; (8007388 <LEDHandler+0x5c94>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2001      	movs	r0, #1
 8007134:	f002 ff48 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007138:	4b91      	ldr	r3, [pc, #580]	; (8007380 <LEDHandler+0x5c8c>)
 800713a:	6819      	ldr	r1, [r3, #0]
 800713c:	4b91      	ldr	r3, [pc, #580]	; (8007384 <LEDHandler+0x5c90>)
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	4b91      	ldr	r3, [pc, #580]	; (8007388 <LEDHandler+0x5c94>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2002      	movs	r0, #2
 8007146:	f002 ff3f 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 800714a:	4b8d      	ldr	r3, [pc, #564]	; (8007380 <LEDHandler+0x5c8c>)
 800714c:	6819      	ldr	r1, [r3, #0]
 800714e:	4b8d      	ldr	r3, [pc, #564]	; (8007384 <LEDHandler+0x5c90>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b8d      	ldr	r3, [pc, #564]	; (8007388 <LEDHandler+0x5c94>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2003      	movs	r0, #3
 8007158:	f002 ff36 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 800715c:	4b88      	ldr	r3, [pc, #544]	; (8007380 <LEDHandler+0x5c8c>)
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	4b88      	ldr	r3, [pc, #544]	; (8007384 <LEDHandler+0x5c90>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	4b88      	ldr	r3, [pc, #544]	; (8007388 <LEDHandler+0x5c94>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2004      	movs	r0, #4
 800716a:	f002 ff2d 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 800716e:	4b84      	ldr	r3, [pc, #528]	; (8007380 <LEDHandler+0x5c8c>)
 8007170:	6819      	ldr	r1, [r3, #0]
 8007172:	4b84      	ldr	r3, [pc, #528]	; (8007384 <LEDHandler+0x5c90>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	4b84      	ldr	r3, [pc, #528]	; (8007388 <LEDHandler+0x5c94>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2005      	movs	r0, #5
 800717c:	f002 ff24 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8007180:	4b7f      	ldr	r3, [pc, #508]	; (8007380 <LEDHandler+0x5c8c>)
 8007182:	6819      	ldr	r1, [r3, #0]
 8007184:	4b7f      	ldr	r3, [pc, #508]	; (8007384 <LEDHandler+0x5c90>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	4b7f      	ldr	r3, [pc, #508]	; (8007388 <LEDHandler+0x5c94>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2006      	movs	r0, #6
 800718e:	f002 ff1b 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8007192:	2300      	movs	r3, #0
 8007194:	2200      	movs	r2, #0
 8007196:	2100      	movs	r1, #0
 8007198:	2007      	movs	r0, #7
 800719a:	f002 ff15 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 800719e:	2300      	movs	r3, #0
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	2008      	movs	r0, #8
 80071a6:	f002 ff0f 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 80071aa:	2300      	movs	r3, #0
 80071ac:	2200      	movs	r2, #0
 80071ae:	2100      	movs	r1, #0
 80071b0:	2009      	movs	r0, #9
 80071b2:	f002 ff09 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80071b6:	2300      	movs	r3, #0
 80071b8:	2200      	movs	r2, #0
 80071ba:	2100      	movs	r1, #0
 80071bc:	200a      	movs	r0, #10
 80071be:	f002 ff03 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80071c2:	2300      	movs	r3, #0
 80071c4:	2200      	movs	r2, #0
 80071c6:	2100      	movs	r1, #0
 80071c8:	200b      	movs	r0, #11
 80071ca:	f002 fefd 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 80071ce:	2300      	movs	r3, #0
 80071d0:	2200      	movs	r2, #0
 80071d2:	2100      	movs	r1, #0
 80071d4:	200c      	movs	r0, #12
 80071d6:	f002 fef7 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80071da:	2300      	movs	r3, #0
 80071dc:	2200      	movs	r2, #0
 80071de:	2100      	movs	r1, #0
 80071e0:	200d      	movs	r0, #13
 80071e2:	f002 fef1 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 80071e6:	2300      	movs	r3, #0
 80071e8:	2200      	movs	r2, #0
 80071ea:	2100      	movs	r1, #0
 80071ec:	200e      	movs	r0, #14
 80071ee:	f002 feeb 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80071f2:	2300      	movs	r3, #0
 80071f4:	2200      	movs	r2, #0
 80071f6:	2100      	movs	r1, #0
 80071f8:	200f      	movs	r0, #15
 80071fa:	f002 fee5 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80071fe:	2300      	movs	r3, #0
 8007200:	2200      	movs	r2, #0
 8007202:	2100      	movs	r1, #0
 8007204:	2010      	movs	r0, #16
 8007206:	f002 fedf 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 800720a:	2300      	movs	r3, #0
 800720c:	2200      	movs	r2, #0
 800720e:	2100      	movs	r1, #0
 8007210:	2011      	movs	r0, #17
 8007212:	f002 fed9 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8007216:	2300      	movs	r3, #0
 8007218:	2200      	movs	r2, #0
 800721a:	2100      	movs	r1, #0
 800721c:	2012      	movs	r0, #18
 800721e:	f002 fed3 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8007222:	2300      	movs	r3, #0
 8007224:	2200      	movs	r2, #0
 8007226:	2100      	movs	r1, #0
 8007228:	2013      	movs	r0, #19
 800722a:	f002 fecd 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 800722e:	2300      	movs	r3, #0
 8007230:	2200      	movs	r2, #0
 8007232:	2100      	movs	r1, #0
 8007234:	2014      	movs	r0, #20
 8007236:	f002 fec7 	bl	8009fc8 <Set_LED>
 800723a:	f002 be10 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (Valor >= 36 && Valor < 41) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b23      	cmp	r3, #35	; 0x23
 8007242:	f340 80a3 	ble.w	800738c <LEDHandler+0x5c98>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b28      	cmp	r3, #40	; 0x28
 800724a:	f300 809f 	bgt.w	800738c <LEDHandler+0x5c98>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 800724e:	4b4c      	ldr	r3, [pc, #304]	; (8007380 <LEDHandler+0x5c8c>)
 8007250:	6819      	ldr	r1, [r3, #0]
 8007252:	4b4c      	ldr	r3, [pc, #304]	; (8007384 <LEDHandler+0x5c90>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	4b4c      	ldr	r3, [pc, #304]	; (8007388 <LEDHandler+0x5c94>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2000      	movs	r0, #0
 800725c:	f002 feb4 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8007260:	4b47      	ldr	r3, [pc, #284]	; (8007380 <LEDHandler+0x5c8c>)
 8007262:	6819      	ldr	r1, [r3, #0]
 8007264:	4b47      	ldr	r3, [pc, #284]	; (8007384 <LEDHandler+0x5c90>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	4b47      	ldr	r3, [pc, #284]	; (8007388 <LEDHandler+0x5c94>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2001      	movs	r0, #1
 800726e:	f002 feab 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007272:	4b43      	ldr	r3, [pc, #268]	; (8007380 <LEDHandler+0x5c8c>)
 8007274:	6819      	ldr	r1, [r3, #0]
 8007276:	4b43      	ldr	r3, [pc, #268]	; (8007384 <LEDHandler+0x5c90>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b43      	ldr	r3, [pc, #268]	; (8007388 <LEDHandler+0x5c94>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2002      	movs	r0, #2
 8007280:	f002 fea2 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8007284:	4b3e      	ldr	r3, [pc, #248]	; (8007380 <LEDHandler+0x5c8c>)
 8007286:	6819      	ldr	r1, [r3, #0]
 8007288:	4b3e      	ldr	r3, [pc, #248]	; (8007384 <LEDHandler+0x5c90>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4b3e      	ldr	r3, [pc, #248]	; (8007388 <LEDHandler+0x5c94>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2003      	movs	r0, #3
 8007292:	f002 fe99 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8007296:	4b3a      	ldr	r3, [pc, #232]	; (8007380 <LEDHandler+0x5c8c>)
 8007298:	6819      	ldr	r1, [r3, #0]
 800729a:	4b3a      	ldr	r3, [pc, #232]	; (8007384 <LEDHandler+0x5c90>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b3a      	ldr	r3, [pc, #232]	; (8007388 <LEDHandler+0x5c94>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2004      	movs	r0, #4
 80072a4:	f002 fe90 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 80072a8:	4b35      	ldr	r3, [pc, #212]	; (8007380 <LEDHandler+0x5c8c>)
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	4b35      	ldr	r3, [pc, #212]	; (8007384 <LEDHandler+0x5c90>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	4b35      	ldr	r3, [pc, #212]	; (8007388 <LEDHandler+0x5c94>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2005      	movs	r0, #5
 80072b6:	f002 fe87 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 80072ba:	4b31      	ldr	r3, [pc, #196]	; (8007380 <LEDHandler+0x5c8c>)
 80072bc:	6819      	ldr	r1, [r3, #0]
 80072be:	4b31      	ldr	r3, [pc, #196]	; (8007384 <LEDHandler+0x5c90>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4b31      	ldr	r3, [pc, #196]	; (8007388 <LEDHandler+0x5c94>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2006      	movs	r0, #6
 80072c8:	f002 fe7e 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 80072cc:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <LEDHandler+0x5c8c>)
 80072ce:	6819      	ldr	r1, [r3, #0]
 80072d0:	4b2c      	ldr	r3, [pc, #176]	; (8007384 <LEDHandler+0x5c90>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	4b2c      	ldr	r3, [pc, #176]	; (8007388 <LEDHandler+0x5c94>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2007      	movs	r0, #7
 80072da:	f002 fe75 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 80072de:	2300      	movs	r3, #0
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	2008      	movs	r0, #8
 80072e6:	f002 fe6f 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 80072ea:	2300      	movs	r3, #0
 80072ec:	2200      	movs	r2, #0
 80072ee:	2100      	movs	r1, #0
 80072f0:	2009      	movs	r0, #9
 80072f2:	f002 fe69 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80072f6:	2300      	movs	r3, #0
 80072f8:	2200      	movs	r2, #0
 80072fa:	2100      	movs	r1, #0
 80072fc:	200a      	movs	r0, #10
 80072fe:	f002 fe63 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	2100      	movs	r1, #0
 8007308:	200b      	movs	r0, #11
 800730a:	f002 fe5d 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800730e:	2300      	movs	r3, #0
 8007310:	2200      	movs	r2, #0
 8007312:	2100      	movs	r1, #0
 8007314:	200c      	movs	r0, #12
 8007316:	f002 fe57 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 800731a:	2300      	movs	r3, #0
 800731c:	2200      	movs	r2, #0
 800731e:	2100      	movs	r1, #0
 8007320:	200d      	movs	r0, #13
 8007322:	f002 fe51 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8007326:	2300      	movs	r3, #0
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	200e      	movs	r0, #14
 800732e:	f002 fe4b 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8007332:	2300      	movs	r3, #0
 8007334:	2200      	movs	r2, #0
 8007336:	2100      	movs	r1, #0
 8007338:	200f      	movs	r0, #15
 800733a:	f002 fe45 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800733e:	2300      	movs	r3, #0
 8007340:	2200      	movs	r2, #0
 8007342:	2100      	movs	r1, #0
 8007344:	2010      	movs	r0, #16
 8007346:	f002 fe3f 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 800734a:	2300      	movs	r3, #0
 800734c:	2200      	movs	r2, #0
 800734e:	2100      	movs	r1, #0
 8007350:	2011      	movs	r0, #17
 8007352:	f002 fe39 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8007356:	2300      	movs	r3, #0
 8007358:	2200      	movs	r2, #0
 800735a:	2100      	movs	r1, #0
 800735c:	2012      	movs	r0, #18
 800735e:	f002 fe33 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8007362:	2300      	movs	r3, #0
 8007364:	2200      	movs	r2, #0
 8007366:	2100      	movs	r1, #0
 8007368:	2013      	movs	r0, #19
 800736a:	f002 fe2d 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 800736e:	2300      	movs	r3, #0
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	2014      	movs	r0, #20
 8007376:	f002 fe27 	bl	8009fc8 <Set_LED>
 800737a:	f002 bd70 	b.w	8009e5e <LEDHandler+0x876a>
 800737e:	bf00      	nop
 8007380:	20000008 	.word	0x20000008
 8007384:	2000000c 	.word	0x2000000c
 8007388:	20000010 	.word	0x20000010


		} else if (Valor >= 41 && Valor < 46) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b28      	cmp	r3, #40	; 0x28
 8007390:	f340 809f 	ble.w	80074d2 <LEDHandler+0x5dde>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b2d      	cmp	r3, #45	; 0x2d
 8007398:	f300 809b 	bgt.w	80074d2 <LEDHandler+0x5dde>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 800739c:	4ba0      	ldr	r3, [pc, #640]	; (8007620 <LEDHandler+0x5f2c>)
 800739e:	6819      	ldr	r1, [r3, #0]
 80073a0:	4ba0      	ldr	r3, [pc, #640]	; (8007624 <LEDHandler+0x5f30>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	4ba0      	ldr	r3, [pc, #640]	; (8007628 <LEDHandler+0x5f34>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2000      	movs	r0, #0
 80073aa:	f002 fe0d 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80073ae:	4b9c      	ldr	r3, [pc, #624]	; (8007620 <LEDHandler+0x5f2c>)
 80073b0:	6819      	ldr	r1, [r3, #0]
 80073b2:	4b9c      	ldr	r3, [pc, #624]	; (8007624 <LEDHandler+0x5f30>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b9c      	ldr	r3, [pc, #624]	; (8007628 <LEDHandler+0x5f34>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2001      	movs	r0, #1
 80073bc:	f002 fe04 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80073c0:	4b97      	ldr	r3, [pc, #604]	; (8007620 <LEDHandler+0x5f2c>)
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	4b97      	ldr	r3, [pc, #604]	; (8007624 <LEDHandler+0x5f30>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	4b97      	ldr	r3, [pc, #604]	; (8007628 <LEDHandler+0x5f34>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2002      	movs	r0, #2
 80073ce:	f002 fdfb 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 80073d2:	4b93      	ldr	r3, [pc, #588]	; (8007620 <LEDHandler+0x5f2c>)
 80073d4:	6819      	ldr	r1, [r3, #0]
 80073d6:	4b93      	ldr	r3, [pc, #588]	; (8007624 <LEDHandler+0x5f30>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4b93      	ldr	r3, [pc, #588]	; (8007628 <LEDHandler+0x5f34>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2003      	movs	r0, #3
 80073e0:	f002 fdf2 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 80073e4:	4b8e      	ldr	r3, [pc, #568]	; (8007620 <LEDHandler+0x5f2c>)
 80073e6:	6819      	ldr	r1, [r3, #0]
 80073e8:	4b8e      	ldr	r3, [pc, #568]	; (8007624 <LEDHandler+0x5f30>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	4b8e      	ldr	r3, [pc, #568]	; (8007628 <LEDHandler+0x5f34>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2004      	movs	r0, #4
 80073f2:	f002 fde9 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 80073f6:	4b8a      	ldr	r3, [pc, #552]	; (8007620 <LEDHandler+0x5f2c>)
 80073f8:	6819      	ldr	r1, [r3, #0]
 80073fa:	4b8a      	ldr	r3, [pc, #552]	; (8007624 <LEDHandler+0x5f30>)
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4b8a      	ldr	r3, [pc, #552]	; (8007628 <LEDHandler+0x5f34>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2005      	movs	r0, #5
 8007404:	f002 fde0 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8007408:	4b85      	ldr	r3, [pc, #532]	; (8007620 <LEDHandler+0x5f2c>)
 800740a:	6819      	ldr	r1, [r3, #0]
 800740c:	4b85      	ldr	r3, [pc, #532]	; (8007624 <LEDHandler+0x5f30>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	4b85      	ldr	r3, [pc, #532]	; (8007628 <LEDHandler+0x5f34>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2006      	movs	r0, #6
 8007416:	f002 fdd7 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 800741a:	4b81      	ldr	r3, [pc, #516]	; (8007620 <LEDHandler+0x5f2c>)
 800741c:	6819      	ldr	r1, [r3, #0]
 800741e:	4b81      	ldr	r3, [pc, #516]	; (8007624 <LEDHandler+0x5f30>)
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4b81      	ldr	r3, [pc, #516]	; (8007628 <LEDHandler+0x5f34>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2007      	movs	r0, #7
 8007428:	f002 fdce 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 800742c:	4b7c      	ldr	r3, [pc, #496]	; (8007620 <LEDHandler+0x5f2c>)
 800742e:	6819      	ldr	r1, [r3, #0]
 8007430:	4b7c      	ldr	r3, [pc, #496]	; (8007624 <LEDHandler+0x5f30>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	4b7c      	ldr	r3, [pc, #496]	; (8007628 <LEDHandler+0x5f34>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2008      	movs	r0, #8
 800743a:	f002 fdc5 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 800743e:	2300      	movs	r3, #0
 8007440:	2200      	movs	r2, #0
 8007442:	2100      	movs	r1, #0
 8007444:	2009      	movs	r0, #9
 8007446:	f002 fdbf 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800744a:	2300      	movs	r3, #0
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	200a      	movs	r0, #10
 8007452:	f002 fdb9 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8007456:	2300      	movs	r3, #0
 8007458:	2200      	movs	r2, #0
 800745a:	2100      	movs	r1, #0
 800745c:	200b      	movs	r0, #11
 800745e:	f002 fdb3 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8007462:	2300      	movs	r3, #0
 8007464:	2200      	movs	r2, #0
 8007466:	2100      	movs	r1, #0
 8007468:	200c      	movs	r0, #12
 800746a:	f002 fdad 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 800746e:	2300      	movs	r3, #0
 8007470:	2200      	movs	r2, #0
 8007472:	2100      	movs	r1, #0
 8007474:	200d      	movs	r0, #13
 8007476:	f002 fda7 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	200e      	movs	r0, #14
 8007482:	f002 fda1 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8007486:	2300      	movs	r3, #0
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	200f      	movs	r0, #15
 800748e:	f002 fd9b 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8007492:	2300      	movs	r3, #0
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	2010      	movs	r0, #16
 800749a:	f002 fd95 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 800749e:	2300      	movs	r3, #0
 80074a0:	2200      	movs	r2, #0
 80074a2:	2100      	movs	r1, #0
 80074a4:	2011      	movs	r0, #17
 80074a6:	f002 fd8f 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80074aa:	2300      	movs	r3, #0
 80074ac:	2200      	movs	r2, #0
 80074ae:	2100      	movs	r1, #0
 80074b0:	2012      	movs	r0, #18
 80074b2:	f002 fd89 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80074b6:	2300      	movs	r3, #0
 80074b8:	2200      	movs	r2, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	2013      	movs	r0, #19
 80074be:	f002 fd83 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80074c2:	2300      	movs	r3, #0
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	2014      	movs	r0, #20
 80074ca:	f002 fd7d 	bl	8009fc8 <Set_LED>
 80074ce:	f002 bcc6 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (Valor >= 46 && Valor < 51) {
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b2d      	cmp	r3, #45	; 0x2d
 80074d6:	f340 80a9 	ble.w	800762c <LEDHandler+0x5f38>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b32      	cmp	r3, #50	; 0x32
 80074de:	f300 80a5 	bgt.w	800762c <LEDHandler+0x5f38>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80074e2:	4b4f      	ldr	r3, [pc, #316]	; (8007620 <LEDHandler+0x5f2c>)
 80074e4:	6819      	ldr	r1, [r3, #0]
 80074e6:	4b4f      	ldr	r3, [pc, #316]	; (8007624 <LEDHandler+0x5f30>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b4f      	ldr	r3, [pc, #316]	; (8007628 <LEDHandler+0x5f34>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2000      	movs	r0, #0
 80074f0:	f002 fd6a 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80074f4:	4b4a      	ldr	r3, [pc, #296]	; (8007620 <LEDHandler+0x5f2c>)
 80074f6:	6819      	ldr	r1, [r3, #0]
 80074f8:	4b4a      	ldr	r3, [pc, #296]	; (8007624 <LEDHandler+0x5f30>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	4b4a      	ldr	r3, [pc, #296]	; (8007628 <LEDHandler+0x5f34>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2001      	movs	r0, #1
 8007502:	f002 fd61 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007506:	4b46      	ldr	r3, [pc, #280]	; (8007620 <LEDHandler+0x5f2c>)
 8007508:	6819      	ldr	r1, [r3, #0]
 800750a:	4b46      	ldr	r3, [pc, #280]	; (8007624 <LEDHandler+0x5f30>)
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4b46      	ldr	r3, [pc, #280]	; (8007628 <LEDHandler+0x5f34>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2002      	movs	r0, #2
 8007514:	f002 fd58 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8007518:	4b41      	ldr	r3, [pc, #260]	; (8007620 <LEDHandler+0x5f2c>)
 800751a:	6819      	ldr	r1, [r3, #0]
 800751c:	4b41      	ldr	r3, [pc, #260]	; (8007624 <LEDHandler+0x5f30>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4b41      	ldr	r3, [pc, #260]	; (8007628 <LEDHandler+0x5f34>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2003      	movs	r0, #3
 8007526:	f002 fd4f 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 800752a:	4b3d      	ldr	r3, [pc, #244]	; (8007620 <LEDHandler+0x5f2c>)
 800752c:	6819      	ldr	r1, [r3, #0]
 800752e:	4b3d      	ldr	r3, [pc, #244]	; (8007624 <LEDHandler+0x5f30>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4b3d      	ldr	r3, [pc, #244]	; (8007628 <LEDHandler+0x5f34>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2004      	movs	r0, #4
 8007538:	f002 fd46 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 800753c:	4b38      	ldr	r3, [pc, #224]	; (8007620 <LEDHandler+0x5f2c>)
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	4b38      	ldr	r3, [pc, #224]	; (8007624 <LEDHandler+0x5f30>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b38      	ldr	r3, [pc, #224]	; (8007628 <LEDHandler+0x5f34>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2005      	movs	r0, #5
 800754a:	f002 fd3d 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 800754e:	4b34      	ldr	r3, [pc, #208]	; (8007620 <LEDHandler+0x5f2c>)
 8007550:	6819      	ldr	r1, [r3, #0]
 8007552:	4b34      	ldr	r3, [pc, #208]	; (8007624 <LEDHandler+0x5f30>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b34      	ldr	r3, [pc, #208]	; (8007628 <LEDHandler+0x5f34>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2006      	movs	r0, #6
 800755c:	f002 fd34 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8007560:	4b2f      	ldr	r3, [pc, #188]	; (8007620 <LEDHandler+0x5f2c>)
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <LEDHandler+0x5f30>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	4b2f      	ldr	r3, [pc, #188]	; (8007628 <LEDHandler+0x5f34>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2007      	movs	r0, #7
 800756e:	f002 fd2b 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8007572:	4b2b      	ldr	r3, [pc, #172]	; (8007620 <LEDHandler+0x5f2c>)
 8007574:	6819      	ldr	r1, [r3, #0]
 8007576:	4b2b      	ldr	r3, [pc, #172]	; (8007624 <LEDHandler+0x5f30>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b2b      	ldr	r3, [pc, #172]	; (8007628 <LEDHandler+0x5f34>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2008      	movs	r0, #8
 8007580:	f002 fd22 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8007584:	4b26      	ldr	r3, [pc, #152]	; (8007620 <LEDHandler+0x5f2c>)
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	4b26      	ldr	r3, [pc, #152]	; (8007624 <LEDHandler+0x5f30>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	4b26      	ldr	r3, [pc, #152]	; (8007628 <LEDHandler+0x5f34>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2009      	movs	r0, #9
 8007592:	f002 fd19 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8007596:	2300      	movs	r3, #0
 8007598:	2200      	movs	r2, #0
 800759a:	2100      	movs	r1, #0
 800759c:	200a      	movs	r0, #10
 800759e:	f002 fd13 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80075a2:	2300      	movs	r3, #0
 80075a4:	2200      	movs	r2, #0
 80075a6:	2100      	movs	r1, #0
 80075a8:	200b      	movs	r0, #11
 80075aa:	f002 fd0d 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 80075ae:	2300      	movs	r3, #0
 80075b0:	2200      	movs	r2, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	200c      	movs	r0, #12
 80075b6:	f002 fd07 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80075ba:	2300      	movs	r3, #0
 80075bc:	2200      	movs	r2, #0
 80075be:	2100      	movs	r1, #0
 80075c0:	200d      	movs	r0, #13
 80075c2:	f002 fd01 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 80075c6:	2300      	movs	r3, #0
 80075c8:	2200      	movs	r2, #0
 80075ca:	2100      	movs	r1, #0
 80075cc:	200e      	movs	r0, #14
 80075ce:	f002 fcfb 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80075d2:	2300      	movs	r3, #0
 80075d4:	2200      	movs	r2, #0
 80075d6:	2100      	movs	r1, #0
 80075d8:	200f      	movs	r0, #15
 80075da:	f002 fcf5 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80075de:	2300      	movs	r3, #0
 80075e0:	2200      	movs	r2, #0
 80075e2:	2100      	movs	r1, #0
 80075e4:	2010      	movs	r0, #16
 80075e6:	f002 fcef 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	2011      	movs	r0, #17
 80075f2:	f002 fce9 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80075f6:	2300      	movs	r3, #0
 80075f8:	2200      	movs	r2, #0
 80075fa:	2100      	movs	r1, #0
 80075fc:	2012      	movs	r0, #18
 80075fe:	f002 fce3 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8007602:	2300      	movs	r3, #0
 8007604:	2200      	movs	r2, #0
 8007606:	2100      	movs	r1, #0
 8007608:	2013      	movs	r0, #19
 800760a:	f002 fcdd 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 800760e:	2300      	movs	r3, #0
 8007610:	2200      	movs	r2, #0
 8007612:	2100      	movs	r1, #0
 8007614:	2014      	movs	r0, #20
 8007616:	f002 fcd7 	bl	8009fc8 <Set_LED>
 800761a:	f002 bc20 	b.w	8009e5e <LEDHandler+0x876a>
 800761e:	bf00      	nop
 8007620:	20000008 	.word	0x20000008
 8007624:	2000000c 	.word	0x2000000c
 8007628:	20000010 	.word	0x20000010


		} else if (Valor >= 51 && Valor < 56) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b32      	cmp	r3, #50	; 0x32
 8007630:	f340 80a5 	ble.w	800777e <LEDHandler+0x608a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b37      	cmp	r3, #55	; 0x37
 8007638:	f300 80a1 	bgt.w	800777e <LEDHandler+0x608a>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 800763c:	4ba6      	ldr	r3, [pc, #664]	; (80078d8 <LEDHandler+0x61e4>)
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	4ba6      	ldr	r3, [pc, #664]	; (80078dc <LEDHandler+0x61e8>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4ba6      	ldr	r3, [pc, #664]	; (80078e0 <LEDHandler+0x61ec>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2000      	movs	r0, #0
 800764a:	f002 fcbd 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 800764e:	4ba2      	ldr	r3, [pc, #648]	; (80078d8 <LEDHandler+0x61e4>)
 8007650:	6819      	ldr	r1, [r3, #0]
 8007652:	4ba2      	ldr	r3, [pc, #648]	; (80078dc <LEDHandler+0x61e8>)
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4ba2      	ldr	r3, [pc, #648]	; (80078e0 <LEDHandler+0x61ec>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2001      	movs	r0, #1
 800765c:	f002 fcb4 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007660:	4b9d      	ldr	r3, [pc, #628]	; (80078d8 <LEDHandler+0x61e4>)
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	4b9d      	ldr	r3, [pc, #628]	; (80078dc <LEDHandler+0x61e8>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	4b9d      	ldr	r3, [pc, #628]	; (80078e0 <LEDHandler+0x61ec>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2002      	movs	r0, #2
 800766e:	f002 fcab 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8007672:	4b99      	ldr	r3, [pc, #612]	; (80078d8 <LEDHandler+0x61e4>)
 8007674:	6819      	ldr	r1, [r3, #0]
 8007676:	4b99      	ldr	r3, [pc, #612]	; (80078dc <LEDHandler+0x61e8>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4b99      	ldr	r3, [pc, #612]	; (80078e0 <LEDHandler+0x61ec>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2003      	movs	r0, #3
 8007680:	f002 fca2 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8007684:	4b94      	ldr	r3, [pc, #592]	; (80078d8 <LEDHandler+0x61e4>)
 8007686:	6819      	ldr	r1, [r3, #0]
 8007688:	4b94      	ldr	r3, [pc, #592]	; (80078dc <LEDHandler+0x61e8>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	4b94      	ldr	r3, [pc, #592]	; (80078e0 <LEDHandler+0x61ec>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2004      	movs	r0, #4
 8007692:	f002 fc99 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8007696:	4b90      	ldr	r3, [pc, #576]	; (80078d8 <LEDHandler+0x61e4>)
 8007698:	6819      	ldr	r1, [r3, #0]
 800769a:	4b90      	ldr	r3, [pc, #576]	; (80078dc <LEDHandler+0x61e8>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	4b90      	ldr	r3, [pc, #576]	; (80078e0 <LEDHandler+0x61ec>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2005      	movs	r0, #5
 80076a4:	f002 fc90 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 80076a8:	4b8b      	ldr	r3, [pc, #556]	; (80078d8 <LEDHandler+0x61e4>)
 80076aa:	6819      	ldr	r1, [r3, #0]
 80076ac:	4b8b      	ldr	r3, [pc, #556]	; (80078dc <LEDHandler+0x61e8>)
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b8b      	ldr	r3, [pc, #556]	; (80078e0 <LEDHandler+0x61ec>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2006      	movs	r0, #6
 80076b6:	f002 fc87 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 80076ba:	4b87      	ldr	r3, [pc, #540]	; (80078d8 <LEDHandler+0x61e4>)
 80076bc:	6819      	ldr	r1, [r3, #0]
 80076be:	4b87      	ldr	r3, [pc, #540]	; (80078dc <LEDHandler+0x61e8>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4b87      	ldr	r3, [pc, #540]	; (80078e0 <LEDHandler+0x61ec>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2007      	movs	r0, #7
 80076c8:	f002 fc7e 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 80076cc:	4b82      	ldr	r3, [pc, #520]	; (80078d8 <LEDHandler+0x61e4>)
 80076ce:	6819      	ldr	r1, [r3, #0]
 80076d0:	4b82      	ldr	r3, [pc, #520]	; (80078dc <LEDHandler+0x61e8>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	4b82      	ldr	r3, [pc, #520]	; (80078e0 <LEDHandler+0x61ec>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2008      	movs	r0, #8
 80076da:	f002 fc75 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 80076de:	4b7e      	ldr	r3, [pc, #504]	; (80078d8 <LEDHandler+0x61e4>)
 80076e0:	6819      	ldr	r1, [r3, #0]
 80076e2:	4b7e      	ldr	r3, [pc, #504]	; (80078dc <LEDHandler+0x61e8>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	4b7e      	ldr	r3, [pc, #504]	; (80078e0 <LEDHandler+0x61ec>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2009      	movs	r0, #9
 80076ec:	f002 fc6c 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 80076f0:	4b79      	ldr	r3, [pc, #484]	; (80078d8 <LEDHandler+0x61e4>)
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	4b79      	ldr	r3, [pc, #484]	; (80078dc <LEDHandler+0x61e8>)
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	4b79      	ldr	r3, [pc, #484]	; (80078e0 <LEDHandler+0x61ec>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	200a      	movs	r0, #10
 80076fe:	f002 fc63 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8007702:	2300      	movs	r3, #0
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	200b      	movs	r0, #11
 800770a:	f002 fc5d 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800770e:	2300      	movs	r3, #0
 8007710:	2200      	movs	r2, #0
 8007712:	2100      	movs	r1, #0
 8007714:	200c      	movs	r0, #12
 8007716:	f002 fc57 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 800771a:	2300      	movs	r3, #0
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	200d      	movs	r0, #13
 8007722:	f002 fc51 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8007726:	2300      	movs	r3, #0
 8007728:	2200      	movs	r2, #0
 800772a:	2100      	movs	r1, #0
 800772c:	200e      	movs	r0, #14
 800772e:	f002 fc4b 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8007732:	2300      	movs	r3, #0
 8007734:	2200      	movs	r2, #0
 8007736:	2100      	movs	r1, #0
 8007738:	200f      	movs	r0, #15
 800773a:	f002 fc45 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800773e:	2300      	movs	r3, #0
 8007740:	2200      	movs	r2, #0
 8007742:	2100      	movs	r1, #0
 8007744:	2010      	movs	r0, #16
 8007746:	f002 fc3f 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 800774a:	2300      	movs	r3, #0
 800774c:	2200      	movs	r2, #0
 800774e:	2100      	movs	r1, #0
 8007750:	2011      	movs	r0, #17
 8007752:	f002 fc39 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8007756:	2300      	movs	r3, #0
 8007758:	2200      	movs	r2, #0
 800775a:	2100      	movs	r1, #0
 800775c:	2012      	movs	r0, #18
 800775e:	f002 fc33 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8007762:	2300      	movs	r3, #0
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	2013      	movs	r0, #19
 800776a:	f002 fc2d 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 800776e:	2300      	movs	r3, #0
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	2014      	movs	r0, #20
 8007776:	f002 fc27 	bl	8009fc8 <Set_LED>
 800777a:	f002 bb70 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (Valor >= 56 && Valor < 61) {
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b37      	cmp	r3, #55	; 0x37
 8007782:	f340 80af 	ble.w	80078e4 <LEDHandler+0x61f0>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b3c      	cmp	r3, #60	; 0x3c
 800778a:	f300 80ab 	bgt.w	80078e4 <LEDHandler+0x61f0>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 800778e:	4b52      	ldr	r3, [pc, #328]	; (80078d8 <LEDHandler+0x61e4>)
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	4b52      	ldr	r3, [pc, #328]	; (80078dc <LEDHandler+0x61e8>)
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	4b52      	ldr	r3, [pc, #328]	; (80078e0 <LEDHandler+0x61ec>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2000      	movs	r0, #0
 800779c:	f002 fc14 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80077a0:	4b4d      	ldr	r3, [pc, #308]	; (80078d8 <LEDHandler+0x61e4>)
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	4b4d      	ldr	r3, [pc, #308]	; (80078dc <LEDHandler+0x61e8>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	4b4d      	ldr	r3, [pc, #308]	; (80078e0 <LEDHandler+0x61ec>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2001      	movs	r0, #1
 80077ae:	f002 fc0b 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80077b2:	4b49      	ldr	r3, [pc, #292]	; (80078d8 <LEDHandler+0x61e4>)
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	4b49      	ldr	r3, [pc, #292]	; (80078dc <LEDHandler+0x61e8>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b49      	ldr	r3, [pc, #292]	; (80078e0 <LEDHandler+0x61ec>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2002      	movs	r0, #2
 80077c0:	f002 fc02 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 80077c4:	4b44      	ldr	r3, [pc, #272]	; (80078d8 <LEDHandler+0x61e4>)
 80077c6:	6819      	ldr	r1, [r3, #0]
 80077c8:	4b44      	ldr	r3, [pc, #272]	; (80078dc <LEDHandler+0x61e8>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4b44      	ldr	r3, [pc, #272]	; (80078e0 <LEDHandler+0x61ec>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2003      	movs	r0, #3
 80077d2:	f002 fbf9 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 80077d6:	4b40      	ldr	r3, [pc, #256]	; (80078d8 <LEDHandler+0x61e4>)
 80077d8:	6819      	ldr	r1, [r3, #0]
 80077da:	4b40      	ldr	r3, [pc, #256]	; (80078dc <LEDHandler+0x61e8>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b40      	ldr	r3, [pc, #256]	; (80078e0 <LEDHandler+0x61ec>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2004      	movs	r0, #4
 80077e4:	f002 fbf0 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 80077e8:	4b3b      	ldr	r3, [pc, #236]	; (80078d8 <LEDHandler+0x61e4>)
 80077ea:	6819      	ldr	r1, [r3, #0]
 80077ec:	4b3b      	ldr	r3, [pc, #236]	; (80078dc <LEDHandler+0x61e8>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b3b      	ldr	r3, [pc, #236]	; (80078e0 <LEDHandler+0x61ec>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2005      	movs	r0, #5
 80077f6:	f002 fbe7 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 80077fa:	4b37      	ldr	r3, [pc, #220]	; (80078d8 <LEDHandler+0x61e4>)
 80077fc:	6819      	ldr	r1, [r3, #0]
 80077fe:	4b37      	ldr	r3, [pc, #220]	; (80078dc <LEDHandler+0x61e8>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b37      	ldr	r3, [pc, #220]	; (80078e0 <LEDHandler+0x61ec>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2006      	movs	r0, #6
 8007808:	f002 fbde 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 800780c:	4b32      	ldr	r3, [pc, #200]	; (80078d8 <LEDHandler+0x61e4>)
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	4b32      	ldr	r3, [pc, #200]	; (80078dc <LEDHandler+0x61e8>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	4b32      	ldr	r3, [pc, #200]	; (80078e0 <LEDHandler+0x61ec>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2007      	movs	r0, #7
 800781a:	f002 fbd5 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 800781e:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <LEDHandler+0x61e4>)
 8007820:	6819      	ldr	r1, [r3, #0]
 8007822:	4b2e      	ldr	r3, [pc, #184]	; (80078dc <LEDHandler+0x61e8>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b2e      	ldr	r3, [pc, #184]	; (80078e0 <LEDHandler+0x61ec>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2008      	movs	r0, #8
 800782c:	f002 fbcc 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8007830:	4b29      	ldr	r3, [pc, #164]	; (80078d8 <LEDHandler+0x61e4>)
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	4b29      	ldr	r3, [pc, #164]	; (80078dc <LEDHandler+0x61e8>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <LEDHandler+0x61ec>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2009      	movs	r0, #9
 800783e:	f002 fbc3 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8007842:	4b25      	ldr	r3, [pc, #148]	; (80078d8 <LEDHandler+0x61e4>)
 8007844:	6819      	ldr	r1, [r3, #0]
 8007846:	4b25      	ldr	r3, [pc, #148]	; (80078dc <LEDHandler+0x61e8>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <LEDHandler+0x61ec>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	200a      	movs	r0, #10
 8007850:	f002 fbba 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8007854:	4b20      	ldr	r3, [pc, #128]	; (80078d8 <LEDHandler+0x61e4>)
 8007856:	6819      	ldr	r1, [r3, #0]
 8007858:	4b20      	ldr	r3, [pc, #128]	; (80078dc <LEDHandler+0x61e8>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b20      	ldr	r3, [pc, #128]	; (80078e0 <LEDHandler+0x61ec>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	200b      	movs	r0, #11
 8007862:	f002 fbb1 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8007866:	2300      	movs	r3, #0
 8007868:	2200      	movs	r2, #0
 800786a:	2100      	movs	r1, #0
 800786c:	200c      	movs	r0, #12
 800786e:	f002 fbab 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8007872:	2300      	movs	r3, #0
 8007874:	2200      	movs	r2, #0
 8007876:	2100      	movs	r1, #0
 8007878:	200d      	movs	r0, #13
 800787a:	f002 fba5 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800787e:	2300      	movs	r3, #0
 8007880:	2200      	movs	r2, #0
 8007882:	2100      	movs	r1, #0
 8007884:	200e      	movs	r0, #14
 8007886:	f002 fb9f 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800788a:	2300      	movs	r3, #0
 800788c:	2200      	movs	r2, #0
 800788e:	2100      	movs	r1, #0
 8007890:	200f      	movs	r0, #15
 8007892:	f002 fb99 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8007896:	2300      	movs	r3, #0
 8007898:	2200      	movs	r2, #0
 800789a:	2100      	movs	r1, #0
 800789c:	2010      	movs	r0, #16
 800789e:	f002 fb93 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 80078a2:	2300      	movs	r3, #0
 80078a4:	2200      	movs	r2, #0
 80078a6:	2100      	movs	r1, #0
 80078a8:	2011      	movs	r0, #17
 80078aa:	f002 fb8d 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80078ae:	2300      	movs	r3, #0
 80078b0:	2200      	movs	r2, #0
 80078b2:	2100      	movs	r1, #0
 80078b4:	2012      	movs	r0, #18
 80078b6:	f002 fb87 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80078ba:	2300      	movs	r3, #0
 80078bc:	2200      	movs	r2, #0
 80078be:	2100      	movs	r1, #0
 80078c0:	2013      	movs	r0, #19
 80078c2:	f002 fb81 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80078c6:	2300      	movs	r3, #0
 80078c8:	2200      	movs	r2, #0
 80078ca:	2100      	movs	r1, #0
 80078cc:	2014      	movs	r0, #20
 80078ce:	f002 fb7b 	bl	8009fc8 <Set_LED>
 80078d2:	f002 bac4 	b.w	8009e5e <LEDHandler+0x876a>
 80078d6:	bf00      	nop
 80078d8:	20000008 	.word	0x20000008
 80078dc:	2000000c 	.word	0x2000000c
 80078e0:	20000010 	.word	0x20000010


		} else if (Valor >= 61 && Valor < 66) {
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b3c      	cmp	r3, #60	; 0x3c
 80078e8:	f340 80b2 	ble.w	8007a50 <LEDHandler+0x635c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b41      	cmp	r3, #65	; 0x41
 80078f0:	f300 80ae 	bgt.w	8007a50 <LEDHandler+0x635c>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80078f4:	4b53      	ldr	r3, [pc, #332]	; (8007a44 <LEDHandler+0x6350>)
 80078f6:	6819      	ldr	r1, [r3, #0]
 80078f8:	4b53      	ldr	r3, [pc, #332]	; (8007a48 <LEDHandler+0x6354>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	4b53      	ldr	r3, [pc, #332]	; (8007a4c <LEDHandler+0x6358>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2000      	movs	r0, #0
 8007902:	f002 fb61 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8007906:	4b4f      	ldr	r3, [pc, #316]	; (8007a44 <LEDHandler+0x6350>)
 8007908:	6819      	ldr	r1, [r3, #0]
 800790a:	4b4f      	ldr	r3, [pc, #316]	; (8007a48 <LEDHandler+0x6354>)
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4b4f      	ldr	r3, [pc, #316]	; (8007a4c <LEDHandler+0x6358>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2001      	movs	r0, #1
 8007914:	f002 fb58 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007918:	4b4a      	ldr	r3, [pc, #296]	; (8007a44 <LEDHandler+0x6350>)
 800791a:	6819      	ldr	r1, [r3, #0]
 800791c:	4b4a      	ldr	r3, [pc, #296]	; (8007a48 <LEDHandler+0x6354>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	4b4a      	ldr	r3, [pc, #296]	; (8007a4c <LEDHandler+0x6358>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2002      	movs	r0, #2
 8007926:	f002 fb4f 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 800792a:	4b46      	ldr	r3, [pc, #280]	; (8007a44 <LEDHandler+0x6350>)
 800792c:	6819      	ldr	r1, [r3, #0]
 800792e:	4b46      	ldr	r3, [pc, #280]	; (8007a48 <LEDHandler+0x6354>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4b46      	ldr	r3, [pc, #280]	; (8007a4c <LEDHandler+0x6358>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2003      	movs	r0, #3
 8007938:	f002 fb46 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 800793c:	4b41      	ldr	r3, [pc, #260]	; (8007a44 <LEDHandler+0x6350>)
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	4b41      	ldr	r3, [pc, #260]	; (8007a48 <LEDHandler+0x6354>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	4b41      	ldr	r3, [pc, #260]	; (8007a4c <LEDHandler+0x6358>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2004      	movs	r0, #4
 800794a:	f002 fb3d 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 800794e:	4b3d      	ldr	r3, [pc, #244]	; (8007a44 <LEDHandler+0x6350>)
 8007950:	6819      	ldr	r1, [r3, #0]
 8007952:	4b3d      	ldr	r3, [pc, #244]	; (8007a48 <LEDHandler+0x6354>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4b3d      	ldr	r3, [pc, #244]	; (8007a4c <LEDHandler+0x6358>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2005      	movs	r0, #5
 800795c:	f002 fb34 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8007960:	4b38      	ldr	r3, [pc, #224]	; (8007a44 <LEDHandler+0x6350>)
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	4b38      	ldr	r3, [pc, #224]	; (8007a48 <LEDHandler+0x6354>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	4b38      	ldr	r3, [pc, #224]	; (8007a4c <LEDHandler+0x6358>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2006      	movs	r0, #6
 800796e:	f002 fb2b 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8007972:	4b34      	ldr	r3, [pc, #208]	; (8007a44 <LEDHandler+0x6350>)
 8007974:	6819      	ldr	r1, [r3, #0]
 8007976:	4b34      	ldr	r3, [pc, #208]	; (8007a48 <LEDHandler+0x6354>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b34      	ldr	r3, [pc, #208]	; (8007a4c <LEDHandler+0x6358>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2007      	movs	r0, #7
 8007980:	f002 fb22 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8007984:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <LEDHandler+0x6350>)
 8007986:	6819      	ldr	r1, [r3, #0]
 8007988:	4b2f      	ldr	r3, [pc, #188]	; (8007a48 <LEDHandler+0x6354>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	4b2f      	ldr	r3, [pc, #188]	; (8007a4c <LEDHandler+0x6358>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2008      	movs	r0, #8
 8007992:	f002 fb19 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8007996:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <LEDHandler+0x6350>)
 8007998:	6819      	ldr	r1, [r3, #0]
 800799a:	4b2b      	ldr	r3, [pc, #172]	; (8007a48 <LEDHandler+0x6354>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <LEDHandler+0x6358>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2009      	movs	r0, #9
 80079a4:	f002 fb10 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 80079a8:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <LEDHandler+0x6350>)
 80079aa:	6819      	ldr	r1, [r3, #0]
 80079ac:	4b26      	ldr	r3, [pc, #152]	; (8007a48 <LEDHandler+0x6354>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4b26      	ldr	r3, [pc, #152]	; (8007a4c <LEDHandler+0x6358>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	200a      	movs	r0, #10
 80079b6:	f002 fb07 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 80079ba:	4b22      	ldr	r3, [pc, #136]	; (8007a44 <LEDHandler+0x6350>)
 80079bc:	6819      	ldr	r1, [r3, #0]
 80079be:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <LEDHandler+0x6354>)
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <LEDHandler+0x6358>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	200b      	movs	r0, #11
 80079c8:	f002 fafe 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 80079cc:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <LEDHandler+0x6350>)
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <LEDHandler+0x6354>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <LEDHandler+0x6358>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	200c      	movs	r0, #12
 80079da:	f002 faf5 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80079de:	2300      	movs	r3, #0
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	200d      	movs	r0, #13
 80079e6:	f002 faef 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 80079ea:	2300      	movs	r3, #0
 80079ec:	2200      	movs	r2, #0
 80079ee:	2100      	movs	r1, #0
 80079f0:	200e      	movs	r0, #14
 80079f2:	f002 fae9 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80079f6:	2300      	movs	r3, #0
 80079f8:	2200      	movs	r2, #0
 80079fa:	2100      	movs	r1, #0
 80079fc:	200f      	movs	r0, #15
 80079fe:	f002 fae3 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8007a02:	2300      	movs	r3, #0
 8007a04:	2200      	movs	r2, #0
 8007a06:	2100      	movs	r1, #0
 8007a08:	2010      	movs	r0, #16
 8007a0a:	f002 fadd 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8007a0e:	2300      	movs	r3, #0
 8007a10:	2200      	movs	r2, #0
 8007a12:	2100      	movs	r1, #0
 8007a14:	2011      	movs	r0, #17
 8007a16:	f002 fad7 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2100      	movs	r1, #0
 8007a20:	2012      	movs	r0, #18
 8007a22:	f002 fad1 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8007a26:	2300      	movs	r3, #0
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	2013      	movs	r0, #19
 8007a2e:	f002 facb 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8007a32:	2300      	movs	r3, #0
 8007a34:	2200      	movs	r2, #0
 8007a36:	2100      	movs	r1, #0
 8007a38:	2014      	movs	r0, #20
 8007a3a:	f002 fac5 	bl	8009fc8 <Set_LED>
 8007a3e:	f002 ba0e 	b.w	8009e5e <LEDHandler+0x876a>
 8007a42:	bf00      	nop
 8007a44:	20000008 	.word	0x20000008
 8007a48:	2000000c 	.word	0x2000000c
 8007a4c:	20000010 	.word	0x20000010


		} else if (Valor >= 66 && Valor < 71) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b41      	cmp	r3, #65	; 0x41
 8007a54:	f340 80b4 	ble.w	8007bc0 <LEDHandler+0x64cc>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b46      	cmp	r3, #70	; 0x46
 8007a5c:	f300 80b0 	bgt.w	8007bc0 <LEDHandler+0x64cc>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8007a60:	4b54      	ldr	r3, [pc, #336]	; (8007bb4 <LEDHandler+0x64c0>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	4b54      	ldr	r3, [pc, #336]	; (8007bb8 <LEDHandler+0x64c4>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b54      	ldr	r3, [pc, #336]	; (8007bbc <LEDHandler+0x64c8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f002 faab 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8007a72:	4b50      	ldr	r3, [pc, #320]	; (8007bb4 <LEDHandler+0x64c0>)
 8007a74:	6819      	ldr	r1, [r3, #0]
 8007a76:	4b50      	ldr	r3, [pc, #320]	; (8007bb8 <LEDHandler+0x64c4>)
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	4b50      	ldr	r3, [pc, #320]	; (8007bbc <LEDHandler+0x64c8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2001      	movs	r0, #1
 8007a80:	f002 faa2 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007a84:	4b4b      	ldr	r3, [pc, #300]	; (8007bb4 <LEDHandler+0x64c0>)
 8007a86:	6819      	ldr	r1, [r3, #0]
 8007a88:	4b4b      	ldr	r3, [pc, #300]	; (8007bb8 <LEDHandler+0x64c4>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b4b      	ldr	r3, [pc, #300]	; (8007bbc <LEDHandler+0x64c8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2002      	movs	r0, #2
 8007a92:	f002 fa99 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8007a96:	4b47      	ldr	r3, [pc, #284]	; (8007bb4 <LEDHandler+0x64c0>)
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	4b47      	ldr	r3, [pc, #284]	; (8007bb8 <LEDHandler+0x64c4>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4b47      	ldr	r3, [pc, #284]	; (8007bbc <LEDHandler+0x64c8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2003      	movs	r0, #3
 8007aa4:	f002 fa90 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <LEDHandler+0x64c0>)
 8007aaa:	6819      	ldr	r1, [r3, #0]
 8007aac:	4b42      	ldr	r3, [pc, #264]	; (8007bb8 <LEDHandler+0x64c4>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4b42      	ldr	r3, [pc, #264]	; (8007bbc <LEDHandler+0x64c8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2004      	movs	r0, #4
 8007ab6:	f002 fa87 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8007aba:	4b3e      	ldr	r3, [pc, #248]	; (8007bb4 <LEDHandler+0x64c0>)
 8007abc:	6819      	ldr	r1, [r3, #0]
 8007abe:	4b3e      	ldr	r3, [pc, #248]	; (8007bb8 <LEDHandler+0x64c4>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b3e      	ldr	r3, [pc, #248]	; (8007bbc <LEDHandler+0x64c8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2005      	movs	r0, #5
 8007ac8:	f002 fa7e 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8007acc:	4b39      	ldr	r3, [pc, #228]	; (8007bb4 <LEDHandler+0x64c0>)
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	4b39      	ldr	r3, [pc, #228]	; (8007bb8 <LEDHandler+0x64c4>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	4b39      	ldr	r3, [pc, #228]	; (8007bbc <LEDHandler+0x64c8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2006      	movs	r0, #6
 8007ada:	f002 fa75 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8007ade:	4b35      	ldr	r3, [pc, #212]	; (8007bb4 <LEDHandler+0x64c0>)
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	4b35      	ldr	r3, [pc, #212]	; (8007bb8 <LEDHandler+0x64c4>)
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b35      	ldr	r3, [pc, #212]	; (8007bbc <LEDHandler+0x64c8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2007      	movs	r0, #7
 8007aec:	f002 fa6c 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8007af0:	4b30      	ldr	r3, [pc, #192]	; (8007bb4 <LEDHandler+0x64c0>)
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <LEDHandler+0x64c4>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	4b30      	ldr	r3, [pc, #192]	; (8007bbc <LEDHandler+0x64c8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2008      	movs	r0, #8
 8007afe:	f002 fa63 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8007b02:	4b2c      	ldr	r3, [pc, #176]	; (8007bb4 <LEDHandler+0x64c0>)
 8007b04:	6819      	ldr	r1, [r3, #0]
 8007b06:	4b2c      	ldr	r3, [pc, #176]	; (8007bb8 <LEDHandler+0x64c4>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	4b2c      	ldr	r3, [pc, #176]	; (8007bbc <LEDHandler+0x64c8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2009      	movs	r0, #9
 8007b10:	f002 fa5a 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8007b14:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <LEDHandler+0x64c0>)
 8007b16:	6819      	ldr	r1, [r3, #0]
 8007b18:	4b27      	ldr	r3, [pc, #156]	; (8007bb8 <LEDHandler+0x64c4>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4b27      	ldr	r3, [pc, #156]	; (8007bbc <LEDHandler+0x64c8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	200a      	movs	r0, #10
 8007b22:	f002 fa51 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8007b26:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <LEDHandler+0x64c0>)
 8007b28:	6819      	ldr	r1, [r3, #0]
 8007b2a:	4b23      	ldr	r3, [pc, #140]	; (8007bb8 <LEDHandler+0x64c4>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4b23      	ldr	r3, [pc, #140]	; (8007bbc <LEDHandler+0x64c8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	200b      	movs	r0, #11
 8007b34:	f002 fa48 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8007b38:	4b1e      	ldr	r3, [pc, #120]	; (8007bb4 <LEDHandler+0x64c0>)
 8007b3a:	6819      	ldr	r1, [r3, #0]
 8007b3c:	4b1e      	ldr	r3, [pc, #120]	; (8007bb8 <LEDHandler+0x64c4>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b1e      	ldr	r3, [pc, #120]	; (8007bbc <LEDHandler+0x64c8>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	200c      	movs	r0, #12
 8007b46:	f002 fa3f 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 8007b4a:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <LEDHandler+0x64c0>)
 8007b4c:	6819      	ldr	r1, [r3, #0]
 8007b4e:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <LEDHandler+0x64c4>)
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <LEDHandler+0x64c8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	200d      	movs	r0, #13
 8007b58:	f002 fa36 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2100      	movs	r1, #0
 8007b62:	200e      	movs	r0, #14
 8007b64:	f002 fa30 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	200f      	movs	r0, #15
 8007b70:	f002 fa2a 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8007b74:	2300      	movs	r3, #0
 8007b76:	2200      	movs	r2, #0
 8007b78:	2100      	movs	r1, #0
 8007b7a:	2010      	movs	r0, #16
 8007b7c:	f002 fa24 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8007b80:	2300      	movs	r3, #0
 8007b82:	2200      	movs	r2, #0
 8007b84:	2100      	movs	r1, #0
 8007b86:	2011      	movs	r0, #17
 8007b88:	f002 fa1e 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	2012      	movs	r0, #18
 8007b94:	f002 fa18 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8007b98:	2300      	movs	r3, #0
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	2013      	movs	r0, #19
 8007ba0:	f002 fa12 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	2014      	movs	r0, #20
 8007bac:	f002 fa0c 	bl	8009fc8 <Set_LED>
 8007bb0:	f002 b955 	b.w	8009e5e <LEDHandler+0x876a>
 8007bb4:	20000008 	.word	0x20000008
 8007bb8:	2000000c 	.word	0x2000000c
 8007bbc:	20000010 	.word	0x20000010


		} else if (Valor >= 76 && Valor < 76) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b4b      	cmp	r3, #75	; 0x4b
 8007bc4:	f340 80b8 	ble.w	8007d38 <LEDHandler+0x6644>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b4b      	cmp	r3, #75	; 0x4b
 8007bcc:	f300 80b4 	bgt.w	8007d38 <LEDHandler+0x6644>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8007bd0:	4b56      	ldr	r3, [pc, #344]	; (8007d2c <LEDHandler+0x6638>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	4b56      	ldr	r3, [pc, #344]	; (8007d30 <LEDHandler+0x663c>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	4b56      	ldr	r3, [pc, #344]	; (8007d34 <LEDHandler+0x6640>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2000      	movs	r0, #0
 8007bde:	f002 f9f3 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8007be2:	4b52      	ldr	r3, [pc, #328]	; (8007d2c <LEDHandler+0x6638>)
 8007be4:	6819      	ldr	r1, [r3, #0]
 8007be6:	4b52      	ldr	r3, [pc, #328]	; (8007d30 <LEDHandler+0x663c>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b52      	ldr	r3, [pc, #328]	; (8007d34 <LEDHandler+0x6640>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2001      	movs	r0, #1
 8007bf0:	f002 f9ea 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007bf4:	4b4d      	ldr	r3, [pc, #308]	; (8007d2c <LEDHandler+0x6638>)
 8007bf6:	6819      	ldr	r1, [r3, #0]
 8007bf8:	4b4d      	ldr	r3, [pc, #308]	; (8007d30 <LEDHandler+0x663c>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	4b4d      	ldr	r3, [pc, #308]	; (8007d34 <LEDHandler+0x6640>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2002      	movs	r0, #2
 8007c02:	f002 f9e1 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8007c06:	4b49      	ldr	r3, [pc, #292]	; (8007d2c <LEDHandler+0x6638>)
 8007c08:	6819      	ldr	r1, [r3, #0]
 8007c0a:	4b49      	ldr	r3, [pc, #292]	; (8007d30 <LEDHandler+0x663c>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b49      	ldr	r3, [pc, #292]	; (8007d34 <LEDHandler+0x6640>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2003      	movs	r0, #3
 8007c14:	f002 f9d8 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8007c18:	4b44      	ldr	r3, [pc, #272]	; (8007d2c <LEDHandler+0x6638>)
 8007c1a:	6819      	ldr	r1, [r3, #0]
 8007c1c:	4b44      	ldr	r3, [pc, #272]	; (8007d30 <LEDHandler+0x663c>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b44      	ldr	r3, [pc, #272]	; (8007d34 <LEDHandler+0x6640>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2004      	movs	r0, #4
 8007c26:	f002 f9cf 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8007c2a:	4b40      	ldr	r3, [pc, #256]	; (8007d2c <LEDHandler+0x6638>)
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	4b40      	ldr	r3, [pc, #256]	; (8007d30 <LEDHandler+0x663c>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4b40      	ldr	r3, [pc, #256]	; (8007d34 <LEDHandler+0x6640>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2005      	movs	r0, #5
 8007c38:	f002 f9c6 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8007c3c:	4b3b      	ldr	r3, [pc, #236]	; (8007d2c <LEDHandler+0x6638>)
 8007c3e:	6819      	ldr	r1, [r3, #0]
 8007c40:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <LEDHandler+0x663c>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	4b3b      	ldr	r3, [pc, #236]	; (8007d34 <LEDHandler+0x6640>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2006      	movs	r0, #6
 8007c4a:	f002 f9bd 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8007c4e:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <LEDHandler+0x6638>)
 8007c50:	6819      	ldr	r1, [r3, #0]
 8007c52:	4b37      	ldr	r3, [pc, #220]	; (8007d30 <LEDHandler+0x663c>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b37      	ldr	r3, [pc, #220]	; (8007d34 <LEDHandler+0x6640>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2007      	movs	r0, #7
 8007c5c:	f002 f9b4 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8007c60:	4b32      	ldr	r3, [pc, #200]	; (8007d2c <LEDHandler+0x6638>)
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	4b32      	ldr	r3, [pc, #200]	; (8007d30 <LEDHandler+0x663c>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	4b32      	ldr	r3, [pc, #200]	; (8007d34 <LEDHandler+0x6640>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2008      	movs	r0, #8
 8007c6e:	f002 f9ab 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8007c72:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <LEDHandler+0x6638>)
 8007c74:	6819      	ldr	r1, [r3, #0]
 8007c76:	4b2e      	ldr	r3, [pc, #184]	; (8007d30 <LEDHandler+0x663c>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b2e      	ldr	r3, [pc, #184]	; (8007d34 <LEDHandler+0x6640>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2009      	movs	r0, #9
 8007c80:	f002 f9a2 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8007c84:	4b29      	ldr	r3, [pc, #164]	; (8007d2c <LEDHandler+0x6638>)
 8007c86:	6819      	ldr	r1, [r3, #0]
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <LEDHandler+0x663c>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	4b29      	ldr	r3, [pc, #164]	; (8007d34 <LEDHandler+0x6640>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	200a      	movs	r0, #10
 8007c92:	f002 f999 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8007c96:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <LEDHandler+0x6638>)
 8007c98:	6819      	ldr	r1, [r3, #0]
 8007c9a:	4b25      	ldr	r3, [pc, #148]	; (8007d30 <LEDHandler+0x663c>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b25      	ldr	r3, [pc, #148]	; (8007d34 <LEDHandler+0x6640>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	200b      	movs	r0, #11
 8007ca4:	f002 f990 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8007ca8:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <LEDHandler+0x6638>)
 8007caa:	6819      	ldr	r1, [r3, #0]
 8007cac:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <LEDHandler+0x663c>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	4b20      	ldr	r3, [pc, #128]	; (8007d34 <LEDHandler+0x6640>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	200c      	movs	r0, #12
 8007cb6:	f002 f987 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 8007cba:	4b1c      	ldr	r3, [pc, #112]	; (8007d2c <LEDHandler+0x6638>)
 8007cbc:	6819      	ldr	r1, [r3, #0]
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <LEDHandler+0x663c>)
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <LEDHandler+0x6640>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	200d      	movs	r0, #13
 8007cc8:	f002 f97e 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 8007ccc:	4b17      	ldr	r3, [pc, #92]	; (8007d2c <LEDHandler+0x6638>)
 8007cce:	6819      	ldr	r1, [r3, #0]
 8007cd0:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <LEDHandler+0x663c>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <LEDHandler+0x6640>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	200e      	movs	r0, #14
 8007cda:	f002 f975 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	200f      	movs	r0, #15
 8007ce6:	f002 f96f 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8007cea:	2300      	movs	r3, #0
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	2010      	movs	r0, #16
 8007cf2:	f002 f969 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	2011      	movs	r0, #17
 8007cfe:	f002 f963 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8007d02:	2300      	movs	r3, #0
 8007d04:	2200      	movs	r2, #0
 8007d06:	2100      	movs	r1, #0
 8007d08:	2012      	movs	r0, #18
 8007d0a:	f002 f95d 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2200      	movs	r2, #0
 8007d12:	2100      	movs	r1, #0
 8007d14:	2013      	movs	r0, #19
 8007d16:	f002 f957 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2100      	movs	r1, #0
 8007d20:	2014      	movs	r0, #20
 8007d22:	f002 f951 	bl	8009fc8 <Set_LED>
 8007d26:	f002 b89a 	b.w	8009e5e <LEDHandler+0x876a>
 8007d2a:	bf00      	nop
 8007d2c:	20000008 	.word	0x20000008
 8007d30:	2000000c 	.word	0x2000000c
 8007d34:	20000010 	.word	0x20000010


		} else if (Valor >= 76 && Valor < 81) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b4b      	cmp	r3, #75	; 0x4b
 8007d3c:	f340 80ba 	ble.w	8007eb4 <LEDHandler+0x67c0>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b50      	cmp	r3, #80	; 0x50
 8007d44:	f300 80b6 	bgt.w	8007eb4 <LEDHandler+0x67c0>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8007d48:	4b57      	ldr	r3, [pc, #348]	; (8007ea8 <LEDHandler+0x67b4>)
 8007d4a:	6819      	ldr	r1, [r3, #0]
 8007d4c:	4b57      	ldr	r3, [pc, #348]	; (8007eac <LEDHandler+0x67b8>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4b57      	ldr	r3, [pc, #348]	; (8007eb0 <LEDHandler+0x67bc>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2000      	movs	r0, #0
 8007d56:	f002 f937 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8007d5a:	4b53      	ldr	r3, [pc, #332]	; (8007ea8 <LEDHandler+0x67b4>)
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	4b53      	ldr	r3, [pc, #332]	; (8007eac <LEDHandler+0x67b8>)
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b53      	ldr	r3, [pc, #332]	; (8007eb0 <LEDHandler+0x67bc>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2001      	movs	r0, #1
 8007d68:	f002 f92e 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007d6c:	4b4e      	ldr	r3, [pc, #312]	; (8007ea8 <LEDHandler+0x67b4>)
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	4b4e      	ldr	r3, [pc, #312]	; (8007eac <LEDHandler+0x67b8>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4b4e      	ldr	r3, [pc, #312]	; (8007eb0 <LEDHandler+0x67bc>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2002      	movs	r0, #2
 8007d7a:	f002 f925 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8007d7e:	4b4a      	ldr	r3, [pc, #296]	; (8007ea8 <LEDHandler+0x67b4>)
 8007d80:	6819      	ldr	r1, [r3, #0]
 8007d82:	4b4a      	ldr	r3, [pc, #296]	; (8007eac <LEDHandler+0x67b8>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	4b4a      	ldr	r3, [pc, #296]	; (8007eb0 <LEDHandler+0x67bc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2003      	movs	r0, #3
 8007d8c:	f002 f91c 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8007d90:	4b45      	ldr	r3, [pc, #276]	; (8007ea8 <LEDHandler+0x67b4>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	4b45      	ldr	r3, [pc, #276]	; (8007eac <LEDHandler+0x67b8>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	4b45      	ldr	r3, [pc, #276]	; (8007eb0 <LEDHandler+0x67bc>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2004      	movs	r0, #4
 8007d9e:	f002 f913 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8007da2:	4b41      	ldr	r3, [pc, #260]	; (8007ea8 <LEDHandler+0x67b4>)
 8007da4:	6819      	ldr	r1, [r3, #0]
 8007da6:	4b41      	ldr	r3, [pc, #260]	; (8007eac <LEDHandler+0x67b8>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4b41      	ldr	r3, [pc, #260]	; (8007eb0 <LEDHandler+0x67bc>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2005      	movs	r0, #5
 8007db0:	f002 f90a 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8007db4:	4b3c      	ldr	r3, [pc, #240]	; (8007ea8 <LEDHandler+0x67b4>)
 8007db6:	6819      	ldr	r1, [r3, #0]
 8007db8:	4b3c      	ldr	r3, [pc, #240]	; (8007eac <LEDHandler+0x67b8>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	4b3c      	ldr	r3, [pc, #240]	; (8007eb0 <LEDHandler+0x67bc>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2006      	movs	r0, #6
 8007dc2:	f002 f901 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8007dc6:	4b38      	ldr	r3, [pc, #224]	; (8007ea8 <LEDHandler+0x67b4>)
 8007dc8:	6819      	ldr	r1, [r3, #0]
 8007dca:	4b38      	ldr	r3, [pc, #224]	; (8007eac <LEDHandler+0x67b8>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4b38      	ldr	r3, [pc, #224]	; (8007eb0 <LEDHandler+0x67bc>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2007      	movs	r0, #7
 8007dd4:	f002 f8f8 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8007dd8:	4b33      	ldr	r3, [pc, #204]	; (8007ea8 <LEDHandler+0x67b4>)
 8007dda:	6819      	ldr	r1, [r3, #0]
 8007ddc:	4b33      	ldr	r3, [pc, #204]	; (8007eac <LEDHandler+0x67b8>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	4b33      	ldr	r3, [pc, #204]	; (8007eb0 <LEDHandler+0x67bc>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2008      	movs	r0, #8
 8007de6:	f002 f8ef 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8007dea:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <LEDHandler+0x67b4>)
 8007dec:	6819      	ldr	r1, [r3, #0]
 8007dee:	4b2f      	ldr	r3, [pc, #188]	; (8007eac <LEDHandler+0x67b8>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b2f      	ldr	r3, [pc, #188]	; (8007eb0 <LEDHandler+0x67bc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2009      	movs	r0, #9
 8007df8:	f002 f8e6 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8007dfc:	4b2a      	ldr	r3, [pc, #168]	; (8007ea8 <LEDHandler+0x67b4>)
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <LEDHandler+0x67b8>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	4b2a      	ldr	r3, [pc, #168]	; (8007eb0 <LEDHandler+0x67bc>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	200a      	movs	r0, #10
 8007e0a:	f002 f8dd 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8007e0e:	4b26      	ldr	r3, [pc, #152]	; (8007ea8 <LEDHandler+0x67b4>)
 8007e10:	6819      	ldr	r1, [r3, #0]
 8007e12:	4b26      	ldr	r3, [pc, #152]	; (8007eac <LEDHandler+0x67b8>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b26      	ldr	r3, [pc, #152]	; (8007eb0 <LEDHandler+0x67bc>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	200b      	movs	r0, #11
 8007e1c:	f002 f8d4 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8007e20:	4b21      	ldr	r3, [pc, #132]	; (8007ea8 <LEDHandler+0x67b4>)
 8007e22:	6819      	ldr	r1, [r3, #0]
 8007e24:	4b21      	ldr	r3, [pc, #132]	; (8007eac <LEDHandler+0x67b8>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4b21      	ldr	r3, [pc, #132]	; (8007eb0 <LEDHandler+0x67bc>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	200c      	movs	r0, #12
 8007e2e:	f002 f8cb 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 8007e32:	4b1d      	ldr	r3, [pc, #116]	; (8007ea8 <LEDHandler+0x67b4>)
 8007e34:	6819      	ldr	r1, [r3, #0]
 8007e36:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <LEDHandler+0x67b8>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b1d      	ldr	r3, [pc, #116]	; (8007eb0 <LEDHandler+0x67bc>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	200d      	movs	r0, #13
 8007e40:	f002 f8c2 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 8007e44:	4b18      	ldr	r3, [pc, #96]	; (8007ea8 <LEDHandler+0x67b4>)
 8007e46:	6819      	ldr	r1, [r3, #0]
 8007e48:	4b18      	ldr	r3, [pc, #96]	; (8007eac <LEDHandler+0x67b8>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b18      	ldr	r3, [pc, #96]	; (8007eb0 <LEDHandler+0x67bc>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	200e      	movs	r0, #14
 8007e52:	f002 f8b9 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	Red	,	Green	, 	Blue	)	;		//LED16
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <LEDHandler+0x67b4>)
 8007e58:	6819      	ldr	r1, [r3, #0]
 8007e5a:	4b14      	ldr	r3, [pc, #80]	; (8007eac <LEDHandler+0x67b8>)
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <LEDHandler+0x67bc>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	200f      	movs	r0, #15
 8007e64:	f002 f8b0 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	2010      	movs	r0, #16
 8007e70:	f002 f8aa 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8007e74:	2300      	movs	r3, #0
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	2011      	movs	r0, #17
 8007e7c:	f002 f8a4 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8007e80:	2300      	movs	r3, #0
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	2012      	movs	r0, #18
 8007e88:	f002 f89e 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	2013      	movs	r0, #19
 8007e94:	f002 f898 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8007e98:	2300      	movs	r3, #0
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	2014      	movs	r0, #20
 8007ea0:	f002 f892 	bl	8009fc8 <Set_LED>
 8007ea4:	f001 bfdb 	b.w	8009e5e <LEDHandler+0x876a>
 8007ea8:	20000008 	.word	0x20000008
 8007eac:	2000000c 	.word	0x2000000c
 8007eb0:	20000010 	.word	0x20000010


		} else if (Valor >= 81 && Valor < 86) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b50      	cmp	r3, #80	; 0x50
 8007eb8:	f340 80be 	ble.w	8008038 <LEDHandler+0x6944>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b55      	cmp	r3, #85	; 0x55
 8007ec0:	f300 80ba 	bgt.w	8008038 <LEDHandler+0x6944>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8007ec4:	4b59      	ldr	r3, [pc, #356]	; (800802c <LEDHandler+0x6938>)
 8007ec6:	6819      	ldr	r1, [r3, #0]
 8007ec8:	4b59      	ldr	r3, [pc, #356]	; (8008030 <LEDHandler+0x693c>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4b59      	ldr	r3, [pc, #356]	; (8008034 <LEDHandler+0x6940>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	f002 f879 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8007ed6:	4b55      	ldr	r3, [pc, #340]	; (800802c <LEDHandler+0x6938>)
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	4b55      	ldr	r3, [pc, #340]	; (8008030 <LEDHandler+0x693c>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4b55      	ldr	r3, [pc, #340]	; (8008034 <LEDHandler+0x6940>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f002 f870 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8007ee8:	4b50      	ldr	r3, [pc, #320]	; (800802c <LEDHandler+0x6938>)
 8007eea:	6819      	ldr	r1, [r3, #0]
 8007eec:	4b50      	ldr	r3, [pc, #320]	; (8008030 <LEDHandler+0x693c>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	4b50      	ldr	r3, [pc, #320]	; (8008034 <LEDHandler+0x6940>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2002      	movs	r0, #2
 8007ef6:	f002 f867 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8007efa:	4b4c      	ldr	r3, [pc, #304]	; (800802c <LEDHandler+0x6938>)
 8007efc:	6819      	ldr	r1, [r3, #0]
 8007efe:	4b4c      	ldr	r3, [pc, #304]	; (8008030 <LEDHandler+0x693c>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b4c      	ldr	r3, [pc, #304]	; (8008034 <LEDHandler+0x6940>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2003      	movs	r0, #3
 8007f08:	f002 f85e 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8007f0c:	4b47      	ldr	r3, [pc, #284]	; (800802c <LEDHandler+0x6938>)
 8007f0e:	6819      	ldr	r1, [r3, #0]
 8007f10:	4b47      	ldr	r3, [pc, #284]	; (8008030 <LEDHandler+0x693c>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	4b47      	ldr	r3, [pc, #284]	; (8008034 <LEDHandler+0x6940>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2004      	movs	r0, #4
 8007f1a:	f002 f855 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8007f1e:	4b43      	ldr	r3, [pc, #268]	; (800802c <LEDHandler+0x6938>)
 8007f20:	6819      	ldr	r1, [r3, #0]
 8007f22:	4b43      	ldr	r3, [pc, #268]	; (8008030 <LEDHandler+0x693c>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4b43      	ldr	r3, [pc, #268]	; (8008034 <LEDHandler+0x6940>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2005      	movs	r0, #5
 8007f2c:	f002 f84c 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8007f30:	4b3e      	ldr	r3, [pc, #248]	; (800802c <LEDHandler+0x6938>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	4b3e      	ldr	r3, [pc, #248]	; (8008030 <LEDHandler+0x693c>)
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	4b3e      	ldr	r3, [pc, #248]	; (8008034 <LEDHandler+0x6940>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2006      	movs	r0, #6
 8007f3e:	f002 f843 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8007f42:	4b3a      	ldr	r3, [pc, #232]	; (800802c <LEDHandler+0x6938>)
 8007f44:	6819      	ldr	r1, [r3, #0]
 8007f46:	4b3a      	ldr	r3, [pc, #232]	; (8008030 <LEDHandler+0x693c>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	4b3a      	ldr	r3, [pc, #232]	; (8008034 <LEDHandler+0x6940>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2007      	movs	r0, #7
 8007f50:	f002 f83a 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8007f54:	4b35      	ldr	r3, [pc, #212]	; (800802c <LEDHandler+0x6938>)
 8007f56:	6819      	ldr	r1, [r3, #0]
 8007f58:	4b35      	ldr	r3, [pc, #212]	; (8008030 <LEDHandler+0x693c>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b35      	ldr	r3, [pc, #212]	; (8008034 <LEDHandler+0x6940>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2008      	movs	r0, #8
 8007f62:	f002 f831 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8007f66:	4b31      	ldr	r3, [pc, #196]	; (800802c <LEDHandler+0x6938>)
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	4b31      	ldr	r3, [pc, #196]	; (8008030 <LEDHandler+0x693c>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b31      	ldr	r3, [pc, #196]	; (8008034 <LEDHandler+0x6940>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2009      	movs	r0, #9
 8007f74:	f002 f828 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8007f78:	4b2c      	ldr	r3, [pc, #176]	; (800802c <LEDHandler+0x6938>)
 8007f7a:	6819      	ldr	r1, [r3, #0]
 8007f7c:	4b2c      	ldr	r3, [pc, #176]	; (8008030 <LEDHandler+0x693c>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b2c      	ldr	r3, [pc, #176]	; (8008034 <LEDHandler+0x6940>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	200a      	movs	r0, #10
 8007f86:	f002 f81f 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8007f8a:	4b28      	ldr	r3, [pc, #160]	; (800802c <LEDHandler+0x6938>)
 8007f8c:	6819      	ldr	r1, [r3, #0]
 8007f8e:	4b28      	ldr	r3, [pc, #160]	; (8008030 <LEDHandler+0x693c>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4b28      	ldr	r3, [pc, #160]	; (8008034 <LEDHandler+0x6940>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	200b      	movs	r0, #11
 8007f98:	f002 f816 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8007f9c:	4b23      	ldr	r3, [pc, #140]	; (800802c <LEDHandler+0x6938>)
 8007f9e:	6819      	ldr	r1, [r3, #0]
 8007fa0:	4b23      	ldr	r3, [pc, #140]	; (8008030 <LEDHandler+0x693c>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b23      	ldr	r3, [pc, #140]	; (8008034 <LEDHandler+0x6940>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	200c      	movs	r0, #12
 8007faa:	f002 f80d 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 8007fae:	4b1f      	ldr	r3, [pc, #124]	; (800802c <LEDHandler+0x6938>)
 8007fb0:	6819      	ldr	r1, [r3, #0]
 8007fb2:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <LEDHandler+0x693c>)
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4b1f      	ldr	r3, [pc, #124]	; (8008034 <LEDHandler+0x6940>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	200d      	movs	r0, #13
 8007fbc:	f002 f804 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 8007fc0:	4b1a      	ldr	r3, [pc, #104]	; (800802c <LEDHandler+0x6938>)
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	4b1a      	ldr	r3, [pc, #104]	; (8008030 <LEDHandler+0x693c>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	4b1a      	ldr	r3, [pc, #104]	; (8008034 <LEDHandler+0x6940>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	200e      	movs	r0, #14
 8007fce:	f001 fffb 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	Red	,	Green	, 	Blue	)	;		//LED16
 8007fd2:	4b16      	ldr	r3, [pc, #88]	; (800802c <LEDHandler+0x6938>)
 8007fd4:	6819      	ldr	r1, [r3, #0]
 8007fd6:	4b16      	ldr	r3, [pc, #88]	; (8008030 <LEDHandler+0x693c>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b16      	ldr	r3, [pc, #88]	; (8008034 <LEDHandler+0x6940>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	200f      	movs	r0, #15
 8007fe0:	f001 fff2 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	Red	,	Green	, 	Blue	)	;		//LED17
 8007fe4:	4b11      	ldr	r3, [pc, #68]	; (800802c <LEDHandler+0x6938>)
 8007fe6:	6819      	ldr	r1, [r3, #0]
 8007fe8:	4b11      	ldr	r3, [pc, #68]	; (8008030 <LEDHandler+0x693c>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	4b11      	ldr	r3, [pc, #68]	; (8008034 <LEDHandler+0x6940>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2010      	movs	r0, #16
 8007ff2:	f001 ffe9 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	2011      	movs	r0, #17
 8007ffe:	f001 ffe3 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8008002:	2300      	movs	r3, #0
 8008004:	2200      	movs	r2, #0
 8008006:	2100      	movs	r1, #0
 8008008:	2012      	movs	r0, #18
 800800a:	f001 ffdd 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 800800e:	2300      	movs	r3, #0
 8008010:	2200      	movs	r2, #0
 8008012:	2100      	movs	r1, #0
 8008014:	2013      	movs	r0, #19
 8008016:	f001 ffd7 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 800801a:	2300      	movs	r3, #0
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	2014      	movs	r0, #20
 8008022:	f001 ffd1 	bl	8009fc8 <Set_LED>
 8008026:	f001 bf1a 	b.w	8009e5e <LEDHandler+0x876a>
 800802a:	bf00      	nop
 800802c:	20000008 	.word	0x20000008
 8008030:	2000000c 	.word	0x2000000c
 8008034:	20000010 	.word	0x20000010

		} else if (Valor >= 86 && Valor < 91) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b55      	cmp	r3, #85	; 0x55
 800803c:	f340 80c0 	ble.w	80081c0 <LEDHandler+0x6acc>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b5a      	cmp	r3, #90	; 0x5a
 8008044:	f300 80bc 	bgt.w	80081c0 <LEDHandler+0x6acc>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8008048:	4b5a      	ldr	r3, [pc, #360]	; (80081b4 <LEDHandler+0x6ac0>)
 800804a:	6819      	ldr	r1, [r3, #0]
 800804c:	4b5a      	ldr	r3, [pc, #360]	; (80081b8 <LEDHandler+0x6ac4>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b5a      	ldr	r3, [pc, #360]	; (80081bc <LEDHandler+0x6ac8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2000      	movs	r0, #0
 8008056:	f001 ffb7 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 800805a:	4b56      	ldr	r3, [pc, #344]	; (80081b4 <LEDHandler+0x6ac0>)
 800805c:	6819      	ldr	r1, [r3, #0]
 800805e:	4b56      	ldr	r3, [pc, #344]	; (80081b8 <LEDHandler+0x6ac4>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b56      	ldr	r3, [pc, #344]	; (80081bc <LEDHandler+0x6ac8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2001      	movs	r0, #1
 8008068:	f001 ffae 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 800806c:	4b51      	ldr	r3, [pc, #324]	; (80081b4 <LEDHandler+0x6ac0>)
 800806e:	6819      	ldr	r1, [r3, #0]
 8008070:	4b51      	ldr	r3, [pc, #324]	; (80081b8 <LEDHandler+0x6ac4>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	4b51      	ldr	r3, [pc, #324]	; (80081bc <LEDHandler+0x6ac8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2002      	movs	r0, #2
 800807a:	f001 ffa5 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 800807e:	4b4d      	ldr	r3, [pc, #308]	; (80081b4 <LEDHandler+0x6ac0>)
 8008080:	6819      	ldr	r1, [r3, #0]
 8008082:	4b4d      	ldr	r3, [pc, #308]	; (80081b8 <LEDHandler+0x6ac4>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b4d      	ldr	r3, [pc, #308]	; (80081bc <LEDHandler+0x6ac8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2003      	movs	r0, #3
 800808c:	f001 ff9c 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8008090:	4b48      	ldr	r3, [pc, #288]	; (80081b4 <LEDHandler+0x6ac0>)
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	4b48      	ldr	r3, [pc, #288]	; (80081b8 <LEDHandler+0x6ac4>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	4b48      	ldr	r3, [pc, #288]	; (80081bc <LEDHandler+0x6ac8>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2004      	movs	r0, #4
 800809e:	f001 ff93 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 80080a2:	4b44      	ldr	r3, [pc, #272]	; (80081b4 <LEDHandler+0x6ac0>)
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	4b44      	ldr	r3, [pc, #272]	; (80081b8 <LEDHandler+0x6ac4>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b44      	ldr	r3, [pc, #272]	; (80081bc <LEDHandler+0x6ac8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2005      	movs	r0, #5
 80080b0:	f001 ff8a 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 80080b4:	4b3f      	ldr	r3, [pc, #252]	; (80081b4 <LEDHandler+0x6ac0>)
 80080b6:	6819      	ldr	r1, [r3, #0]
 80080b8:	4b3f      	ldr	r3, [pc, #252]	; (80081b8 <LEDHandler+0x6ac4>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	4b3f      	ldr	r3, [pc, #252]	; (80081bc <LEDHandler+0x6ac8>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2006      	movs	r0, #6
 80080c2:	f001 ff81 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 80080c6:	4b3b      	ldr	r3, [pc, #236]	; (80081b4 <LEDHandler+0x6ac0>)
 80080c8:	6819      	ldr	r1, [r3, #0]
 80080ca:	4b3b      	ldr	r3, [pc, #236]	; (80081b8 <LEDHandler+0x6ac4>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	4b3b      	ldr	r3, [pc, #236]	; (80081bc <LEDHandler+0x6ac8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2007      	movs	r0, #7
 80080d4:	f001 ff78 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 80080d8:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <LEDHandler+0x6ac0>)
 80080da:	6819      	ldr	r1, [r3, #0]
 80080dc:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <LEDHandler+0x6ac4>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4b36      	ldr	r3, [pc, #216]	; (80081bc <LEDHandler+0x6ac8>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2008      	movs	r0, #8
 80080e6:	f001 ff6f 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 80080ea:	4b32      	ldr	r3, [pc, #200]	; (80081b4 <LEDHandler+0x6ac0>)
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	4b32      	ldr	r3, [pc, #200]	; (80081b8 <LEDHandler+0x6ac4>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	4b32      	ldr	r3, [pc, #200]	; (80081bc <LEDHandler+0x6ac8>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2009      	movs	r0, #9
 80080f8:	f001 ff66 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 80080fc:	4b2d      	ldr	r3, [pc, #180]	; (80081b4 <LEDHandler+0x6ac0>)
 80080fe:	6819      	ldr	r1, [r3, #0]
 8008100:	4b2d      	ldr	r3, [pc, #180]	; (80081b8 <LEDHandler+0x6ac4>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4b2d      	ldr	r3, [pc, #180]	; (80081bc <LEDHandler+0x6ac8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	200a      	movs	r0, #10
 800810a:	f001 ff5d 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 800810e:	4b29      	ldr	r3, [pc, #164]	; (80081b4 <LEDHandler+0x6ac0>)
 8008110:	6819      	ldr	r1, [r3, #0]
 8008112:	4b29      	ldr	r3, [pc, #164]	; (80081b8 <LEDHandler+0x6ac4>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4b29      	ldr	r3, [pc, #164]	; (80081bc <LEDHandler+0x6ac8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	200b      	movs	r0, #11
 800811c:	f001 ff54 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8008120:	4b24      	ldr	r3, [pc, #144]	; (80081b4 <LEDHandler+0x6ac0>)
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <LEDHandler+0x6ac4>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	4b24      	ldr	r3, [pc, #144]	; (80081bc <LEDHandler+0x6ac8>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	200c      	movs	r0, #12
 800812e:	f001 ff4b 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 8008132:	4b20      	ldr	r3, [pc, #128]	; (80081b4 <LEDHandler+0x6ac0>)
 8008134:	6819      	ldr	r1, [r3, #0]
 8008136:	4b20      	ldr	r3, [pc, #128]	; (80081b8 <LEDHandler+0x6ac4>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b20      	ldr	r3, [pc, #128]	; (80081bc <LEDHandler+0x6ac8>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	200d      	movs	r0, #13
 8008140:	f001 ff42 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 8008144:	4b1b      	ldr	r3, [pc, #108]	; (80081b4 <LEDHandler+0x6ac0>)
 8008146:	6819      	ldr	r1, [r3, #0]
 8008148:	4b1b      	ldr	r3, [pc, #108]	; (80081b8 <LEDHandler+0x6ac4>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <LEDHandler+0x6ac8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	200e      	movs	r0, #14
 8008152:	f001 ff39 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	Red	,	Green	, 	Blue	)	;		//LED16
 8008156:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <LEDHandler+0x6ac0>)
 8008158:	6819      	ldr	r1, [r3, #0]
 800815a:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <LEDHandler+0x6ac4>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b17      	ldr	r3, [pc, #92]	; (80081bc <LEDHandler+0x6ac8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	200f      	movs	r0, #15
 8008164:	f001 ff30 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	Red	,	Green	, 	Blue	)	;		//LED17
 8008168:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <LEDHandler+0x6ac0>)
 800816a:	6819      	ldr	r1, [r3, #0]
 800816c:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <LEDHandler+0x6ac4>)
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	4b12      	ldr	r3, [pc, #72]	; (80081bc <LEDHandler+0x6ac8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2010      	movs	r0, #16
 8008176:	f001 ff27 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	Red	,	Green	, 	Blue	)	;		//LED18
 800817a:	4b0e      	ldr	r3, [pc, #56]	; (80081b4 <LEDHandler+0x6ac0>)
 800817c:	6819      	ldr	r1, [r3, #0]
 800817e:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <LEDHandler+0x6ac4>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b0e      	ldr	r3, [pc, #56]	; (80081bc <LEDHandler+0x6ac8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2011      	movs	r0, #17
 8008188:	f001 ff1e 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 800818c:	2300      	movs	r3, #0
 800818e:	2200      	movs	r2, #0
 8008190:	2100      	movs	r1, #0
 8008192:	2012      	movs	r0, #18
 8008194:	f001 ff18 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008198:	2300      	movs	r3, #0
 800819a:	2200      	movs	r2, #0
 800819c:	2100      	movs	r1, #0
 800819e:	2013      	movs	r0, #19
 80081a0:	f001 ff12 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80081a4:	2300      	movs	r3, #0
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	2014      	movs	r0, #20
 80081ac:	f001 ff0c 	bl	8009fc8 <Set_LED>
 80081b0:	f001 be55 	b.w	8009e5e <LEDHandler+0x876a>
 80081b4:	20000008 	.word	0x20000008
 80081b8:	2000000c 	.word	0x2000000c
 80081bc:	20000010 	.word	0x20000010

		} else if (Valor >= 91 && Valor < 100) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b5a      	cmp	r3, #90	; 0x5a
 80081c4:	f340 80c4 	ble.w	8008350 <LEDHandler+0x6c5c>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b63      	cmp	r3, #99	; 0x63
 80081cc:	f300 80c0 	bgt.w	8008350 <LEDHandler+0x6c5c>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80081d0:	4b5c      	ldr	r3, [pc, #368]	; (8008344 <LEDHandler+0x6c50>)
 80081d2:	6819      	ldr	r1, [r3, #0]
 80081d4:	4b5c      	ldr	r3, [pc, #368]	; (8008348 <LEDHandler+0x6c54>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	4b5c      	ldr	r3, [pc, #368]	; (800834c <LEDHandler+0x6c58>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2000      	movs	r0, #0
 80081de:	f001 fef3 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80081e2:	4b58      	ldr	r3, [pc, #352]	; (8008344 <LEDHandler+0x6c50>)
 80081e4:	6819      	ldr	r1, [r3, #0]
 80081e6:	4b58      	ldr	r3, [pc, #352]	; (8008348 <LEDHandler+0x6c54>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b58      	ldr	r3, [pc, #352]	; (800834c <LEDHandler+0x6c58>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2001      	movs	r0, #1
 80081f0:	f001 feea 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80081f4:	4b53      	ldr	r3, [pc, #332]	; (8008344 <LEDHandler+0x6c50>)
 80081f6:	6819      	ldr	r1, [r3, #0]
 80081f8:	4b53      	ldr	r3, [pc, #332]	; (8008348 <LEDHandler+0x6c54>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	4b53      	ldr	r3, [pc, #332]	; (800834c <LEDHandler+0x6c58>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2002      	movs	r0, #2
 8008202:	f001 fee1 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8008206:	4b4f      	ldr	r3, [pc, #316]	; (8008344 <LEDHandler+0x6c50>)
 8008208:	6819      	ldr	r1, [r3, #0]
 800820a:	4b4f      	ldr	r3, [pc, #316]	; (8008348 <LEDHandler+0x6c54>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4b4f      	ldr	r3, [pc, #316]	; (800834c <LEDHandler+0x6c58>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2003      	movs	r0, #3
 8008214:	f001 fed8 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8008218:	4b4a      	ldr	r3, [pc, #296]	; (8008344 <LEDHandler+0x6c50>)
 800821a:	6819      	ldr	r1, [r3, #0]
 800821c:	4b4a      	ldr	r3, [pc, #296]	; (8008348 <LEDHandler+0x6c54>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	4b4a      	ldr	r3, [pc, #296]	; (800834c <LEDHandler+0x6c58>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2004      	movs	r0, #4
 8008226:	f001 fecf 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 800822a:	4b46      	ldr	r3, [pc, #280]	; (8008344 <LEDHandler+0x6c50>)
 800822c:	6819      	ldr	r1, [r3, #0]
 800822e:	4b46      	ldr	r3, [pc, #280]	; (8008348 <LEDHandler+0x6c54>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b46      	ldr	r3, [pc, #280]	; (800834c <LEDHandler+0x6c58>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2005      	movs	r0, #5
 8008238:	f001 fec6 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 800823c:	4b41      	ldr	r3, [pc, #260]	; (8008344 <LEDHandler+0x6c50>)
 800823e:	6819      	ldr	r1, [r3, #0]
 8008240:	4b41      	ldr	r3, [pc, #260]	; (8008348 <LEDHandler+0x6c54>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	4b41      	ldr	r3, [pc, #260]	; (800834c <LEDHandler+0x6c58>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2006      	movs	r0, #6
 800824a:	f001 febd 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 800824e:	4b3d      	ldr	r3, [pc, #244]	; (8008344 <LEDHandler+0x6c50>)
 8008250:	6819      	ldr	r1, [r3, #0]
 8008252:	4b3d      	ldr	r3, [pc, #244]	; (8008348 <LEDHandler+0x6c54>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b3d      	ldr	r3, [pc, #244]	; (800834c <LEDHandler+0x6c58>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2007      	movs	r0, #7
 800825c:	f001 feb4 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8008260:	4b38      	ldr	r3, [pc, #224]	; (8008344 <LEDHandler+0x6c50>)
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	4b38      	ldr	r3, [pc, #224]	; (8008348 <LEDHandler+0x6c54>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	4b38      	ldr	r3, [pc, #224]	; (800834c <LEDHandler+0x6c58>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2008      	movs	r0, #8
 800826e:	f001 feab 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8008272:	4b34      	ldr	r3, [pc, #208]	; (8008344 <LEDHandler+0x6c50>)
 8008274:	6819      	ldr	r1, [r3, #0]
 8008276:	4b34      	ldr	r3, [pc, #208]	; (8008348 <LEDHandler+0x6c54>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4b34      	ldr	r3, [pc, #208]	; (800834c <LEDHandler+0x6c58>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2009      	movs	r0, #9
 8008280:	f001 fea2 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8008284:	4b2f      	ldr	r3, [pc, #188]	; (8008344 <LEDHandler+0x6c50>)
 8008286:	6819      	ldr	r1, [r3, #0]
 8008288:	4b2f      	ldr	r3, [pc, #188]	; (8008348 <LEDHandler+0x6c54>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	4b2f      	ldr	r3, [pc, #188]	; (800834c <LEDHandler+0x6c58>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	200a      	movs	r0, #10
 8008292:	f001 fe99 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8008296:	4b2b      	ldr	r3, [pc, #172]	; (8008344 <LEDHandler+0x6c50>)
 8008298:	6819      	ldr	r1, [r3, #0]
 800829a:	4b2b      	ldr	r3, [pc, #172]	; (8008348 <LEDHandler+0x6c54>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b2b      	ldr	r3, [pc, #172]	; (800834c <LEDHandler+0x6c58>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	200b      	movs	r0, #11
 80082a4:	f001 fe90 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 80082a8:	4b26      	ldr	r3, [pc, #152]	; (8008344 <LEDHandler+0x6c50>)
 80082aa:	6819      	ldr	r1, [r3, #0]
 80082ac:	4b26      	ldr	r3, [pc, #152]	; (8008348 <LEDHandler+0x6c54>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	4b26      	ldr	r3, [pc, #152]	; (800834c <LEDHandler+0x6c58>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	200c      	movs	r0, #12
 80082b6:	f001 fe87 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 80082ba:	4b22      	ldr	r3, [pc, #136]	; (8008344 <LEDHandler+0x6c50>)
 80082bc:	6819      	ldr	r1, [r3, #0]
 80082be:	4b22      	ldr	r3, [pc, #136]	; (8008348 <LEDHandler+0x6c54>)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b22      	ldr	r3, [pc, #136]	; (800834c <LEDHandler+0x6c58>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	200d      	movs	r0, #13
 80082c8:	f001 fe7e 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 80082cc:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <LEDHandler+0x6c50>)
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	4b1d      	ldr	r3, [pc, #116]	; (8008348 <LEDHandler+0x6c54>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b1d      	ldr	r3, [pc, #116]	; (800834c <LEDHandler+0x6c58>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	200e      	movs	r0, #14
 80082da:	f001 fe75 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	Red	,	Green	, 	Blue	)	;		//LED16
 80082de:	4b19      	ldr	r3, [pc, #100]	; (8008344 <LEDHandler+0x6c50>)
 80082e0:	6819      	ldr	r1, [r3, #0]
 80082e2:	4b19      	ldr	r3, [pc, #100]	; (8008348 <LEDHandler+0x6c54>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	4b19      	ldr	r3, [pc, #100]	; (800834c <LEDHandler+0x6c58>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	200f      	movs	r0, #15
 80082ec:	f001 fe6c 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	Red	,	Green	, 	Blue	)	;		//LED17
 80082f0:	4b14      	ldr	r3, [pc, #80]	; (8008344 <LEDHandler+0x6c50>)
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	4b14      	ldr	r3, [pc, #80]	; (8008348 <LEDHandler+0x6c54>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	4b14      	ldr	r3, [pc, #80]	; (800834c <LEDHandler+0x6c58>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2010      	movs	r0, #16
 80082fe:	f001 fe63 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	Red	,	Green	, 	Blue	)	;		//LED18
 8008302:	4b10      	ldr	r3, [pc, #64]	; (8008344 <LEDHandler+0x6c50>)
 8008304:	6819      	ldr	r1, [r3, #0]
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <LEDHandler+0x6c54>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	4b10      	ldr	r3, [pc, #64]	; (800834c <LEDHandler+0x6c58>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2011      	movs	r0, #17
 8008310:	f001 fe5a 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	Red	,	Green	, 	Blue	)	;		//LED19
 8008314:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <LEDHandler+0x6c50>)
 8008316:	6819      	ldr	r1, [r3, #0]
 8008318:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <LEDHandler+0x6c54>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b0b      	ldr	r3, [pc, #44]	; (800834c <LEDHandler+0x6c58>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2012      	movs	r0, #18
 8008322:	f001 fe51 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008326:	2300      	movs	r3, #0
 8008328:	2200      	movs	r2, #0
 800832a:	2100      	movs	r1, #0
 800832c:	2013      	movs	r0, #19
 800832e:	f001 fe4b 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8008332:	2300      	movs	r3, #0
 8008334:	2200      	movs	r2, #0
 8008336:	2100      	movs	r1, #0
 8008338:	2014      	movs	r0, #20
 800833a:	f001 fe45 	bl	8009fc8 <Set_LED>
 800833e:	f001 bd8e 	b.w	8009e5e <LEDHandler+0x876a>
 8008342:	bf00      	nop
 8008344:	20000008 	.word	0x20000008
 8008348:	2000000c 	.word	0x2000000c
 800834c:	20000010 	.word	0x20000010


		} else if (Valor >= 96 && Valor < 100) {
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b5f      	cmp	r3, #95	; 0x5f
 8008354:	f340 80c6 	ble.w	80084e4 <LEDHandler+0x6df0>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b63      	cmp	r3, #99	; 0x63
 800835c:	f300 80c2 	bgt.w	80084e4 <LEDHandler+0x6df0>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8008360:	4b5d      	ldr	r3, [pc, #372]	; (80084d8 <LEDHandler+0x6de4>)
 8008362:	6819      	ldr	r1, [r3, #0]
 8008364:	4b5d      	ldr	r3, [pc, #372]	; (80084dc <LEDHandler+0x6de8>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b5d      	ldr	r3, [pc, #372]	; (80084e0 <LEDHandler+0x6dec>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2000      	movs	r0, #0
 800836e:	f001 fe2b 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8008372:	4b59      	ldr	r3, [pc, #356]	; (80084d8 <LEDHandler+0x6de4>)
 8008374:	6819      	ldr	r1, [r3, #0]
 8008376:	4b59      	ldr	r3, [pc, #356]	; (80084dc <LEDHandler+0x6de8>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b59      	ldr	r3, [pc, #356]	; (80084e0 <LEDHandler+0x6dec>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2001      	movs	r0, #1
 8008380:	f001 fe22 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8008384:	4b54      	ldr	r3, [pc, #336]	; (80084d8 <LEDHandler+0x6de4>)
 8008386:	6819      	ldr	r1, [r3, #0]
 8008388:	4b54      	ldr	r3, [pc, #336]	; (80084dc <LEDHandler+0x6de8>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b54      	ldr	r3, [pc, #336]	; (80084e0 <LEDHandler+0x6dec>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2002      	movs	r0, #2
 8008392:	f001 fe19 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8008396:	4b50      	ldr	r3, [pc, #320]	; (80084d8 <LEDHandler+0x6de4>)
 8008398:	6819      	ldr	r1, [r3, #0]
 800839a:	4b50      	ldr	r3, [pc, #320]	; (80084dc <LEDHandler+0x6de8>)
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4b50      	ldr	r3, [pc, #320]	; (80084e0 <LEDHandler+0x6dec>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2003      	movs	r0, #3
 80083a4:	f001 fe10 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 80083a8:	4b4b      	ldr	r3, [pc, #300]	; (80084d8 <LEDHandler+0x6de4>)
 80083aa:	6819      	ldr	r1, [r3, #0]
 80083ac:	4b4b      	ldr	r3, [pc, #300]	; (80084dc <LEDHandler+0x6de8>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	4b4b      	ldr	r3, [pc, #300]	; (80084e0 <LEDHandler+0x6dec>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2004      	movs	r0, #4
 80083b6:	f001 fe07 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 80083ba:	4b47      	ldr	r3, [pc, #284]	; (80084d8 <LEDHandler+0x6de4>)
 80083bc:	6819      	ldr	r1, [r3, #0]
 80083be:	4b47      	ldr	r3, [pc, #284]	; (80084dc <LEDHandler+0x6de8>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4b47      	ldr	r3, [pc, #284]	; (80084e0 <LEDHandler+0x6dec>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2005      	movs	r0, #5
 80083c8:	f001 fdfe 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 80083cc:	4b42      	ldr	r3, [pc, #264]	; (80084d8 <LEDHandler+0x6de4>)
 80083ce:	6819      	ldr	r1, [r3, #0]
 80083d0:	4b42      	ldr	r3, [pc, #264]	; (80084dc <LEDHandler+0x6de8>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b42      	ldr	r3, [pc, #264]	; (80084e0 <LEDHandler+0x6dec>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2006      	movs	r0, #6
 80083da:	f001 fdf5 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 80083de:	4b3e      	ldr	r3, [pc, #248]	; (80084d8 <LEDHandler+0x6de4>)
 80083e0:	6819      	ldr	r1, [r3, #0]
 80083e2:	4b3e      	ldr	r3, [pc, #248]	; (80084dc <LEDHandler+0x6de8>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4b3e      	ldr	r3, [pc, #248]	; (80084e0 <LEDHandler+0x6dec>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2007      	movs	r0, #7
 80083ec:	f001 fdec 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 80083f0:	4b39      	ldr	r3, [pc, #228]	; (80084d8 <LEDHandler+0x6de4>)
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	4b39      	ldr	r3, [pc, #228]	; (80084dc <LEDHandler+0x6de8>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	4b39      	ldr	r3, [pc, #228]	; (80084e0 <LEDHandler+0x6dec>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2008      	movs	r0, #8
 80083fe:	f001 fde3 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8008402:	4b35      	ldr	r3, [pc, #212]	; (80084d8 <LEDHandler+0x6de4>)
 8008404:	6819      	ldr	r1, [r3, #0]
 8008406:	4b35      	ldr	r3, [pc, #212]	; (80084dc <LEDHandler+0x6de8>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4b35      	ldr	r3, [pc, #212]	; (80084e0 <LEDHandler+0x6dec>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2009      	movs	r0, #9
 8008410:	f001 fdda 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8008414:	4b30      	ldr	r3, [pc, #192]	; (80084d8 <LEDHandler+0x6de4>)
 8008416:	6819      	ldr	r1, [r3, #0]
 8008418:	4b30      	ldr	r3, [pc, #192]	; (80084dc <LEDHandler+0x6de8>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	4b30      	ldr	r3, [pc, #192]	; (80084e0 <LEDHandler+0x6dec>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	200a      	movs	r0, #10
 8008422:	f001 fdd1 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8008426:	4b2c      	ldr	r3, [pc, #176]	; (80084d8 <LEDHandler+0x6de4>)
 8008428:	6819      	ldr	r1, [r3, #0]
 800842a:	4b2c      	ldr	r3, [pc, #176]	; (80084dc <LEDHandler+0x6de8>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b2c      	ldr	r3, [pc, #176]	; (80084e0 <LEDHandler+0x6dec>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	200b      	movs	r0, #11
 8008434:	f001 fdc8 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8008438:	4b27      	ldr	r3, [pc, #156]	; (80084d8 <LEDHandler+0x6de4>)
 800843a:	6819      	ldr	r1, [r3, #0]
 800843c:	4b27      	ldr	r3, [pc, #156]	; (80084dc <LEDHandler+0x6de8>)
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	4b27      	ldr	r3, [pc, #156]	; (80084e0 <LEDHandler+0x6dec>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	200c      	movs	r0, #12
 8008446:	f001 fdbf 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 800844a:	4b23      	ldr	r3, [pc, #140]	; (80084d8 <LEDHandler+0x6de4>)
 800844c:	6819      	ldr	r1, [r3, #0]
 800844e:	4b23      	ldr	r3, [pc, #140]	; (80084dc <LEDHandler+0x6de8>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <LEDHandler+0x6dec>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	200d      	movs	r0, #13
 8008458:	f001 fdb6 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 800845c:	4b1e      	ldr	r3, [pc, #120]	; (80084d8 <LEDHandler+0x6de4>)
 800845e:	6819      	ldr	r1, [r3, #0]
 8008460:	4b1e      	ldr	r3, [pc, #120]	; (80084dc <LEDHandler+0x6de8>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4b1e      	ldr	r3, [pc, #120]	; (80084e0 <LEDHandler+0x6dec>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	200e      	movs	r0, #14
 800846a:	f001 fdad 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	Red	,	Green	, 	Blue	)	;		//LED16
 800846e:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <LEDHandler+0x6de4>)
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	4b1a      	ldr	r3, [pc, #104]	; (80084dc <LEDHandler+0x6de8>)
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <LEDHandler+0x6dec>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	200f      	movs	r0, #15
 800847c:	f001 fda4 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	Red	,	Green	, 	Blue	)	;		//LED17
 8008480:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <LEDHandler+0x6de4>)
 8008482:	6819      	ldr	r1, [r3, #0]
 8008484:	4b15      	ldr	r3, [pc, #84]	; (80084dc <LEDHandler+0x6de8>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	4b15      	ldr	r3, [pc, #84]	; (80084e0 <LEDHandler+0x6dec>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2010      	movs	r0, #16
 800848e:	f001 fd9b 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	Red	,	Green	, 	Blue	)	;		//LED18
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <LEDHandler+0x6de4>)
 8008494:	6819      	ldr	r1, [r3, #0]
 8008496:	4b11      	ldr	r3, [pc, #68]	; (80084dc <LEDHandler+0x6de8>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <LEDHandler+0x6dec>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2011      	movs	r0, #17
 80084a0:	f001 fd92 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	Red	,	Green	, 	Blue	)	;		//LED19
 80084a4:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <LEDHandler+0x6de4>)
 80084a6:	6819      	ldr	r1, [r3, #0]
 80084a8:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <LEDHandler+0x6de8>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <LEDHandler+0x6dec>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2012      	movs	r0, #18
 80084b2:	f001 fd89 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	Red	,	Green	, 	Blue	)	;		//LED20
 80084b6:	4b08      	ldr	r3, [pc, #32]	; (80084d8 <LEDHandler+0x6de4>)
 80084b8:	6819      	ldr	r1, [r3, #0]
 80084ba:	4b08      	ldr	r3, [pc, #32]	; (80084dc <LEDHandler+0x6de8>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <LEDHandler+0x6dec>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2013      	movs	r0, #19
 80084c4:	f001 fd80 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80084c8:	2300      	movs	r3, #0
 80084ca:	2200      	movs	r2, #0
 80084cc:	2100      	movs	r1, #0
 80084ce:	2014      	movs	r0, #20
 80084d0:	f001 fd7a 	bl	8009fc8 <Set_LED>
 80084d4:	f001 bcc3 	b.w	8009e5e <LEDHandler+0x876a>
 80084d8:	20000008 	.word	0x20000008
 80084dc:	2000000c 	.word	0x2000000c
 80084e0:	20000010 	.word	0x20000010

		} else if (Valor >= 100) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b63      	cmp	r3, #99	; 0x63
 80084e8:	f341 84b9 	ble.w	8009e5e <LEDHandler+0x876a>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80084ec:	4ba2      	ldr	r3, [pc, #648]	; (8008778 <LEDHandler+0x7084>)
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	4ba2      	ldr	r3, [pc, #648]	; (800877c <LEDHandler+0x7088>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4ba2      	ldr	r3, [pc, #648]	; (8008780 <LEDHandler+0x708c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2000      	movs	r0, #0
 80084fa:	f001 fd65 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80084fe:	4b9e      	ldr	r3, [pc, #632]	; (8008778 <LEDHandler+0x7084>)
 8008500:	6819      	ldr	r1, [r3, #0]
 8008502:	4b9e      	ldr	r3, [pc, #632]	; (800877c <LEDHandler+0x7088>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b9e      	ldr	r3, [pc, #632]	; (8008780 <LEDHandler+0x708c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2001      	movs	r0, #1
 800850c:	f001 fd5c 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8008510:	4b99      	ldr	r3, [pc, #612]	; (8008778 <LEDHandler+0x7084>)
 8008512:	6819      	ldr	r1, [r3, #0]
 8008514:	4b99      	ldr	r3, [pc, #612]	; (800877c <LEDHandler+0x7088>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	4b99      	ldr	r3, [pc, #612]	; (8008780 <LEDHandler+0x708c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2002      	movs	r0, #2
 800851e:	f001 fd53 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8008522:	4b95      	ldr	r3, [pc, #596]	; (8008778 <LEDHandler+0x7084>)
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	4b95      	ldr	r3, [pc, #596]	; (800877c <LEDHandler+0x7088>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	4b95      	ldr	r3, [pc, #596]	; (8008780 <LEDHandler+0x708c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2003      	movs	r0, #3
 8008530:	f001 fd4a 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8008534:	4b90      	ldr	r3, [pc, #576]	; (8008778 <LEDHandler+0x7084>)
 8008536:	6819      	ldr	r1, [r3, #0]
 8008538:	4b90      	ldr	r3, [pc, #576]	; (800877c <LEDHandler+0x7088>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	4b90      	ldr	r3, [pc, #576]	; (8008780 <LEDHandler+0x708c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2004      	movs	r0, #4
 8008542:	f001 fd41 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8008546:	4b8c      	ldr	r3, [pc, #560]	; (8008778 <LEDHandler+0x7084>)
 8008548:	6819      	ldr	r1, [r3, #0]
 800854a:	4b8c      	ldr	r3, [pc, #560]	; (800877c <LEDHandler+0x7088>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	4b8c      	ldr	r3, [pc, #560]	; (8008780 <LEDHandler+0x708c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2005      	movs	r0, #5
 8008554:	f001 fd38 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8008558:	4b87      	ldr	r3, [pc, #540]	; (8008778 <LEDHandler+0x7084>)
 800855a:	6819      	ldr	r1, [r3, #0]
 800855c:	4b87      	ldr	r3, [pc, #540]	; (800877c <LEDHandler+0x7088>)
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	4b87      	ldr	r3, [pc, #540]	; (8008780 <LEDHandler+0x708c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2006      	movs	r0, #6
 8008566:	f001 fd2f 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 800856a:	4b83      	ldr	r3, [pc, #524]	; (8008778 <LEDHandler+0x7084>)
 800856c:	6819      	ldr	r1, [r3, #0]
 800856e:	4b83      	ldr	r3, [pc, #524]	; (800877c <LEDHandler+0x7088>)
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4b83      	ldr	r3, [pc, #524]	; (8008780 <LEDHandler+0x708c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2007      	movs	r0, #7
 8008578:	f001 fd26 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 800857c:	4b7e      	ldr	r3, [pc, #504]	; (8008778 <LEDHandler+0x7084>)
 800857e:	6819      	ldr	r1, [r3, #0]
 8008580:	4b7e      	ldr	r3, [pc, #504]	; (800877c <LEDHandler+0x7088>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	4b7e      	ldr	r3, [pc, #504]	; (8008780 <LEDHandler+0x708c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2008      	movs	r0, #8
 800858a:	f001 fd1d 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 800858e:	4b7a      	ldr	r3, [pc, #488]	; (8008778 <LEDHandler+0x7084>)
 8008590:	6819      	ldr	r1, [r3, #0]
 8008592:	4b7a      	ldr	r3, [pc, #488]	; (800877c <LEDHandler+0x7088>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	4b7a      	ldr	r3, [pc, #488]	; (8008780 <LEDHandler+0x708c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2009      	movs	r0, #9
 800859c:	f001 fd14 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 80085a0:	4b75      	ldr	r3, [pc, #468]	; (8008778 <LEDHandler+0x7084>)
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	4b75      	ldr	r3, [pc, #468]	; (800877c <LEDHandler+0x7088>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	4b75      	ldr	r3, [pc, #468]	; (8008780 <LEDHandler+0x708c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	200a      	movs	r0, #10
 80085ae:	f001 fd0b 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 80085b2:	4b71      	ldr	r3, [pc, #452]	; (8008778 <LEDHandler+0x7084>)
 80085b4:	6819      	ldr	r1, [r3, #0]
 80085b6:	4b71      	ldr	r3, [pc, #452]	; (800877c <LEDHandler+0x7088>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	4b71      	ldr	r3, [pc, #452]	; (8008780 <LEDHandler+0x708c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	200b      	movs	r0, #11
 80085c0:	f001 fd02 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 80085c4:	4b6c      	ldr	r3, [pc, #432]	; (8008778 <LEDHandler+0x7084>)
 80085c6:	6819      	ldr	r1, [r3, #0]
 80085c8:	4b6c      	ldr	r3, [pc, #432]	; (800877c <LEDHandler+0x7088>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	4b6c      	ldr	r3, [pc, #432]	; (8008780 <LEDHandler+0x708c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	200c      	movs	r0, #12
 80085d2:	f001 fcf9 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 80085d6:	4b68      	ldr	r3, [pc, #416]	; (8008778 <LEDHandler+0x7084>)
 80085d8:	6819      	ldr	r1, [r3, #0]
 80085da:	4b68      	ldr	r3, [pc, #416]	; (800877c <LEDHandler+0x7088>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4b68      	ldr	r3, [pc, #416]	; (8008780 <LEDHandler+0x708c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	200d      	movs	r0, #13
 80085e4:	f001 fcf0 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 80085e8:	4b63      	ldr	r3, [pc, #396]	; (8008778 <LEDHandler+0x7084>)
 80085ea:	6819      	ldr	r1, [r3, #0]
 80085ec:	4b63      	ldr	r3, [pc, #396]	; (800877c <LEDHandler+0x7088>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	4b63      	ldr	r3, [pc, #396]	; (8008780 <LEDHandler+0x708c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	200e      	movs	r0, #14
 80085f6:	f001 fce7 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	Red	,	Green	, 	Blue	)	;		//LED16
 80085fa:	4b5f      	ldr	r3, [pc, #380]	; (8008778 <LEDHandler+0x7084>)
 80085fc:	6819      	ldr	r1, [r3, #0]
 80085fe:	4b5f      	ldr	r3, [pc, #380]	; (800877c <LEDHandler+0x7088>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	4b5f      	ldr	r3, [pc, #380]	; (8008780 <LEDHandler+0x708c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	200f      	movs	r0, #15
 8008608:	f001 fcde 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	Red	,	Green	, 	Blue	)	;		//LED17
 800860c:	4b5a      	ldr	r3, [pc, #360]	; (8008778 <LEDHandler+0x7084>)
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	4b5a      	ldr	r3, [pc, #360]	; (800877c <LEDHandler+0x7088>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	4b5a      	ldr	r3, [pc, #360]	; (8008780 <LEDHandler+0x708c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2010      	movs	r0, #16
 800861a:	f001 fcd5 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	Red	,	Green	, 	Blue	)	;		//LED18
 800861e:	4b56      	ldr	r3, [pc, #344]	; (8008778 <LEDHandler+0x7084>)
 8008620:	6819      	ldr	r1, [r3, #0]
 8008622:	4b56      	ldr	r3, [pc, #344]	; (800877c <LEDHandler+0x7088>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b56      	ldr	r3, [pc, #344]	; (8008780 <LEDHandler+0x708c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2011      	movs	r0, #17
 800862c:	f001 fccc 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	Red	,	Green	, 	Blue	)	;		//LED19
 8008630:	4b51      	ldr	r3, [pc, #324]	; (8008778 <LEDHandler+0x7084>)
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	4b51      	ldr	r3, [pc, #324]	; (800877c <LEDHandler+0x7088>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	4b51      	ldr	r3, [pc, #324]	; (8008780 <LEDHandler+0x708c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2012      	movs	r0, #18
 800863e:	f001 fcc3 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	Red	,	Green	, 	Blue	)	;		//LED20
 8008642:	4b4d      	ldr	r3, [pc, #308]	; (8008778 <LEDHandler+0x7084>)
 8008644:	6819      	ldr	r1, [r3, #0]
 8008646:	4b4d      	ldr	r3, [pc, #308]	; (800877c <LEDHandler+0x7088>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	4b4d      	ldr	r3, [pc, #308]	; (8008780 <LEDHandler+0x708c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2013      	movs	r0, #19
 8008650:	f001 fcba 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	Red	,	Green	, 	Blue	)	;		//LED21
 8008654:	4b48      	ldr	r3, [pc, #288]	; (8008778 <LEDHandler+0x7084>)
 8008656:	6819      	ldr	r1, [r3, #0]
 8008658:	4b48      	ldr	r3, [pc, #288]	; (800877c <LEDHandler+0x7088>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	4b48      	ldr	r3, [pc, #288]	; (8008780 <LEDHandler+0x708c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2014      	movs	r0, #20
 8008662:	f001 fcb1 	bl	8009fc8 <Set_LED>
 8008666:	f001 bbfa 	b.w	8009e5e <LEDHandler+0x876a>
		}

	}else {


		if (var1 == 0) {
 800866a:	4b46      	ldr	r3, [pc, #280]	; (8008784 <LEDHandler+0x7090>)
 800866c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008670:	2b00      	cmp	r3, #0
 8008672:	f040 8089 	bne.w	8008788 <LEDHandler+0x7094>

			Set_LED	(	0	,	0	,	0	, 	0	)	;		//LED1
 8008676:	2300      	movs	r3, #0
 8008678:	2200      	movs	r2, #0
 800867a:	2100      	movs	r1, #0
 800867c:	2000      	movs	r0, #0
 800867e:	f001 fca3 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	0	,	0	, 	0	)	;		//LED2
 8008682:	2300      	movs	r3, #0
 8008684:	2200      	movs	r2, #0
 8008686:	2100      	movs	r1, #0
 8008688:	2001      	movs	r0, #1
 800868a:	f001 fc9d 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 800868e:	2300      	movs	r3, #0
 8008690:	2200      	movs	r2, #0
 8008692:	2100      	movs	r1, #0
 8008694:	2002      	movs	r0, #2
 8008696:	f001 fc97 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 800869a:	2300      	movs	r3, #0
 800869c:	2200      	movs	r2, #0
 800869e:	2100      	movs	r1, #0
 80086a0:	2003      	movs	r0, #3
 80086a2:	f001 fc91 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80086a6:	2300      	movs	r3, #0
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	2004      	movs	r0, #4
 80086ae:	f001 fc8b 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 80086b2:	2300      	movs	r3, #0
 80086b4:	2200      	movs	r2, #0
 80086b6:	2100      	movs	r1, #0
 80086b8:	2005      	movs	r0, #5
 80086ba:	f001 fc85 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 80086be:	2300      	movs	r3, #0
 80086c0:	2200      	movs	r2, #0
 80086c2:	2100      	movs	r1, #0
 80086c4:	2006      	movs	r0, #6
 80086c6:	f001 fc7f 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 80086ca:	2300      	movs	r3, #0
 80086cc:	2200      	movs	r2, #0
 80086ce:	2100      	movs	r1, #0
 80086d0:	2007      	movs	r0, #7
 80086d2:	f001 fc79 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 80086d6:	2300      	movs	r3, #0
 80086d8:	2200      	movs	r2, #0
 80086da:	2100      	movs	r1, #0
 80086dc:	2008      	movs	r0, #8
 80086de:	f001 fc73 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 80086e2:	2300      	movs	r3, #0
 80086e4:	2200      	movs	r2, #0
 80086e6:	2100      	movs	r1, #0
 80086e8:	2009      	movs	r0, #9
 80086ea:	f001 fc6d 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80086ee:	2300      	movs	r3, #0
 80086f0:	2200      	movs	r2, #0
 80086f2:	2100      	movs	r1, #0
 80086f4:	200a      	movs	r0, #10
 80086f6:	f001 fc67 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80086fa:	2300      	movs	r3, #0
 80086fc:	2200      	movs	r2, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	200b      	movs	r0, #11
 8008702:	f001 fc61 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8008706:	2300      	movs	r3, #0
 8008708:	2200      	movs	r2, #0
 800870a:	2100      	movs	r1, #0
 800870c:	200c      	movs	r0, #12
 800870e:	f001 fc5b 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8008712:	2300      	movs	r3, #0
 8008714:	2200      	movs	r2, #0
 8008716:	2100      	movs	r1, #0
 8008718:	200d      	movs	r0, #13
 800871a:	f001 fc55 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800871e:	2300      	movs	r3, #0
 8008720:	2200      	movs	r2, #0
 8008722:	2100      	movs	r1, #0
 8008724:	200e      	movs	r0, #14
 8008726:	f001 fc4f 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800872a:	2300      	movs	r3, #0
 800872c:	2200      	movs	r2, #0
 800872e:	2100      	movs	r1, #0
 8008730:	200f      	movs	r0, #15
 8008732:	f001 fc49 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8008736:	2300      	movs	r3, #0
 8008738:	2200      	movs	r2, #0
 800873a:	2100      	movs	r1, #0
 800873c:	2010      	movs	r0, #16
 800873e:	f001 fc43 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8008742:	2300      	movs	r3, #0
 8008744:	2200      	movs	r2, #0
 8008746:	2100      	movs	r1, #0
 8008748:	2011      	movs	r0, #17
 800874a:	f001 fc3d 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 800874e:	2300      	movs	r3, #0
 8008750:	2200      	movs	r2, #0
 8008752:	2100      	movs	r1, #0
 8008754:	2012      	movs	r0, #18
 8008756:	f001 fc37 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 800875a:	2300      	movs	r3, #0
 800875c:	2200      	movs	r2, #0
 800875e:	2100      	movs	r1, #0
 8008760:	2013      	movs	r0, #19
 8008762:	f001 fc31 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8008766:	2300      	movs	r3, #0
 8008768:	2200      	movs	r2, #0
 800876a:	2100      	movs	r1, #0
 800876c:	2014      	movs	r0, #20
 800876e:	f001 fc2b 	bl	8009fc8 <Set_LED>
 8008772:	f001 bb74 	b.w	8009e5e <LEDHandler+0x876a>
 8008776:	bf00      	nop
 8008778:	20000008 	.word	0x20000008
 800877c:	2000000c 	.word	0x2000000c
 8008780:	20000010 	.word	0x20000010
 8008784:	2000031a 	.word	0x2000031a


		} else if (var1 >= 1 && var1 < 6) {
 8008788:	4bd0      	ldr	r3, [pc, #832]	; (8008acc <LEDHandler+0x73d8>)
 800878a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800878e:	2b00      	cmp	r3, #0
 8008790:	f340 8085 	ble.w	800889e <LEDHandler+0x71aa>
 8008794:	4bcd      	ldr	r3, [pc, #820]	; (8008acc <LEDHandler+0x73d8>)
 8008796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800879a:	2b05      	cmp	r3, #5
 800879c:	dc7f      	bgt.n	800889e <LEDHandler+0x71aa>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 800879e:	23ff      	movs	r3, #255	; 0xff
 80087a0:	22ff      	movs	r2, #255	; 0xff
 80087a2:	21ff      	movs	r1, #255	; 0xff
 80087a4:	2000      	movs	r0, #0
 80087a6:	f001 fc0f 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	0	,	0	, 	0	)	;		//LED2
 80087aa:	2300      	movs	r3, #0
 80087ac:	2200      	movs	r2, #0
 80087ae:	2100      	movs	r1, #0
 80087b0:	2001      	movs	r0, #1
 80087b2:	f001 fc09 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 80087b6:	2300      	movs	r3, #0
 80087b8:	2200      	movs	r2, #0
 80087ba:	2100      	movs	r1, #0
 80087bc:	2002      	movs	r0, #2
 80087be:	f001 fc03 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 80087c2:	2300      	movs	r3, #0
 80087c4:	2200      	movs	r2, #0
 80087c6:	2100      	movs	r1, #0
 80087c8:	2003      	movs	r0, #3
 80087ca:	f001 fbfd 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80087ce:	2300      	movs	r3, #0
 80087d0:	2200      	movs	r2, #0
 80087d2:	2100      	movs	r1, #0
 80087d4:	2004      	movs	r0, #4
 80087d6:	f001 fbf7 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 80087da:	2300      	movs	r3, #0
 80087dc:	2200      	movs	r2, #0
 80087de:	2100      	movs	r1, #0
 80087e0:	2005      	movs	r0, #5
 80087e2:	f001 fbf1 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 80087e6:	2300      	movs	r3, #0
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	2006      	movs	r0, #6
 80087ee:	f001 fbeb 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 80087f2:	2300      	movs	r3, #0
 80087f4:	2200      	movs	r2, #0
 80087f6:	2100      	movs	r1, #0
 80087f8:	2007      	movs	r0, #7
 80087fa:	f001 fbe5 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 80087fe:	2300      	movs	r3, #0
 8008800:	2200      	movs	r2, #0
 8008802:	2100      	movs	r1, #0
 8008804:	2008      	movs	r0, #8
 8008806:	f001 fbdf 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 800880a:	2300      	movs	r3, #0
 800880c:	2200      	movs	r2, #0
 800880e:	2100      	movs	r1, #0
 8008810:	2009      	movs	r0, #9
 8008812:	f001 fbd9 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8008816:	2300      	movs	r3, #0
 8008818:	2200      	movs	r2, #0
 800881a:	2100      	movs	r1, #0
 800881c:	200a      	movs	r0, #10
 800881e:	f001 fbd3 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8008822:	2300      	movs	r3, #0
 8008824:	2200      	movs	r2, #0
 8008826:	2100      	movs	r1, #0
 8008828:	200b      	movs	r0, #11
 800882a:	f001 fbcd 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800882e:	2300      	movs	r3, #0
 8008830:	2200      	movs	r2, #0
 8008832:	2100      	movs	r1, #0
 8008834:	200c      	movs	r0, #12
 8008836:	f001 fbc7 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 800883a:	2300      	movs	r3, #0
 800883c:	2200      	movs	r2, #0
 800883e:	2100      	movs	r1, #0
 8008840:	200d      	movs	r0, #13
 8008842:	f001 fbc1 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	2100      	movs	r1, #0
 800884c:	200e      	movs	r0, #14
 800884e:	f001 fbbb 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8008852:	2300      	movs	r3, #0
 8008854:	2200      	movs	r2, #0
 8008856:	2100      	movs	r1, #0
 8008858:	200f      	movs	r0, #15
 800885a:	f001 fbb5 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800885e:	2300      	movs	r3, #0
 8008860:	2200      	movs	r2, #0
 8008862:	2100      	movs	r1, #0
 8008864:	2010      	movs	r0, #16
 8008866:	f001 fbaf 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 800886a:	2300      	movs	r3, #0
 800886c:	2200      	movs	r2, #0
 800886e:	2100      	movs	r1, #0
 8008870:	2011      	movs	r0, #17
 8008872:	f001 fba9 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8008876:	2300      	movs	r3, #0
 8008878:	2200      	movs	r2, #0
 800887a:	2100      	movs	r1, #0
 800887c:	2012      	movs	r0, #18
 800887e:	f001 fba3 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008882:	2300      	movs	r3, #0
 8008884:	2200      	movs	r2, #0
 8008886:	2100      	movs	r1, #0
 8008888:	2013      	movs	r0, #19
 800888a:	f001 fb9d 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 800888e:	2300      	movs	r3, #0
 8008890:	2200      	movs	r2, #0
 8008892:	2100      	movs	r1, #0
 8008894:	2014      	movs	r0, #20
 8008896:	f001 fb97 	bl	8009fc8 <Set_LED>
 800889a:	f001 bae0 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 6 && var1 < 11) {
 800889e:	4b8b      	ldr	r3, [pc, #556]	; (8008acc <LEDHandler+0x73d8>)
 80088a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088a4:	2b05      	cmp	r3, #5
 80088a6:	f340 8085 	ble.w	80089b4 <LEDHandler+0x72c0>
 80088aa:	4b88      	ldr	r3, [pc, #544]	; (8008acc <LEDHandler+0x73d8>)
 80088ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088b0:	2b0a      	cmp	r3, #10
 80088b2:	dc7f      	bgt.n	80089b4 <LEDHandler+0x72c0>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80088b4:	23ff      	movs	r3, #255	; 0xff
 80088b6:	22ff      	movs	r2, #255	; 0xff
 80088b8:	21ff      	movs	r1, #255	; 0xff
 80088ba:	2000      	movs	r0, #0
 80088bc:	f001 fb84 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80088c0:	23ff      	movs	r3, #255	; 0xff
 80088c2:	22ff      	movs	r2, #255	; 0xff
 80088c4:	21ff      	movs	r1, #255	; 0xff
 80088c6:	2001      	movs	r0, #1
 80088c8:	f001 fb7e 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 80088cc:	2300      	movs	r3, #0
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	2002      	movs	r0, #2
 80088d4:	f001 fb78 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 80088d8:	2300      	movs	r3, #0
 80088da:	2200      	movs	r2, #0
 80088dc:	2100      	movs	r1, #0
 80088de:	2003      	movs	r0, #3
 80088e0:	f001 fb72 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80088e4:	2300      	movs	r3, #0
 80088e6:	2200      	movs	r2, #0
 80088e8:	2100      	movs	r1, #0
 80088ea:	2004      	movs	r0, #4
 80088ec:	f001 fb6c 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 80088f0:	2300      	movs	r3, #0
 80088f2:	2200      	movs	r2, #0
 80088f4:	2100      	movs	r1, #0
 80088f6:	2005      	movs	r0, #5
 80088f8:	f001 fb66 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 80088fc:	2300      	movs	r3, #0
 80088fe:	2200      	movs	r2, #0
 8008900:	2100      	movs	r1, #0
 8008902:	2006      	movs	r0, #6
 8008904:	f001 fb60 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8008908:	2300      	movs	r3, #0
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	2007      	movs	r0, #7
 8008910:	f001 fb5a 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8008914:	2300      	movs	r3, #0
 8008916:	2200      	movs	r2, #0
 8008918:	2100      	movs	r1, #0
 800891a:	2008      	movs	r0, #8
 800891c:	f001 fb54 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8008920:	2300      	movs	r3, #0
 8008922:	2200      	movs	r2, #0
 8008924:	2100      	movs	r1, #0
 8008926:	2009      	movs	r0, #9
 8008928:	f001 fb4e 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800892c:	2300      	movs	r3, #0
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	200a      	movs	r0, #10
 8008934:	f001 fb48 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8008938:	2300      	movs	r3, #0
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	200b      	movs	r0, #11
 8008940:	f001 fb42 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8008944:	2300      	movs	r3, #0
 8008946:	2200      	movs	r2, #0
 8008948:	2100      	movs	r1, #0
 800894a:	200c      	movs	r0, #12
 800894c:	f001 fb3c 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8008950:	2300      	movs	r3, #0
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	200d      	movs	r0, #13
 8008958:	f001 fb36 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800895c:	2300      	movs	r3, #0
 800895e:	2200      	movs	r2, #0
 8008960:	2100      	movs	r1, #0
 8008962:	200e      	movs	r0, #14
 8008964:	f001 fb30 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8008968:	2300      	movs	r3, #0
 800896a:	2200      	movs	r2, #0
 800896c:	2100      	movs	r1, #0
 800896e:	200f      	movs	r0, #15
 8008970:	f001 fb2a 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8008974:	2300      	movs	r3, #0
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	2010      	movs	r0, #16
 800897c:	f001 fb24 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8008980:	2300      	movs	r3, #0
 8008982:	2200      	movs	r2, #0
 8008984:	2100      	movs	r1, #0
 8008986:	2011      	movs	r0, #17
 8008988:	f001 fb1e 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 800898c:	2300      	movs	r3, #0
 800898e:	2200      	movs	r2, #0
 8008990:	2100      	movs	r1, #0
 8008992:	2012      	movs	r0, #18
 8008994:	f001 fb18 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008998:	2300      	movs	r3, #0
 800899a:	2200      	movs	r2, #0
 800899c:	2100      	movs	r1, #0
 800899e:	2013      	movs	r0, #19
 80089a0:	f001 fb12 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80089a4:	2300      	movs	r3, #0
 80089a6:	2200      	movs	r2, #0
 80089a8:	2100      	movs	r1, #0
 80089aa:	2014      	movs	r0, #20
 80089ac:	f001 fb0c 	bl	8009fc8 <Set_LED>
 80089b0:	f001 ba55 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 11 && var1 < 16) {
 80089b4:	4b45      	ldr	r3, [pc, #276]	; (8008acc <LEDHandler+0x73d8>)
 80089b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ba:	2b0a      	cmp	r3, #10
 80089bc:	f340 8088 	ble.w	8008ad0 <LEDHandler+0x73dc>
 80089c0:	4b42      	ldr	r3, [pc, #264]	; (8008acc <LEDHandler+0x73d8>)
 80089c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089c6:	2b0f      	cmp	r3, #15
 80089c8:	f300 8082 	bgt.w	8008ad0 <LEDHandler+0x73dc>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80089cc:	23ff      	movs	r3, #255	; 0xff
 80089ce:	22ff      	movs	r2, #255	; 0xff
 80089d0:	21ff      	movs	r1, #255	; 0xff
 80089d2:	2000      	movs	r0, #0
 80089d4:	f001 faf8 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80089d8:	23ff      	movs	r3, #255	; 0xff
 80089da:	22ff      	movs	r2, #255	; 0xff
 80089dc:	21ff      	movs	r1, #255	; 0xff
 80089de:	2001      	movs	r0, #1
 80089e0:	f001 faf2 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 80089e4:	23ff      	movs	r3, #255	; 0xff
 80089e6:	22ff      	movs	r2, #255	; 0xff
 80089e8:	21ff      	movs	r1, #255	; 0xff
 80089ea:	2002      	movs	r0, #2
 80089ec:	f001 faec 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 80089f0:	2300      	movs	r3, #0
 80089f2:	2200      	movs	r2, #0
 80089f4:	2100      	movs	r1, #0
 80089f6:	2003      	movs	r0, #3
 80089f8:	f001 fae6 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80089fc:	2300      	movs	r3, #0
 80089fe:	2200      	movs	r2, #0
 8008a00:	2100      	movs	r1, #0
 8008a02:	2004      	movs	r0, #4
 8008a04:	f001 fae0 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	2005      	movs	r0, #5
 8008a10:	f001 fada 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8008a14:	2300      	movs	r3, #0
 8008a16:	2200      	movs	r2, #0
 8008a18:	2100      	movs	r1, #0
 8008a1a:	2006      	movs	r0, #6
 8008a1c:	f001 fad4 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8008a20:	2300      	movs	r3, #0
 8008a22:	2200      	movs	r2, #0
 8008a24:	2100      	movs	r1, #0
 8008a26:	2007      	movs	r0, #7
 8008a28:	f001 face 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2100      	movs	r1, #0
 8008a32:	2008      	movs	r0, #8
 8008a34:	f001 fac8 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8008a38:	2300      	movs	r3, #0
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	2009      	movs	r0, #9
 8008a40:	f001 fac2 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8008a44:	2300      	movs	r3, #0
 8008a46:	2200      	movs	r2, #0
 8008a48:	2100      	movs	r1, #0
 8008a4a:	200a      	movs	r0, #10
 8008a4c:	f001 fabc 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8008a50:	2300      	movs	r3, #0
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	200b      	movs	r0, #11
 8008a58:	f001 fab6 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2100      	movs	r1, #0
 8008a62:	200c      	movs	r0, #12
 8008a64:	f001 fab0 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	200d      	movs	r0, #13
 8008a70:	f001 faaa 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8008a74:	2300      	movs	r3, #0
 8008a76:	2200      	movs	r2, #0
 8008a78:	2100      	movs	r1, #0
 8008a7a:	200e      	movs	r0, #14
 8008a7c:	f001 faa4 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8008a80:	2300      	movs	r3, #0
 8008a82:	2200      	movs	r2, #0
 8008a84:	2100      	movs	r1, #0
 8008a86:	200f      	movs	r0, #15
 8008a88:	f001 fa9e 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	2010      	movs	r0, #16
 8008a94:	f001 fa98 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	2011      	movs	r0, #17
 8008aa0:	f001 fa92 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	2012      	movs	r0, #18
 8008aac:	f001 fa8c 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	2013      	movs	r0, #19
 8008ab8:	f001 fa86 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8008abc:	2300      	movs	r3, #0
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	2014      	movs	r0, #20
 8008ac4:	f001 fa80 	bl	8009fc8 <Set_LED>
 8008ac8:	f001 b9c9 	b.w	8009e5e <LEDHandler+0x876a>
 8008acc:	2000031a 	.word	0x2000031a


		} else if (var1 >= 16 && var1 < 21) {
 8008ad0:	4bd0      	ldr	r3, [pc, #832]	; (8008e14 <LEDHandler+0x7720>)
 8008ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ad6:	2b0f      	cmp	r3, #15
 8008ad8:	f340 8085 	ble.w	8008be6 <LEDHandler+0x74f2>
 8008adc:	4bcd      	ldr	r3, [pc, #820]	; (8008e14 <LEDHandler+0x7720>)
 8008ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ae2:	2b14      	cmp	r3, #20
 8008ae4:	dc7f      	bgt.n	8008be6 <LEDHandler+0x74f2>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8008ae6:	23ff      	movs	r3, #255	; 0xff
 8008ae8:	22ff      	movs	r2, #255	; 0xff
 8008aea:	21ff      	movs	r1, #255	; 0xff
 8008aec:	2000      	movs	r0, #0
 8008aee:	f001 fa6b 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8008af2:	23ff      	movs	r3, #255	; 0xff
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	21ff      	movs	r1, #255	; 0xff
 8008af8:	2001      	movs	r0, #1
 8008afa:	f001 fa65 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8008afe:	23ff      	movs	r3, #255	; 0xff
 8008b00:	22ff      	movs	r2, #255	; 0xff
 8008b02:	21ff      	movs	r1, #255	; 0xff
 8008b04:	2002      	movs	r0, #2
 8008b06:	f001 fa5f 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8008b0a:	23ff      	movs	r3, #255	; 0xff
 8008b0c:	22ff      	movs	r2, #255	; 0xff
 8008b0e:	21ff      	movs	r1, #255	; 0xff
 8008b10:	2003      	movs	r0, #3
 8008b12:	f001 fa59 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 8008b16:	2300      	movs	r3, #0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	2004      	movs	r0, #4
 8008b1e:	f001 fa53 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8008b22:	2300      	movs	r3, #0
 8008b24:	2200      	movs	r2, #0
 8008b26:	2100      	movs	r1, #0
 8008b28:	2005      	movs	r0, #5
 8008b2a:	f001 fa4d 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2200      	movs	r2, #0
 8008b32:	2100      	movs	r1, #0
 8008b34:	2006      	movs	r0, #6
 8008b36:	f001 fa47 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	2007      	movs	r0, #7
 8008b42:	f001 fa41 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8008b46:	2300      	movs	r3, #0
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	2008      	movs	r0, #8
 8008b4e:	f001 fa3b 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8008b52:	2300      	movs	r3, #0
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	2009      	movs	r0, #9
 8008b5a:	f001 fa35 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8008b5e:	2300      	movs	r3, #0
 8008b60:	2200      	movs	r2, #0
 8008b62:	2100      	movs	r1, #0
 8008b64:	200a      	movs	r0, #10
 8008b66:	f001 fa2f 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2100      	movs	r1, #0
 8008b70:	200b      	movs	r0, #11
 8008b72:	f001 fa29 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8008b76:	2300      	movs	r3, #0
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	200c      	movs	r0, #12
 8008b7e:	f001 fa23 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8008b82:	2300      	movs	r3, #0
 8008b84:	2200      	movs	r2, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	200d      	movs	r0, #13
 8008b8a:	f001 fa1d 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8008b8e:	2300      	movs	r3, #0
 8008b90:	2200      	movs	r2, #0
 8008b92:	2100      	movs	r1, #0
 8008b94:	200e      	movs	r0, #14
 8008b96:	f001 fa17 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	200f      	movs	r0, #15
 8008ba2:	f001 fa11 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2100      	movs	r1, #0
 8008bac:	2010      	movs	r0, #16
 8008bae:	f001 fa0b 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	2011      	movs	r0, #17
 8008bba:	f001 fa05 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	2012      	movs	r0, #18
 8008bc6:	f001 f9ff 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2100      	movs	r1, #0
 8008bd0:	2013      	movs	r0, #19
 8008bd2:	f001 f9f9 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2100      	movs	r1, #0
 8008bdc:	2014      	movs	r0, #20
 8008bde:	f001 f9f3 	bl	8009fc8 <Set_LED>
 8008be2:	f001 b93c 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 21 && var1 < 26) {
 8008be6:	4b8b      	ldr	r3, [pc, #556]	; (8008e14 <LEDHandler+0x7720>)
 8008be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bec:	2b14      	cmp	r3, #20
 8008bee:	f340 8085 	ble.w	8008cfc <LEDHandler+0x7608>
 8008bf2:	4b88      	ldr	r3, [pc, #544]	; (8008e14 <LEDHandler+0x7720>)
 8008bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bf8:	2b19      	cmp	r3, #25
 8008bfa:	dc7f      	bgt.n	8008cfc <LEDHandler+0x7608>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8008bfc:	23ff      	movs	r3, #255	; 0xff
 8008bfe:	22ff      	movs	r2, #255	; 0xff
 8008c00:	21ff      	movs	r1, #255	; 0xff
 8008c02:	2000      	movs	r0, #0
 8008c04:	f001 f9e0 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8008c08:	23ff      	movs	r3, #255	; 0xff
 8008c0a:	22ff      	movs	r2, #255	; 0xff
 8008c0c:	21ff      	movs	r1, #255	; 0xff
 8008c0e:	2001      	movs	r0, #1
 8008c10:	f001 f9da 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8008c14:	23ff      	movs	r3, #255	; 0xff
 8008c16:	22ff      	movs	r2, #255	; 0xff
 8008c18:	21ff      	movs	r1, #255	; 0xff
 8008c1a:	2002      	movs	r0, #2
 8008c1c:	f001 f9d4 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8008c20:	23ff      	movs	r3, #255	; 0xff
 8008c22:	22ff      	movs	r2, #255	; 0xff
 8008c24:	21ff      	movs	r1, #255	; 0xff
 8008c26:	2003      	movs	r0, #3
 8008c28:	f001 f9ce 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8008c2c:	23ff      	movs	r3, #255	; 0xff
 8008c2e:	22ff      	movs	r2, #255	; 0xff
 8008c30:	21ff      	movs	r1, #255	; 0xff
 8008c32:	2004      	movs	r0, #4
 8008c34:	f001 f9c8 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	2005      	movs	r0, #5
 8008c40:	f001 f9c2 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8008c44:	2300      	movs	r3, #0
 8008c46:	2200      	movs	r2, #0
 8008c48:	2100      	movs	r1, #0
 8008c4a:	2006      	movs	r0, #6
 8008c4c:	f001 f9bc 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8008c50:	2300      	movs	r3, #0
 8008c52:	2200      	movs	r2, #0
 8008c54:	2100      	movs	r1, #0
 8008c56:	2007      	movs	r0, #7
 8008c58:	f001 f9b6 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	2008      	movs	r0, #8
 8008c64:	f001 f9b0 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	2009      	movs	r0, #9
 8008c70:	f001 f9aa 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8008c74:	2300      	movs	r3, #0
 8008c76:	2200      	movs	r2, #0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	200a      	movs	r0, #10
 8008c7c:	f001 f9a4 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8008c80:	2300      	movs	r3, #0
 8008c82:	2200      	movs	r2, #0
 8008c84:	2100      	movs	r1, #0
 8008c86:	200b      	movs	r0, #11
 8008c88:	f001 f99e 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	200c      	movs	r0, #12
 8008c94:	f001 f998 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8008c98:	2300      	movs	r3, #0
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	200d      	movs	r0, #13
 8008ca0:	f001 f992 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2100      	movs	r1, #0
 8008caa:	200e      	movs	r0, #14
 8008cac:	f001 f98c 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	200f      	movs	r0, #15
 8008cb8:	f001 f986 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	2010      	movs	r0, #16
 8008cc4:	f001 f980 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8008cc8:	2300      	movs	r3, #0
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2100      	movs	r1, #0
 8008cce:	2011      	movs	r0, #17
 8008cd0:	f001 f97a 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	2012      	movs	r0, #18
 8008cdc:	f001 f974 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	2013      	movs	r0, #19
 8008ce8:	f001 f96e 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8008cec:	2300      	movs	r3, #0
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	2014      	movs	r0, #20
 8008cf4:	f001 f968 	bl	8009fc8 <Set_LED>
 8008cf8:	f001 b8b1 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 26 && var1 < 30) {
 8008cfc:	4b45      	ldr	r3, [pc, #276]	; (8008e14 <LEDHandler+0x7720>)
 8008cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d02:	2b19      	cmp	r3, #25
 8008d04:	f340 8088 	ble.w	8008e18 <LEDHandler+0x7724>
 8008d08:	4b42      	ldr	r3, [pc, #264]	; (8008e14 <LEDHandler+0x7720>)
 8008d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d0e:	2b1d      	cmp	r3, #29
 8008d10:	f300 8082 	bgt.w	8008e18 <LEDHandler+0x7724>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8008d14:	23ff      	movs	r3, #255	; 0xff
 8008d16:	22ff      	movs	r2, #255	; 0xff
 8008d18:	21ff      	movs	r1, #255	; 0xff
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	f001 f954 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8008d20:	23ff      	movs	r3, #255	; 0xff
 8008d22:	22ff      	movs	r2, #255	; 0xff
 8008d24:	21ff      	movs	r1, #255	; 0xff
 8008d26:	2001      	movs	r0, #1
 8008d28:	f001 f94e 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8008d2c:	23ff      	movs	r3, #255	; 0xff
 8008d2e:	22ff      	movs	r2, #255	; 0xff
 8008d30:	21ff      	movs	r1, #255	; 0xff
 8008d32:	2002      	movs	r0, #2
 8008d34:	f001 f948 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8008d38:	23ff      	movs	r3, #255	; 0xff
 8008d3a:	22ff      	movs	r2, #255	; 0xff
 8008d3c:	21ff      	movs	r1, #255	; 0xff
 8008d3e:	2003      	movs	r0, #3
 8008d40:	f001 f942 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8008d44:	23ff      	movs	r3, #255	; 0xff
 8008d46:	22ff      	movs	r2, #255	; 0xff
 8008d48:	21ff      	movs	r1, #255	; 0xff
 8008d4a:	2004      	movs	r0, #4
 8008d4c:	f001 f93c 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8008d50:	23ff      	movs	r3, #255	; 0xff
 8008d52:	22ff      	movs	r2, #255	; 0xff
 8008d54:	21ff      	movs	r1, #255	; 0xff
 8008d56:	2005      	movs	r0, #5
 8008d58:	f001 f936 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2100      	movs	r1, #0
 8008d62:	2006      	movs	r0, #6
 8008d64:	f001 f930 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8008d68:	2300      	movs	r3, #0
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	2007      	movs	r0, #7
 8008d70:	f001 f92a 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8008d74:	2300      	movs	r3, #0
 8008d76:	2200      	movs	r2, #0
 8008d78:	2100      	movs	r1, #0
 8008d7a:	2008      	movs	r0, #8
 8008d7c:	f001 f924 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8008d80:	2300      	movs	r3, #0
 8008d82:	2200      	movs	r2, #0
 8008d84:	2100      	movs	r1, #0
 8008d86:	2009      	movs	r0, #9
 8008d88:	f001 f91e 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2100      	movs	r1, #0
 8008d92:	200a      	movs	r0, #10
 8008d94:	f001 f918 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8008d98:	2300      	movs	r3, #0
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	200b      	movs	r0, #11
 8008da0:	f001 f912 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8008da4:	2300      	movs	r3, #0
 8008da6:	2200      	movs	r2, #0
 8008da8:	2100      	movs	r1, #0
 8008daa:	200c      	movs	r0, #12
 8008dac:	f001 f90c 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8008db0:	2300      	movs	r3, #0
 8008db2:	2200      	movs	r2, #0
 8008db4:	2100      	movs	r1, #0
 8008db6:	200d      	movs	r0, #13
 8008db8:	f001 f906 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	200e      	movs	r0, #14
 8008dc4:	f001 f900 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2100      	movs	r1, #0
 8008dce:	200f      	movs	r0, #15
 8008dd0:	f001 f8fa 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	2010      	movs	r0, #16
 8008ddc:	f001 f8f4 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8008de0:	2300      	movs	r3, #0
 8008de2:	2200      	movs	r2, #0
 8008de4:	2100      	movs	r1, #0
 8008de6:	2011      	movs	r0, #17
 8008de8:	f001 f8ee 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8008dec:	2300      	movs	r3, #0
 8008dee:	2200      	movs	r2, #0
 8008df0:	2100      	movs	r1, #0
 8008df2:	2012      	movs	r0, #18
 8008df4:	f001 f8e8 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	2013      	movs	r0, #19
 8008e00:	f001 f8e2 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8008e04:	2300      	movs	r3, #0
 8008e06:	2200      	movs	r2, #0
 8008e08:	2100      	movs	r1, #0
 8008e0a:	2014      	movs	r0, #20
 8008e0c:	f001 f8dc 	bl	8009fc8 <Set_LED>
 8008e10:	f001 b825 	b.w	8009e5e <LEDHandler+0x876a>
 8008e14:	2000031a 	.word	0x2000031a


		} else if (var1 >= 30 && var1 < 36) {
 8008e18:	4bd0      	ldr	r3, [pc, #832]	; (800915c <LEDHandler+0x7a68>)
 8008e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e1e:	2b1d      	cmp	r3, #29
 8008e20:	f340 8085 	ble.w	8008f2e <LEDHandler+0x783a>
 8008e24:	4bcd      	ldr	r3, [pc, #820]	; (800915c <LEDHandler+0x7a68>)
 8008e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e2a:	2b23      	cmp	r3, #35	; 0x23
 8008e2c:	dc7f      	bgt.n	8008f2e <LEDHandler+0x783a>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8008e2e:	23ff      	movs	r3, #255	; 0xff
 8008e30:	22ff      	movs	r2, #255	; 0xff
 8008e32:	21ff      	movs	r1, #255	; 0xff
 8008e34:	2000      	movs	r0, #0
 8008e36:	f001 f8c7 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8008e3a:	23ff      	movs	r3, #255	; 0xff
 8008e3c:	22ff      	movs	r2, #255	; 0xff
 8008e3e:	21ff      	movs	r1, #255	; 0xff
 8008e40:	2001      	movs	r0, #1
 8008e42:	f001 f8c1 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8008e46:	23ff      	movs	r3, #255	; 0xff
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	21ff      	movs	r1, #255	; 0xff
 8008e4c:	2002      	movs	r0, #2
 8008e4e:	f001 f8bb 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8008e52:	23ff      	movs	r3, #255	; 0xff
 8008e54:	22ff      	movs	r2, #255	; 0xff
 8008e56:	21ff      	movs	r1, #255	; 0xff
 8008e58:	2003      	movs	r0, #3
 8008e5a:	f001 f8b5 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8008e5e:	23ff      	movs	r3, #255	; 0xff
 8008e60:	22ff      	movs	r2, #255	; 0xff
 8008e62:	21ff      	movs	r1, #255	; 0xff
 8008e64:	2004      	movs	r0, #4
 8008e66:	f001 f8af 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8008e6a:	23ff      	movs	r3, #255	; 0xff
 8008e6c:	22ff      	movs	r2, #255	; 0xff
 8008e6e:	21ff      	movs	r1, #255	; 0xff
 8008e70:	2005      	movs	r0, #5
 8008e72:	f001 f8a9 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8008e76:	23ff      	movs	r3, #255	; 0xff
 8008e78:	22ff      	movs	r2, #255	; 0xff
 8008e7a:	21ff      	movs	r1, #255	; 0xff
 8008e7c:	2006      	movs	r0, #6
 8008e7e:	f001 f8a3 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8008e82:	2300      	movs	r3, #0
 8008e84:	2200      	movs	r2, #0
 8008e86:	2100      	movs	r1, #0
 8008e88:	2007      	movs	r0, #7
 8008e8a:	f001 f89d 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8008e8e:	2300      	movs	r3, #0
 8008e90:	2200      	movs	r2, #0
 8008e92:	2100      	movs	r1, #0
 8008e94:	2008      	movs	r0, #8
 8008e96:	f001 f897 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	2009      	movs	r0, #9
 8008ea2:	f001 f891 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2100      	movs	r1, #0
 8008eac:	200a      	movs	r0, #10
 8008eae:	f001 f88b 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	200b      	movs	r0, #11
 8008eba:	f001 f885 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	200c      	movs	r0, #12
 8008ec6:	f001 f87f 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2100      	movs	r1, #0
 8008ed0:	200d      	movs	r0, #13
 8008ed2:	f001 f879 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2100      	movs	r1, #0
 8008edc:	200e      	movs	r0, #14
 8008ede:	f001 f873 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	200f      	movs	r0, #15
 8008eea:	f001 f86d 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	2010      	movs	r0, #16
 8008ef6:	f001 f867 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8008efa:	2300      	movs	r3, #0
 8008efc:	2200      	movs	r2, #0
 8008efe:	2100      	movs	r1, #0
 8008f00:	2011      	movs	r0, #17
 8008f02:	f001 f861 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8008f06:	2300      	movs	r3, #0
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	2012      	movs	r0, #18
 8008f0e:	f001 f85b 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8008f12:	2300      	movs	r3, #0
 8008f14:	2200      	movs	r2, #0
 8008f16:	2100      	movs	r1, #0
 8008f18:	2013      	movs	r0, #19
 8008f1a:	f001 f855 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8008f1e:	2300      	movs	r3, #0
 8008f20:	2200      	movs	r2, #0
 8008f22:	2100      	movs	r1, #0
 8008f24:	2014      	movs	r0, #20
 8008f26:	f001 f84f 	bl	8009fc8 <Set_LED>
 8008f2a:	f000 bf98 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 36 && var1 < 41) {
 8008f2e:	4b8b      	ldr	r3, [pc, #556]	; (800915c <LEDHandler+0x7a68>)
 8008f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f34:	2b23      	cmp	r3, #35	; 0x23
 8008f36:	f340 8085 	ble.w	8009044 <LEDHandler+0x7950>
 8008f3a:	4b88      	ldr	r3, [pc, #544]	; (800915c <LEDHandler+0x7a68>)
 8008f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f40:	2b28      	cmp	r3, #40	; 0x28
 8008f42:	dc7f      	bgt.n	8009044 <LEDHandler+0x7950>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8008f44:	23ff      	movs	r3, #255	; 0xff
 8008f46:	22ff      	movs	r2, #255	; 0xff
 8008f48:	21ff      	movs	r1, #255	; 0xff
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	f001 f83c 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8008f50:	23ff      	movs	r3, #255	; 0xff
 8008f52:	22ff      	movs	r2, #255	; 0xff
 8008f54:	21ff      	movs	r1, #255	; 0xff
 8008f56:	2001      	movs	r0, #1
 8008f58:	f001 f836 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8008f5c:	23ff      	movs	r3, #255	; 0xff
 8008f5e:	22ff      	movs	r2, #255	; 0xff
 8008f60:	21ff      	movs	r1, #255	; 0xff
 8008f62:	2002      	movs	r0, #2
 8008f64:	f001 f830 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8008f68:	23ff      	movs	r3, #255	; 0xff
 8008f6a:	22ff      	movs	r2, #255	; 0xff
 8008f6c:	21ff      	movs	r1, #255	; 0xff
 8008f6e:	2003      	movs	r0, #3
 8008f70:	f001 f82a 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8008f74:	23ff      	movs	r3, #255	; 0xff
 8008f76:	22ff      	movs	r2, #255	; 0xff
 8008f78:	21ff      	movs	r1, #255	; 0xff
 8008f7a:	2004      	movs	r0, #4
 8008f7c:	f001 f824 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8008f80:	23ff      	movs	r3, #255	; 0xff
 8008f82:	22ff      	movs	r2, #255	; 0xff
 8008f84:	21ff      	movs	r1, #255	; 0xff
 8008f86:	2005      	movs	r0, #5
 8008f88:	f001 f81e 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8008f8c:	23ff      	movs	r3, #255	; 0xff
 8008f8e:	22ff      	movs	r2, #255	; 0xff
 8008f90:	21ff      	movs	r1, #255	; 0xff
 8008f92:	2006      	movs	r0, #6
 8008f94:	f001 f818 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8008f98:	23ff      	movs	r3, #255	; 0xff
 8008f9a:	22ff      	movs	r2, #255	; 0xff
 8008f9c:	21ff      	movs	r1, #255	; 0xff
 8008f9e:	2007      	movs	r0, #7
 8008fa0:	f001 f812 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	2008      	movs	r0, #8
 8008fac:	f001 f80c 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	2009      	movs	r0, #9
 8008fb8:	f001 f806 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	200a      	movs	r0, #10
 8008fc4:	f001 f800 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2100      	movs	r1, #0
 8008fce:	200b      	movs	r0, #11
 8008fd0:	f000 fffa 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	200c      	movs	r0, #12
 8008fdc:	f000 fff4 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	200d      	movs	r0, #13
 8008fe8:	f000 ffee 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8008fec:	2300      	movs	r3, #0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	200e      	movs	r0, #14
 8008ff4:	f000 ffe8 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	200f      	movs	r0, #15
 8009000:	f000 ffe2 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8009004:	2300      	movs	r3, #0
 8009006:	2200      	movs	r2, #0
 8009008:	2100      	movs	r1, #0
 800900a:	2010      	movs	r0, #16
 800900c:	f000 ffdc 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8009010:	2300      	movs	r3, #0
 8009012:	2200      	movs	r2, #0
 8009014:	2100      	movs	r1, #0
 8009016:	2011      	movs	r0, #17
 8009018:	f000 ffd6 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 800901c:	2300      	movs	r3, #0
 800901e:	2200      	movs	r2, #0
 8009020:	2100      	movs	r1, #0
 8009022:	2012      	movs	r0, #18
 8009024:	f000 ffd0 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8009028:	2300      	movs	r3, #0
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	2013      	movs	r0, #19
 8009030:	f000 ffca 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8009034:	2300      	movs	r3, #0
 8009036:	2200      	movs	r2, #0
 8009038:	2100      	movs	r1, #0
 800903a:	2014      	movs	r0, #20
 800903c:	f000 ffc4 	bl	8009fc8 <Set_LED>
 8009040:	f000 bf0d 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 41 && var1 < 46) {
 8009044:	4b45      	ldr	r3, [pc, #276]	; (800915c <LEDHandler+0x7a68>)
 8009046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800904a:	2b28      	cmp	r3, #40	; 0x28
 800904c:	f340 8088 	ble.w	8009160 <LEDHandler+0x7a6c>
 8009050:	4b42      	ldr	r3, [pc, #264]	; (800915c <LEDHandler+0x7a68>)
 8009052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009056:	2b2d      	cmp	r3, #45	; 0x2d
 8009058:	f300 8082 	bgt.w	8009160 <LEDHandler+0x7a6c>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 800905c:	23ff      	movs	r3, #255	; 0xff
 800905e:	22ff      	movs	r2, #255	; 0xff
 8009060:	21ff      	movs	r1, #255	; 0xff
 8009062:	2000      	movs	r0, #0
 8009064:	f000 ffb0 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8009068:	23ff      	movs	r3, #255	; 0xff
 800906a:	22ff      	movs	r2, #255	; 0xff
 800906c:	21ff      	movs	r1, #255	; 0xff
 800906e:	2001      	movs	r0, #1
 8009070:	f000 ffaa 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8009074:	23ff      	movs	r3, #255	; 0xff
 8009076:	22ff      	movs	r2, #255	; 0xff
 8009078:	21ff      	movs	r1, #255	; 0xff
 800907a:	2002      	movs	r0, #2
 800907c:	f000 ffa4 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8009080:	23ff      	movs	r3, #255	; 0xff
 8009082:	22ff      	movs	r2, #255	; 0xff
 8009084:	21ff      	movs	r1, #255	; 0xff
 8009086:	2003      	movs	r0, #3
 8009088:	f000 ff9e 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 800908c:	23ff      	movs	r3, #255	; 0xff
 800908e:	22ff      	movs	r2, #255	; 0xff
 8009090:	21ff      	movs	r1, #255	; 0xff
 8009092:	2004      	movs	r0, #4
 8009094:	f000 ff98 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8009098:	23ff      	movs	r3, #255	; 0xff
 800909a:	22ff      	movs	r2, #255	; 0xff
 800909c:	21ff      	movs	r1, #255	; 0xff
 800909e:	2005      	movs	r0, #5
 80090a0:	f000 ff92 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 80090a4:	23ff      	movs	r3, #255	; 0xff
 80090a6:	22ff      	movs	r2, #255	; 0xff
 80090a8:	21ff      	movs	r1, #255	; 0xff
 80090aa:	2006      	movs	r0, #6
 80090ac:	f000 ff8c 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 80090b0:	23ff      	movs	r3, #255	; 0xff
 80090b2:	22ff      	movs	r2, #255	; 0xff
 80090b4:	21ff      	movs	r1, #255	; 0xff
 80090b6:	2007      	movs	r0, #7
 80090b8:	f000 ff86 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 80090bc:	23ff      	movs	r3, #255	; 0xff
 80090be:	22ff      	movs	r2, #255	; 0xff
 80090c0:	21ff      	movs	r1, #255	; 0xff
 80090c2:	2008      	movs	r0, #8
 80090c4:	f000 ff80 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 80090c8:	2300      	movs	r3, #0
 80090ca:	2200      	movs	r2, #0
 80090cc:	2100      	movs	r1, #0
 80090ce:	2009      	movs	r0, #9
 80090d0:	f000 ff7a 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80090d4:	2300      	movs	r3, #0
 80090d6:	2200      	movs	r2, #0
 80090d8:	2100      	movs	r1, #0
 80090da:	200a      	movs	r0, #10
 80090dc:	f000 ff74 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80090e0:	2300      	movs	r3, #0
 80090e2:	2200      	movs	r2, #0
 80090e4:	2100      	movs	r1, #0
 80090e6:	200b      	movs	r0, #11
 80090e8:	f000 ff6e 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 80090ec:	2300      	movs	r3, #0
 80090ee:	2200      	movs	r2, #0
 80090f0:	2100      	movs	r1, #0
 80090f2:	200c      	movs	r0, #12
 80090f4:	f000 ff68 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80090f8:	2300      	movs	r3, #0
 80090fa:	2200      	movs	r2, #0
 80090fc:	2100      	movs	r1, #0
 80090fe:	200d      	movs	r0, #13
 8009100:	f000 ff62 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8009104:	2300      	movs	r3, #0
 8009106:	2200      	movs	r2, #0
 8009108:	2100      	movs	r1, #0
 800910a:	200e      	movs	r0, #14
 800910c:	f000 ff5c 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8009110:	2300      	movs	r3, #0
 8009112:	2200      	movs	r2, #0
 8009114:	2100      	movs	r1, #0
 8009116:	200f      	movs	r0, #15
 8009118:	f000 ff56 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800911c:	2300      	movs	r3, #0
 800911e:	2200      	movs	r2, #0
 8009120:	2100      	movs	r1, #0
 8009122:	2010      	movs	r0, #16
 8009124:	f000 ff50 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8009128:	2300      	movs	r3, #0
 800912a:	2200      	movs	r2, #0
 800912c:	2100      	movs	r1, #0
 800912e:	2011      	movs	r0, #17
 8009130:	f000 ff4a 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8009134:	2300      	movs	r3, #0
 8009136:	2200      	movs	r2, #0
 8009138:	2100      	movs	r1, #0
 800913a:	2012      	movs	r0, #18
 800913c:	f000 ff44 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8009140:	2300      	movs	r3, #0
 8009142:	2200      	movs	r2, #0
 8009144:	2100      	movs	r1, #0
 8009146:	2013      	movs	r0, #19
 8009148:	f000 ff3e 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 800914c:	2300      	movs	r3, #0
 800914e:	2200      	movs	r2, #0
 8009150:	2100      	movs	r1, #0
 8009152:	2014      	movs	r0, #20
 8009154:	f000 ff38 	bl	8009fc8 <Set_LED>
 8009158:	f000 be81 	b.w	8009e5e <LEDHandler+0x876a>
 800915c:	2000031a 	.word	0x2000031a


		} else if (var1 >= 46 && var1 < 51) {
 8009160:	4bd0      	ldr	r3, [pc, #832]	; (80094a4 <LEDHandler+0x7db0>)
 8009162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009166:	2b2d      	cmp	r3, #45	; 0x2d
 8009168:	f340 8085 	ble.w	8009276 <LEDHandler+0x7b82>
 800916c:	4bcd      	ldr	r3, [pc, #820]	; (80094a4 <LEDHandler+0x7db0>)
 800916e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009172:	2b32      	cmp	r3, #50	; 0x32
 8009174:	dc7f      	bgt.n	8009276 <LEDHandler+0x7b82>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8009176:	23ff      	movs	r3, #255	; 0xff
 8009178:	22ff      	movs	r2, #255	; 0xff
 800917a:	21ff      	movs	r1, #255	; 0xff
 800917c:	2000      	movs	r0, #0
 800917e:	f000 ff23 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8009182:	23ff      	movs	r3, #255	; 0xff
 8009184:	22ff      	movs	r2, #255	; 0xff
 8009186:	21ff      	movs	r1, #255	; 0xff
 8009188:	2001      	movs	r0, #1
 800918a:	f000 ff1d 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 800918e:	23ff      	movs	r3, #255	; 0xff
 8009190:	22ff      	movs	r2, #255	; 0xff
 8009192:	21ff      	movs	r1, #255	; 0xff
 8009194:	2002      	movs	r0, #2
 8009196:	f000 ff17 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 800919a:	23ff      	movs	r3, #255	; 0xff
 800919c:	22ff      	movs	r2, #255	; 0xff
 800919e:	21ff      	movs	r1, #255	; 0xff
 80091a0:	2003      	movs	r0, #3
 80091a2:	f000 ff11 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 80091a6:	23ff      	movs	r3, #255	; 0xff
 80091a8:	22ff      	movs	r2, #255	; 0xff
 80091aa:	21ff      	movs	r1, #255	; 0xff
 80091ac:	2004      	movs	r0, #4
 80091ae:	f000 ff0b 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 80091b2:	23ff      	movs	r3, #255	; 0xff
 80091b4:	22ff      	movs	r2, #255	; 0xff
 80091b6:	21ff      	movs	r1, #255	; 0xff
 80091b8:	2005      	movs	r0, #5
 80091ba:	f000 ff05 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 80091be:	23ff      	movs	r3, #255	; 0xff
 80091c0:	22ff      	movs	r2, #255	; 0xff
 80091c2:	21ff      	movs	r1, #255	; 0xff
 80091c4:	2006      	movs	r0, #6
 80091c6:	f000 feff 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 80091ca:	23ff      	movs	r3, #255	; 0xff
 80091cc:	22ff      	movs	r2, #255	; 0xff
 80091ce:	21ff      	movs	r1, #255	; 0xff
 80091d0:	2007      	movs	r0, #7
 80091d2:	f000 fef9 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 80091d6:	23ff      	movs	r3, #255	; 0xff
 80091d8:	22ff      	movs	r2, #255	; 0xff
 80091da:	21ff      	movs	r1, #255	; 0xff
 80091dc:	2008      	movs	r0, #8
 80091de:	f000 fef3 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 80091e2:	23ff      	movs	r3, #255	; 0xff
 80091e4:	22ff      	movs	r2, #255	; 0xff
 80091e6:	21ff      	movs	r1, #255	; 0xff
 80091e8:	2009      	movs	r0, #9
 80091ea:	f000 feed 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80091ee:	2300      	movs	r3, #0
 80091f0:	2200      	movs	r2, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	200a      	movs	r0, #10
 80091f6:	f000 fee7 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80091fa:	2300      	movs	r3, #0
 80091fc:	2200      	movs	r2, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	200b      	movs	r0, #11
 8009202:	f000 fee1 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8009206:	2300      	movs	r3, #0
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	200c      	movs	r0, #12
 800920e:	f000 fedb 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8009212:	2300      	movs	r3, #0
 8009214:	2200      	movs	r2, #0
 8009216:	2100      	movs	r1, #0
 8009218:	200d      	movs	r0, #13
 800921a:	f000 fed5 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800921e:	2300      	movs	r3, #0
 8009220:	2200      	movs	r2, #0
 8009222:	2100      	movs	r1, #0
 8009224:	200e      	movs	r0, #14
 8009226:	f000 fecf 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800922a:	2300      	movs	r3, #0
 800922c:	2200      	movs	r2, #0
 800922e:	2100      	movs	r1, #0
 8009230:	200f      	movs	r0, #15
 8009232:	f000 fec9 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8009236:	2300      	movs	r3, #0
 8009238:	2200      	movs	r2, #0
 800923a:	2100      	movs	r1, #0
 800923c:	2010      	movs	r0, #16
 800923e:	f000 fec3 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8009242:	2300      	movs	r3, #0
 8009244:	2200      	movs	r2, #0
 8009246:	2100      	movs	r1, #0
 8009248:	2011      	movs	r0, #17
 800924a:	f000 febd 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 800924e:	2300      	movs	r3, #0
 8009250:	2200      	movs	r2, #0
 8009252:	2100      	movs	r1, #0
 8009254:	2012      	movs	r0, #18
 8009256:	f000 feb7 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 800925a:	2300      	movs	r3, #0
 800925c:	2200      	movs	r2, #0
 800925e:	2100      	movs	r1, #0
 8009260:	2013      	movs	r0, #19
 8009262:	f000 feb1 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8009266:	2300      	movs	r3, #0
 8009268:	2200      	movs	r2, #0
 800926a:	2100      	movs	r1, #0
 800926c:	2014      	movs	r0, #20
 800926e:	f000 feab 	bl	8009fc8 <Set_LED>
 8009272:	f000 bdf4 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 51 && var1 < 56) {
 8009276:	4b8b      	ldr	r3, [pc, #556]	; (80094a4 <LEDHandler+0x7db0>)
 8009278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800927c:	2b32      	cmp	r3, #50	; 0x32
 800927e:	f340 8085 	ble.w	800938c <LEDHandler+0x7c98>
 8009282:	4b88      	ldr	r3, [pc, #544]	; (80094a4 <LEDHandler+0x7db0>)
 8009284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009288:	2b37      	cmp	r3, #55	; 0x37
 800928a:	dc7f      	bgt.n	800938c <LEDHandler+0x7c98>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 800928c:	23ff      	movs	r3, #255	; 0xff
 800928e:	22ff      	movs	r2, #255	; 0xff
 8009290:	21ff      	movs	r1, #255	; 0xff
 8009292:	2000      	movs	r0, #0
 8009294:	f000 fe98 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8009298:	23ff      	movs	r3, #255	; 0xff
 800929a:	22ff      	movs	r2, #255	; 0xff
 800929c:	21ff      	movs	r1, #255	; 0xff
 800929e:	2001      	movs	r0, #1
 80092a0:	f000 fe92 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 80092a4:	23ff      	movs	r3, #255	; 0xff
 80092a6:	22ff      	movs	r2, #255	; 0xff
 80092a8:	21ff      	movs	r1, #255	; 0xff
 80092aa:	2002      	movs	r0, #2
 80092ac:	f000 fe8c 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 80092b0:	23ff      	movs	r3, #255	; 0xff
 80092b2:	22ff      	movs	r2, #255	; 0xff
 80092b4:	21ff      	movs	r1, #255	; 0xff
 80092b6:	2003      	movs	r0, #3
 80092b8:	f000 fe86 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 80092bc:	23ff      	movs	r3, #255	; 0xff
 80092be:	22ff      	movs	r2, #255	; 0xff
 80092c0:	21ff      	movs	r1, #255	; 0xff
 80092c2:	2004      	movs	r0, #4
 80092c4:	f000 fe80 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 80092c8:	23ff      	movs	r3, #255	; 0xff
 80092ca:	22ff      	movs	r2, #255	; 0xff
 80092cc:	21ff      	movs	r1, #255	; 0xff
 80092ce:	2005      	movs	r0, #5
 80092d0:	f000 fe7a 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 80092d4:	23ff      	movs	r3, #255	; 0xff
 80092d6:	22ff      	movs	r2, #255	; 0xff
 80092d8:	21ff      	movs	r1, #255	; 0xff
 80092da:	2006      	movs	r0, #6
 80092dc:	f000 fe74 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 80092e0:	23ff      	movs	r3, #255	; 0xff
 80092e2:	22ff      	movs	r2, #255	; 0xff
 80092e4:	21ff      	movs	r1, #255	; 0xff
 80092e6:	2007      	movs	r0, #7
 80092e8:	f000 fe6e 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 80092ec:	23ff      	movs	r3, #255	; 0xff
 80092ee:	22ff      	movs	r2, #255	; 0xff
 80092f0:	21ff      	movs	r1, #255	; 0xff
 80092f2:	2008      	movs	r0, #8
 80092f4:	f000 fe68 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 80092f8:	23ff      	movs	r3, #255	; 0xff
 80092fa:	22ff      	movs	r2, #255	; 0xff
 80092fc:	21ff      	movs	r1, #255	; 0xff
 80092fe:	2009      	movs	r0, #9
 8009300:	f000 fe62 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8009304:	23ff      	movs	r3, #255	; 0xff
 8009306:	22ff      	movs	r2, #255	; 0xff
 8009308:	21ff      	movs	r1, #255	; 0xff
 800930a:	200a      	movs	r0, #10
 800930c:	f000 fe5c 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8009310:	2300      	movs	r3, #0
 8009312:	2200      	movs	r2, #0
 8009314:	2100      	movs	r1, #0
 8009316:	200b      	movs	r0, #11
 8009318:	f000 fe56 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800931c:	2300      	movs	r3, #0
 800931e:	2200      	movs	r2, #0
 8009320:	2100      	movs	r1, #0
 8009322:	200c      	movs	r0, #12
 8009324:	f000 fe50 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8009328:	2300      	movs	r3, #0
 800932a:	2200      	movs	r2, #0
 800932c:	2100      	movs	r1, #0
 800932e:	200d      	movs	r0, #13
 8009330:	f000 fe4a 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8009334:	2300      	movs	r3, #0
 8009336:	2200      	movs	r2, #0
 8009338:	2100      	movs	r1, #0
 800933a:	200e      	movs	r0, #14
 800933c:	f000 fe44 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8009340:	2300      	movs	r3, #0
 8009342:	2200      	movs	r2, #0
 8009344:	2100      	movs	r1, #0
 8009346:	200f      	movs	r0, #15
 8009348:	f000 fe3e 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800934c:	2300      	movs	r3, #0
 800934e:	2200      	movs	r2, #0
 8009350:	2100      	movs	r1, #0
 8009352:	2010      	movs	r0, #16
 8009354:	f000 fe38 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8009358:	2300      	movs	r3, #0
 800935a:	2200      	movs	r2, #0
 800935c:	2100      	movs	r1, #0
 800935e:	2011      	movs	r0, #17
 8009360:	f000 fe32 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8009364:	2300      	movs	r3, #0
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	2012      	movs	r0, #18
 800936c:	f000 fe2c 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8009370:	2300      	movs	r3, #0
 8009372:	2200      	movs	r2, #0
 8009374:	2100      	movs	r1, #0
 8009376:	2013      	movs	r0, #19
 8009378:	f000 fe26 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 800937c:	2300      	movs	r3, #0
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	2014      	movs	r0, #20
 8009384:	f000 fe20 	bl	8009fc8 <Set_LED>
 8009388:	f000 bd69 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 56 && var1 < 61) {
 800938c:	4b45      	ldr	r3, [pc, #276]	; (80094a4 <LEDHandler+0x7db0>)
 800938e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009392:	2b37      	cmp	r3, #55	; 0x37
 8009394:	f340 8088 	ble.w	80094a8 <LEDHandler+0x7db4>
 8009398:	4b42      	ldr	r3, [pc, #264]	; (80094a4 <LEDHandler+0x7db0>)
 800939a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800939e:	2b3c      	cmp	r3, #60	; 0x3c
 80093a0:	f300 8082 	bgt.w	80094a8 <LEDHandler+0x7db4>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80093a4:	23ff      	movs	r3, #255	; 0xff
 80093a6:	22ff      	movs	r2, #255	; 0xff
 80093a8:	21ff      	movs	r1, #255	; 0xff
 80093aa:	2000      	movs	r0, #0
 80093ac:	f000 fe0c 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80093b0:	23ff      	movs	r3, #255	; 0xff
 80093b2:	22ff      	movs	r2, #255	; 0xff
 80093b4:	21ff      	movs	r1, #255	; 0xff
 80093b6:	2001      	movs	r0, #1
 80093b8:	f000 fe06 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 80093bc:	23ff      	movs	r3, #255	; 0xff
 80093be:	22ff      	movs	r2, #255	; 0xff
 80093c0:	21ff      	movs	r1, #255	; 0xff
 80093c2:	2002      	movs	r0, #2
 80093c4:	f000 fe00 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 80093c8:	23ff      	movs	r3, #255	; 0xff
 80093ca:	22ff      	movs	r2, #255	; 0xff
 80093cc:	21ff      	movs	r1, #255	; 0xff
 80093ce:	2003      	movs	r0, #3
 80093d0:	f000 fdfa 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 80093d4:	23ff      	movs	r3, #255	; 0xff
 80093d6:	22ff      	movs	r2, #255	; 0xff
 80093d8:	21ff      	movs	r1, #255	; 0xff
 80093da:	2004      	movs	r0, #4
 80093dc:	f000 fdf4 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 80093e0:	23ff      	movs	r3, #255	; 0xff
 80093e2:	22ff      	movs	r2, #255	; 0xff
 80093e4:	21ff      	movs	r1, #255	; 0xff
 80093e6:	2005      	movs	r0, #5
 80093e8:	f000 fdee 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 80093ec:	23ff      	movs	r3, #255	; 0xff
 80093ee:	22ff      	movs	r2, #255	; 0xff
 80093f0:	21ff      	movs	r1, #255	; 0xff
 80093f2:	2006      	movs	r0, #6
 80093f4:	f000 fde8 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 80093f8:	23ff      	movs	r3, #255	; 0xff
 80093fa:	22ff      	movs	r2, #255	; 0xff
 80093fc:	21ff      	movs	r1, #255	; 0xff
 80093fe:	2007      	movs	r0, #7
 8009400:	f000 fde2 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8009404:	23ff      	movs	r3, #255	; 0xff
 8009406:	22ff      	movs	r2, #255	; 0xff
 8009408:	21ff      	movs	r1, #255	; 0xff
 800940a:	2008      	movs	r0, #8
 800940c:	f000 fddc 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8009410:	23ff      	movs	r3, #255	; 0xff
 8009412:	22ff      	movs	r2, #255	; 0xff
 8009414:	21ff      	movs	r1, #255	; 0xff
 8009416:	2009      	movs	r0, #9
 8009418:	f000 fdd6 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 800941c:	23ff      	movs	r3, #255	; 0xff
 800941e:	22ff      	movs	r2, #255	; 0xff
 8009420:	21ff      	movs	r1, #255	; 0xff
 8009422:	200a      	movs	r0, #10
 8009424:	f000 fdd0 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8009428:	23ff      	movs	r3, #255	; 0xff
 800942a:	22ff      	movs	r2, #255	; 0xff
 800942c:	21ff      	movs	r1, #255	; 0xff
 800942e:	200b      	movs	r0, #11
 8009430:	f000 fdca 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8009434:	2300      	movs	r3, #0
 8009436:	2200      	movs	r2, #0
 8009438:	2100      	movs	r1, #0
 800943a:	200c      	movs	r0, #12
 800943c:	f000 fdc4 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8009440:	2300      	movs	r3, #0
 8009442:	2200      	movs	r2, #0
 8009444:	2100      	movs	r1, #0
 8009446:	200d      	movs	r0, #13
 8009448:	f000 fdbe 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800944c:	2300      	movs	r3, #0
 800944e:	2200      	movs	r2, #0
 8009450:	2100      	movs	r1, #0
 8009452:	200e      	movs	r0, #14
 8009454:	f000 fdb8 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8009458:	2300      	movs	r3, #0
 800945a:	2200      	movs	r2, #0
 800945c:	2100      	movs	r1, #0
 800945e:	200f      	movs	r0, #15
 8009460:	f000 fdb2 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8009464:	2300      	movs	r3, #0
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	2010      	movs	r0, #16
 800946c:	f000 fdac 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 8009470:	2300      	movs	r3, #0
 8009472:	2200      	movs	r2, #0
 8009474:	2100      	movs	r1, #0
 8009476:	2011      	movs	r0, #17
 8009478:	f000 fda6 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 800947c:	2300      	movs	r3, #0
 800947e:	2200      	movs	r2, #0
 8009480:	2100      	movs	r1, #0
 8009482:	2012      	movs	r0, #18
 8009484:	f000 fda0 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8009488:	2300      	movs	r3, #0
 800948a:	2200      	movs	r2, #0
 800948c:	2100      	movs	r1, #0
 800948e:	2013      	movs	r0, #19
 8009490:	f000 fd9a 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8009494:	2300      	movs	r3, #0
 8009496:	2200      	movs	r2, #0
 8009498:	2100      	movs	r1, #0
 800949a:	2014      	movs	r0, #20
 800949c:	f000 fd94 	bl	8009fc8 <Set_LED>
 80094a0:	f000 bcdd 	b.w	8009e5e <LEDHandler+0x876a>
 80094a4:	2000031a 	.word	0x2000031a


		} else if (var1 >= 61 && var1 < 66) {
 80094a8:	4bcf      	ldr	r3, [pc, #828]	; (80097e8 <LEDHandler+0x80f4>)
 80094aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094ae:	2b3c      	cmp	r3, #60	; 0x3c
 80094b0:	f340 8085 	ble.w	80095be <LEDHandler+0x7eca>
 80094b4:	4bcc      	ldr	r3, [pc, #816]	; (80097e8 <LEDHandler+0x80f4>)
 80094b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094ba:	2b41      	cmp	r3, #65	; 0x41
 80094bc:	dc7f      	bgt.n	80095be <LEDHandler+0x7eca>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80094be:	23ff      	movs	r3, #255	; 0xff
 80094c0:	22ff      	movs	r2, #255	; 0xff
 80094c2:	21ff      	movs	r1, #255	; 0xff
 80094c4:	2000      	movs	r0, #0
 80094c6:	f000 fd7f 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80094ca:	23ff      	movs	r3, #255	; 0xff
 80094cc:	22ff      	movs	r2, #255	; 0xff
 80094ce:	21ff      	movs	r1, #255	; 0xff
 80094d0:	2001      	movs	r0, #1
 80094d2:	f000 fd79 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 80094d6:	23ff      	movs	r3, #255	; 0xff
 80094d8:	22ff      	movs	r2, #255	; 0xff
 80094da:	21ff      	movs	r1, #255	; 0xff
 80094dc:	2002      	movs	r0, #2
 80094de:	f000 fd73 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 80094e2:	23ff      	movs	r3, #255	; 0xff
 80094e4:	22ff      	movs	r2, #255	; 0xff
 80094e6:	21ff      	movs	r1, #255	; 0xff
 80094e8:	2003      	movs	r0, #3
 80094ea:	f000 fd6d 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 80094ee:	23ff      	movs	r3, #255	; 0xff
 80094f0:	22ff      	movs	r2, #255	; 0xff
 80094f2:	21ff      	movs	r1, #255	; 0xff
 80094f4:	2004      	movs	r0, #4
 80094f6:	f000 fd67 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 80094fa:	23ff      	movs	r3, #255	; 0xff
 80094fc:	22ff      	movs	r2, #255	; 0xff
 80094fe:	21ff      	movs	r1, #255	; 0xff
 8009500:	2005      	movs	r0, #5
 8009502:	f000 fd61 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8009506:	23ff      	movs	r3, #255	; 0xff
 8009508:	22ff      	movs	r2, #255	; 0xff
 800950a:	21ff      	movs	r1, #255	; 0xff
 800950c:	2006      	movs	r0, #6
 800950e:	f000 fd5b 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8009512:	23ff      	movs	r3, #255	; 0xff
 8009514:	22ff      	movs	r2, #255	; 0xff
 8009516:	21ff      	movs	r1, #255	; 0xff
 8009518:	2007      	movs	r0, #7
 800951a:	f000 fd55 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 800951e:	23ff      	movs	r3, #255	; 0xff
 8009520:	22ff      	movs	r2, #255	; 0xff
 8009522:	21ff      	movs	r1, #255	; 0xff
 8009524:	2008      	movs	r0, #8
 8009526:	f000 fd4f 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 800952a:	23ff      	movs	r3, #255	; 0xff
 800952c:	22ff      	movs	r2, #255	; 0xff
 800952e:	21ff      	movs	r1, #255	; 0xff
 8009530:	2009      	movs	r0, #9
 8009532:	f000 fd49 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8009536:	23ff      	movs	r3, #255	; 0xff
 8009538:	22ff      	movs	r2, #255	; 0xff
 800953a:	21ff      	movs	r1, #255	; 0xff
 800953c:	200a      	movs	r0, #10
 800953e:	f000 fd43 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8009542:	23ff      	movs	r3, #255	; 0xff
 8009544:	22ff      	movs	r2, #255	; 0xff
 8009546:	21ff      	movs	r1, #255	; 0xff
 8009548:	200b      	movs	r0, #11
 800954a:	f000 fd3d 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 800954e:	23ff      	movs	r3, #255	; 0xff
 8009550:	22ff      	movs	r2, #255	; 0xff
 8009552:	21ff      	movs	r1, #255	; 0xff
 8009554:	200c      	movs	r0, #12
 8009556:	f000 fd37 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 800955a:	2300      	movs	r3, #0
 800955c:	2200      	movs	r2, #0
 800955e:	2100      	movs	r1, #0
 8009560:	200d      	movs	r0, #13
 8009562:	f000 fd31 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8009566:	2300      	movs	r3, #0
 8009568:	2200      	movs	r2, #0
 800956a:	2100      	movs	r1, #0
 800956c:	200e      	movs	r0, #14
 800956e:	f000 fd2b 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8009572:	2300      	movs	r3, #0
 8009574:	2200      	movs	r2, #0
 8009576:	2100      	movs	r1, #0
 8009578:	200f      	movs	r0, #15
 800957a:	f000 fd25 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800957e:	2300      	movs	r3, #0
 8009580:	2200      	movs	r2, #0
 8009582:	2100      	movs	r1, #0
 8009584:	2010      	movs	r0, #16
 8009586:	f000 fd1f 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 800958a:	2300      	movs	r3, #0
 800958c:	2200      	movs	r2, #0
 800958e:	2100      	movs	r1, #0
 8009590:	2011      	movs	r0, #17
 8009592:	f000 fd19 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8009596:	2300      	movs	r3, #0
 8009598:	2200      	movs	r2, #0
 800959a:	2100      	movs	r1, #0
 800959c:	2012      	movs	r0, #18
 800959e:	f000 fd13 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80095a2:	2300      	movs	r3, #0
 80095a4:	2200      	movs	r2, #0
 80095a6:	2100      	movs	r1, #0
 80095a8:	2013      	movs	r0, #19
 80095aa:	f000 fd0d 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80095ae:	2300      	movs	r3, #0
 80095b0:	2200      	movs	r2, #0
 80095b2:	2100      	movs	r1, #0
 80095b4:	2014      	movs	r0, #20
 80095b6:	f000 fd07 	bl	8009fc8 <Set_LED>
 80095ba:	f000 bc50 	b.w	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 66 && var1 < 71) {
 80095be:	4b8a      	ldr	r3, [pc, #552]	; (80097e8 <LEDHandler+0x80f4>)
 80095c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095c4:	2b41      	cmp	r3, #65	; 0x41
 80095c6:	f340 8084 	ble.w	80096d2 <LEDHandler+0x7fde>
 80095ca:	4b87      	ldr	r3, [pc, #540]	; (80097e8 <LEDHandler+0x80f4>)
 80095cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095d0:	2b46      	cmp	r3, #70	; 0x46
 80095d2:	dc7e      	bgt.n	80096d2 <LEDHandler+0x7fde>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80095d4:	23ff      	movs	r3, #255	; 0xff
 80095d6:	22ff      	movs	r2, #255	; 0xff
 80095d8:	21ff      	movs	r1, #255	; 0xff
 80095da:	2000      	movs	r0, #0
 80095dc:	f000 fcf4 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80095e0:	23ff      	movs	r3, #255	; 0xff
 80095e2:	22ff      	movs	r2, #255	; 0xff
 80095e4:	21ff      	movs	r1, #255	; 0xff
 80095e6:	2001      	movs	r0, #1
 80095e8:	f000 fcee 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 80095ec:	23ff      	movs	r3, #255	; 0xff
 80095ee:	22ff      	movs	r2, #255	; 0xff
 80095f0:	21ff      	movs	r1, #255	; 0xff
 80095f2:	2002      	movs	r0, #2
 80095f4:	f000 fce8 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 80095f8:	23ff      	movs	r3, #255	; 0xff
 80095fa:	22ff      	movs	r2, #255	; 0xff
 80095fc:	21ff      	movs	r1, #255	; 0xff
 80095fe:	2003      	movs	r0, #3
 8009600:	f000 fce2 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8009604:	23ff      	movs	r3, #255	; 0xff
 8009606:	22ff      	movs	r2, #255	; 0xff
 8009608:	21ff      	movs	r1, #255	; 0xff
 800960a:	2004      	movs	r0, #4
 800960c:	f000 fcdc 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8009610:	23ff      	movs	r3, #255	; 0xff
 8009612:	22ff      	movs	r2, #255	; 0xff
 8009614:	21ff      	movs	r1, #255	; 0xff
 8009616:	2005      	movs	r0, #5
 8009618:	f000 fcd6 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 800961c:	23ff      	movs	r3, #255	; 0xff
 800961e:	22ff      	movs	r2, #255	; 0xff
 8009620:	21ff      	movs	r1, #255	; 0xff
 8009622:	2006      	movs	r0, #6
 8009624:	f000 fcd0 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8009628:	23ff      	movs	r3, #255	; 0xff
 800962a:	22ff      	movs	r2, #255	; 0xff
 800962c:	21ff      	movs	r1, #255	; 0xff
 800962e:	2007      	movs	r0, #7
 8009630:	f000 fcca 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8009634:	23ff      	movs	r3, #255	; 0xff
 8009636:	22ff      	movs	r2, #255	; 0xff
 8009638:	21ff      	movs	r1, #255	; 0xff
 800963a:	2008      	movs	r0, #8
 800963c:	f000 fcc4 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8009640:	23ff      	movs	r3, #255	; 0xff
 8009642:	22ff      	movs	r2, #255	; 0xff
 8009644:	21ff      	movs	r1, #255	; 0xff
 8009646:	2009      	movs	r0, #9
 8009648:	f000 fcbe 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 800964c:	23ff      	movs	r3, #255	; 0xff
 800964e:	22ff      	movs	r2, #255	; 0xff
 8009650:	21ff      	movs	r1, #255	; 0xff
 8009652:	200a      	movs	r0, #10
 8009654:	f000 fcb8 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8009658:	23ff      	movs	r3, #255	; 0xff
 800965a:	22ff      	movs	r2, #255	; 0xff
 800965c:	21ff      	movs	r1, #255	; 0xff
 800965e:	200b      	movs	r0, #11
 8009660:	f000 fcb2 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 8009664:	23ff      	movs	r3, #255	; 0xff
 8009666:	22ff      	movs	r2, #255	; 0xff
 8009668:	21ff      	movs	r1, #255	; 0xff
 800966a:	200c      	movs	r0, #12
 800966c:	f000 fcac 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 8009670:	23ff      	movs	r3, #255	; 0xff
 8009672:	22ff      	movs	r2, #255	; 0xff
 8009674:	21ff      	movs	r1, #255	; 0xff
 8009676:	200d      	movs	r0, #13
 8009678:	f000 fca6 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800967c:	2300      	movs	r3, #0
 800967e:	2200      	movs	r2, #0
 8009680:	2100      	movs	r1, #0
 8009682:	200e      	movs	r0, #14
 8009684:	f000 fca0 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8009688:	2300      	movs	r3, #0
 800968a:	2200      	movs	r2, #0
 800968c:	2100      	movs	r1, #0
 800968e:	200f      	movs	r0, #15
 8009690:	f000 fc9a 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8009694:	2300      	movs	r3, #0
 8009696:	2200      	movs	r2, #0
 8009698:	2100      	movs	r1, #0
 800969a:	2010      	movs	r0, #16
 800969c:	f000 fc94 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 80096a0:	2300      	movs	r3, #0
 80096a2:	2200      	movs	r2, #0
 80096a4:	2100      	movs	r1, #0
 80096a6:	2011      	movs	r0, #17
 80096a8:	f000 fc8e 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80096ac:	2300      	movs	r3, #0
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	2012      	movs	r0, #18
 80096b4:	f000 fc88 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80096b8:	2300      	movs	r3, #0
 80096ba:	2200      	movs	r2, #0
 80096bc:	2100      	movs	r1, #0
 80096be:	2013      	movs	r0, #19
 80096c0:	f000 fc82 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80096c4:	2300      	movs	r3, #0
 80096c6:	2200      	movs	r2, #0
 80096c8:	2100      	movs	r1, #0
 80096ca:	2014      	movs	r0, #20
 80096cc:	f000 fc7c 	bl	8009fc8 <Set_LED>
 80096d0:	e3c5      	b.n	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 71 && var1 < 76) {
 80096d2:	4b45      	ldr	r3, [pc, #276]	; (80097e8 <LEDHandler+0x80f4>)
 80096d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096d8:	2b46      	cmp	r3, #70	; 0x46
 80096da:	f340 8087 	ble.w	80097ec <LEDHandler+0x80f8>
 80096de:	4b42      	ldr	r3, [pc, #264]	; (80097e8 <LEDHandler+0x80f4>)
 80096e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096e4:	2b4b      	cmp	r3, #75	; 0x4b
 80096e6:	f300 8081 	bgt.w	80097ec <LEDHandler+0x80f8>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80096ea:	23ff      	movs	r3, #255	; 0xff
 80096ec:	22ff      	movs	r2, #255	; 0xff
 80096ee:	21ff      	movs	r1, #255	; 0xff
 80096f0:	2000      	movs	r0, #0
 80096f2:	f000 fc69 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80096f6:	23ff      	movs	r3, #255	; 0xff
 80096f8:	22ff      	movs	r2, #255	; 0xff
 80096fa:	21ff      	movs	r1, #255	; 0xff
 80096fc:	2001      	movs	r0, #1
 80096fe:	f000 fc63 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8009702:	23ff      	movs	r3, #255	; 0xff
 8009704:	22ff      	movs	r2, #255	; 0xff
 8009706:	21ff      	movs	r1, #255	; 0xff
 8009708:	2002      	movs	r0, #2
 800970a:	f000 fc5d 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 800970e:	23ff      	movs	r3, #255	; 0xff
 8009710:	22ff      	movs	r2, #255	; 0xff
 8009712:	21ff      	movs	r1, #255	; 0xff
 8009714:	2003      	movs	r0, #3
 8009716:	f000 fc57 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 800971a:	23ff      	movs	r3, #255	; 0xff
 800971c:	22ff      	movs	r2, #255	; 0xff
 800971e:	21ff      	movs	r1, #255	; 0xff
 8009720:	2004      	movs	r0, #4
 8009722:	f000 fc51 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8009726:	23ff      	movs	r3, #255	; 0xff
 8009728:	22ff      	movs	r2, #255	; 0xff
 800972a:	21ff      	movs	r1, #255	; 0xff
 800972c:	2005      	movs	r0, #5
 800972e:	f000 fc4b 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8009732:	23ff      	movs	r3, #255	; 0xff
 8009734:	22ff      	movs	r2, #255	; 0xff
 8009736:	21ff      	movs	r1, #255	; 0xff
 8009738:	2006      	movs	r0, #6
 800973a:	f000 fc45 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 800973e:	23ff      	movs	r3, #255	; 0xff
 8009740:	22ff      	movs	r2, #255	; 0xff
 8009742:	21ff      	movs	r1, #255	; 0xff
 8009744:	2007      	movs	r0, #7
 8009746:	f000 fc3f 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 800974a:	23ff      	movs	r3, #255	; 0xff
 800974c:	22ff      	movs	r2, #255	; 0xff
 800974e:	21ff      	movs	r1, #255	; 0xff
 8009750:	2008      	movs	r0, #8
 8009752:	f000 fc39 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8009756:	23ff      	movs	r3, #255	; 0xff
 8009758:	22ff      	movs	r2, #255	; 0xff
 800975a:	21ff      	movs	r1, #255	; 0xff
 800975c:	2009      	movs	r0, #9
 800975e:	f000 fc33 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8009762:	23ff      	movs	r3, #255	; 0xff
 8009764:	22ff      	movs	r2, #255	; 0xff
 8009766:	21ff      	movs	r1, #255	; 0xff
 8009768:	200a      	movs	r0, #10
 800976a:	f000 fc2d 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 800976e:	23ff      	movs	r3, #255	; 0xff
 8009770:	22ff      	movs	r2, #255	; 0xff
 8009772:	21ff      	movs	r1, #255	; 0xff
 8009774:	200b      	movs	r0, #11
 8009776:	f000 fc27 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 800977a:	23ff      	movs	r3, #255	; 0xff
 800977c:	22ff      	movs	r2, #255	; 0xff
 800977e:	21ff      	movs	r1, #255	; 0xff
 8009780:	200c      	movs	r0, #12
 8009782:	f000 fc21 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 8009786:	23ff      	movs	r3, #255	; 0xff
 8009788:	22ff      	movs	r2, #255	; 0xff
 800978a:	21ff      	movs	r1, #255	; 0xff
 800978c:	200d      	movs	r0, #13
 800978e:	f000 fc1b 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 8009792:	23ff      	movs	r3, #255	; 0xff
 8009794:	22ff      	movs	r2, #255	; 0xff
 8009796:	21ff      	movs	r1, #255	; 0xff
 8009798:	200e      	movs	r0, #14
 800979a:	f000 fc15 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800979e:	2300      	movs	r3, #0
 80097a0:	2200      	movs	r2, #0
 80097a2:	2100      	movs	r1, #0
 80097a4:	200f      	movs	r0, #15
 80097a6:	f000 fc0f 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80097aa:	2300      	movs	r3, #0
 80097ac:	2200      	movs	r2, #0
 80097ae:	2100      	movs	r1, #0
 80097b0:	2010      	movs	r0, #16
 80097b2:	f000 fc09 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 80097b6:	2300      	movs	r3, #0
 80097b8:	2200      	movs	r2, #0
 80097ba:	2100      	movs	r1, #0
 80097bc:	2011      	movs	r0, #17
 80097be:	f000 fc03 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80097c2:	2300      	movs	r3, #0
 80097c4:	2200      	movs	r2, #0
 80097c6:	2100      	movs	r1, #0
 80097c8:	2012      	movs	r0, #18
 80097ca:	f000 fbfd 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80097ce:	2300      	movs	r3, #0
 80097d0:	2200      	movs	r2, #0
 80097d2:	2100      	movs	r1, #0
 80097d4:	2013      	movs	r0, #19
 80097d6:	f000 fbf7 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80097da:	2300      	movs	r3, #0
 80097dc:	2200      	movs	r2, #0
 80097de:	2100      	movs	r1, #0
 80097e0:	2014      	movs	r0, #20
 80097e2:	f000 fbf1 	bl	8009fc8 <Set_LED>
 80097e6:	e33a      	b.n	8009e5e <LEDHandler+0x876a>
 80097e8:	2000031a 	.word	0x2000031a


		} else if (var1 >= 76 && var1 < 81) {
 80097ec:	4bcf      	ldr	r3, [pc, #828]	; (8009b2c <LEDHandler+0x8438>)
 80097ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097f2:	2b4b      	cmp	r3, #75	; 0x4b
 80097f4:	f340 8084 	ble.w	8009900 <LEDHandler+0x820c>
 80097f8:	4bcc      	ldr	r3, [pc, #816]	; (8009b2c <LEDHandler+0x8438>)
 80097fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097fe:	2b50      	cmp	r3, #80	; 0x50
 8009800:	dc7e      	bgt.n	8009900 <LEDHandler+0x820c>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8009802:	23ff      	movs	r3, #255	; 0xff
 8009804:	22ff      	movs	r2, #255	; 0xff
 8009806:	21ff      	movs	r1, #255	; 0xff
 8009808:	2000      	movs	r0, #0
 800980a:	f000 fbdd 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 800980e:	23ff      	movs	r3, #255	; 0xff
 8009810:	22ff      	movs	r2, #255	; 0xff
 8009812:	21ff      	movs	r1, #255	; 0xff
 8009814:	2001      	movs	r0, #1
 8009816:	f000 fbd7 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 800981a:	23ff      	movs	r3, #255	; 0xff
 800981c:	22ff      	movs	r2, #255	; 0xff
 800981e:	21ff      	movs	r1, #255	; 0xff
 8009820:	2002      	movs	r0, #2
 8009822:	f000 fbd1 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8009826:	23ff      	movs	r3, #255	; 0xff
 8009828:	22ff      	movs	r2, #255	; 0xff
 800982a:	21ff      	movs	r1, #255	; 0xff
 800982c:	2003      	movs	r0, #3
 800982e:	f000 fbcb 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8009832:	23ff      	movs	r3, #255	; 0xff
 8009834:	22ff      	movs	r2, #255	; 0xff
 8009836:	21ff      	movs	r1, #255	; 0xff
 8009838:	2004      	movs	r0, #4
 800983a:	f000 fbc5 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 800983e:	23ff      	movs	r3, #255	; 0xff
 8009840:	22ff      	movs	r2, #255	; 0xff
 8009842:	21ff      	movs	r1, #255	; 0xff
 8009844:	2005      	movs	r0, #5
 8009846:	f000 fbbf 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 800984a:	23ff      	movs	r3, #255	; 0xff
 800984c:	22ff      	movs	r2, #255	; 0xff
 800984e:	21ff      	movs	r1, #255	; 0xff
 8009850:	2006      	movs	r0, #6
 8009852:	f000 fbb9 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8009856:	23ff      	movs	r3, #255	; 0xff
 8009858:	22ff      	movs	r2, #255	; 0xff
 800985a:	21ff      	movs	r1, #255	; 0xff
 800985c:	2007      	movs	r0, #7
 800985e:	f000 fbb3 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8009862:	23ff      	movs	r3, #255	; 0xff
 8009864:	22ff      	movs	r2, #255	; 0xff
 8009866:	21ff      	movs	r1, #255	; 0xff
 8009868:	2008      	movs	r0, #8
 800986a:	f000 fbad 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 800986e:	23ff      	movs	r3, #255	; 0xff
 8009870:	22ff      	movs	r2, #255	; 0xff
 8009872:	21ff      	movs	r1, #255	; 0xff
 8009874:	2009      	movs	r0, #9
 8009876:	f000 fba7 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 800987a:	23ff      	movs	r3, #255	; 0xff
 800987c:	22ff      	movs	r2, #255	; 0xff
 800987e:	21ff      	movs	r1, #255	; 0xff
 8009880:	200a      	movs	r0, #10
 8009882:	f000 fba1 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8009886:	23ff      	movs	r3, #255	; 0xff
 8009888:	22ff      	movs	r2, #255	; 0xff
 800988a:	21ff      	movs	r1, #255	; 0xff
 800988c:	200b      	movs	r0, #11
 800988e:	f000 fb9b 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 8009892:	23ff      	movs	r3, #255	; 0xff
 8009894:	22ff      	movs	r2, #255	; 0xff
 8009896:	21ff      	movs	r1, #255	; 0xff
 8009898:	200c      	movs	r0, #12
 800989a:	f000 fb95 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 800989e:	23ff      	movs	r3, #255	; 0xff
 80098a0:	22ff      	movs	r2, #255	; 0xff
 80098a2:	21ff      	movs	r1, #255	; 0xff
 80098a4:	200d      	movs	r0, #13
 80098a6:	f000 fb8f 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 80098aa:	23ff      	movs	r3, #255	; 0xff
 80098ac:	22ff      	movs	r2, #255	; 0xff
 80098ae:	21ff      	movs	r1, #255	; 0xff
 80098b0:	200e      	movs	r0, #14
 80098b2:	f000 fb89 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	255	,	255	, 	255	)	;		//LED16
 80098b6:	23ff      	movs	r3, #255	; 0xff
 80098b8:	22ff      	movs	r2, #255	; 0xff
 80098ba:	21ff      	movs	r1, #255	; 0xff
 80098bc:	200f      	movs	r0, #15
 80098be:	f000 fb83 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80098c2:	2300      	movs	r3, #0
 80098c4:	2200      	movs	r2, #0
 80098c6:	2100      	movs	r1, #0
 80098c8:	2010      	movs	r0, #16
 80098ca:	f000 fb7d 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 80098ce:	2300      	movs	r3, #0
 80098d0:	2200      	movs	r2, #0
 80098d2:	2100      	movs	r1, #0
 80098d4:	2011      	movs	r0, #17
 80098d6:	f000 fb77 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80098da:	2300      	movs	r3, #0
 80098dc:	2200      	movs	r2, #0
 80098de:	2100      	movs	r1, #0
 80098e0:	2012      	movs	r0, #18
 80098e2:	f000 fb71 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80098e6:	2300      	movs	r3, #0
 80098e8:	2200      	movs	r2, #0
 80098ea:	2100      	movs	r1, #0
 80098ec:	2013      	movs	r0, #19
 80098ee:	f000 fb6b 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 80098f2:	2300      	movs	r3, #0
 80098f4:	2200      	movs	r2, #0
 80098f6:	2100      	movs	r1, #0
 80098f8:	2014      	movs	r0, #20
 80098fa:	f000 fb65 	bl	8009fc8 <Set_LED>
 80098fe:	e2ae      	b.n	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 81 && var1 < 86) {
 8009900:	4b8a      	ldr	r3, [pc, #552]	; (8009b2c <LEDHandler+0x8438>)
 8009902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009906:	2b50      	cmp	r3, #80	; 0x50
 8009908:	f340 8084 	ble.w	8009a14 <LEDHandler+0x8320>
 800990c:	4b87      	ldr	r3, [pc, #540]	; (8009b2c <LEDHandler+0x8438>)
 800990e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009912:	2b55      	cmp	r3, #85	; 0x55
 8009914:	dc7e      	bgt.n	8009a14 <LEDHandler+0x8320>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8009916:	23ff      	movs	r3, #255	; 0xff
 8009918:	22ff      	movs	r2, #255	; 0xff
 800991a:	21ff      	movs	r1, #255	; 0xff
 800991c:	2000      	movs	r0, #0
 800991e:	f000 fb53 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8009922:	23ff      	movs	r3, #255	; 0xff
 8009924:	22ff      	movs	r2, #255	; 0xff
 8009926:	21ff      	movs	r1, #255	; 0xff
 8009928:	2001      	movs	r0, #1
 800992a:	f000 fb4d 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 800992e:	23ff      	movs	r3, #255	; 0xff
 8009930:	22ff      	movs	r2, #255	; 0xff
 8009932:	21ff      	movs	r1, #255	; 0xff
 8009934:	2002      	movs	r0, #2
 8009936:	f000 fb47 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 800993a:	23ff      	movs	r3, #255	; 0xff
 800993c:	22ff      	movs	r2, #255	; 0xff
 800993e:	21ff      	movs	r1, #255	; 0xff
 8009940:	2003      	movs	r0, #3
 8009942:	f000 fb41 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8009946:	23ff      	movs	r3, #255	; 0xff
 8009948:	22ff      	movs	r2, #255	; 0xff
 800994a:	21ff      	movs	r1, #255	; 0xff
 800994c:	2004      	movs	r0, #4
 800994e:	f000 fb3b 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8009952:	23ff      	movs	r3, #255	; 0xff
 8009954:	22ff      	movs	r2, #255	; 0xff
 8009956:	21ff      	movs	r1, #255	; 0xff
 8009958:	2005      	movs	r0, #5
 800995a:	f000 fb35 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 800995e:	23ff      	movs	r3, #255	; 0xff
 8009960:	22ff      	movs	r2, #255	; 0xff
 8009962:	21ff      	movs	r1, #255	; 0xff
 8009964:	2006      	movs	r0, #6
 8009966:	f000 fb2f 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 800996a:	23ff      	movs	r3, #255	; 0xff
 800996c:	22ff      	movs	r2, #255	; 0xff
 800996e:	21ff      	movs	r1, #255	; 0xff
 8009970:	2007      	movs	r0, #7
 8009972:	f000 fb29 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8009976:	23ff      	movs	r3, #255	; 0xff
 8009978:	22ff      	movs	r2, #255	; 0xff
 800997a:	21ff      	movs	r1, #255	; 0xff
 800997c:	2008      	movs	r0, #8
 800997e:	f000 fb23 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8009982:	23ff      	movs	r3, #255	; 0xff
 8009984:	22ff      	movs	r2, #255	; 0xff
 8009986:	21ff      	movs	r1, #255	; 0xff
 8009988:	2009      	movs	r0, #9
 800998a:	f000 fb1d 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 800998e:	23ff      	movs	r3, #255	; 0xff
 8009990:	22ff      	movs	r2, #255	; 0xff
 8009992:	21ff      	movs	r1, #255	; 0xff
 8009994:	200a      	movs	r0, #10
 8009996:	f000 fb17 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 800999a:	23ff      	movs	r3, #255	; 0xff
 800999c:	22ff      	movs	r2, #255	; 0xff
 800999e:	21ff      	movs	r1, #255	; 0xff
 80099a0:	200b      	movs	r0, #11
 80099a2:	f000 fb11 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 80099a6:	23ff      	movs	r3, #255	; 0xff
 80099a8:	22ff      	movs	r2, #255	; 0xff
 80099aa:	21ff      	movs	r1, #255	; 0xff
 80099ac:	200c      	movs	r0, #12
 80099ae:	f000 fb0b 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 80099b2:	23ff      	movs	r3, #255	; 0xff
 80099b4:	22ff      	movs	r2, #255	; 0xff
 80099b6:	21ff      	movs	r1, #255	; 0xff
 80099b8:	200d      	movs	r0, #13
 80099ba:	f000 fb05 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 80099be:	23ff      	movs	r3, #255	; 0xff
 80099c0:	22ff      	movs	r2, #255	; 0xff
 80099c2:	21ff      	movs	r1, #255	; 0xff
 80099c4:	200e      	movs	r0, #14
 80099c6:	f000 faff 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	255	,	255	, 	255	)	;		//LED16
 80099ca:	23ff      	movs	r3, #255	; 0xff
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	21ff      	movs	r1, #255	; 0xff
 80099d0:	200f      	movs	r0, #15
 80099d2:	f000 faf9 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	255	,	255	, 	255	)	;		//LED17
 80099d6:	23ff      	movs	r3, #255	; 0xff
 80099d8:	22ff      	movs	r2, #255	; 0xff
 80099da:	21ff      	movs	r1, #255	; 0xff
 80099dc:	2010      	movs	r0, #16
 80099de:	f000 faf3 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	0	,	0	, 	0	)	;		//LED18
 80099e2:	2300      	movs	r3, #0
 80099e4:	2200      	movs	r2, #0
 80099e6:	2100      	movs	r1, #0
 80099e8:	2011      	movs	r0, #17
 80099ea:	f000 faed 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 80099ee:	2300      	movs	r3, #0
 80099f0:	2200      	movs	r2, #0
 80099f2:	2100      	movs	r1, #0
 80099f4:	2012      	movs	r0, #18
 80099f6:	f000 fae7 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 80099fa:	2300      	movs	r3, #0
 80099fc:	2200      	movs	r2, #0
 80099fe:	2100      	movs	r1, #0
 8009a00:	2013      	movs	r0, #19
 8009a02:	f000 fae1 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8009a06:	2300      	movs	r3, #0
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	2014      	movs	r0, #20
 8009a0e:	f000 fadb 	bl	8009fc8 <Set_LED>
 8009a12:	e224      	b.n	8009e5e <LEDHandler+0x876a>

		} else if (var1 >= 86 && var1 < 91) {
 8009a14:	4b45      	ldr	r3, [pc, #276]	; (8009b2c <LEDHandler+0x8438>)
 8009a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a1a:	2b55      	cmp	r3, #85	; 0x55
 8009a1c:	f340 8088 	ble.w	8009b30 <LEDHandler+0x843c>
 8009a20:	4b42      	ldr	r3, [pc, #264]	; (8009b2c <LEDHandler+0x8438>)
 8009a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a26:	2b5a      	cmp	r3, #90	; 0x5a
 8009a28:	f300 8082 	bgt.w	8009b30 <LEDHandler+0x843c>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8009a2c:	23ff      	movs	r3, #255	; 0xff
 8009a2e:	22ff      	movs	r2, #255	; 0xff
 8009a30:	21ff      	movs	r1, #255	; 0xff
 8009a32:	2000      	movs	r0, #0
 8009a34:	f000 fac8 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8009a38:	23ff      	movs	r3, #255	; 0xff
 8009a3a:	22ff      	movs	r2, #255	; 0xff
 8009a3c:	21ff      	movs	r1, #255	; 0xff
 8009a3e:	2001      	movs	r0, #1
 8009a40:	f000 fac2 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8009a44:	23ff      	movs	r3, #255	; 0xff
 8009a46:	22ff      	movs	r2, #255	; 0xff
 8009a48:	21ff      	movs	r1, #255	; 0xff
 8009a4a:	2002      	movs	r0, #2
 8009a4c:	f000 fabc 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8009a50:	23ff      	movs	r3, #255	; 0xff
 8009a52:	22ff      	movs	r2, #255	; 0xff
 8009a54:	21ff      	movs	r1, #255	; 0xff
 8009a56:	2003      	movs	r0, #3
 8009a58:	f000 fab6 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8009a5c:	23ff      	movs	r3, #255	; 0xff
 8009a5e:	22ff      	movs	r2, #255	; 0xff
 8009a60:	21ff      	movs	r1, #255	; 0xff
 8009a62:	2004      	movs	r0, #4
 8009a64:	f000 fab0 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8009a68:	23ff      	movs	r3, #255	; 0xff
 8009a6a:	22ff      	movs	r2, #255	; 0xff
 8009a6c:	21ff      	movs	r1, #255	; 0xff
 8009a6e:	2005      	movs	r0, #5
 8009a70:	f000 faaa 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8009a74:	23ff      	movs	r3, #255	; 0xff
 8009a76:	22ff      	movs	r2, #255	; 0xff
 8009a78:	21ff      	movs	r1, #255	; 0xff
 8009a7a:	2006      	movs	r0, #6
 8009a7c:	f000 faa4 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8009a80:	23ff      	movs	r3, #255	; 0xff
 8009a82:	22ff      	movs	r2, #255	; 0xff
 8009a84:	21ff      	movs	r1, #255	; 0xff
 8009a86:	2007      	movs	r0, #7
 8009a88:	f000 fa9e 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8009a8c:	23ff      	movs	r3, #255	; 0xff
 8009a8e:	22ff      	movs	r2, #255	; 0xff
 8009a90:	21ff      	movs	r1, #255	; 0xff
 8009a92:	2008      	movs	r0, #8
 8009a94:	f000 fa98 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8009a98:	23ff      	movs	r3, #255	; 0xff
 8009a9a:	22ff      	movs	r2, #255	; 0xff
 8009a9c:	21ff      	movs	r1, #255	; 0xff
 8009a9e:	2009      	movs	r0, #9
 8009aa0:	f000 fa92 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8009aa4:	23ff      	movs	r3, #255	; 0xff
 8009aa6:	22ff      	movs	r2, #255	; 0xff
 8009aa8:	21ff      	movs	r1, #255	; 0xff
 8009aaa:	200a      	movs	r0, #10
 8009aac:	f000 fa8c 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8009ab0:	23ff      	movs	r3, #255	; 0xff
 8009ab2:	22ff      	movs	r2, #255	; 0xff
 8009ab4:	21ff      	movs	r1, #255	; 0xff
 8009ab6:	200b      	movs	r0, #11
 8009ab8:	f000 fa86 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 8009abc:	23ff      	movs	r3, #255	; 0xff
 8009abe:	22ff      	movs	r2, #255	; 0xff
 8009ac0:	21ff      	movs	r1, #255	; 0xff
 8009ac2:	200c      	movs	r0, #12
 8009ac4:	f000 fa80 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 8009ac8:	23ff      	movs	r3, #255	; 0xff
 8009aca:	22ff      	movs	r2, #255	; 0xff
 8009acc:	21ff      	movs	r1, #255	; 0xff
 8009ace:	200d      	movs	r0, #13
 8009ad0:	f000 fa7a 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 8009ad4:	23ff      	movs	r3, #255	; 0xff
 8009ad6:	22ff      	movs	r2, #255	; 0xff
 8009ad8:	21ff      	movs	r1, #255	; 0xff
 8009ada:	200e      	movs	r0, #14
 8009adc:	f000 fa74 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	255	,	255	, 	255	)	;		//LED16
 8009ae0:	23ff      	movs	r3, #255	; 0xff
 8009ae2:	22ff      	movs	r2, #255	; 0xff
 8009ae4:	21ff      	movs	r1, #255	; 0xff
 8009ae6:	200f      	movs	r0, #15
 8009ae8:	f000 fa6e 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	255	,	255	, 	255	)	;		//LED17
 8009aec:	23ff      	movs	r3, #255	; 0xff
 8009aee:	22ff      	movs	r2, #255	; 0xff
 8009af0:	21ff      	movs	r1, #255	; 0xff
 8009af2:	2010      	movs	r0, #16
 8009af4:	f000 fa68 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	255	,	255	, 	255	)	;		//LED18
 8009af8:	23ff      	movs	r3, #255	; 0xff
 8009afa:	22ff      	movs	r2, #255	; 0xff
 8009afc:	21ff      	movs	r1, #255	; 0xff
 8009afe:	2011      	movs	r0, #17
 8009b00:	f000 fa62 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	0	,	0	, 	0	)	;		//LED19
 8009b04:	2300      	movs	r3, #0
 8009b06:	2200      	movs	r2, #0
 8009b08:	2100      	movs	r1, #0
 8009b0a:	2012      	movs	r0, #18
 8009b0c:	f000 fa5c 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8009b10:	2300      	movs	r3, #0
 8009b12:	2200      	movs	r2, #0
 8009b14:	2100      	movs	r1, #0
 8009b16:	2013      	movs	r0, #19
 8009b18:	f000 fa56 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2100      	movs	r1, #0
 8009b22:	2014      	movs	r0, #20
 8009b24:	f000 fa50 	bl	8009fc8 <Set_LED>
 8009b28:	e199      	b.n	8009e5e <LEDHandler+0x876a>
 8009b2a:	bf00      	nop
 8009b2c:	2000031a 	.word	0x2000031a

		} else if (var1 >= 91 && var1 < 96) {
 8009b30:	4bd0      	ldr	r3, [pc, #832]	; (8009e74 <LEDHandler+0x8780>)
 8009b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b36:	2b5a      	cmp	r3, #90	; 0x5a
 8009b38:	f340 8084 	ble.w	8009c44 <LEDHandler+0x8550>
 8009b3c:	4bcd      	ldr	r3, [pc, #820]	; (8009e74 <LEDHandler+0x8780>)
 8009b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b42:	2b5f      	cmp	r3, #95	; 0x5f
 8009b44:	dc7e      	bgt.n	8009c44 <LEDHandler+0x8550>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8009b46:	23ff      	movs	r3, #255	; 0xff
 8009b48:	22ff      	movs	r2, #255	; 0xff
 8009b4a:	21ff      	movs	r1, #255	; 0xff
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f000 fa3b 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8009b52:	23ff      	movs	r3, #255	; 0xff
 8009b54:	22ff      	movs	r2, #255	; 0xff
 8009b56:	21ff      	movs	r1, #255	; 0xff
 8009b58:	2001      	movs	r0, #1
 8009b5a:	f000 fa35 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8009b5e:	23ff      	movs	r3, #255	; 0xff
 8009b60:	22ff      	movs	r2, #255	; 0xff
 8009b62:	21ff      	movs	r1, #255	; 0xff
 8009b64:	2002      	movs	r0, #2
 8009b66:	f000 fa2f 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8009b6a:	23ff      	movs	r3, #255	; 0xff
 8009b6c:	22ff      	movs	r2, #255	; 0xff
 8009b6e:	21ff      	movs	r1, #255	; 0xff
 8009b70:	2003      	movs	r0, #3
 8009b72:	f000 fa29 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8009b76:	23ff      	movs	r3, #255	; 0xff
 8009b78:	22ff      	movs	r2, #255	; 0xff
 8009b7a:	21ff      	movs	r1, #255	; 0xff
 8009b7c:	2004      	movs	r0, #4
 8009b7e:	f000 fa23 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8009b82:	23ff      	movs	r3, #255	; 0xff
 8009b84:	22ff      	movs	r2, #255	; 0xff
 8009b86:	21ff      	movs	r1, #255	; 0xff
 8009b88:	2005      	movs	r0, #5
 8009b8a:	f000 fa1d 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8009b8e:	23ff      	movs	r3, #255	; 0xff
 8009b90:	22ff      	movs	r2, #255	; 0xff
 8009b92:	21ff      	movs	r1, #255	; 0xff
 8009b94:	2006      	movs	r0, #6
 8009b96:	f000 fa17 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8009b9a:	23ff      	movs	r3, #255	; 0xff
 8009b9c:	22ff      	movs	r2, #255	; 0xff
 8009b9e:	21ff      	movs	r1, #255	; 0xff
 8009ba0:	2007      	movs	r0, #7
 8009ba2:	f000 fa11 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8009ba6:	23ff      	movs	r3, #255	; 0xff
 8009ba8:	22ff      	movs	r2, #255	; 0xff
 8009baa:	21ff      	movs	r1, #255	; 0xff
 8009bac:	2008      	movs	r0, #8
 8009bae:	f000 fa0b 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8009bb2:	23ff      	movs	r3, #255	; 0xff
 8009bb4:	22ff      	movs	r2, #255	; 0xff
 8009bb6:	21ff      	movs	r1, #255	; 0xff
 8009bb8:	2009      	movs	r0, #9
 8009bba:	f000 fa05 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8009bbe:	23ff      	movs	r3, #255	; 0xff
 8009bc0:	22ff      	movs	r2, #255	; 0xff
 8009bc2:	21ff      	movs	r1, #255	; 0xff
 8009bc4:	200a      	movs	r0, #10
 8009bc6:	f000 f9ff 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8009bca:	23ff      	movs	r3, #255	; 0xff
 8009bcc:	22ff      	movs	r2, #255	; 0xff
 8009bce:	21ff      	movs	r1, #255	; 0xff
 8009bd0:	200b      	movs	r0, #11
 8009bd2:	f000 f9f9 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 8009bd6:	23ff      	movs	r3, #255	; 0xff
 8009bd8:	22ff      	movs	r2, #255	; 0xff
 8009bda:	21ff      	movs	r1, #255	; 0xff
 8009bdc:	200c      	movs	r0, #12
 8009bde:	f000 f9f3 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 8009be2:	23ff      	movs	r3, #255	; 0xff
 8009be4:	22ff      	movs	r2, #255	; 0xff
 8009be6:	21ff      	movs	r1, #255	; 0xff
 8009be8:	200d      	movs	r0, #13
 8009bea:	f000 f9ed 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 8009bee:	23ff      	movs	r3, #255	; 0xff
 8009bf0:	22ff      	movs	r2, #255	; 0xff
 8009bf2:	21ff      	movs	r1, #255	; 0xff
 8009bf4:	200e      	movs	r0, #14
 8009bf6:	f000 f9e7 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	255	,	255	, 	255	)	;		//LED16
 8009bfa:	23ff      	movs	r3, #255	; 0xff
 8009bfc:	22ff      	movs	r2, #255	; 0xff
 8009bfe:	21ff      	movs	r1, #255	; 0xff
 8009c00:	200f      	movs	r0, #15
 8009c02:	f000 f9e1 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	255	,	255	, 	255	)	;		//LED17
 8009c06:	23ff      	movs	r3, #255	; 0xff
 8009c08:	22ff      	movs	r2, #255	; 0xff
 8009c0a:	21ff      	movs	r1, #255	; 0xff
 8009c0c:	2010      	movs	r0, #16
 8009c0e:	f000 f9db 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	255	,	255	, 	255	)	;		//LED18
 8009c12:	23ff      	movs	r3, #255	; 0xff
 8009c14:	22ff      	movs	r2, #255	; 0xff
 8009c16:	21ff      	movs	r1, #255	; 0xff
 8009c18:	2011      	movs	r0, #17
 8009c1a:	f000 f9d5 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	255	,	255	, 	255	)	;		//LED19
 8009c1e:	23ff      	movs	r3, #255	; 0xff
 8009c20:	22ff      	movs	r2, #255	; 0xff
 8009c22:	21ff      	movs	r1, #255	; 0xff
 8009c24:	2012      	movs	r0, #18
 8009c26:	f000 f9cf 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	0	,	0	, 	0	)	;		//LED20
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2100      	movs	r1, #0
 8009c30:	2013      	movs	r0, #19
 8009c32:	f000 f9c9 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8009c36:	2300      	movs	r3, #0
 8009c38:	2200      	movs	r2, #0
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	2014      	movs	r0, #20
 8009c3e:	f000 f9c3 	bl	8009fc8 <Set_LED>
 8009c42:	e10c      	b.n	8009e5e <LEDHandler+0x876a>


		} else if (var1 >= 96 && var1 < 100) {
 8009c44:	4b8b      	ldr	r3, [pc, #556]	; (8009e74 <LEDHandler+0x8780>)
 8009c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c4a:	2b5f      	cmp	r3, #95	; 0x5f
 8009c4c:	f340 8084 	ble.w	8009d58 <LEDHandler+0x8664>
 8009c50:	4b88      	ldr	r3, [pc, #544]	; (8009e74 <LEDHandler+0x8780>)
 8009c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c56:	2b63      	cmp	r3, #99	; 0x63
 8009c58:	dc7e      	bgt.n	8009d58 <LEDHandler+0x8664>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8009c5a:	23ff      	movs	r3, #255	; 0xff
 8009c5c:	22ff      	movs	r2, #255	; 0xff
 8009c5e:	21ff      	movs	r1, #255	; 0xff
 8009c60:	2000      	movs	r0, #0
 8009c62:	f000 f9b1 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8009c66:	23ff      	movs	r3, #255	; 0xff
 8009c68:	22ff      	movs	r2, #255	; 0xff
 8009c6a:	21ff      	movs	r1, #255	; 0xff
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	f000 f9ab 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8009c72:	23ff      	movs	r3, #255	; 0xff
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	21ff      	movs	r1, #255	; 0xff
 8009c78:	2002      	movs	r0, #2
 8009c7a:	f000 f9a5 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8009c7e:	23ff      	movs	r3, #255	; 0xff
 8009c80:	22ff      	movs	r2, #255	; 0xff
 8009c82:	21ff      	movs	r1, #255	; 0xff
 8009c84:	2003      	movs	r0, #3
 8009c86:	f000 f99f 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8009c8a:	23ff      	movs	r3, #255	; 0xff
 8009c8c:	22ff      	movs	r2, #255	; 0xff
 8009c8e:	21ff      	movs	r1, #255	; 0xff
 8009c90:	2004      	movs	r0, #4
 8009c92:	f000 f999 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8009c96:	23ff      	movs	r3, #255	; 0xff
 8009c98:	22ff      	movs	r2, #255	; 0xff
 8009c9a:	21ff      	movs	r1, #255	; 0xff
 8009c9c:	2005      	movs	r0, #5
 8009c9e:	f000 f993 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8009ca2:	23ff      	movs	r3, #255	; 0xff
 8009ca4:	22ff      	movs	r2, #255	; 0xff
 8009ca6:	21ff      	movs	r1, #255	; 0xff
 8009ca8:	2006      	movs	r0, #6
 8009caa:	f000 f98d 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8009cae:	23ff      	movs	r3, #255	; 0xff
 8009cb0:	22ff      	movs	r2, #255	; 0xff
 8009cb2:	21ff      	movs	r1, #255	; 0xff
 8009cb4:	2007      	movs	r0, #7
 8009cb6:	f000 f987 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8009cba:	23ff      	movs	r3, #255	; 0xff
 8009cbc:	22ff      	movs	r2, #255	; 0xff
 8009cbe:	21ff      	movs	r1, #255	; 0xff
 8009cc0:	2008      	movs	r0, #8
 8009cc2:	f000 f981 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8009cc6:	23ff      	movs	r3, #255	; 0xff
 8009cc8:	22ff      	movs	r2, #255	; 0xff
 8009cca:	21ff      	movs	r1, #255	; 0xff
 8009ccc:	2009      	movs	r0, #9
 8009cce:	f000 f97b 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8009cd2:	23ff      	movs	r3, #255	; 0xff
 8009cd4:	22ff      	movs	r2, #255	; 0xff
 8009cd6:	21ff      	movs	r1, #255	; 0xff
 8009cd8:	200a      	movs	r0, #10
 8009cda:	f000 f975 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8009cde:	23ff      	movs	r3, #255	; 0xff
 8009ce0:	22ff      	movs	r2, #255	; 0xff
 8009ce2:	21ff      	movs	r1, #255	; 0xff
 8009ce4:	200b      	movs	r0, #11
 8009ce6:	f000 f96f 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 8009cea:	23ff      	movs	r3, #255	; 0xff
 8009cec:	22ff      	movs	r2, #255	; 0xff
 8009cee:	21ff      	movs	r1, #255	; 0xff
 8009cf0:	200c      	movs	r0, #12
 8009cf2:	f000 f969 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 8009cf6:	23ff      	movs	r3, #255	; 0xff
 8009cf8:	22ff      	movs	r2, #255	; 0xff
 8009cfa:	21ff      	movs	r1, #255	; 0xff
 8009cfc:	200d      	movs	r0, #13
 8009cfe:	f000 f963 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 8009d02:	23ff      	movs	r3, #255	; 0xff
 8009d04:	22ff      	movs	r2, #255	; 0xff
 8009d06:	21ff      	movs	r1, #255	; 0xff
 8009d08:	200e      	movs	r0, #14
 8009d0a:	f000 f95d 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	255	,	255	, 	255	)	;		//LED16
 8009d0e:	23ff      	movs	r3, #255	; 0xff
 8009d10:	22ff      	movs	r2, #255	; 0xff
 8009d12:	21ff      	movs	r1, #255	; 0xff
 8009d14:	200f      	movs	r0, #15
 8009d16:	f000 f957 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	255	,	255	, 	255	)	;		//LED17
 8009d1a:	23ff      	movs	r3, #255	; 0xff
 8009d1c:	22ff      	movs	r2, #255	; 0xff
 8009d1e:	21ff      	movs	r1, #255	; 0xff
 8009d20:	2010      	movs	r0, #16
 8009d22:	f000 f951 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	255	,	255	, 	255	)	;		//LED18
 8009d26:	23ff      	movs	r3, #255	; 0xff
 8009d28:	22ff      	movs	r2, #255	; 0xff
 8009d2a:	21ff      	movs	r1, #255	; 0xff
 8009d2c:	2011      	movs	r0, #17
 8009d2e:	f000 f94b 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	255	,	255	, 	255	)	;		//LED19
 8009d32:	23ff      	movs	r3, #255	; 0xff
 8009d34:	22ff      	movs	r2, #255	; 0xff
 8009d36:	21ff      	movs	r1, #255	; 0xff
 8009d38:	2012      	movs	r0, #18
 8009d3a:	f000 f945 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	255	,	255	, 	255	)	;		//LED20
 8009d3e:	23ff      	movs	r3, #255	; 0xff
 8009d40:	22ff      	movs	r2, #255	; 0xff
 8009d42:	21ff      	movs	r1, #255	; 0xff
 8009d44:	2013      	movs	r0, #19
 8009d46:	f000 f93f 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	0	,	0	, 	0	)	;		//LED21
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2100      	movs	r1, #0
 8009d50:	2014      	movs	r0, #20
 8009d52:	f000 f939 	bl	8009fc8 <Set_LED>
 8009d56:	e082      	b.n	8009e5e <LEDHandler+0x876a>

		} else if (var1 >= 100) {
 8009d58:	4b46      	ldr	r3, [pc, #280]	; (8009e74 <LEDHandler+0x8780>)
 8009d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d5e:	2b63      	cmp	r3, #99	; 0x63
 8009d60:	dd7d      	ble.n	8009e5e <LEDHandler+0x876a>

			Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8009d62:	23ff      	movs	r3, #255	; 0xff
 8009d64:	22ff      	movs	r2, #255	; 0xff
 8009d66:	21ff      	movs	r1, #255	; 0xff
 8009d68:	2000      	movs	r0, #0
 8009d6a:	f000 f92d 	bl	8009fc8 <Set_LED>
			Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8009d6e:	23ff      	movs	r3, #255	; 0xff
 8009d70:	22ff      	movs	r2, #255	; 0xff
 8009d72:	21ff      	movs	r1, #255	; 0xff
 8009d74:	2001      	movs	r0, #1
 8009d76:	f000 f927 	bl	8009fc8 <Set_LED>
			Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8009d7a:	23ff      	movs	r3, #255	; 0xff
 8009d7c:	22ff      	movs	r2, #255	; 0xff
 8009d7e:	21ff      	movs	r1, #255	; 0xff
 8009d80:	2002      	movs	r0, #2
 8009d82:	f000 f921 	bl	8009fc8 <Set_LED>
			Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8009d86:	23ff      	movs	r3, #255	; 0xff
 8009d88:	22ff      	movs	r2, #255	; 0xff
 8009d8a:	21ff      	movs	r1, #255	; 0xff
 8009d8c:	2003      	movs	r0, #3
 8009d8e:	f000 f91b 	bl	8009fc8 <Set_LED>
			Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8009d92:	23ff      	movs	r3, #255	; 0xff
 8009d94:	22ff      	movs	r2, #255	; 0xff
 8009d96:	21ff      	movs	r1, #255	; 0xff
 8009d98:	2004      	movs	r0, #4
 8009d9a:	f000 f915 	bl	8009fc8 <Set_LED>
			Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8009d9e:	23ff      	movs	r3, #255	; 0xff
 8009da0:	22ff      	movs	r2, #255	; 0xff
 8009da2:	21ff      	movs	r1, #255	; 0xff
 8009da4:	2005      	movs	r0, #5
 8009da6:	f000 f90f 	bl	8009fc8 <Set_LED>
			Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8009daa:	23ff      	movs	r3, #255	; 0xff
 8009dac:	22ff      	movs	r2, #255	; 0xff
 8009dae:	21ff      	movs	r1, #255	; 0xff
 8009db0:	2006      	movs	r0, #6
 8009db2:	f000 f909 	bl	8009fc8 <Set_LED>
			Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8009db6:	23ff      	movs	r3, #255	; 0xff
 8009db8:	22ff      	movs	r2, #255	; 0xff
 8009dba:	21ff      	movs	r1, #255	; 0xff
 8009dbc:	2007      	movs	r0, #7
 8009dbe:	f000 f903 	bl	8009fc8 <Set_LED>
			Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8009dc2:	23ff      	movs	r3, #255	; 0xff
 8009dc4:	22ff      	movs	r2, #255	; 0xff
 8009dc6:	21ff      	movs	r1, #255	; 0xff
 8009dc8:	2008      	movs	r0, #8
 8009dca:	f000 f8fd 	bl	8009fc8 <Set_LED>
			Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8009dce:	23ff      	movs	r3, #255	; 0xff
 8009dd0:	22ff      	movs	r2, #255	; 0xff
 8009dd2:	21ff      	movs	r1, #255	; 0xff
 8009dd4:	2009      	movs	r0, #9
 8009dd6:	f000 f8f7 	bl	8009fc8 <Set_LED>
			Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8009dda:	23ff      	movs	r3, #255	; 0xff
 8009ddc:	22ff      	movs	r2, #255	; 0xff
 8009dde:	21ff      	movs	r1, #255	; 0xff
 8009de0:	200a      	movs	r0, #10
 8009de2:	f000 f8f1 	bl	8009fc8 <Set_LED>
			Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8009de6:	23ff      	movs	r3, #255	; 0xff
 8009de8:	22ff      	movs	r2, #255	; 0xff
 8009dea:	21ff      	movs	r1, #255	; 0xff
 8009dec:	200b      	movs	r0, #11
 8009dee:	f000 f8eb 	bl	8009fc8 <Set_LED>
			Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 8009df2:	23ff      	movs	r3, #255	; 0xff
 8009df4:	22ff      	movs	r2, #255	; 0xff
 8009df6:	21ff      	movs	r1, #255	; 0xff
 8009df8:	200c      	movs	r0, #12
 8009dfa:	f000 f8e5 	bl	8009fc8 <Set_LED>
			Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 8009dfe:	23ff      	movs	r3, #255	; 0xff
 8009e00:	22ff      	movs	r2, #255	; 0xff
 8009e02:	21ff      	movs	r1, #255	; 0xff
 8009e04:	200d      	movs	r0, #13
 8009e06:	f000 f8df 	bl	8009fc8 <Set_LED>
			Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 8009e0a:	23ff      	movs	r3, #255	; 0xff
 8009e0c:	22ff      	movs	r2, #255	; 0xff
 8009e0e:	21ff      	movs	r1, #255	; 0xff
 8009e10:	200e      	movs	r0, #14
 8009e12:	f000 f8d9 	bl	8009fc8 <Set_LED>
			Set_LED	(	15	,	255	,	255	, 	255	)	;		//LED16
 8009e16:	23ff      	movs	r3, #255	; 0xff
 8009e18:	22ff      	movs	r2, #255	; 0xff
 8009e1a:	21ff      	movs	r1, #255	; 0xff
 8009e1c:	200f      	movs	r0, #15
 8009e1e:	f000 f8d3 	bl	8009fc8 <Set_LED>
			Set_LED	(	16	,	255	,	255	, 	255	)	;		//LED17
 8009e22:	23ff      	movs	r3, #255	; 0xff
 8009e24:	22ff      	movs	r2, #255	; 0xff
 8009e26:	21ff      	movs	r1, #255	; 0xff
 8009e28:	2010      	movs	r0, #16
 8009e2a:	f000 f8cd 	bl	8009fc8 <Set_LED>
			Set_LED	(	17	,	255	,	255	, 	255	)	;		//LED18
 8009e2e:	23ff      	movs	r3, #255	; 0xff
 8009e30:	22ff      	movs	r2, #255	; 0xff
 8009e32:	21ff      	movs	r1, #255	; 0xff
 8009e34:	2011      	movs	r0, #17
 8009e36:	f000 f8c7 	bl	8009fc8 <Set_LED>
			Set_LED	(	18	,	255	,	255	, 	255	)	;		//LED19
 8009e3a:	23ff      	movs	r3, #255	; 0xff
 8009e3c:	22ff      	movs	r2, #255	; 0xff
 8009e3e:	21ff      	movs	r1, #255	; 0xff
 8009e40:	2012      	movs	r0, #18
 8009e42:	f000 f8c1 	bl	8009fc8 <Set_LED>
			Set_LED	(	19	,	255	,	255	, 	255	)	;		//LED20
 8009e46:	23ff      	movs	r3, #255	; 0xff
 8009e48:	22ff      	movs	r2, #255	; 0xff
 8009e4a:	21ff      	movs	r1, #255	; 0xff
 8009e4c:	2013      	movs	r0, #19
 8009e4e:	f000 f8bb 	bl	8009fc8 <Set_LED>
			Set_LED	(	20	,	255	,	255	, 	255	)	;		//LED21
 8009e52:	23ff      	movs	r3, #255	; 0xff
 8009e54:	22ff      	movs	r2, #255	; 0xff
 8009e56:	21ff      	movs	r1, #255	; 0xff
 8009e58:	2014      	movs	r0, #20
 8009e5a:	f000 f8b5 	bl	8009fc8 <Set_LED>

		}

	}

	Set_Brightness(brilho);
 8009e5e:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <LEDHandler+0x8784>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fb04 	bl	800a470 <Set_Brightness>
	WS2512_Send();
 8009e68:	f000 fb80 	bl	800a56c <WS2512_Send>
	//HAL_Delay(50);
}
 8009e6c:	bf00      	nop
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	2000031a 	.word	0x2000031a
 8009e78:	20000004 	.word	0x20000004

08009e7c <Analog_Buffer>:

//TODO Documentar método
void Analog_Buffer(){
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0

	/* Processa as novas amostras */
	int32_t accumulator[BSP_ADC_CHANNEL_SIZE] = { 0 };
 8009e82:	463b      	mov	r3, r7
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	605a      	str	r2, [r3, #4]
 8009e8a:	609a      	str	r2, [r3, #8]
	static int16_t filter_sample_index = 0;

	//guarda a amostra atual
	Buffer_ADC_Filter[0][filter_sample_index] = readValue[0];
 8009e8c:	4b3d      	ldr	r3, [pc, #244]	; (8009f84 <Analog_Buffer+0x108>)
 8009e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e92:	461a      	mov	r2, r3
 8009e94:	4b3c      	ldr	r3, [pc, #240]	; (8009f88 <Analog_Buffer+0x10c>)
 8009e96:	8819      	ldrh	r1, [r3, #0]
 8009e98:	4b3c      	ldr	r3, [pc, #240]	; (8009f8c <Analog_Buffer+0x110>)
 8009e9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	Buffer_ADC_Filter[1][filter_sample_index] = readValue[1];
 8009e9e:	4b39      	ldr	r3, [pc, #228]	; (8009f84 <Analog_Buffer+0x108>)
 8009ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	4b38      	ldr	r3, [pc, #224]	; (8009f88 <Analog_Buffer+0x10c>)
 8009ea8:	8859      	ldrh	r1, [r3, #2]
 8009eaa:	4a38      	ldr	r2, [pc, #224]	; (8009f8c <Analog_Buffer+0x110>)
 8009eac:	1d83      	adds	r3, r0, #6
 8009eae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	Buffer_ADC_Filter[2][filter_sample_index] = readValue[2];
 8009eb2:	4b34      	ldr	r3, [pc, #208]	; (8009f84 <Analog_Buffer+0x108>)
 8009eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	4b33      	ldr	r3, [pc, #204]	; (8009f88 <Analog_Buffer+0x10c>)
 8009ebc:	8899      	ldrh	r1, [r3, #4]
 8009ebe:	4a33      	ldr	r2, [pc, #204]	; (8009f8c <Analog_Buffer+0x110>)
 8009ec0:	f100 030c 	add.w	r3, r0, #12
 8009ec4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Processa o novo valor filtrado considerando as ultimas x amostras
	for (int sample_idx = 0; sample_idx < BSP_ADC_FILTER_SAMPLES_SIZE;++sample_idx)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	e01c      	b.n	8009f08 <Analog_Buffer+0x8c>
	{
		accumulator[0] += Buffer_ADC_Filter[0][sample_idx];
 8009ece:	4a2f      	ldr	r2, [pc, #188]	; (8009f8c <Analog_Buffer+0x110>)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	4413      	add	r3, r2
 8009edc:	603b      	str	r3, [r7, #0]
		accumulator[1] += Buffer_ADC_Filter[1][sample_idx];
 8009ede:	4a2b      	ldr	r2, [pc, #172]	; (8009f8c <Analog_Buffer+0x110>)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3306      	adds	r3, #6
 8009ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4413      	add	r3, r2
 8009eee:	607b      	str	r3, [r7, #4]
		accumulator[2] += Buffer_ADC_Filter[2][sample_idx];
 8009ef0:	4a26      	ldr	r2, [pc, #152]	; (8009f8c <Analog_Buffer+0x110>)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	330c      	adds	r3, #12
 8009ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4413      	add	r3, r2
 8009f00:	60bb      	str	r3, [r7, #8]
	for (int sample_idx = 0; sample_idx < BSP_ADC_FILTER_SAMPLES_SIZE;++sample_idx)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	dddf      	ble.n	8009ece <Analog_Buffer+0x52>
	}

	//wrap around no buffer
	filter_sample_index++;
 8009f0e:	4b1d      	ldr	r3, [pc, #116]	; (8009f84 <Analog_Buffer+0x108>)
 8009f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	3301      	adds	r3, #1
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	b21a      	sxth	r2, r3
 8009f1c:	4b19      	ldr	r3, [pc, #100]	; (8009f84 <Analog_Buffer+0x108>)
 8009f1e:	801a      	strh	r2, [r3, #0]
	if (filter_sample_index >= BSP_ADC_FILTER_SAMPLES_SIZE )
 8009f20:	4b18      	ldr	r3, [pc, #96]	; (8009f84 <Analog_Buffer+0x108>)
 8009f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f26:	2b05      	cmp	r3, #5
 8009f28:	dd02      	ble.n	8009f30 <Analog_Buffer+0xb4>
	{
		filter_sample_index = 0;
 8009f2a:	4b16      	ldr	r3, [pc, #88]	; (8009f84 <Analog_Buffer+0x108>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	801a      	strh	r2, [r3, #0]
	}


	//calcula a média dos valores
	SpeedMode = accumulator[0];
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	4a17      	ldr	r2, [pc, #92]	; (8009f90 <Analog_Buffer+0x114>)
 8009f34:	6013      	str	r3, [r2, #0]
	SpeedMode = (SpeedMode /  BSP_ADC_FILTER_SAMPLES_SIZE );
 8009f36:	4b16      	ldr	r3, [pc, #88]	; (8009f90 <Analog_Buffer+0x114>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a16      	ldr	r2, [pc, #88]	; (8009f94 <Analog_Buffer+0x118>)
 8009f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8009f40:	17db      	asrs	r3, r3, #31
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	4a12      	ldr	r2, [pc, #72]	; (8009f90 <Analog_Buffer+0x114>)
 8009f46:	6013      	str	r3, [r2, #0]

	Sensor_in = accumulator[1];
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a13      	ldr	r2, [pc, #76]	; (8009f98 <Analog_Buffer+0x11c>)
 8009f4c:	6013      	str	r3, [r2, #0]
	Sensor_in = (Sensor_in / BSP_ADC_FILTER_SAMPLES_SIZE);
 8009f4e:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <Analog_Buffer+0x11c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a10      	ldr	r2, [pc, #64]	; (8009f94 <Analog_Buffer+0x118>)
 8009f54:	fb82 1203 	smull	r1, r2, r2, r3
 8009f58:	17db      	asrs	r3, r3, #31
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	4a0e      	ldr	r2, [pc, #56]	; (8009f98 <Analog_Buffer+0x11c>)
 8009f5e:	6013      	str	r3, [r2, #0]

	Sensor_Out= accumulator[2];
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	4a0e      	ldr	r2, [pc, #56]	; (8009f9c <Analog_Buffer+0x120>)
 8009f64:	6013      	str	r3, [r2, #0]
	Sensor_Out = (Sensor_Out / BSP_ADC_FILTER_SAMPLES_SIZE);
 8009f66:	4b0d      	ldr	r3, [pc, #52]	; (8009f9c <Analog_Buffer+0x120>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a0a      	ldr	r2, [pc, #40]	; (8009f94 <Analog_Buffer+0x118>)
 8009f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8009f70:	17db      	asrs	r3, r3, #31
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	4a09      	ldr	r2, [pc, #36]	; (8009f9c <Analog_Buffer+0x120>)
 8009f76:	6013      	str	r3, [r2, #0]

}
 8009f78:	bf00      	nop
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bc80      	pop	{r7}
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20001bcc 	.word	0x20001bcc
 8009f88:	200006b0 	.word	0x200006b0
 8009f8c:	200002f4 	.word	0x200002f4
 8009f90:	200006b8 	.word	0x200006b8
 8009f94:	2aaaaaab 	.word	0x2aaaaaab
 8009f98:	200006bc 	.word	0x200006bc
 8009f9c:	200006c0 	.word	0x200006c0

08009fa0 <HAL_TIM_PWM_PulseFinishedCallback>:

//TODO Documentar método
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4805      	ldr	r0, [pc, #20]	; (8009fc0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8009fac:	f002 fefa 	bl	800cda4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8009fb0:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	601a      	str	r2, [r3, #0]
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	200001d8 	.word	0x200001d8
 8009fc4:	200006c4 	.word	0x200006c4

08009fc8 <Set_LED>:

//TODO Documentar método
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	b2d9      	uxtb	r1, r3
 8009fda:	4a10      	ldr	r2, [pc, #64]	; (800a01c <Set_LED+0x54>)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	b2d9      	uxtb	r1, r3
 8009fe6:	4a0d      	ldr	r2, [pc, #52]	; (800a01c <Set_LED+0x54>)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	460a      	mov	r2, r1
 8009ff0:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	b2d9      	uxtb	r1, r3
 8009ff6:	4a09      	ldr	r2, [pc, #36]	; (800a01c <Set_LED+0x54>)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	460a      	mov	r2, r1
 800a000:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	b2d9      	uxtb	r1, r3
 800a006:	4a05      	ldr	r2, [pc, #20]	; (800a01c <Set_LED+0x54>)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	460a      	mov	r2, r1
 800a010:	70da      	strb	r2, [r3, #3]
}
 800a012:	bf00      	nop
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	bc80      	pop	{r7}
 800a01a:	4770      	bx	lr
 800a01c:	20000340 	.word	0x20000340

0800a020 <DigitExtract>:
//	HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_SET);

}

//TODO Documentar método
void DigitExtract(int num) {
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]

//	int unid, dez, cent;
	unid = num % 10;
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4b18      	ldr	r3, [pc, #96]	; (800a08c <DigitExtract+0x6c>)
 800a02c:	fb83 2301 	smull	r2, r3, r3, r1
 800a030:	109a      	asrs	r2, r3, #2
 800a032:	17cb      	asrs	r3, r1, #31
 800a034:	1ad2      	subs	r2, r2, r3
 800a036:	4613      	mov	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	1aca      	subs	r2, r1, r3
 800a040:	4b13      	ldr	r3, [pc, #76]	; (800a090 <DigitExtract+0x70>)
 800a042:	601a      	str	r2, [r3, #0]
	num = num / 10;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a11      	ldr	r2, [pc, #68]	; (800a08c <DigitExtract+0x6c>)
 800a048:	fb82 1203 	smull	r1, r2, r2, r3
 800a04c:	1092      	asrs	r2, r2, #2
 800a04e:	17db      	asrs	r3, r3, #31
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	607b      	str	r3, [r7, #4]
	dez = num % 10;
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4b0d      	ldr	r3, [pc, #52]	; (800a08c <DigitExtract+0x6c>)
 800a058:	fb83 2301 	smull	r2, r3, r3, r1
 800a05c:	109a      	asrs	r2, r3, #2
 800a05e:	17cb      	asrs	r3, r1, #31
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	1aca      	subs	r2, r1, r3
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <DigitExtract+0x74>)
 800a06e:	601a      	str	r2, [r3, #0]
	cent = num / 10;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a06      	ldr	r2, [pc, #24]	; (800a08c <DigitExtract+0x6c>)
 800a074:	fb82 1203 	smull	r1, r2, r2, r3
 800a078:	1092      	asrs	r2, r2, #2
 800a07a:	17db      	asrs	r3, r3, #31
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	4a06      	ldr	r2, [pc, #24]	; (800a098 <DigitExtract+0x78>)
 800a080:	6013      	str	r3, [r2, #0]
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	bc80      	pop	{r7}
 800a08a:	4770      	bx	lr
 800a08c:	66666667 	.word	0x66666667
 800a090:	2000032c 	.word	0x2000032c
 800a094:	20000330 	.word	0x20000330
 800a098:	20000334 	.word	0x20000334

0800a09c <HAL_TIM_PeriodElapsedCallback>:

//TODO Documentar método
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]

	//************************************ TIMER 4 ************************************

	if (htim->Instance == TIM4) //frequencia do timer4 é de 5 kHz, sample time = 200us
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4aa9      	ldr	r2, [pc, #676]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d10c      	bne.n	800a0c8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{


		//atualização do valor do sinal analógico a cada 500 ms

		if (idx < 200) {
 800a0ae:	4ba9      	ldr	r3, [pc, #676]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2bc7      	cmp	r3, #199	; 0xc7
 800a0b4:	dc05      	bgt.n	800a0c2 <HAL_TIM_PeriodElapsedCallback+0x26>

			idx++;
 800a0b6:	4ba7      	ldr	r3, [pc, #668]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	4aa5      	ldr	r2, [pc, #660]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	e002      	b.n	800a0c8 <HAL_TIM_PeriodElapsedCallback+0x2c>

		} else {

			idx = 1;
 800a0c2:	4ba4      	ldr	r3, [pc, #656]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]
	}


	//************************************ TIMER 3 ************************************

	if (htim->Instance == TIM3) { //frequencia do timer3 é de 50 kHz, time=20us
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4aa2      	ldr	r2, [pc, #648]	; (800a358 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	f040 81bb 	bne.w	800a44a <HAL_TIM_PeriodElapsedCallback+0x3ae>

		if (downcounter > 0) {
 800a0d4:	4ba1      	ldr	r3, [pc, #644]	; (800a35c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	dd05      	ble.n	800a0e8 <HAL_TIM_PeriodElapsedCallback+0x4c>
			downcounter--;
 800a0dc:	4b9f      	ldr	r3, [pc, #636]	; (800a35c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	4a9e      	ldr	r2, [pc, #632]	; (800a35c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800a0e4:	6013      	str	r3, [r2, #0]
			fsm++;

		}
	}

}
 800a0e6:	e1b0      	b.n	800a44a <HAL_TIM_PeriodElapsedCallback+0x3ae>
			switch (fsm) {			//fsm é o index da mensagem entregue ao CI HC595 para multiplexação
 800a0e8:	4b9d      	ldr	r3, [pc, #628]	; (800a360 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f240 2255 	movw	r2, #597	; 0x255
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	f000 818f 	beq.w	800a414 <HAL_TIM_PeriodElapsedCallback+0x378>
 800a0f6:	f240 2255 	movw	r2, #597	; 0x255
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	f300 819a 	bgt.w	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a100:	f240 2253 	movw	r2, #595	; 0x253
 800a104:	4293      	cmp	r3, r2
 800a106:	f000 8179 	beq.w	800a3fc <HAL_TIM_PeriodElapsedCallback+0x360>
 800a10a:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 800a10e:	f280 8191 	bge.w	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a112:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 800a116:	f300 818d 	bgt.w	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a11a:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 800a11e:	da11      	bge.n	800a144 <HAL_TIM_PeriodElapsedCallback+0xa8>
 800a120:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 800a124:	f000 8108 	beq.w	800a338 <HAL_TIM_PeriodElapsedCallback+0x29c>
 800a128:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 800a12c:	f300 8182 	bgt.w	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a130:	2be7      	cmp	r3, #231	; 0xe7
 800a132:	f300 817f 	bgt.w	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a136:	2bd7      	cmp	r3, #215	; 0xd7
 800a138:	da2a      	bge.n	800a190 <HAL_TIM_PeriodElapsedCallback+0xf4>
 800a13a:	2b10      	cmp	r3, #16
 800a13c:	dc6d      	bgt.n	800a21a <HAL_TIM_PeriodElapsedCallback+0x17e>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da4a      	bge.n	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x13c>
 800a142:	e177      	b.n	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a144:	f5a3 73d7 	sub.w	r3, r3, #430	; 0x1ae
 800a148:	2201      	movs	r2, #1
 800a14a:	fa02 f303 	lsl.w	r3, r2, r3
 800a14e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a152:	401a      	ands	r2, r3
 800a154:	2a00      	cmp	r2, #0
 800a156:	bf14      	ite	ne
 800a158:	2201      	movne	r2, #1
 800a15a:	2200      	moveq	r2, #0
 800a15c:	b2d2      	uxtb	r2, r2
 800a15e:	2a00      	cmp	r2, #0
 800a160:	f040 812d 	bne.w	800a3be <HAL_TIM_PeriodElapsedCallback+0x322>
 800a164:	f245 5255 	movw	r2, #21845	; 0x5555
 800a168:	401a      	ands	r2, r3
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	bf14      	ite	ne
 800a16e:	2201      	movne	r2, #1
 800a170:	2200      	moveq	r2, #0
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	2a00      	cmp	r2, #0
 800a176:	f040 8101 	bne.w	800a37c <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800a17a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bf14      	ite	ne
 800a182:	2301      	movne	r3, #1
 800a184:	2300      	moveq	r3, #0
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f040 8123 	bne.w	800a3d4 <HAL_TIM_PeriodElapsedCallback+0x338>
 800a18e:	e151      	b.n	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a190:	3bd7      	subs	r3, #215	; 0xd7
 800a192:	2201      	movs	r2, #1
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a19c:	401a      	ands	r2, r3
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	bf14      	ite	ne
 800a1a2:	2201      	movne	r2, #1
 800a1a4:	2200      	moveq	r2, #0
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	f040 80a6 	bne.w	800a2fa <HAL_TIM_PeriodElapsedCallback+0x25e>
 800a1ae:	f245 5255 	movw	r2, #21845	; 0x5555
 800a1b2:	401a      	ands	r2, r3
 800a1b4:	2a00      	cmp	r2, #0
 800a1b6:	bf14      	ite	ne
 800a1b8:	2201      	movne	r2, #1
 800a1ba:	2200      	moveq	r2, #0
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	d17a      	bne.n	800a2b8 <HAL_TIM_PeriodElapsedCallback+0x21c>
 800a1c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bf14      	ite	ne
 800a1ca:	2301      	movne	r3, #1
 800a1cc:	2300      	moveq	r3, #0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f040 809d 	bne.w	800a310 <HAL_TIM_PeriodElapsedCallback+0x274>
 800a1d6:	e12d      	b.n	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4093      	lsls	r3, r2
 800a1de:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a1e2:	401a      	ands	r2, r3
 800a1e4:	2a00      	cmp	r2, #0
 800a1e6:	bf14      	ite	ne
 800a1e8:	2201      	movne	r2, #1
 800a1ea:	2200      	moveq	r2, #0
 800a1ec:	b2d2      	uxtb	r2, r2
 800a1ee:	2a00      	cmp	r2, #0
 800a1f0:	d137      	bne.n	800a262 <HAL_TIM_PeriodElapsedCallback+0x1c6>
 800a1f2:	f245 5255 	movw	r2, #21845	; 0x5555
 800a1f6:	401a      	ands	r2, r3
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	bf14      	ite	ne
 800a1fc:	2201      	movne	r2, #1
 800a1fe:	2200      	moveq	r2, #0
 800a200:	b2d2      	uxtb	r2, r2
 800a202:	2a00      	cmp	r2, #0
 800a204:	d10c      	bne.n	800a220 <HAL_TIM_PeriodElapsedCallback+0x184>
 800a206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bf14      	ite	ne
 800a20e:	2301      	movne	r3, #1
 800a210:	2300      	moveq	r3, #0
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d12f      	bne.n	800a278 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 800a218:	e10c      	b.n	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
 800a21a:	2ba5      	cmp	r3, #165	; 0xa5
 800a21c:	d040      	beq.n	800a2a0 <HAL_TIM_PeriodElapsedCallback+0x204>
 800a21e:	e109      	b.n	800a434 <HAL_TIM_PeriodElapsedCallback+0x398>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 800a220:	2200      	movs	r2, #0
 800a222:	2140      	movs	r1, #64	; 0x40
 800a224:	484f      	ldr	r0, [pc, #316]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a226:	f001 fd6f 	bl	800bd08 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a22a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a22e:	484d      	ldr	r0, [pc, #308]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a230:	f001 fd82 	bl	800bd38 <HAL_GPIO_TogglePin>
				if (digits[cent][myIndex] == 1) {
 800a234:	4b4c      	ldr	r3, [pc, #304]	; (800a368 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	4b4c      	ldr	r3, [pc, #304]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	494c      	ldr	r1, [pc, #304]	; (800a370 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800a23e:	00d2      	lsls	r2, r2, #3
 800a240:	4413      	add	r3, r2
 800a242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d105      	bne.n	800a256 <HAL_TIM_PeriodElapsedCallback+0x1ba>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 800a24a:	2201      	movs	r2, #1
 800a24c:	2180      	movs	r1, #128	; 0x80
 800a24e:	4845      	ldr	r0, [pc, #276]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a250:	f001 fd5a 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a254:	e0f4      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 800a256:	2200      	movs	r2, #0
 800a258:	2180      	movs	r1, #128	; 0x80
 800a25a:	4842      	ldr	r0, [pc, #264]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a25c:	f001 fd54 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a260:	e0ee      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				myIndex--;
 800a262:	4b42      	ldr	r3, [pc, #264]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3b01      	subs	r3, #1
 800a268:	4a40      	ldr	r2, [pc, #256]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800a26a:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a26c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a270:	483c      	ldr	r0, [pc, #240]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a272:	f001 fd61 	bl	800bd38 <HAL_GPIO_TogglePin>
				break;
 800a276:	e0e3      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a27c:	4839      	ldr	r0, [pc, #228]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a27e:	f001 fd5b 	bl	800bd38 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 800a282:	2201      	movs	r2, #1
 800a284:	2140      	movs	r1, #64	; 0x40
 800a286:	4837      	ldr	r0, [pc, #220]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a288:	f001 fd3e 	bl	800bd08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 800a28c:	2201      	movs	r2, #1
 800a28e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a292:	4838      	ldr	r0, [pc, #224]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800a294:	f001 fd38 	bl	800bd08 <HAL_GPIO_WritePin>
				myIndex = 7;
 800a298:	4b34      	ldr	r3, [pc, #208]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800a29a:	2207      	movs	r2, #7
 800a29c:	601a      	str	r2, [r3, #0]
				break;
 800a29e:	e0cf      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a2a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a2a4:	482f      	ldr	r0, [pc, #188]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a2a6:	f001 fd47 	bl	800bd38 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 0);
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a2b0:	4830      	ldr	r0, [pc, #192]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800a2b2:	f001 fd29 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a2b6:	e0c3      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2140      	movs	r1, #64	; 0x40
 800a2bc:	4829      	ldr	r0, [pc, #164]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a2be:	f001 fd23 	bl	800bd08 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a2c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a2c6:	4827      	ldr	r0, [pc, #156]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a2c8:	f001 fd36 	bl	800bd38 <HAL_GPIO_TogglePin>
				if (digits[dez][myIndex] == 1) {
 800a2cc:	4b2a      	ldr	r3, [pc, #168]	; (800a378 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	4b26      	ldr	r3, [pc, #152]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4926      	ldr	r1, [pc, #152]	; (800a370 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800a2d6:	00d2      	lsls	r2, r2, #3
 800a2d8:	4413      	add	r3, r2
 800a2da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d105      	bne.n	800a2ee <HAL_TIM_PeriodElapsedCallback+0x252>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	2180      	movs	r1, #128	; 0x80
 800a2e6:	481f      	ldr	r0, [pc, #124]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a2e8:	f001 fd0e 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a2ec:	e0a8      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2180      	movs	r1, #128	; 0x80
 800a2f2:	481c      	ldr	r0, [pc, #112]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a2f4:	f001 fd08 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a2f8:	e0a2      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				myIndex--;
 800a2fa:	4b1c      	ldr	r3, [pc, #112]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	4a1a      	ldr	r2, [pc, #104]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800a302:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a308:	4816      	ldr	r0, [pc, #88]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a30a:	f001 fd15 	bl	800bd38 <HAL_GPIO_TogglePin>
				break;
 800a30e:	e097      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				myIndex = 7;
 800a310:	4b16      	ldr	r3, [pc, #88]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800a312:	2207      	movs	r2, #7
 800a314:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a31a:	4812      	ldr	r0, [pc, #72]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a31c:	f001 fd0c 	bl	800bd38 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 800a320:	2201      	movs	r2, #1
 800a322:	2140      	movs	r1, #64	; 0x40
 800a324:	480f      	ldr	r0, [pc, #60]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a326:	f001 fcef 	bl	800bd08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 1);
 800a32a:	2201      	movs	r2, #1
 800a32c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a330:	4810      	ldr	r0, [pc, #64]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800a332:	f001 fce9 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a336:	e083      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a33c:	4809      	ldr	r0, [pc, #36]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800a33e:	f001 fcfb 	bl	800bd38 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 0);
 800a342:	2200      	movs	r2, #0
 800a344:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a348:	480a      	ldr	r0, [pc, #40]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800a34a:	f001 fcdd 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a34e:	e077      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
 800a350:	40000800 	.word	0x40000800
 800a354:	20000328 	.word	0x20000328
 800a358:	40000400 	.word	0x40000400
 800a35c:	2000033c 	.word	0x2000033c
 800a360:	20000338 	.word	0x20000338
 800a364:	40010c00 	.word	0x40010c00
 800a368:	20000334 	.word	0x20000334
 800a36c:	20000000 	.word	0x20000000
 800a370:	20000014 	.word	0x20000014
 800a374:	40011000 	.word	0x40011000
 800a378:	20000330 	.word	0x20000330
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 800a37c:	2200      	movs	r2, #0
 800a37e:	2140      	movs	r1, #64	; 0x40
 800a380:	4834      	ldr	r0, [pc, #208]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a382:	f001 fcc1 	bl	800bd08 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a38a:	4832      	ldr	r0, [pc, #200]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a38c:	f001 fcd4 	bl	800bd38 <HAL_GPIO_TogglePin>
				if (digits[unid][myIndex] == 1) {
 800a390:	4b31      	ldr	r3, [pc, #196]	; (800a458 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	4b31      	ldr	r3, [pc, #196]	; (800a45c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4931      	ldr	r1, [pc, #196]	; (800a460 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800a39a:	00d2      	lsls	r2, r2, #3
 800a39c:	4413      	add	r3, r2
 800a39e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d105      	bne.n	800a3b2 <HAL_TIM_PeriodElapsedCallback+0x316>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	2180      	movs	r1, #128	; 0x80
 800a3aa:	482a      	ldr	r0, [pc, #168]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a3ac:	f001 fcac 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a3b0:	e046      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2180      	movs	r1, #128	; 0x80
 800a3b6:	4827      	ldr	r0, [pc, #156]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a3b8:	f001 fca6 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a3bc:	e040      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				myIndex--;
 800a3be:	4b27      	ldr	r3, [pc, #156]	; (800a45c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	4a25      	ldr	r2, [pc, #148]	; (800a45c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800a3c6:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a3c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3cc:	4821      	ldr	r0, [pc, #132]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a3ce:	f001 fcb3 	bl	800bd38 <HAL_GPIO_TogglePin>
				break;
 800a3d2:	e035      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a3d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3d8:	481e      	ldr	r0, [pc, #120]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a3da:	f001 fcad 	bl	800bd38 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 800a3de:	2201      	movs	r2, #1
 800a3e0:	2140      	movs	r1, #64	; 0x40
 800a3e2:	481c      	ldr	r0, [pc, #112]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a3e4:	f001 fc90 	bl	800bd08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 1);
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a3ee:	481d      	ldr	r0, [pc, #116]	; (800a464 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800a3f0:	f001 fc8a 	bl	800bd08 <HAL_GPIO_WritePin>
				myIndex = 7;
 800a3f4:	4b19      	ldr	r3, [pc, #100]	; (800a45c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800a3f6:	2207      	movs	r2, #7
 800a3f8:	601a      	str	r2, [r3, #0]
				break;
 800a3fa:	e021      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a3fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a400:	4814      	ldr	r0, [pc, #80]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a402:	f001 fc99 	bl	800bd38 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 0);
 800a406:	2200      	movs	r2, #0
 800a408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a40c:	4815      	ldr	r0, [pc, #84]	; (800a464 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800a40e:	f001 fc7b 	bl	800bd08 <HAL_GPIO_WritePin>
				break;
 800a412:	e015      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 800a414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a418:	480e      	ldr	r0, [pc, #56]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a41a:	f001 fc8d 	bl	800bd38 <HAL_GPIO_TogglePin>
				downcounter = 50;		//tempo morto de 1ms
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 800a420:	2232      	movs	r2, #50	; 0x32
 800a422:	601a      	str	r2, [r3, #0]
				fsm = -1;
 800a424:	4b11      	ldr	r3, [pc, #68]	; (800a46c <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 800a426:	f04f 32ff 	mov.w	r2, #4294967295
 800a42a:	601a      	str	r2, [r3, #0]
				myIndex = 7;
 800a42c:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800a42e:	2207      	movs	r2, #7
 800a430:	601a      	str	r2, [r3, #0]
				break;
 800a432:	e005      	b.n	800a440 <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);	//CLOCK
 800a434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a438:	4806      	ldr	r0, [pc, #24]	; (800a454 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800a43a:	f001 fc7d 	bl	800bd38 <HAL_GPIO_TogglePin>
				break;
 800a43e:	bf00      	nop
			fsm++;
 800a440:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3301      	adds	r3, #1
 800a446:	4a09      	ldr	r2, [pc, #36]	; (800a46c <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 800a448:	6013      	str	r3, [r2, #0]
}
 800a44a:	bf00      	nop
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	40010c00 	.word	0x40010c00
 800a458:	2000032c 	.word	0x2000032c
 800a45c:	20000000 	.word	0x20000000
 800a460:	20000014 	.word	0x20000014
 800a464:	40011000 	.word	0x40011000
 800a468:	2000033c 	.word	0x2000033c
 800a46c:	20000338 	.word	0x20000338

0800a470 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness) // 0~45 linearização do brilho
{
 800a470:	b5b0      	push	{r4, r5, r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b2d      	cmp	r3, #45	; 0x2d
 800a47c:	dd01      	ble.n	800a482 <Set_Brightness+0x12>
		brightness = 45;
 800a47e:	232d      	movs	r3, #45	; 0x2d
 800a480:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]
 800a486:	e05f      	b.n	800a548 <Set_Brightness+0xd8>
		LED_Mod[i][0] = LED_Data[i][0];
 800a488:	4a35      	ldr	r2, [pc, #212]	; (800a560 <Set_Brightness+0xf0>)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 800a490:	4a34      	ldr	r2, [pc, #208]	; (800a564 <Set_Brightness+0xf4>)
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 800a498:	2301      	movs	r3, #1
 800a49a:	613b      	str	r3, [r7, #16]
 800a49c:	e04e      	b.n	800a53c <Set_Brightness+0xcc>
			float angle = 90 - brightness; // em graus
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f6 fbfb 	bl	8000ca0 <__aeabi_i2f>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	60fb      	str	r3, [r7, #12]
			angle = angle * PI / 180; //em radianos
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7f5 ffb2 	bl	8000418 <__aeabi_f2d>
 800a4b4:	a328      	add	r3, pc, #160	; (adr r3, 800a558 <Set_Brightness+0xe8>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f6 f805 	bl	80004c8 <__aeabi_dmul>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	f04f 0200 	mov.w	r2, #0
 800a4ca:	4b27      	ldr	r3, [pc, #156]	; (800a568 <Set_Brightness+0xf8>)
 800a4cc:	f7f6 f926 	bl	800071c <__aeabi_ddiv>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	f7f6 fad8 	bl	8000a8c <__aeabi_d2f>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 800a4e0:	4a1f      	ldr	r2, [pc, #124]	; (800a560 <Set_Brightness+0xf0>)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	441a      	add	r2, r3
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f5 ff80 	bl	80003f4 <__aeabi_i2d>
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7f5 ff8d 	bl	8000418 <__aeabi_f2d>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4610      	mov	r0, r2
 800a504:	4619      	mov	r1, r3
 800a506:	f003 fc35 	bl	800dd74 <tan>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	f7f6 f903 	bl	800071c <__aeabi_ddiv>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4610      	mov	r0, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	f7f6 fa95 	bl	8000a4c <__aeabi_d2uiz>
 800a522:	4603      	mov	r3, r0
 800a524:	b2d9      	uxtb	r1, r3
 800a526:	4a0f      	ldr	r2, [pc, #60]	; (800a564 <Set_Brightness+0xf4>)
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	441a      	add	r2, r3
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	4413      	add	r3, r2
 800a532:	460a      	mov	r2, r1
 800a534:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	3301      	adds	r3, #1
 800a53a:	613b      	str	r3, [r7, #16]
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	2b03      	cmp	r3, #3
 800a540:	ddad      	ble.n	800a49e <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	3301      	adds	r3, #1
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b6d      	cmp	r3, #109	; 0x6d
 800a54c:	dd9c      	ble.n	800a488 <Set_Brightness+0x18>
		}
	}
}
 800a54e:	bf00      	nop
 800a550:	bf00      	nop
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bdb0      	pop	{r4, r5, r7, pc}
 800a558:	53c8d4f1 	.word	0x53c8d4f1
 800a55c:	400921fb 	.word	0x400921fb
 800a560:	20000340 	.word	0x20000340
 800a564:	200004f8 	.word	0x200004f8
 800a568:	40668000 	.word	0x40668000

0800a56c <WS2512_Send>:

#endif

uint16_t pwmData[(24*MAX_LED+50)];

void WS2512_Send(void) {
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++)
 800a576:	2300      	movs	r3, #0
 800a578:	613b      	str	r3, [r7, #16]
 800a57a:	e036      	b.n	800a5ea <WS2512_Send+0x7e>
	{
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 800a57c:	4a2e      	ldr	r2, [pc, #184]	; (800a638 <WS2512_Send+0xcc>)
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	785b      	ldrb	r3, [r3, #1]
 800a586:	041a      	lsls	r2, r3, #16
 800a588:	492b      	ldr	r1, [pc, #172]	; (800a638 <WS2512_Send+0xcc>)
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	440b      	add	r3, r1
 800a590:	789b      	ldrb	r3, [r3, #2]
 800a592:	021b      	lsls	r3, r3, #8
 800a594:	431a      	orrs	r2, r3
 800a596:	4928      	ldr	r1, [pc, #160]	; (800a638 <WS2512_Send+0xcc>)
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	440b      	add	r3, r1
 800a59e:	78db      	ldrb	r3, [r3, #3]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	607b      	str	r3, [r7, #4]

		for (int i = 23; i >= 0; i--) {
 800a5a4:	2317      	movs	r3, #23
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	e019      	b.n	800a5de <WS2512_Send+0x72>
			if (color & (1 << i)) {
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <WS2512_Send+0x5c>
				pwmData[indx] = 60;		// pulso alto, 2/3 de 90, aprox 68%
 800a5bc:	4a1f      	ldr	r2, [pc, #124]	; (800a63c <WS2512_Send+0xd0>)
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	213c      	movs	r1, #60	; 0x3c
 800a5c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a5c6:	e004      	b.n	800a5d2 <WS2512_Send+0x66>
			}

			else
				pwmData[indx] = 30;	// pulso baixo, 1/3 de 90, aprox 32%
 800a5c8:	4a1c      	ldr	r2, [pc, #112]	; (800a63c <WS2512_Send+0xd0>)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	211e      	movs	r1, #30
 800a5ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dae2      	bge.n	800a5aa <WS2512_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++)
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	613b      	str	r3, [r7, #16]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b6d      	cmp	r3, #109	; 0x6d
 800a5ee:	ddc5      	ble.n	800a57c <WS2512_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++)//intervalo de tempo de 50us antes da próxima msg
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60bb      	str	r3, [r7, #8]
 800a5f4:	e00a      	b.n	800a60c <WS2512_Send+0xa0>
			{
		pwmData[indx] = 0;
 800a5f6:	4a11      	ldr	r2, [pc, #68]	; (800a63c <WS2512_Send+0xd0>)
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	3301      	adds	r3, #1
 800a604:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++)//intervalo de tempo de 50us antes da próxima msg
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	3301      	adds	r3, #1
 800a60a:	60bb      	str	r3, [r7, #8]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2b31      	cmp	r3, #49	; 0x31
 800a610:	ddf1      	ble.n	800a5f6 <WS2512_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	b29b      	uxth	r3, r3
 800a616:	4a09      	ldr	r2, [pc, #36]	; (800a63c <WS2512_Send+0xd0>)
 800a618:	2100      	movs	r1, #0
 800a61a:	4809      	ldr	r0, [pc, #36]	; (800a640 <WS2512_Send+0xd4>)
 800a61c:	f002 fa20 	bl	800ca60 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 800a620:	bf00      	nop
 800a622:	4b08      	ldr	r3, [pc, #32]	; (800a644 <WS2512_Send+0xd8>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0fb      	beq.n	800a622 <WS2512_Send+0xb6>
	};
	datasentflag = 0;
 800a62a:	4b06      	ldr	r3, [pc, #24]	; (800a644 <WS2512_Send+0xd8>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	601a      	str	r2, [r3, #0]
}
 800a630:	bf00      	nop
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	200004f8 	.word	0x200004f8
 800a63c:	200006c8 	.word	0x200006c8
 800a640:	200001d8 	.word	0x200001d8
 800a644:	200006c4 	.word	0x200006c4

0800a648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a64c:	bf00      	nop
 800a64e:	46bd      	mov	sp, r7
 800a650:	bc80      	pop	{r7}
 800a652:	4770      	bx	lr

0800a654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a65a:	4b0e      	ldr	r3, [pc, #56]	; (800a694 <HAL_MspInit+0x40>)
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	4a0d      	ldr	r2, [pc, #52]	; (800a694 <HAL_MspInit+0x40>)
 800a660:	f043 0301 	orr.w	r3, r3, #1
 800a664:	6193      	str	r3, [r2, #24]
 800a666:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <HAL_MspInit+0x40>)
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	607b      	str	r3, [r7, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a672:	4b08      	ldr	r3, [pc, #32]	; (800a694 <HAL_MspInit+0x40>)
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	4a07      	ldr	r2, [pc, #28]	; (800a694 <HAL_MspInit+0x40>)
 800a678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a67c:	61d3      	str	r3, [r2, #28]
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <HAL_MspInit+0x40>)
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a686:	603b      	str	r3, [r7, #0]
 800a688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a68a:	bf00      	nop
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	bc80      	pop	{r7}
 800a692:	4770      	bx	lr
 800a694:	40021000 	.word	0x40021000

0800a698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08a      	sub	sp, #40	; 0x28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6a0:	f107 0318 	add.w	r3, r7, #24
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	605a      	str	r2, [r3, #4]
 800a6aa:	609a      	str	r2, [r3, #8]
 800a6ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a1f      	ldr	r2, [pc, #124]	; (800a730 <HAL_ADC_MspInit+0x98>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d137      	bne.n	800a728 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a6b8:	4b1e      	ldr	r3, [pc, #120]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	4a1d      	ldr	r2, [pc, #116]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a6c2:	6193      	str	r3, [r2, #24]
 800a6c4:	4b1b      	ldr	r3, [pc, #108]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6cc:	617b      	str	r3, [r7, #20]
 800a6ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6d0:	4b18      	ldr	r3, [pc, #96]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	4a17      	ldr	r2, [pc, #92]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6d6:	f043 0304 	orr.w	r3, r3, #4
 800a6da:	6193      	str	r3, [r2, #24]
 800a6dc:	4b15      	ldr	r3, [pc, #84]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	f003 0304 	and.w	r3, r3, #4
 800a6e4:	613b      	str	r3, [r7, #16]
 800a6e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6e8:	4b12      	ldr	r3, [pc, #72]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	4a11      	ldr	r2, [pc, #68]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6ee:	f043 0308 	orr.w	r3, r3, #8
 800a6f2:	6193      	str	r3, [r2, #24]
 800a6f4:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <HAL_ADC_MspInit+0x9c>)
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f003 0308 	and.w	r3, r3, #8
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a700:	2303      	movs	r3, #3
 800a702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a704:	2303      	movs	r3, #3
 800a706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a708:	f107 0318 	add.w	r3, r7, #24
 800a70c:	4619      	mov	r1, r3
 800a70e:	480a      	ldr	r0, [pc, #40]	; (800a738 <HAL_ADC_MspInit+0xa0>)
 800a710:	f001 f976 	bl	800ba00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a714:	2302      	movs	r3, #2
 800a716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a718:	2303      	movs	r3, #3
 800a71a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a71c:	f107 0318 	add.w	r3, r7, #24
 800a720:	4619      	mov	r1, r3
 800a722:	4806      	ldr	r0, [pc, #24]	; (800a73c <HAL_ADC_MspInit+0xa4>)
 800a724:	f001 f96c 	bl	800ba00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a728:	bf00      	nop
 800a72a:	3728      	adds	r7, #40	; 0x28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	40012400 	.word	0x40012400
 800a734:	40021000 	.word	0x40021000
 800a738:	40010800 	.word	0x40010800
 800a73c:	40010c00 	.word	0x40010c00

0800a740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a37      	ldr	r2, [pc, #220]	; (800a82c <HAL_TIM_Base_MspInit+0xec>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d134      	bne.n	800a7bc <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a752:	4b37      	ldr	r3, [pc, #220]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	4a36      	ldr	r2, [pc, #216]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a75c:	6193      	str	r3, [r2, #24]
 800a75e:	4b34      	ldr	r3, [pc, #208]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800a76a:	4b32      	ldr	r3, [pc, #200]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a76c:	4a32      	ldr	r2, [pc, #200]	; (800a838 <HAL_TIM_Base_MspInit+0xf8>)
 800a76e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a770:	4b30      	ldr	r3, [pc, #192]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a772:	2210      	movs	r2, #16
 800a774:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a776:	4b2f      	ldr	r3, [pc, #188]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a778:	2200      	movs	r2, #0
 800a77a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a77c:	4b2d      	ldr	r3, [pc, #180]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a77e:	2280      	movs	r2, #128	; 0x80
 800a780:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a782:	4b2c      	ldr	r3, [pc, #176]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a784:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a788:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a78a:	4b2a      	ldr	r3, [pc, #168]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a78c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a790:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800a792:	4b28      	ldr	r3, [pc, #160]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a794:	2200      	movs	r2, #0
 800a796:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800a798:	4b26      	ldr	r3, [pc, #152]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800a79e:	4825      	ldr	r0, [pc, #148]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a7a0:	f000 fec8 	bl	800b534 <HAL_DMA_Init>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800a7aa:	f7ff ff4d 	bl	800a648 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a20      	ldr	r2, [pc, #128]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a7b2:	625a      	str	r2, [r3, #36]	; 0x24
 800a7b4:	4a1f      	ldr	r2, [pc, #124]	; (800a834 <HAL_TIM_Base_MspInit+0xf4>)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a7ba:	e032      	b.n	800a822 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a1e      	ldr	r2, [pc, #120]	; (800a83c <HAL_TIM_Base_MspInit+0xfc>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d114      	bne.n	800a7f0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a7c6:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	4a19      	ldr	r2, [pc, #100]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a7cc:	f043 0302 	orr.w	r3, r3, #2
 800a7d0:	61d3      	str	r3, [r2, #28]
 800a7d2:	4b17      	ldr	r3, [pc, #92]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	f003 0302 	and.w	r3, r3, #2
 800a7da:	613b      	str	r3, [r7, #16]
 800a7dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	201d      	movs	r0, #29
 800a7e4:	f000 fe6f 	bl	800b4c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a7e8:	201d      	movs	r0, #29
 800a7ea:	f000 fe88 	bl	800b4fe <HAL_NVIC_EnableIRQ>
}
 800a7ee:	e018      	b.n	800a822 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM4)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a12      	ldr	r2, [pc, #72]	; (800a840 <HAL_TIM_Base_MspInit+0x100>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d113      	bne.n	800a822 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a7fa:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	4a0c      	ldr	r2, [pc, #48]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a800:	f043 0304 	orr.w	r3, r3, #4
 800a804:	61d3      	str	r3, [r2, #28]
 800a806:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <HAL_TIM_Base_MspInit+0xf0>)
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f003 0304 	and.w	r3, r3, #4
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a812:	2200      	movs	r2, #0
 800a814:	2100      	movs	r1, #0
 800a816:	201e      	movs	r0, #30
 800a818:	f000 fe55 	bl	800b4c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a81c:	201e      	movs	r0, #30
 800a81e:	f000 fe6e 	bl	800b4fe <HAL_NVIC_EnableIRQ>
}
 800a822:	bf00      	nop
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	40012c00 	.word	0x40012c00
 800a830:	40021000 	.word	0x40021000
 800a834:	200002b0 	.word	0x200002b0
 800a838:	4002001c 	.word	0x4002001c
 800a83c:	40000400 	.word	0x40000400
 800a840:	40000800 	.word	0x40000800

0800a844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b088      	sub	sp, #32
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a84c:	f107 0310 	add.w	r3, r7, #16
 800a850:	2200      	movs	r2, #0
 800a852:	601a      	str	r2, [r3, #0]
 800a854:	605a      	str	r2, [r3, #4]
 800a856:	609a      	str	r2, [r3, #8]
 800a858:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a10      	ldr	r2, [pc, #64]	; (800a8a0 <HAL_TIM_MspPostInit+0x5c>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d118      	bne.n	800a896 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a864:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <HAL_TIM_MspPostInit+0x60>)
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	4a0e      	ldr	r2, [pc, #56]	; (800a8a4 <HAL_TIM_MspPostInit+0x60>)
 800a86a:	f043 0304 	orr.w	r3, r3, #4
 800a86e:	6193      	str	r3, [r2, #24]
 800a870:	4b0c      	ldr	r3, [pc, #48]	; (800a8a4 <HAL_TIM_MspPostInit+0x60>)
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a87c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a880:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a882:	2302      	movs	r3, #2
 800a884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a886:	2302      	movs	r3, #2
 800a888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a88a:	f107 0310 	add.w	r3, r7, #16
 800a88e:	4619      	mov	r1, r3
 800a890:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <HAL_TIM_MspPostInit+0x64>)
 800a892:	f001 f8b5 	bl	800ba00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800a896:	bf00      	nop
 800a898:	3720      	adds	r7, #32
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	40012c00 	.word	0x40012c00
 800a8a4:	40021000 	.word	0x40021000
 800a8a8:	40010800 	.word	0x40010800

0800a8ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a8b0:	bf00      	nop
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	4770      	bx	lr

0800a8b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a8bc:	e7fe      	b.n	800a8bc <HardFault_Handler+0x4>

0800a8be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a8c2:	e7fe      	b.n	800a8c2 <MemManage_Handler+0x4>

0800a8c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a8c8:	e7fe      	b.n	800a8c8 <BusFault_Handler+0x4>

0800a8ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a8ce:	e7fe      	b.n	800a8ce <UsageFault_Handler+0x4>

0800a8d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a8d4:	bf00      	nop
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bc80      	pop	{r7}
 800a8da:	4770      	bx	lr

0800a8dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a8e0:	bf00      	nop
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bc80      	pop	{r7}
 800a8e6:	4770      	bx	lr

0800a8e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a8ec:	bf00      	nop
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bc80      	pop	{r7}
 800a8f2:	4770      	bx	lr

0800a8f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a8f8:	f000 f89a 	bl	800aa30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a8fc:	bf00      	nop
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTAO_Pin);
 800a904:	2001      	movs	r0, #1
 800a906:	f001 fa31 	bl	800bd6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a90a:	bf00      	nop
 800a90c:	bd80      	pop	{r7, pc}
	...

0800a910 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800a914:	4802      	ldr	r0, [pc, #8]	; (800a920 <DMA1_Channel2_IRQHandler+0x10>)
 800a916:	f000 ff3f 	bl	800b798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800a91a:	bf00      	nop
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	200002b0 	.word	0x200002b0

0800a924 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a928:	4802      	ldr	r0, [pc, #8]	; (800a934 <TIM3_IRQHandler+0x10>)
 800a92a:	f002 fb01 	bl	800cf30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a92e:	bf00      	nop
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20000220 	.word	0x20000220

0800a938 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a93c:	4802      	ldr	r0, [pc, #8]	; (800a948 <TIM4_IRQHandler+0x10>)
 800a93e:	f002 faf7 	bl	800cf30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a942:	bf00      	nop
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20000268 	.word	0x20000268

0800a94c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a950:	bf00      	nop
 800a952:	46bd      	mov	sp, r7
 800a954:	bc80      	pop	{r7}
 800a956:	4770      	bx	lr

0800a958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a958:	f7ff fff8 	bl	800a94c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a95c:	480b      	ldr	r0, [pc, #44]	; (800a98c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800a95e:	490c      	ldr	r1, [pc, #48]	; (800a990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800a960:	4a0c      	ldr	r2, [pc, #48]	; (800a994 <LoopFillZerobss+0x16>)
  movs r3, #0
 800a962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a964:	e002      	b.n	800a96c <LoopCopyDataInit>

0800a966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a96a:	3304      	adds	r3, #4

0800a96c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a96c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a96e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a970:	d3f9      	bcc.n	800a966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a972:	4a09      	ldr	r2, [pc, #36]	; (800a998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800a974:	4c09      	ldr	r4, [pc, #36]	; (800a99c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a976:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a978:	e001      	b.n	800a97e <LoopFillZerobss>

0800a97a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a97a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a97c:	3204      	adds	r2, #4

0800a97e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a97e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a980:	d3fb      	bcc.n	800a97a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a982:	f003 f9d3 	bl	800dd2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a986:	f7f6 fa2d 	bl	8000de4 <main>
  bx lr
 800a98a:	4770      	bx	lr
  ldr r0, =_sdata
 800a98c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a990:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800a994:	0800f060 	.word	0x0800f060
  ldr r2, =_sbss
 800a998:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800a99c:	20001bd4 	.word	0x20001bd4

0800a9a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a9a0:	e7fe      	b.n	800a9a0 <ADC1_2_IRQHandler>
	...

0800a9a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a9a8:	4b08      	ldr	r3, [pc, #32]	; (800a9cc <HAL_Init+0x28>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a07      	ldr	r2, [pc, #28]	; (800a9cc <HAL_Init+0x28>)
 800a9ae:	f043 0310 	orr.w	r3, r3, #16
 800a9b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a9b4:	2003      	movs	r0, #3
 800a9b6:	f000 fd7b 	bl	800b4b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a9ba:	200f      	movs	r0, #15
 800a9bc:	f000 f808 	bl	800a9d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a9c0:	f7ff fe48 	bl	800a654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	40022000 	.word	0x40022000

0800a9d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a9d8:	4b12      	ldr	r3, [pc, #72]	; (800aa24 <HAL_InitTick+0x54>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	4b12      	ldr	r3, [pc, #72]	; (800aa28 <HAL_InitTick+0x58>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fd93 	bl	800b51a <HAL_SYSTICK_Config>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e00e      	b.n	800aa1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b0f      	cmp	r3, #15
 800aa02:	d80a      	bhi.n	800aa1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aa04:	2200      	movs	r2, #0
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0c:	f000 fd5b 	bl	800b4c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800aa10:	4a06      	ldr	r2, [pc, #24]	; (800aa2c <HAL_InitTick+0x5c>)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e000      	b.n	800aa1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	20000174 	.word	0x20000174
 800aa28:	2000017c 	.word	0x2000017c
 800aa2c:	20000178 	.word	0x20000178

0800aa30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa30:	b480      	push	{r7}
 800aa32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aa34:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <HAL_IncTick+0x1c>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <HAL_IncTick+0x20>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4413      	add	r3, r2
 800aa40:	4a03      	ldr	r2, [pc, #12]	; (800aa50 <HAL_IncTick+0x20>)
 800aa42:	6013      	str	r3, [r2, #0]
}
 800aa44:	bf00      	nop
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bc80      	pop	{r7}
 800aa4a:	4770      	bx	lr
 800aa4c:	2000017c 	.word	0x2000017c
 800aa50:	20001bd0 	.word	0x20001bd0

0800aa54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
  return uwTick;
 800aa58:	4b02      	ldr	r3, [pc, #8]	; (800aa64 <HAL_GetTick+0x10>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bc80      	pop	{r7}
 800aa62:	4770      	bx	lr
 800aa64:	20001bd0 	.word	0x20001bd0

0800aa68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e0be      	b.n	800ac08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d109      	bne.n	800aaac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff fdf6 	bl	800a698 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fbf1 	bl	800b294 <ADC_ConversionStop_Disable>
 800aab2:	4603      	mov	r3, r0
 800aab4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaba:	f003 0310 	and.w	r3, r3, #16
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f040 8099 	bne.w	800abf6 <HAL_ADC_Init+0x18e>
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f040 8095 	bne.w	800abf6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800aad4:	f023 0302 	bic.w	r3, r3, #2
 800aad8:	f043 0202 	orr.w	r2, r3, #2
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800aae8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7b1b      	ldrb	r3, [r3, #12]
 800aaee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800aaf0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab00:	d003      	beq.n	800ab0a <HAL_ADC_Init+0xa2>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d102      	bne.n	800ab10 <HAL_ADC_Init+0xa8>
 800ab0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab0e:	e000      	b.n	800ab12 <HAL_ADC_Init+0xaa>
 800ab10:	2300      	movs	r3, #0
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	7d1b      	ldrb	r3, [r3, #20]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d119      	bne.n	800ab54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7b1b      	ldrb	r3, [r3, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d109      	bne.n	800ab3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	035a      	lsls	r2, r3, #13
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ab38:	613b      	str	r3, [r7, #16]
 800ab3a:	e00b      	b.n	800ab54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab40:	f043 0220 	orr.w	r2, r3, #32
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	f043 0201 	orr.w	r2, r3, #1
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689a      	ldr	r2, [r3, #8]
 800ab6e:	4b28      	ldr	r3, [pc, #160]	; (800ac10 <HAL_ADC_Init+0x1a8>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6812      	ldr	r2, [r2, #0]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab84:	d003      	beq.n	800ab8e <HAL_ADC_Init+0x126>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d104      	bne.n	800ab98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	051b      	lsls	r3, r3, #20
 800ab96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	430a      	orrs	r2, r1
 800abaa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	689a      	ldr	r2, [r3, #8]
 800abb2:	4b18      	ldr	r3, [pc, #96]	; (800ac14 <HAL_ADC_Init+0x1ac>)
 800abb4:	4013      	ands	r3, r2
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d10b      	bne.n	800abd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc6:	f023 0303 	bic.w	r3, r3, #3
 800abca:	f043 0201 	orr.w	r2, r3, #1
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800abd2:	e018      	b.n	800ac06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd8:	f023 0312 	bic.w	r3, r3, #18
 800abdc:	f043 0210 	orr.w	r2, r3, #16
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	f043 0201 	orr.w	r2, r3, #1
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800abf4:	e007      	b.n	800ac06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfa:	f043 0210 	orr.w	r2, r3, #16
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	ffe1f7fd 	.word	0xffe1f7fd
 800ac14:	ff1f0efe 	.word	0xff1f0efe

0800ac18 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d101      	bne.n	800ac32 <HAL_ADC_Start+0x1a>
 800ac2e:	2302      	movs	r3, #2
 800ac30:	e098      	b.n	800ad64 <HAL_ADC_Start+0x14c>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fad0 	bl	800b1e0 <ADC_Enable>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f040 8087 	bne.w	800ad5a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac54:	f023 0301 	bic.w	r3, r3, #1
 800ac58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a41      	ldr	r2, [pc, #260]	; (800ad6c <HAL_ADC_Start+0x154>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d105      	bne.n	800ac76 <HAL_ADC_Start+0x5e>
 800ac6a:	4b41      	ldr	r3, [pc, #260]	; (800ad70 <HAL_ADC_Start+0x158>)
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d115      	bne.n	800aca2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d026      	beq.n	800acde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ac98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800aca0:	e01d      	b.n	800acde <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a2f      	ldr	r2, [pc, #188]	; (800ad70 <HAL_ADC_Start+0x158>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d004      	beq.n	800acc2 <HAL_ADC_Start+0xaa>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a2b      	ldr	r2, [pc, #172]	; (800ad6c <HAL_ADC_Start+0x154>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d10d      	bne.n	800acde <HAL_ADC_Start+0xc6>
 800acc2:	4b2b      	ldr	r3, [pc, #172]	; (800ad70 <HAL_ADC_Start+0x158>)
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acca:	2b00      	cmp	r3, #0
 800accc:	d007      	beq.n	800acde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800acd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d006      	beq.n	800acf8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	f023 0206 	bic.w	r2, r3, #6
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	62da      	str	r2, [r3, #44]	; 0x2c
 800acf6:	e002      	b.n	800acfe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f06f 0202 	mvn.w	r2, #2
 800ad0e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800ad1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800ad1e:	d113      	bne.n	800ad48 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800ad24:	4a11      	ldr	r2, [pc, #68]	; (800ad6c <HAL_ADC_Start+0x154>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d105      	bne.n	800ad36 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800ad2a:	4b11      	ldr	r3, [pc, #68]	; (800ad70 <HAL_ADC_Start+0x158>)
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d108      	bne.n	800ad48 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689a      	ldr	r2, [r3, #8]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800ad44:	609a      	str	r2, [r3, #8]
 800ad46:	e00c      	b.n	800ad62 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	689a      	ldr	r2, [r3, #8]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ad56:	609a      	str	r2, [r3, #8]
 800ad58:	e003      	b.n	800ad62 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	40012800 	.word	0x40012800
 800ad70:	40012400 	.word	0x40012400

0800ad74 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d101      	bne.n	800ad8e <HAL_ADC_Stop+0x1a>
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	e01a      	b.n	800adc4 <HAL_ADC_Stop+0x50>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fa7c 	bl	800b294 <ADC_ConversionStop_Disable>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d109      	bne.n	800adba <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adaa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800adae:	f023 0301 	bic.w	r3, r3, #1
 800adb2:	f043 0201 	orr.w	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800adcc:	b590      	push	{r4, r7, lr}
 800adce:	b087      	sub	sp, #28
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800ade2:	f7ff fe37 	bl	800aa54 <HAL_GetTick>
 800ade6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00b      	beq.n	800ae0e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfa:	f043 0220 	orr.w	r2, r3, #32
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e0d3      	b.n	800afb6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d131      	bne.n	800ae80 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d12a      	bne.n	800ae80 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800ae2a:	e021      	b.n	800ae70 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae32:	d01d      	beq.n	800ae70 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d007      	beq.n	800ae4a <HAL_ADC_PollForConversion+0x7e>
 800ae3a:	f7ff fe0b 	bl	800aa54 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d212      	bcs.n	800ae70 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10b      	bne.n	800ae70 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5c:	f043 0204 	orr.w	r2, r3, #4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e0a2      	b.n	800afb6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0d6      	beq.n	800ae2c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800ae7e:	e070      	b.n	800af62 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800ae80:	4b4f      	ldr	r3, [pc, #316]	; (800afc0 <HAL_ADC_PollForConversion+0x1f4>)
 800ae82:	681c      	ldr	r4, [r3, #0]
 800ae84:	2002      	movs	r0, #2
 800ae86:	f001 fc3b 	bl	800c700 <HAL_RCCEx_GetPeriphCLKFreq>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6919      	ldr	r1, [r3, #16]
 800ae96:	4b4b      	ldr	r3, [pc, #300]	; (800afc4 <HAL_ADC_PollForConversion+0x1f8>)
 800ae98:	400b      	ands	r3, r1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d118      	bne.n	800aed0 <HAL_ADC_PollForConversion+0x104>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68d9      	ldr	r1, [r3, #12]
 800aea4:	4b48      	ldr	r3, [pc, #288]	; (800afc8 <HAL_ADC_PollForConversion+0x1fc>)
 800aea6:	400b      	ands	r3, r1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d111      	bne.n	800aed0 <HAL_ADC_PollForConversion+0x104>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6919      	ldr	r1, [r3, #16]
 800aeb2:	4b46      	ldr	r3, [pc, #280]	; (800afcc <HAL_ADC_PollForConversion+0x200>)
 800aeb4:	400b      	ands	r3, r1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d108      	bne.n	800aecc <HAL_ADC_PollForConversion+0x100>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68d9      	ldr	r1, [r3, #12]
 800aec0:	4b43      	ldr	r3, [pc, #268]	; (800afd0 <HAL_ADC_PollForConversion+0x204>)
 800aec2:	400b      	ands	r3, r1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <HAL_ADC_PollForConversion+0x100>
 800aec8:	2314      	movs	r3, #20
 800aeca:	e020      	b.n	800af0e <HAL_ADC_PollForConversion+0x142>
 800aecc:	2329      	movs	r3, #41	; 0x29
 800aece:	e01e      	b.n	800af0e <HAL_ADC_PollForConversion+0x142>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6919      	ldr	r1, [r3, #16]
 800aed6:	4b3d      	ldr	r3, [pc, #244]	; (800afcc <HAL_ADC_PollForConversion+0x200>)
 800aed8:	400b      	ands	r3, r1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <HAL_ADC_PollForConversion+0x120>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68d9      	ldr	r1, [r3, #12]
 800aee4:	4b3a      	ldr	r3, [pc, #232]	; (800afd0 <HAL_ADC_PollForConversion+0x204>)
 800aee6:	400b      	ands	r3, r1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00d      	beq.n	800af08 <HAL_ADC_PollForConversion+0x13c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6919      	ldr	r1, [r3, #16]
 800aef2:	4b38      	ldr	r3, [pc, #224]	; (800afd4 <HAL_ADC_PollForConversion+0x208>)
 800aef4:	400b      	ands	r3, r1
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d108      	bne.n	800af0c <HAL_ADC_PollForConversion+0x140>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68d9      	ldr	r1, [r3, #12]
 800af00:	4b34      	ldr	r3, [pc, #208]	; (800afd4 <HAL_ADC_PollForConversion+0x208>)
 800af02:	400b      	ands	r3, r1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <HAL_ADC_PollForConversion+0x140>
 800af08:	2354      	movs	r3, #84	; 0x54
 800af0a:	e000      	b.n	800af0e <HAL_ADC_PollForConversion+0x142>
 800af0c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800af0e:	fb02 f303 	mul.w	r3, r2, r3
 800af12:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800af14:	e021      	b.n	800af5a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1c:	d01a      	beq.n	800af54 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d007      	beq.n	800af34 <HAL_ADC_PollForConversion+0x168>
 800af24:	f7ff fd96 	bl	800aa54 <HAL_GetTick>
 800af28:	4602      	mov	r2, r0
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	429a      	cmp	r2, r3
 800af32:	d20f      	bcs.n	800af54 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d90b      	bls.n	800af54 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af40:	f043 0204 	orr.w	r2, r3, #4
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800af50:	2303      	movs	r3, #3
 800af52:	e030      	b.n	800afb6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3301      	adds	r3, #1
 800af58:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	693a      	ldr	r2, [r7, #16]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d8d9      	bhi.n	800af16 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f06f 0212 	mvn.w	r2, #18
 800af6a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800af82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800af86:	d115      	bne.n	800afb4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d111      	bne.n	800afb4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d105      	bne.n	800afb4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afac:	f043 0201 	orr.w	r2, r3, #1
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd90      	pop	{r4, r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000174 	.word	0x20000174
 800afc4:	24924924 	.word	0x24924924
 800afc8:	00924924 	.word	0x00924924
 800afcc:	12492492 	.word	0x12492492
 800afd0:	00492492 	.word	0x00492492
 800afd4:	00249249 	.word	0x00249249

0800afd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	bc80      	pop	{r7}
 800afee:	4770      	bx	lr

0800aff0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d101      	bne.n	800b010 <HAL_ADC_ConfigChannel+0x20>
 800b00c:	2302      	movs	r3, #2
 800b00e:	e0dc      	b.n	800b1ca <HAL_ADC_ConfigChannel+0x1da>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	2b06      	cmp	r3, #6
 800b01e:	d81c      	bhi.n	800b05a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	3b05      	subs	r3, #5
 800b032:	221f      	movs	r2, #31
 800b034:	fa02 f303 	lsl.w	r3, r2, r3
 800b038:	43db      	mvns	r3, r3
 800b03a:	4019      	ands	r1, r3
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	6818      	ldr	r0, [r3, #0]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	3b05      	subs	r3, #5
 800b04c:	fa00 f203 	lsl.w	r2, r0, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	430a      	orrs	r2, r1
 800b056:	635a      	str	r2, [r3, #52]	; 0x34
 800b058:	e03c      	b.n	800b0d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	2b0c      	cmp	r3, #12
 800b060:	d81c      	bhi.n	800b09c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	3b23      	subs	r3, #35	; 0x23
 800b074:	221f      	movs	r2, #31
 800b076:	fa02 f303 	lsl.w	r3, r2, r3
 800b07a:	43db      	mvns	r3, r3
 800b07c:	4019      	ands	r1, r3
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	6818      	ldr	r0, [r3, #0]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	3b23      	subs	r3, #35	; 0x23
 800b08e:	fa00 f203 	lsl.w	r2, r0, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	631a      	str	r2, [r3, #48]	; 0x30
 800b09a:	e01b      	b.n	800b0d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3b41      	subs	r3, #65	; 0x41
 800b0ae:	221f      	movs	r2, #31
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	43db      	mvns	r3, r3
 800b0b6:	4019      	ands	r1, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	3b41      	subs	r3, #65	; 0x41
 800b0c8:	fa00 f203 	lsl.w	r2, r0, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	430a      	orrs	r2, r1
 800b0d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d91c      	bls.n	800b116 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68d9      	ldr	r1, [r3, #12]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	4413      	add	r3, r2
 800b0ec:	3b1e      	subs	r3, #30
 800b0ee:	2207      	movs	r2, #7
 800b0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f4:	43db      	mvns	r3, r3
 800b0f6:	4019      	ands	r1, r3
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	6898      	ldr	r0, [r3, #8]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	4613      	mov	r3, r2
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	4413      	add	r3, r2
 800b106:	3b1e      	subs	r3, #30
 800b108:	fa00 f203 	lsl.w	r2, r0, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	60da      	str	r2, [r3, #12]
 800b114:	e019      	b.n	800b14a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6919      	ldr	r1, [r3, #16]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	4613      	mov	r3, r2
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	4413      	add	r3, r2
 800b126:	2207      	movs	r2, #7
 800b128:	fa02 f303 	lsl.w	r3, r2, r3
 800b12c:	43db      	mvns	r3, r3
 800b12e:	4019      	ands	r1, r3
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	6898      	ldr	r0, [r3, #8]
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	4613      	mov	r3, r2
 800b13a:	005b      	lsls	r3, r3, #1
 800b13c:	4413      	add	r3, r2
 800b13e:	fa00 f203 	lsl.w	r2, r0, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	430a      	orrs	r2, r1
 800b148:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b10      	cmp	r3, #16
 800b150:	d003      	beq.n	800b15a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800b156:	2b11      	cmp	r3, #17
 800b158:	d132      	bne.n	800b1c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a1d      	ldr	r2, [pc, #116]	; (800b1d4 <HAL_ADC_ConfigChannel+0x1e4>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d125      	bne.n	800b1b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d126      	bne.n	800b1c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b180:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b10      	cmp	r3, #16
 800b188:	d11a      	bne.n	800b1c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b18a:	4b13      	ldr	r3, [pc, #76]	; (800b1d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a13      	ldr	r2, [pc, #76]	; (800b1dc <HAL_ADC_ConfigChannel+0x1ec>)
 800b190:	fba2 2303 	umull	r2, r3, r2, r3
 800b194:	0c9a      	lsrs	r2, r3, #18
 800b196:	4613      	mov	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800b1a0:	e002      	b.n	800b1a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1f9      	bne.n	800b1a2 <HAL_ADC_ConfigChannel+0x1b2>
 800b1ae:	e007      	b.n	800b1c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b4:	f043 0220 	orr.w	r2, r3, #32
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bc80      	pop	{r7}
 800b1d2:	4770      	bx	lr
 800b1d4:	40012400 	.word	0x40012400
 800b1d8:	20000174 	.word	0x20000174
 800b1dc:	431bde83 	.word	0x431bde83

0800b1e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d040      	beq.n	800b280 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	689a      	ldr	r2, [r3, #8]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f042 0201 	orr.w	r2, r2, #1
 800b20c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b20e:	4b1f      	ldr	r3, [pc, #124]	; (800b28c <ADC_Enable+0xac>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a1f      	ldr	r2, [pc, #124]	; (800b290 <ADC_Enable+0xb0>)
 800b214:	fba2 2303 	umull	r2, r3, r2, r3
 800b218:	0c9b      	lsrs	r3, r3, #18
 800b21a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800b21c:	e002      	b.n	800b224 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	3b01      	subs	r3, #1
 800b222:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1f9      	bne.n	800b21e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b22a:	f7ff fc13 	bl	800aa54 <HAL_GetTick>
 800b22e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800b230:	e01f      	b.n	800b272 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b232:	f7ff fc0f 	bl	800aa54 <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d918      	bls.n	800b272 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d011      	beq.n	800b272 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b252:	f043 0210 	orr.w	r2, r3, #16
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25e:	f043 0201 	orr.w	r2, r3, #1
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e007      	b.n	800b282 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f003 0301 	and.w	r3, r3, #1
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d1d8      	bne.n	800b232 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000174 	.word	0x20000174
 800b290:	431bde83 	.word	0x431bde83

0800b294 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d12e      	bne.n	800b30c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0201 	bic.w	r2, r2, #1
 800b2bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b2be:	f7ff fbc9 	bl	800aa54 <HAL_GetTick>
 800b2c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b2c4:	e01b      	b.n	800b2fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b2c6:	f7ff fbc5 	bl	800aa54 <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d914      	bls.n	800b2fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d10d      	bne.n	800b2fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e6:	f043 0210 	orr.w	r2, r3, #16
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f2:	f043 0201 	orr.w	r2, r3, #1
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e007      	b.n	800b30e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d0dc      	beq.n	800b2c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
	...

0800b318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f003 0307 	and.w	r3, r3, #7
 800b326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b328:	4b0c      	ldr	r3, [pc, #48]	; (800b35c <__NVIC_SetPriorityGrouping+0x44>)
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b334:	4013      	ands	r3, r2
 800b336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b34a:	4a04      	ldr	r2, [pc, #16]	; (800b35c <__NVIC_SetPriorityGrouping+0x44>)
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	60d3      	str	r3, [r2, #12]
}
 800b350:	bf00      	nop
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	e000ed00 	.word	0xe000ed00

0800b360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b364:	4b04      	ldr	r3, [pc, #16]	; (800b378 <__NVIC_GetPriorityGrouping+0x18>)
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	0a1b      	lsrs	r3, r3, #8
 800b36a:	f003 0307 	and.w	r3, r3, #7
}
 800b36e:	4618      	mov	r0, r3
 800b370:	46bd      	mov	sp, r7
 800b372:	bc80      	pop	{r7}
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	e000ed00 	.word	0xe000ed00

0800b37c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	db0b      	blt.n	800b3a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	f003 021f 	and.w	r2, r3, #31
 800b394:	4906      	ldr	r1, [pc, #24]	; (800b3b0 <__NVIC_EnableIRQ+0x34>)
 800b396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b39a:	095b      	lsrs	r3, r3, #5
 800b39c:	2001      	movs	r0, #1
 800b39e:	fa00 f202 	lsl.w	r2, r0, r2
 800b3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b3a6:	bf00      	nop
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bc80      	pop	{r7}
 800b3ae:	4770      	bx	lr
 800b3b0:	e000e100 	.word	0xe000e100

0800b3b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	6039      	str	r1, [r7, #0]
 800b3be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	db0a      	blt.n	800b3de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	490c      	ldr	r1, [pc, #48]	; (800b400 <__NVIC_SetPriority+0x4c>)
 800b3ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3d2:	0112      	lsls	r2, r2, #4
 800b3d4:	b2d2      	uxtb	r2, r2
 800b3d6:	440b      	add	r3, r1
 800b3d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b3dc:	e00a      	b.n	800b3f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	4908      	ldr	r1, [pc, #32]	; (800b404 <__NVIC_SetPriority+0x50>)
 800b3e4:	79fb      	ldrb	r3, [r7, #7]
 800b3e6:	f003 030f 	and.w	r3, r3, #15
 800b3ea:	3b04      	subs	r3, #4
 800b3ec:	0112      	lsls	r2, r2, #4
 800b3ee:	b2d2      	uxtb	r2, r2
 800b3f0:	440b      	add	r3, r1
 800b3f2:	761a      	strb	r2, [r3, #24]
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bc80      	pop	{r7}
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	e000e100 	.word	0xe000e100
 800b404:	e000ed00 	.word	0xe000ed00

0800b408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b408:	b480      	push	{r7}
 800b40a:	b089      	sub	sp, #36	; 0x24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f003 0307 	and.w	r3, r3, #7
 800b41a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	f1c3 0307 	rsb	r3, r3, #7
 800b422:	2b04      	cmp	r3, #4
 800b424:	bf28      	it	cs
 800b426:	2304      	movcs	r3, #4
 800b428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	3304      	adds	r3, #4
 800b42e:	2b06      	cmp	r3, #6
 800b430:	d902      	bls.n	800b438 <NVIC_EncodePriority+0x30>
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	3b03      	subs	r3, #3
 800b436:	e000      	b.n	800b43a <NVIC_EncodePriority+0x32>
 800b438:	2300      	movs	r3, #0
 800b43a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b43c:	f04f 32ff 	mov.w	r2, #4294967295
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	fa02 f303 	lsl.w	r3, r2, r3
 800b446:	43da      	mvns	r2, r3
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	401a      	ands	r2, r3
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b450:	f04f 31ff 	mov.w	r1, #4294967295
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	fa01 f303 	lsl.w	r3, r1, r3
 800b45a:	43d9      	mvns	r1, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b460:	4313      	orrs	r3, r2
         );
}
 800b462:	4618      	mov	r0, r3
 800b464:	3724      	adds	r7, #36	; 0x24
 800b466:	46bd      	mov	sp, r7
 800b468:	bc80      	pop	{r7}
 800b46a:	4770      	bx	lr

0800b46c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3b01      	subs	r3, #1
 800b478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b47c:	d301      	bcc.n	800b482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b47e:	2301      	movs	r3, #1
 800b480:	e00f      	b.n	800b4a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b482:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <SysTick_Config+0x40>)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3b01      	subs	r3, #1
 800b488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b48a:	210f      	movs	r1, #15
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	f7ff ff90 	bl	800b3b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b494:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <SysTick_Config+0x40>)
 800b496:	2200      	movs	r2, #0
 800b498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b49a:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <SysTick_Config+0x40>)
 800b49c:	2207      	movs	r2, #7
 800b49e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	e000e010 	.word	0xe000e010

0800b4b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff ff2d 	bl	800b318 <__NVIC_SetPriorityGrouping>
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b086      	sub	sp, #24
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	607a      	str	r2, [r7, #4]
 800b4d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b4d8:	f7ff ff42 	bl	800b360 <__NVIC_GetPriorityGrouping>
 800b4dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	68b9      	ldr	r1, [r7, #8]
 800b4e2:	6978      	ldr	r0, [r7, #20]
 800b4e4:	f7ff ff90 	bl	800b408 <NVIC_EncodePriority>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff ff5f 	bl	800b3b4 <__NVIC_SetPriority>
}
 800b4f6:	bf00      	nop
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	4603      	mov	r3, r0
 800b506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff ff35 	bl	800b37c <__NVIC_EnableIRQ>
}
 800b512:	bf00      	nop
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7ff ffa2 	bl	800b46c <SysTick_Config>
 800b528:	4603      	mov	r3, r0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
	...

0800b534 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e043      	b.n	800b5d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	4b22      	ldr	r3, [pc, #136]	; (800b5dc <HAL_DMA_Init+0xa8>)
 800b552:	4413      	add	r3, r2
 800b554:	4a22      	ldr	r2, [pc, #136]	; (800b5e0 <HAL_DMA_Init+0xac>)
 800b556:	fba2 2303 	umull	r2, r3, r2, r3
 800b55a:	091b      	lsrs	r3, r3, #4
 800b55c:	009a      	lsls	r2, r3, #2
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a1f      	ldr	r2, [pc, #124]	; (800b5e4 <HAL_DMA_Init+0xb0>)
 800b566:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b57e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b582:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800b58c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	69db      	ldr	r3, [r3, #28]
 800b5aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bc80      	pop	{r7}
 800b5da:	4770      	bx	lr
 800b5dc:	bffdfff8 	.word	0xbffdfff8
 800b5e0:	cccccccd 	.word	0xcccccccd
 800b5e4:	40020000 	.word	0x40020000

0800b5e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d101      	bne.n	800b608 <HAL_DMA_Start_IT+0x20>
 800b604:	2302      	movs	r3, #2
 800b606:	e04b      	b.n	800b6a0 <HAL_DMA_Start_IT+0xb8>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d13a      	bne.n	800b692 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2202      	movs	r2, #2
 800b620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 f9af 	bl	800b9a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d008      	beq.n	800b660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f042 020e 	orr.w	r2, r2, #14
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	e00f      	b.n	800b680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f022 0204 	bic.w	r2, r2, #4
 800b66e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f042 020a 	orr.w	r2, r2, #10
 800b67e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f042 0201 	orr.w	r2, r2, #1
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	e005      	b.n	800b69e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800b69a:	2302      	movs	r3, #2
 800b69c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800b69e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d005      	beq.n	800b6cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2204      	movs	r2, #4
 800b6c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	73fb      	strb	r3, [r7, #15]
 800b6ca:	e051      	b.n	800b770 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f022 020e 	bic.w	r2, r2, #14
 800b6da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f022 0201 	bic.w	r2, r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a22      	ldr	r2, [pc, #136]	; (800b77c <HAL_DMA_Abort_IT+0xd4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d029      	beq.n	800b74a <HAL_DMA_Abort_IT+0xa2>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a21      	ldr	r2, [pc, #132]	; (800b780 <HAL_DMA_Abort_IT+0xd8>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d022      	beq.n	800b746 <HAL_DMA_Abort_IT+0x9e>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a1f      	ldr	r2, [pc, #124]	; (800b784 <HAL_DMA_Abort_IT+0xdc>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d01a      	beq.n	800b740 <HAL_DMA_Abort_IT+0x98>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <HAL_DMA_Abort_IT+0xe0>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d012      	beq.n	800b73a <HAL_DMA_Abort_IT+0x92>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a1c      	ldr	r2, [pc, #112]	; (800b78c <HAL_DMA_Abort_IT+0xe4>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d00a      	beq.n	800b734 <HAL_DMA_Abort_IT+0x8c>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a1b      	ldr	r2, [pc, #108]	; (800b790 <HAL_DMA_Abort_IT+0xe8>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d102      	bne.n	800b72e <HAL_DMA_Abort_IT+0x86>
 800b728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b72c:	e00e      	b.n	800b74c <HAL_DMA_Abort_IT+0xa4>
 800b72e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b732:	e00b      	b.n	800b74c <HAL_DMA_Abort_IT+0xa4>
 800b734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b738:	e008      	b.n	800b74c <HAL_DMA_Abort_IT+0xa4>
 800b73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b73e:	e005      	b.n	800b74c <HAL_DMA_Abort_IT+0xa4>
 800b740:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b744:	e002      	b.n	800b74c <HAL_DMA_Abort_IT+0xa4>
 800b746:	2310      	movs	r3, #16
 800b748:	e000      	b.n	800b74c <HAL_DMA_Abort_IT+0xa4>
 800b74a:	2301      	movs	r3, #1
 800b74c:	4a11      	ldr	r2, [pc, #68]	; (800b794 <HAL_DMA_Abort_IT+0xec>)
 800b74e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	4798      	blx	r3
    } 
  }
  return status;
 800b770:	7bfb      	ldrb	r3, [r7, #15]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	40020008 	.word	0x40020008
 800b780:	4002001c 	.word	0x4002001c
 800b784:	40020030 	.word	0x40020030
 800b788:	40020044 	.word	0x40020044
 800b78c:	40020058 	.word	0x40020058
 800b790:	4002006c 	.word	0x4002006c
 800b794:	40020000 	.word	0x40020000

0800b798 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	409a      	lsls	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d04f      	beq.n	800b860 <HAL_DMA_IRQHandler+0xc8>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	f003 0304 	and.w	r3, r3, #4
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d04a      	beq.n	800b860 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 0320 	and.w	r3, r3, #32
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d107      	bne.n	800b7e8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f022 0204 	bic.w	r2, r2, #4
 800b7e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a66      	ldr	r2, [pc, #408]	; (800b988 <HAL_DMA_IRQHandler+0x1f0>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d029      	beq.n	800b846 <HAL_DMA_IRQHandler+0xae>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a65      	ldr	r2, [pc, #404]	; (800b98c <HAL_DMA_IRQHandler+0x1f4>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d022      	beq.n	800b842 <HAL_DMA_IRQHandler+0xaa>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a63      	ldr	r2, [pc, #396]	; (800b990 <HAL_DMA_IRQHandler+0x1f8>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d01a      	beq.n	800b83c <HAL_DMA_IRQHandler+0xa4>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a62      	ldr	r2, [pc, #392]	; (800b994 <HAL_DMA_IRQHandler+0x1fc>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d012      	beq.n	800b836 <HAL_DMA_IRQHandler+0x9e>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a60      	ldr	r2, [pc, #384]	; (800b998 <HAL_DMA_IRQHandler+0x200>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d00a      	beq.n	800b830 <HAL_DMA_IRQHandler+0x98>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a5f      	ldr	r2, [pc, #380]	; (800b99c <HAL_DMA_IRQHandler+0x204>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d102      	bne.n	800b82a <HAL_DMA_IRQHandler+0x92>
 800b824:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b828:	e00e      	b.n	800b848 <HAL_DMA_IRQHandler+0xb0>
 800b82a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b82e:	e00b      	b.n	800b848 <HAL_DMA_IRQHandler+0xb0>
 800b830:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b834:	e008      	b.n	800b848 <HAL_DMA_IRQHandler+0xb0>
 800b836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b83a:	e005      	b.n	800b848 <HAL_DMA_IRQHandler+0xb0>
 800b83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b840:	e002      	b.n	800b848 <HAL_DMA_IRQHandler+0xb0>
 800b842:	2340      	movs	r3, #64	; 0x40
 800b844:	e000      	b.n	800b848 <HAL_DMA_IRQHandler+0xb0>
 800b846:	2304      	movs	r3, #4
 800b848:	4a55      	ldr	r2, [pc, #340]	; (800b9a0 <HAL_DMA_IRQHandler+0x208>)
 800b84a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 8094 	beq.w	800b97e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800b85e:	e08e      	b.n	800b97e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b864:	2202      	movs	r2, #2
 800b866:	409a      	lsls	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4013      	ands	r3, r2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d056      	beq.n	800b91e <HAL_DMA_IRQHandler+0x186>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	f003 0302 	and.w	r3, r3, #2
 800b876:	2b00      	cmp	r3, #0
 800b878:	d051      	beq.n	800b91e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10b      	bne.n	800b8a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f022 020a 	bic.w	r2, r2, #10
 800b896:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a38      	ldr	r2, [pc, #224]	; (800b988 <HAL_DMA_IRQHandler+0x1f0>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d029      	beq.n	800b8fe <HAL_DMA_IRQHandler+0x166>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a37      	ldr	r2, [pc, #220]	; (800b98c <HAL_DMA_IRQHandler+0x1f4>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d022      	beq.n	800b8fa <HAL_DMA_IRQHandler+0x162>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a35      	ldr	r2, [pc, #212]	; (800b990 <HAL_DMA_IRQHandler+0x1f8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d01a      	beq.n	800b8f4 <HAL_DMA_IRQHandler+0x15c>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a34      	ldr	r2, [pc, #208]	; (800b994 <HAL_DMA_IRQHandler+0x1fc>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d012      	beq.n	800b8ee <HAL_DMA_IRQHandler+0x156>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a32      	ldr	r2, [pc, #200]	; (800b998 <HAL_DMA_IRQHandler+0x200>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d00a      	beq.n	800b8e8 <HAL_DMA_IRQHandler+0x150>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a31      	ldr	r2, [pc, #196]	; (800b99c <HAL_DMA_IRQHandler+0x204>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d102      	bne.n	800b8e2 <HAL_DMA_IRQHandler+0x14a>
 800b8dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b8e0:	e00e      	b.n	800b900 <HAL_DMA_IRQHandler+0x168>
 800b8e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8e6:	e00b      	b.n	800b900 <HAL_DMA_IRQHandler+0x168>
 800b8e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b8ec:	e008      	b.n	800b900 <HAL_DMA_IRQHandler+0x168>
 800b8ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8f2:	e005      	b.n	800b900 <HAL_DMA_IRQHandler+0x168>
 800b8f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8f8:	e002      	b.n	800b900 <HAL_DMA_IRQHandler+0x168>
 800b8fa:	2320      	movs	r3, #32
 800b8fc:	e000      	b.n	800b900 <HAL_DMA_IRQHandler+0x168>
 800b8fe:	2302      	movs	r3, #2
 800b900:	4a27      	ldr	r2, [pc, #156]	; (800b9a0 <HAL_DMA_IRQHandler+0x208>)
 800b902:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b910:	2b00      	cmp	r3, #0
 800b912:	d034      	beq.n	800b97e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800b91c:	e02f      	b.n	800b97e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b922:	2208      	movs	r2, #8
 800b924:	409a      	lsls	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	4013      	ands	r3, r2
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d028      	beq.n	800b980 <HAL_DMA_IRQHandler+0x1e8>
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f003 0308 	and.w	r3, r3, #8
 800b934:	2b00      	cmp	r3, #0
 800b936:	d023      	beq.n	800b980 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f022 020e 	bic.w	r2, r2, #14
 800b946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b950:	2101      	movs	r1, #1
 800b952:	fa01 f202 	lsl.w	r2, r1, r2
 800b956:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b972:	2b00      	cmp	r3, #0
 800b974:	d004      	beq.n	800b980 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	4798      	blx	r3
    }
  }
  return;
 800b97e:	bf00      	nop
 800b980:	bf00      	nop
}
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	40020008 	.word	0x40020008
 800b98c:	4002001c 	.word	0x4002001c
 800b990:	40020030 	.word	0x40020030
 800b994:	40020044 	.word	0x40020044
 800b998:	40020058 	.word	0x40020058
 800b99c:	4002006c 	.word	0x4002006c
 800b9a0:	40020000 	.word	0x40020000

0800b9a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	fa01 f202 	lsl.w	r2, r1, r2
 800b9c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	2b10      	cmp	r3, #16
 800b9d0:	d108      	bne.n	800b9e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b9e2:	e007      	b.n	800b9f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	60da      	str	r2, [r3, #12]
}
 800b9f4:	bf00      	nop
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bc80      	pop	{r7}
 800b9fc:	4770      	bx	lr
	...

0800ba00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b08b      	sub	sp, #44	; 0x2c
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ba12:	e169      	b.n	800bce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800ba14:	2201      	movs	r2, #1
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	fa02 f303 	lsl.w	r3, r2, r3
 800ba1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	69fa      	ldr	r2, [r7, #28]
 800ba24:	4013      	ands	r3, r2
 800ba26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800ba28:	69ba      	ldr	r2, [r7, #24]
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	f040 8158 	bne.w	800bce2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	4a9a      	ldr	r2, [pc, #616]	; (800bca0 <HAL_GPIO_Init+0x2a0>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d05e      	beq.n	800bafa <HAL_GPIO_Init+0xfa>
 800ba3c:	4a98      	ldr	r2, [pc, #608]	; (800bca0 <HAL_GPIO_Init+0x2a0>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d875      	bhi.n	800bb2e <HAL_GPIO_Init+0x12e>
 800ba42:	4a98      	ldr	r2, [pc, #608]	; (800bca4 <HAL_GPIO_Init+0x2a4>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d058      	beq.n	800bafa <HAL_GPIO_Init+0xfa>
 800ba48:	4a96      	ldr	r2, [pc, #600]	; (800bca4 <HAL_GPIO_Init+0x2a4>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d86f      	bhi.n	800bb2e <HAL_GPIO_Init+0x12e>
 800ba4e:	4a96      	ldr	r2, [pc, #600]	; (800bca8 <HAL_GPIO_Init+0x2a8>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d052      	beq.n	800bafa <HAL_GPIO_Init+0xfa>
 800ba54:	4a94      	ldr	r2, [pc, #592]	; (800bca8 <HAL_GPIO_Init+0x2a8>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d869      	bhi.n	800bb2e <HAL_GPIO_Init+0x12e>
 800ba5a:	4a94      	ldr	r2, [pc, #592]	; (800bcac <HAL_GPIO_Init+0x2ac>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d04c      	beq.n	800bafa <HAL_GPIO_Init+0xfa>
 800ba60:	4a92      	ldr	r2, [pc, #584]	; (800bcac <HAL_GPIO_Init+0x2ac>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d863      	bhi.n	800bb2e <HAL_GPIO_Init+0x12e>
 800ba66:	4a92      	ldr	r2, [pc, #584]	; (800bcb0 <HAL_GPIO_Init+0x2b0>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d046      	beq.n	800bafa <HAL_GPIO_Init+0xfa>
 800ba6c:	4a90      	ldr	r2, [pc, #576]	; (800bcb0 <HAL_GPIO_Init+0x2b0>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d85d      	bhi.n	800bb2e <HAL_GPIO_Init+0x12e>
 800ba72:	2b12      	cmp	r3, #18
 800ba74:	d82a      	bhi.n	800bacc <HAL_GPIO_Init+0xcc>
 800ba76:	2b12      	cmp	r3, #18
 800ba78:	d859      	bhi.n	800bb2e <HAL_GPIO_Init+0x12e>
 800ba7a:	a201      	add	r2, pc, #4	; (adr r2, 800ba80 <HAL_GPIO_Init+0x80>)
 800ba7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba80:	0800bafb 	.word	0x0800bafb
 800ba84:	0800bad5 	.word	0x0800bad5
 800ba88:	0800bae7 	.word	0x0800bae7
 800ba8c:	0800bb29 	.word	0x0800bb29
 800ba90:	0800bb2f 	.word	0x0800bb2f
 800ba94:	0800bb2f 	.word	0x0800bb2f
 800ba98:	0800bb2f 	.word	0x0800bb2f
 800ba9c:	0800bb2f 	.word	0x0800bb2f
 800baa0:	0800bb2f 	.word	0x0800bb2f
 800baa4:	0800bb2f 	.word	0x0800bb2f
 800baa8:	0800bb2f 	.word	0x0800bb2f
 800baac:	0800bb2f 	.word	0x0800bb2f
 800bab0:	0800bb2f 	.word	0x0800bb2f
 800bab4:	0800bb2f 	.word	0x0800bb2f
 800bab8:	0800bb2f 	.word	0x0800bb2f
 800babc:	0800bb2f 	.word	0x0800bb2f
 800bac0:	0800bb2f 	.word	0x0800bb2f
 800bac4:	0800badd 	.word	0x0800badd
 800bac8:	0800baf1 	.word	0x0800baf1
 800bacc:	4a79      	ldr	r2, [pc, #484]	; (800bcb4 <HAL_GPIO_Init+0x2b4>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d013      	beq.n	800bafa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800bad2:	e02c      	b.n	800bb2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	623b      	str	r3, [r7, #32]
          break;
 800bada:	e029      	b.n	800bb30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	3304      	adds	r3, #4
 800bae2:	623b      	str	r3, [r7, #32]
          break;
 800bae4:	e024      	b.n	800bb30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	3308      	adds	r3, #8
 800baec:	623b      	str	r3, [r7, #32]
          break;
 800baee:	e01f      	b.n	800bb30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	330c      	adds	r3, #12
 800baf6:	623b      	str	r3, [r7, #32]
          break;
 800baf8:	e01a      	b.n	800bb30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800bb02:	2304      	movs	r3, #4
 800bb04:	623b      	str	r3, [r7, #32]
          break;
 800bb06:	e013      	b.n	800bb30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d105      	bne.n	800bb1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800bb10:	2308      	movs	r3, #8
 800bb12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	69fa      	ldr	r2, [r7, #28]
 800bb18:	611a      	str	r2, [r3, #16]
          break;
 800bb1a:	e009      	b.n	800bb30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	69fa      	ldr	r2, [r7, #28]
 800bb24:	615a      	str	r2, [r3, #20]
          break;
 800bb26:	e003      	b.n	800bb30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	623b      	str	r3, [r7, #32]
          break;
 800bb2c:	e000      	b.n	800bb30 <HAL_GPIO_Init+0x130>
          break;
 800bb2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	2bff      	cmp	r3, #255	; 0xff
 800bb34:	d801      	bhi.n	800bb3a <HAL_GPIO_Init+0x13a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	e001      	b.n	800bb3e <HAL_GPIO_Init+0x13e>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	2bff      	cmp	r3, #255	; 0xff
 800bb44:	d802      	bhi.n	800bb4c <HAL_GPIO_Init+0x14c>
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	e002      	b.n	800bb52 <HAL_GPIO_Init+0x152>
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	3b08      	subs	r3, #8
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	210f      	movs	r1, #15
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	fa01 f303 	lsl.w	r3, r1, r3
 800bb60:	43db      	mvns	r3, r3
 800bb62:	401a      	ands	r2, r3
 800bb64:	6a39      	ldr	r1, [r7, #32]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	fa01 f303 	lsl.w	r3, r1, r3
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 80b1 	beq.w	800bce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800bb80:	4b4d      	ldr	r3, [pc, #308]	; (800bcb8 <HAL_GPIO_Init+0x2b8>)
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	4a4c      	ldr	r2, [pc, #304]	; (800bcb8 <HAL_GPIO_Init+0x2b8>)
 800bb86:	f043 0301 	orr.w	r3, r3, #1
 800bb8a:	6193      	str	r3, [r2, #24]
 800bb8c:	4b4a      	ldr	r3, [pc, #296]	; (800bcb8 <HAL_GPIO_Init+0x2b8>)
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	60bb      	str	r3, [r7, #8]
 800bb96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800bb98:	4a48      	ldr	r2, [pc, #288]	; (800bcbc <HAL_GPIO_Init+0x2bc>)
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	089b      	lsrs	r3, r3, #2
 800bb9e:	3302      	adds	r3, #2
 800bba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	f003 0303 	and.w	r3, r3, #3
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	220f      	movs	r2, #15
 800bbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb4:	43db      	mvns	r3, r3
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	4013      	ands	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a40      	ldr	r2, [pc, #256]	; (800bcc0 <HAL_GPIO_Init+0x2c0>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d013      	beq.n	800bbec <HAL_GPIO_Init+0x1ec>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a3f      	ldr	r2, [pc, #252]	; (800bcc4 <HAL_GPIO_Init+0x2c4>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d00d      	beq.n	800bbe8 <HAL_GPIO_Init+0x1e8>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a3e      	ldr	r2, [pc, #248]	; (800bcc8 <HAL_GPIO_Init+0x2c8>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d007      	beq.n	800bbe4 <HAL_GPIO_Init+0x1e4>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a3d      	ldr	r2, [pc, #244]	; (800bccc <HAL_GPIO_Init+0x2cc>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d101      	bne.n	800bbe0 <HAL_GPIO_Init+0x1e0>
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e006      	b.n	800bbee <HAL_GPIO_Init+0x1ee>
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	e004      	b.n	800bbee <HAL_GPIO_Init+0x1ee>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	e002      	b.n	800bbee <HAL_GPIO_Init+0x1ee>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <HAL_GPIO_Init+0x1ee>
 800bbec:	2300      	movs	r3, #0
 800bbee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf0:	f002 0203 	and.w	r2, r2, #3
 800bbf4:	0092      	lsls	r2, r2, #2
 800bbf6:	4093      	lsls	r3, r2
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800bbfe:	492f      	ldr	r1, [pc, #188]	; (800bcbc <HAL_GPIO_Init+0x2bc>)
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc02:	089b      	lsrs	r3, r3, #2
 800bc04:	3302      	adds	r3, #2
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d006      	beq.n	800bc26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800bc18:	4b2d      	ldr	r3, [pc, #180]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc1a:	689a      	ldr	r2, [r3, #8]
 800bc1c:	492c      	ldr	r1, [pc, #176]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	608b      	str	r3, [r1, #8]
 800bc24:	e006      	b.n	800bc34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800bc26:	4b2a      	ldr	r3, [pc, #168]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc28:	689a      	ldr	r2, [r3, #8]
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	43db      	mvns	r3, r3
 800bc2e:	4928      	ldr	r1, [pc, #160]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc30:	4013      	ands	r3, r2
 800bc32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d006      	beq.n	800bc4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800bc40:	4b23      	ldr	r3, [pc, #140]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	4922      	ldr	r1, [pc, #136]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	60cb      	str	r3, [r1, #12]
 800bc4c:	e006      	b.n	800bc5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800bc4e:	4b20      	ldr	r3, [pc, #128]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc50:	68da      	ldr	r2, [r3, #12]
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	43db      	mvns	r3, r3
 800bc56:	491e      	ldr	r1, [pc, #120]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc58:	4013      	ands	r3, r2
 800bc5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d006      	beq.n	800bc76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800bc68:	4b19      	ldr	r3, [pc, #100]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	4918      	ldr	r1, [pc, #96]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	604b      	str	r3, [r1, #4]
 800bc74:	e006      	b.n	800bc84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800bc76:	4b16      	ldr	r3, [pc, #88]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc78:	685a      	ldr	r2, [r3, #4]
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	43db      	mvns	r3, r3
 800bc7e:	4914      	ldr	r1, [pc, #80]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc80:	4013      	ands	r3, r2
 800bc82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d021      	beq.n	800bcd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800bc90:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	490e      	ldr	r1, [pc, #56]	; (800bcd0 <HAL_GPIO_Init+0x2d0>)
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	600b      	str	r3, [r1, #0]
 800bc9c:	e021      	b.n	800bce2 <HAL_GPIO_Init+0x2e2>
 800bc9e:	bf00      	nop
 800bca0:	10320000 	.word	0x10320000
 800bca4:	10310000 	.word	0x10310000
 800bca8:	10220000 	.word	0x10220000
 800bcac:	10210000 	.word	0x10210000
 800bcb0:	10120000 	.word	0x10120000
 800bcb4:	10110000 	.word	0x10110000
 800bcb8:	40021000 	.word	0x40021000
 800bcbc:	40010000 	.word	0x40010000
 800bcc0:	40010800 	.word	0x40010800
 800bcc4:	40010c00 	.word	0x40010c00
 800bcc8:	40011000 	.word	0x40011000
 800bccc:	40011400 	.word	0x40011400
 800bcd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800bcd4:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <HAL_GPIO_Init+0x304>)
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	43db      	mvns	r3, r3
 800bcdc:	4909      	ldr	r1, [pc, #36]	; (800bd04 <HAL_GPIO_Init+0x304>)
 800bcde:	4013      	ands	r3, r2
 800bce0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	3301      	adds	r3, #1
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	fa22 f303 	lsr.w	r3, r2, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f47f ae8e 	bne.w	800ba14 <HAL_GPIO_Init+0x14>
  }
}
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
 800bcfc:	372c      	adds	r7, #44	; 0x2c
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bc80      	pop	{r7}
 800bd02:	4770      	bx	lr
 800bd04:	40010400 	.word	0x40010400

0800bd08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	807b      	strh	r3, [r7, #2]
 800bd14:	4613      	mov	r3, r2
 800bd16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bd18:	787b      	ldrb	r3, [r7, #1]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bd1e:	887a      	ldrh	r2, [r7, #2]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800bd24:	e003      	b.n	800bd2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800bd26:	887b      	ldrh	r3, [r7, #2]
 800bd28:	041a      	lsls	r2, r3, #16
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	611a      	str	r2, [r3, #16]
}
 800bd2e:	bf00      	nop
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bc80      	pop	{r7}
 800bd36:	4770      	bx	lr

0800bd38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bd4a:	887a      	ldrh	r2, [r7, #2]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4013      	ands	r3, r2
 800bd50:	041a      	lsls	r2, r3, #16
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	43d9      	mvns	r1, r3
 800bd56:	887b      	ldrh	r3, [r7, #2]
 800bd58:	400b      	ands	r3, r1
 800bd5a:	431a      	orrs	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	611a      	str	r2, [r3, #16]
}
 800bd60:	bf00      	nop
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bc80      	pop	{r7}
 800bd68:	4770      	bx	lr
	...

0800bd6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800bd76:	4b08      	ldr	r3, [pc, #32]	; (800bd98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bd78:	695a      	ldr	r2, [r3, #20]
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d006      	beq.n	800bd90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bd82:	4a05      	ldr	r2, [pc, #20]	; (800bd98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bd84:	88fb      	ldrh	r3, [r7, #6]
 800bd86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7f5 fb9a 	bl	80014c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	40010400 	.word	0x40010400

0800bd9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e272      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 0301 	and.w	r3, r3, #1
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 8087 	beq.w	800beca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bdbc:	4b92      	ldr	r3, [pc, #584]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	f003 030c 	and.w	r3, r3, #12
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	d00c      	beq.n	800bde2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bdc8:	4b8f      	ldr	r3, [pc, #572]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f003 030c 	and.w	r3, r3, #12
 800bdd0:	2b08      	cmp	r3, #8
 800bdd2:	d112      	bne.n	800bdfa <HAL_RCC_OscConfig+0x5e>
 800bdd4:	4b8c      	ldr	r3, [pc, #560]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde0:	d10b      	bne.n	800bdfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bde2:	4b89      	ldr	r3, [pc, #548]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d06c      	beq.n	800bec8 <HAL_RCC_OscConfig+0x12c>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d168      	bne.n	800bec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e24c      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be02:	d106      	bne.n	800be12 <HAL_RCC_OscConfig+0x76>
 800be04:	4b80      	ldr	r3, [pc, #512]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a7f      	ldr	r2, [pc, #508]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	e02e      	b.n	800be70 <HAL_RCC_OscConfig+0xd4>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10c      	bne.n	800be34 <HAL_RCC_OscConfig+0x98>
 800be1a:	4b7b      	ldr	r3, [pc, #492]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a7a      	ldr	r2, [pc, #488]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be24:	6013      	str	r3, [r2, #0]
 800be26:	4b78      	ldr	r3, [pc, #480]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a77      	ldr	r2, [pc, #476]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be30:	6013      	str	r3, [r2, #0]
 800be32:	e01d      	b.n	800be70 <HAL_RCC_OscConfig+0xd4>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be3c:	d10c      	bne.n	800be58 <HAL_RCC_OscConfig+0xbc>
 800be3e:	4b72      	ldr	r3, [pc, #456]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a71      	ldr	r2, [pc, #452]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	4b6f      	ldr	r3, [pc, #444]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a6e      	ldr	r2, [pc, #440]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be54:	6013      	str	r3, [r2, #0]
 800be56:	e00b      	b.n	800be70 <HAL_RCC_OscConfig+0xd4>
 800be58:	4b6b      	ldr	r3, [pc, #428]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a6a      	ldr	r2, [pc, #424]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	4b68      	ldr	r3, [pc, #416]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a67      	ldr	r2, [pc, #412]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d013      	beq.n	800bea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be78:	f7fe fdec 	bl	800aa54 <HAL_GetTick>
 800be7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be7e:	e008      	b.n	800be92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be80:	f7fe fde8 	bl	800aa54 <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	2b64      	cmp	r3, #100	; 0x64
 800be8c:	d901      	bls.n	800be92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e200      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be92:	4b5d      	ldr	r3, [pc, #372]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0f0      	beq.n	800be80 <HAL_RCC_OscConfig+0xe4>
 800be9e:	e014      	b.n	800beca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bea0:	f7fe fdd8 	bl	800aa54 <HAL_GetTick>
 800bea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bea6:	e008      	b.n	800beba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bea8:	f7fe fdd4 	bl	800aa54 <HAL_GetTick>
 800beac:	4602      	mov	r2, r0
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	2b64      	cmp	r3, #100	; 0x64
 800beb4:	d901      	bls.n	800beba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e1ec      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800beba:	4b53      	ldr	r3, [pc, #332]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1f0      	bne.n	800bea8 <HAL_RCC_OscConfig+0x10c>
 800bec6:	e000      	b.n	800beca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0302 	and.w	r3, r3, #2
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d063      	beq.n	800bf9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bed6:	4b4c      	ldr	r3, [pc, #304]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f003 030c 	and.w	r3, r3, #12
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00b      	beq.n	800befa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bee2:	4b49      	ldr	r3, [pc, #292]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	f003 030c 	and.w	r3, r3, #12
 800beea:	2b08      	cmp	r3, #8
 800beec:	d11c      	bne.n	800bf28 <HAL_RCC_OscConfig+0x18c>
 800beee:	4b46      	ldr	r3, [pc, #280]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d116      	bne.n	800bf28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800befa:	4b43      	ldr	r3, [pc, #268]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f003 0302 	and.w	r3, r3, #2
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d005      	beq.n	800bf12 <HAL_RCC_OscConfig+0x176>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d001      	beq.n	800bf12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e1c0      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf12:	4b3d      	ldr	r3, [pc, #244]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	4939      	ldr	r1, [pc, #228]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bf22:	4313      	orrs	r3, r2
 800bf24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf26:	e03a      	b.n	800bf9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d020      	beq.n	800bf72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf30:	4b36      	ldr	r3, [pc, #216]	; (800c00c <HAL_RCC_OscConfig+0x270>)
 800bf32:	2201      	movs	r2, #1
 800bf34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf36:	f7fe fd8d 	bl	800aa54 <HAL_GetTick>
 800bf3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf3c:	e008      	b.n	800bf50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf3e:	f7fe fd89 	bl	800aa54 <HAL_GetTick>
 800bf42:	4602      	mov	r2, r0
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d901      	bls.n	800bf50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e1a1      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf50:	4b2d      	ldr	r3, [pc, #180]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 0302 	and.w	r3, r3, #2
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d0f0      	beq.n	800bf3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf5c:	4b2a      	ldr	r3, [pc, #168]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	00db      	lsls	r3, r3, #3
 800bf6a:	4927      	ldr	r1, [pc, #156]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	600b      	str	r3, [r1, #0]
 800bf70:	e015      	b.n	800bf9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf72:	4b26      	ldr	r3, [pc, #152]	; (800c00c <HAL_RCC_OscConfig+0x270>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf78:	f7fe fd6c 	bl	800aa54 <HAL_GetTick>
 800bf7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf7e:	e008      	b.n	800bf92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf80:	f7fe fd68 	bl	800aa54 <HAL_GetTick>
 800bf84:	4602      	mov	r2, r0
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d901      	bls.n	800bf92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	e180      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf92:	4b1d      	ldr	r3, [pc, #116]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0302 	and.w	r3, r3, #2
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1f0      	bne.n	800bf80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 0308 	and.w	r3, r3, #8
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d03a      	beq.n	800c020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d019      	beq.n	800bfe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bfb2:	4b17      	ldr	r3, [pc, #92]	; (800c010 <HAL_RCC_OscConfig+0x274>)
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfb8:	f7fe fd4c 	bl	800aa54 <HAL_GetTick>
 800bfbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfbe:	e008      	b.n	800bfd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfc0:	f7fe fd48 	bl	800aa54 <HAL_GetTick>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d901      	bls.n	800bfd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	e160      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfd2:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <HAL_RCC_OscConfig+0x26c>)
 800bfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d0f0      	beq.n	800bfc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bfde:	2001      	movs	r0, #1
 800bfe0:	f000 faba 	bl	800c558 <RCC_Delay>
 800bfe4:	e01c      	b.n	800c020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfe6:	4b0a      	ldr	r3, [pc, #40]	; (800c010 <HAL_RCC_OscConfig+0x274>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfec:	f7fe fd32 	bl	800aa54 <HAL_GetTick>
 800bff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bff2:	e00f      	b.n	800c014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bff4:	f7fe fd2e 	bl	800aa54 <HAL_GetTick>
 800bff8:	4602      	mov	r2, r0
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d908      	bls.n	800c014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e146      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
 800c006:	bf00      	nop
 800c008:	40021000 	.word	0x40021000
 800c00c:	42420000 	.word	0x42420000
 800c010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c014:	4b92      	ldr	r3, [pc, #584]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c018:	f003 0302 	and.w	r3, r3, #2
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1e9      	bne.n	800bff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f000 80a6 	beq.w	800c17a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c02e:	2300      	movs	r3, #0
 800c030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c032:	4b8b      	ldr	r3, [pc, #556]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d10d      	bne.n	800c05a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c03e:	4b88      	ldr	r3, [pc, #544]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	4a87      	ldr	r2, [pc, #540]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c048:	61d3      	str	r3, [r2, #28]
 800c04a:	4b85      	ldr	r3, [pc, #532]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c04c:	69db      	ldr	r3, [r3, #28]
 800c04e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c052:	60bb      	str	r3, [r7, #8]
 800c054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c056:	2301      	movs	r3, #1
 800c058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c05a:	4b82      	ldr	r3, [pc, #520]	; (800c264 <HAL_RCC_OscConfig+0x4c8>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c062:	2b00      	cmp	r3, #0
 800c064:	d118      	bne.n	800c098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c066:	4b7f      	ldr	r3, [pc, #508]	; (800c264 <HAL_RCC_OscConfig+0x4c8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a7e      	ldr	r2, [pc, #504]	; (800c264 <HAL_RCC_OscConfig+0x4c8>)
 800c06c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c072:	f7fe fcef 	bl	800aa54 <HAL_GetTick>
 800c076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c078:	e008      	b.n	800c08c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c07a:	f7fe fceb 	bl	800aa54 <HAL_GetTick>
 800c07e:	4602      	mov	r2, r0
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	2b64      	cmp	r3, #100	; 0x64
 800c086:	d901      	bls.n	800c08c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c088:	2303      	movs	r3, #3
 800c08a:	e103      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c08c:	4b75      	ldr	r3, [pc, #468]	; (800c264 <HAL_RCC_OscConfig+0x4c8>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c094:	2b00      	cmp	r3, #0
 800c096:	d0f0      	beq.n	800c07a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d106      	bne.n	800c0ae <HAL_RCC_OscConfig+0x312>
 800c0a0:	4b6f      	ldr	r3, [pc, #444]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	4a6e      	ldr	r2, [pc, #440]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0a6:	f043 0301 	orr.w	r3, r3, #1
 800c0aa:	6213      	str	r3, [r2, #32]
 800c0ac:	e02d      	b.n	800c10a <HAL_RCC_OscConfig+0x36e>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10c      	bne.n	800c0d0 <HAL_RCC_OscConfig+0x334>
 800c0b6:	4b6a      	ldr	r3, [pc, #424]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	4a69      	ldr	r2, [pc, #420]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0bc:	f023 0301 	bic.w	r3, r3, #1
 800c0c0:	6213      	str	r3, [r2, #32]
 800c0c2:	4b67      	ldr	r3, [pc, #412]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	4a66      	ldr	r2, [pc, #408]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0c8:	f023 0304 	bic.w	r3, r3, #4
 800c0cc:	6213      	str	r3, [r2, #32]
 800c0ce:	e01c      	b.n	800c10a <HAL_RCC_OscConfig+0x36e>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	2b05      	cmp	r3, #5
 800c0d6:	d10c      	bne.n	800c0f2 <HAL_RCC_OscConfig+0x356>
 800c0d8:	4b61      	ldr	r3, [pc, #388]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	4a60      	ldr	r2, [pc, #384]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0de:	f043 0304 	orr.w	r3, r3, #4
 800c0e2:	6213      	str	r3, [r2, #32]
 800c0e4:	4b5e      	ldr	r3, [pc, #376]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	4a5d      	ldr	r2, [pc, #372]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0ea:	f043 0301 	orr.w	r3, r3, #1
 800c0ee:	6213      	str	r3, [r2, #32]
 800c0f0:	e00b      	b.n	800c10a <HAL_RCC_OscConfig+0x36e>
 800c0f2:	4b5b      	ldr	r3, [pc, #364]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0f4:	6a1b      	ldr	r3, [r3, #32]
 800c0f6:	4a5a      	ldr	r2, [pc, #360]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c0f8:	f023 0301 	bic.w	r3, r3, #1
 800c0fc:	6213      	str	r3, [r2, #32]
 800c0fe:	4b58      	ldr	r3, [pc, #352]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	4a57      	ldr	r2, [pc, #348]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c104:	f023 0304 	bic.w	r3, r3, #4
 800c108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d015      	beq.n	800c13e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c112:	f7fe fc9f 	bl	800aa54 <HAL_GetTick>
 800c116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c118:	e00a      	b.n	800c130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c11a:	f7fe fc9b 	bl	800aa54 <HAL_GetTick>
 800c11e:	4602      	mov	r2, r0
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	f241 3288 	movw	r2, #5000	; 0x1388
 800c128:	4293      	cmp	r3, r2
 800c12a:	d901      	bls.n	800c130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e0b1      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c130:	4b4b      	ldr	r3, [pc, #300]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c132:	6a1b      	ldr	r3, [r3, #32]
 800c134:	f003 0302 	and.w	r3, r3, #2
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0ee      	beq.n	800c11a <HAL_RCC_OscConfig+0x37e>
 800c13c:	e014      	b.n	800c168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c13e:	f7fe fc89 	bl	800aa54 <HAL_GetTick>
 800c142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c144:	e00a      	b.n	800c15c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c146:	f7fe fc85 	bl	800aa54 <HAL_GetTick>
 800c14a:	4602      	mov	r2, r0
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	f241 3288 	movw	r2, #5000	; 0x1388
 800c154:	4293      	cmp	r3, r2
 800c156:	d901      	bls.n	800c15c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c158:	2303      	movs	r3, #3
 800c15a:	e09b      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c15c:	4b40      	ldr	r3, [pc, #256]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	f003 0302 	and.w	r3, r3, #2
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1ee      	bne.n	800c146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d105      	bne.n	800c17a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c16e:	4b3c      	ldr	r3, [pc, #240]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c170:	69db      	ldr	r3, [r3, #28]
 800c172:	4a3b      	ldr	r2, [pc, #236]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	69db      	ldr	r3, [r3, #28]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 8087 	beq.w	800c292 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c184:	4b36      	ldr	r3, [pc, #216]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	f003 030c 	and.w	r3, r3, #12
 800c18c:	2b08      	cmp	r3, #8
 800c18e:	d061      	beq.n	800c254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d146      	bne.n	800c226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c198:	4b33      	ldr	r3, [pc, #204]	; (800c268 <HAL_RCC_OscConfig+0x4cc>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c19e:	f7fe fc59 	bl	800aa54 <HAL_GetTick>
 800c1a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1a4:	e008      	b.n	800c1b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1a6:	f7fe fc55 	bl	800aa54 <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d901      	bls.n	800c1b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	e06d      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1b8:	4b29      	ldr	r3, [pc, #164]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1f0      	bne.n	800c1a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a1b      	ldr	r3, [r3, #32]
 800c1c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1cc:	d108      	bne.n	800c1e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c1ce:	4b24      	ldr	r3, [pc, #144]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	4921      	ldr	r1, [pc, #132]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c1e0:	4b1f      	ldr	r3, [pc, #124]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a19      	ldr	r1, [r3, #32]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	430b      	orrs	r3, r1
 800c1f2:	491b      	ldr	r1, [pc, #108]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c1f8:	4b1b      	ldr	r3, [pc, #108]	; (800c268 <HAL_RCC_OscConfig+0x4cc>)
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1fe:	f7fe fc29 	bl	800aa54 <HAL_GetTick>
 800c202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c204:	e008      	b.n	800c218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c206:	f7fe fc25 	bl	800aa54 <HAL_GetTick>
 800c20a:	4602      	mov	r2, r0
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	2b02      	cmp	r3, #2
 800c212:	d901      	bls.n	800c218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c214:	2303      	movs	r3, #3
 800c216:	e03d      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c218:	4b11      	ldr	r3, [pc, #68]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d0f0      	beq.n	800c206 <HAL_RCC_OscConfig+0x46a>
 800c224:	e035      	b.n	800c292 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c226:	4b10      	ldr	r3, [pc, #64]	; (800c268 <HAL_RCC_OscConfig+0x4cc>)
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c22c:	f7fe fc12 	bl	800aa54 <HAL_GetTick>
 800c230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c232:	e008      	b.n	800c246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c234:	f7fe fc0e 	bl	800aa54 <HAL_GetTick>
 800c238:	4602      	mov	r2, r0
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d901      	bls.n	800c246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e026      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c246:	4b06      	ldr	r3, [pc, #24]	; (800c260 <HAL_RCC_OscConfig+0x4c4>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1f0      	bne.n	800c234 <HAL_RCC_OscConfig+0x498>
 800c252:	e01e      	b.n	800c292 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	69db      	ldr	r3, [r3, #28]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d107      	bne.n	800c26c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	e019      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
 800c260:	40021000 	.word	0x40021000
 800c264:	40007000 	.word	0x40007000
 800c268:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c26c:	4b0b      	ldr	r3, [pc, #44]	; (800c29c <HAL_RCC_OscConfig+0x500>)
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a1b      	ldr	r3, [r3, #32]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d106      	bne.n	800c28e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d001      	beq.n	800c292 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e000      	b.n	800c294 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3718      	adds	r7, #24
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	40021000 	.word	0x40021000

0800c2a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d101      	bne.n	800c2b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e0d0      	b.n	800c456 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c2b4:	4b6a      	ldr	r3, [pc, #424]	; (800c460 <HAL_RCC_ClockConfig+0x1c0>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0307 	and.w	r3, r3, #7
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d910      	bls.n	800c2e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2c2:	4b67      	ldr	r3, [pc, #412]	; (800c460 <HAL_RCC_ClockConfig+0x1c0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f023 0207 	bic.w	r2, r3, #7
 800c2ca:	4965      	ldr	r1, [pc, #404]	; (800c460 <HAL_RCC_ClockConfig+0x1c0>)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2d2:	4b63      	ldr	r3, [pc, #396]	; (800c460 <HAL_RCC_ClockConfig+0x1c0>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	683a      	ldr	r2, [r7, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d001      	beq.n	800c2e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e0b8      	b.n	800c456 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0302 	and.w	r3, r3, #2
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d020      	beq.n	800c332 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d005      	beq.n	800c308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2fc:	4b59      	ldr	r3, [pc, #356]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4a58      	ldr	r2, [pc, #352]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c302:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c306:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 0308 	and.w	r3, r3, #8
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c314:	4b53      	ldr	r3, [pc, #332]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	4a52      	ldr	r2, [pc, #328]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c31a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800c31e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c320:	4b50      	ldr	r3, [pc, #320]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	494d      	ldr	r1, [pc, #308]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c32e:	4313      	orrs	r3, r2
 800c330:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d040      	beq.n	800c3c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d107      	bne.n	800c356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c346:	4b47      	ldr	r3, [pc, #284]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d115      	bne.n	800c37e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e07f      	b.n	800c456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d107      	bne.n	800c36e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c35e:	4b41      	ldr	r3, [pc, #260]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d109      	bne.n	800c37e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e073      	b.n	800c456 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c36e:	4b3d      	ldr	r3, [pc, #244]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 0302 	and.w	r3, r3, #2
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e06b      	b.n	800c456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c37e:	4b39      	ldr	r3, [pc, #228]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	f023 0203 	bic.w	r2, r3, #3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	4936      	ldr	r1, [pc, #216]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c38c:	4313      	orrs	r3, r2
 800c38e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c390:	f7fe fb60 	bl	800aa54 <HAL_GetTick>
 800c394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c396:	e00a      	b.n	800c3ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c398:	f7fe fb5c 	bl	800aa54 <HAL_GetTick>
 800c39c:	4602      	mov	r2, r0
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d901      	bls.n	800c3ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	e053      	b.n	800c456 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3ae:	4b2d      	ldr	r3, [pc, #180]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	f003 020c 	and.w	r2, r3, #12
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d1eb      	bne.n	800c398 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c3c0:	4b27      	ldr	r3, [pc, #156]	; (800c460 <HAL_RCC_ClockConfig+0x1c0>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 0307 	and.w	r3, r3, #7
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d210      	bcs.n	800c3f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3ce:	4b24      	ldr	r3, [pc, #144]	; (800c460 <HAL_RCC_ClockConfig+0x1c0>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f023 0207 	bic.w	r2, r3, #7
 800c3d6:	4922      	ldr	r1, [pc, #136]	; (800c460 <HAL_RCC_ClockConfig+0x1c0>)
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3de:	4b20      	ldr	r3, [pc, #128]	; (800c460 <HAL_RCC_ClockConfig+0x1c0>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d001      	beq.n	800c3f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e032      	b.n	800c456 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 0304 	and.w	r3, r3, #4
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d008      	beq.n	800c40e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3fc:	4b19      	ldr	r3, [pc, #100]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	4916      	ldr	r1, [pc, #88]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 0308 	and.w	r3, r3, #8
 800c416:	2b00      	cmp	r3, #0
 800c418:	d009      	beq.n	800c42e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c41a:	4b12      	ldr	r3, [pc, #72]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	490e      	ldr	r1, [pc, #56]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c42a:	4313      	orrs	r3, r2
 800c42c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c42e:	f000 f821 	bl	800c474 <HAL_RCC_GetSysClockFreq>
 800c432:	4602      	mov	r2, r0
 800c434:	4b0b      	ldr	r3, [pc, #44]	; (800c464 <HAL_RCC_ClockConfig+0x1c4>)
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	091b      	lsrs	r3, r3, #4
 800c43a:	f003 030f 	and.w	r3, r3, #15
 800c43e:	490a      	ldr	r1, [pc, #40]	; (800c468 <HAL_RCC_ClockConfig+0x1c8>)
 800c440:	5ccb      	ldrb	r3, [r1, r3]
 800c442:	fa22 f303 	lsr.w	r3, r2, r3
 800c446:	4a09      	ldr	r2, [pc, #36]	; (800c46c <HAL_RCC_ClockConfig+0x1cc>)
 800c448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <HAL_RCC_ClockConfig+0x1d0>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fe fabe 	bl	800a9d0 <HAL_InitTick>

  return HAL_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	40022000 	.word	0x40022000
 800c464:	40021000 	.word	0x40021000
 800c468:	0800ee40 	.word	0x0800ee40
 800c46c:	20000174 	.word	0x20000174
 800c470:	20000178 	.word	0x20000178

0800c474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c474:	b480      	push	{r7}
 800c476:	b087      	sub	sp, #28
 800c478:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	2300      	movs	r3, #0
 800c480:	60bb      	str	r3, [r7, #8]
 800c482:	2300      	movs	r3, #0
 800c484:	617b      	str	r3, [r7, #20]
 800c486:	2300      	movs	r3, #0
 800c488:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c48a:	2300      	movs	r3, #0
 800c48c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c48e:	4b1e      	ldr	r3, [pc, #120]	; (800c508 <HAL_RCC_GetSysClockFreq+0x94>)
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f003 030c 	and.w	r3, r3, #12
 800c49a:	2b04      	cmp	r3, #4
 800c49c:	d002      	beq.n	800c4a4 <HAL_RCC_GetSysClockFreq+0x30>
 800c49e:	2b08      	cmp	r3, #8
 800c4a0:	d003      	beq.n	800c4aa <HAL_RCC_GetSysClockFreq+0x36>
 800c4a2:	e027      	b.n	800c4f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c4a4:	4b19      	ldr	r3, [pc, #100]	; (800c50c <HAL_RCC_GetSysClockFreq+0x98>)
 800c4a6:	613b      	str	r3, [r7, #16]
      break;
 800c4a8:	e027      	b.n	800c4fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	0c9b      	lsrs	r3, r3, #18
 800c4ae:	f003 030f 	and.w	r3, r3, #15
 800c4b2:	4a17      	ldr	r2, [pc, #92]	; (800c510 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c4b4:	5cd3      	ldrb	r3, [r2, r3]
 800c4b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d010      	beq.n	800c4e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c4c2:	4b11      	ldr	r3, [pc, #68]	; (800c508 <HAL_RCC_GetSysClockFreq+0x94>)
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	0c5b      	lsrs	r3, r3, #17
 800c4c8:	f003 0301 	and.w	r3, r3, #1
 800c4cc:	4a11      	ldr	r2, [pc, #68]	; (800c514 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c4ce:	5cd3      	ldrb	r3, [r2, r3]
 800c4d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	; (800c50c <HAL_RCC_GetSysClockFreq+0x98>)
 800c4d6:	fb03 f202 	mul.w	r2, r3, r2
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e0:	617b      	str	r3, [r7, #20]
 800c4e2:	e004      	b.n	800c4ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a0c      	ldr	r2, [pc, #48]	; (800c518 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c4e8:	fb02 f303 	mul.w	r3, r2, r3
 800c4ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	613b      	str	r3, [r7, #16]
      break;
 800c4f2:	e002      	b.n	800c4fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c4f4:	4b05      	ldr	r3, [pc, #20]	; (800c50c <HAL_RCC_GetSysClockFreq+0x98>)
 800c4f6:	613b      	str	r3, [r7, #16]
      break;
 800c4f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4fa:	693b      	ldr	r3, [r7, #16]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	371c      	adds	r7, #28
 800c500:	46bd      	mov	sp, r7
 800c502:	bc80      	pop	{r7}
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	40021000 	.word	0x40021000
 800c50c:	007a1200 	.word	0x007a1200
 800c510:	0800ee58 	.word	0x0800ee58
 800c514:	0800ee68 	.word	0x0800ee68
 800c518:	003d0900 	.word	0x003d0900

0800c51c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c51c:	b480      	push	{r7}
 800c51e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c520:	4b02      	ldr	r3, [pc, #8]	; (800c52c <HAL_RCC_GetHCLKFreq+0x10>)
 800c522:	681b      	ldr	r3, [r3, #0]
}
 800c524:	4618      	mov	r0, r3
 800c526:	46bd      	mov	sp, r7
 800c528:	bc80      	pop	{r7}
 800c52a:	4770      	bx	lr
 800c52c:	20000174 	.word	0x20000174

0800c530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c534:	f7ff fff2 	bl	800c51c <HAL_RCC_GetHCLKFreq>
 800c538:	4602      	mov	r2, r0
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	0adb      	lsrs	r3, r3, #11
 800c540:	f003 0307 	and.w	r3, r3, #7
 800c544:	4903      	ldr	r1, [pc, #12]	; (800c554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c546:	5ccb      	ldrb	r3, [r1, r3]
 800c548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	40021000 	.word	0x40021000
 800c554:	0800ee50 	.word	0x0800ee50

0800c558 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c560:	4b0a      	ldr	r3, [pc, #40]	; (800c58c <RCC_Delay+0x34>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a0a      	ldr	r2, [pc, #40]	; (800c590 <RCC_Delay+0x38>)
 800c566:	fba2 2303 	umull	r2, r3, r2, r3
 800c56a:	0a5b      	lsrs	r3, r3, #9
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	fb02 f303 	mul.w	r3, r2, r3
 800c572:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c574:	bf00      	nop
  }
  while (Delay --);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	1e5a      	subs	r2, r3, #1
 800c57a:	60fa      	str	r2, [r7, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1f9      	bne.n	800c574 <RCC_Delay+0x1c>
}
 800c580:	bf00      	nop
 800c582:	bf00      	nop
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	bc80      	pop	{r7}
 800c58a:	4770      	bx	lr
 800c58c:	20000174 	.word	0x20000174
 800c590:	10624dd3 	.word	0x10624dd3

0800c594 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800c59c:	2300      	movs	r3, #0
 800c59e:	613b      	str	r3, [r7, #16]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d07d      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5b4:	4b4f      	ldr	r3, [pc, #316]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c5b6:	69db      	ldr	r3, [r3, #28]
 800c5b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10d      	bne.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5c0:	4b4c      	ldr	r3, [pc, #304]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c5c2:	69db      	ldr	r3, [r3, #28]
 800c5c4:	4a4b      	ldr	r2, [pc, #300]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c5c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5ca:	61d3      	str	r3, [r2, #28]
 800c5cc:	4b49      	ldr	r3, [pc, #292]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c5ce:	69db      	ldr	r3, [r3, #28]
 800c5d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5d4:	60bb      	str	r3, [r7, #8]
 800c5d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c5dc:	4b46      	ldr	r3, [pc, #280]	; (800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d118      	bne.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c5e8:	4b43      	ldr	r3, [pc, #268]	; (800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a42      	ldr	r2, [pc, #264]	; (800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c5ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5f4:	f7fe fa2e 	bl	800aa54 <HAL_GetTick>
 800c5f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c5fa:	e008      	b.n	800c60e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5fc:	f7fe fa2a 	bl	800aa54 <HAL_GetTick>
 800c600:	4602      	mov	r2, r0
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	2b64      	cmp	r3, #100	; 0x64
 800c608:	d901      	bls.n	800c60e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800c60a:	2303      	movs	r3, #3
 800c60c:	e06d      	b.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c60e:	4b3a      	ldr	r3, [pc, #232]	; (800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c616:	2b00      	cmp	r3, #0
 800c618:	d0f0      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c61a:	4b36      	ldr	r3, [pc, #216]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c622:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d02e      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	429a      	cmp	r2, r3
 800c636:	d027      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c638:	4b2e      	ldr	r3, [pc, #184]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c63a:	6a1b      	ldr	r3, [r3, #32]
 800c63c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c640:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c642:	4b2e      	ldr	r3, [pc, #184]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800c644:	2201      	movs	r2, #1
 800c646:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c648:	4b2c      	ldr	r3, [pc, #176]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800c64e:	4a29      	ldr	r2, [pc, #164]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d014      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c65e:	f7fe f9f9 	bl	800aa54 <HAL_GetTick>
 800c662:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c664:	e00a      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c666:	f7fe f9f5 	bl	800aa54 <HAL_GetTick>
 800c66a:	4602      	mov	r2, r0
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	f241 3288 	movw	r2, #5000	; 0x1388
 800c674:	4293      	cmp	r3, r2
 800c676:	d901      	bls.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800c678:	2303      	movs	r3, #3
 800c67a:	e036      	b.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c67c:	4b1d      	ldr	r3, [pc, #116]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c67e:	6a1b      	ldr	r3, [r3, #32]
 800c680:	f003 0302 	and.w	r3, r3, #2
 800c684:	2b00      	cmp	r3, #0
 800c686:	d0ee      	beq.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c688:	4b1a      	ldr	r3, [pc, #104]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	4917      	ldr	r1, [pc, #92]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c696:	4313      	orrs	r3, r2
 800c698:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d105      	bne.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6a0:	4b14      	ldr	r3, [pc, #80]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	4a13      	ldr	r2, [pc, #76]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c6a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 0302 	and.w	r3, r3, #2
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d008      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c6b8:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	490b      	ldr	r1, [pc, #44]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0310 	and.w	r3, r3, #16
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d008      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6d6:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	4904      	ldr	r1, [pc, #16]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	40021000 	.word	0x40021000
 800c6f8:	40007000 	.word	0x40007000
 800c6fc:	42420440 	.word	0x42420440

0800c700 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800c708:	2300      	movs	r3, #0
 800c70a:	617b      	str	r3, [r7, #20]
 800c70c:	2300      	movs	r3, #0
 800c70e:	61fb      	str	r3, [r7, #28]
 800c710:	2300      	movs	r3, #0
 800c712:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	2300      	movs	r3, #0
 800c71a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b10      	cmp	r3, #16
 800c720:	d00a      	beq.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b10      	cmp	r3, #16
 800c726:	f200 808a 	bhi.w	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d045      	beq.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b02      	cmp	r3, #2
 800c734:	d075      	beq.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800c736:	e082      	b.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800c738:	4b46      	ldr	r3, [pc, #280]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800c73e:	4b45      	ldr	r3, [pc, #276]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d07b      	beq.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	0c9b      	lsrs	r3, r3, #18
 800c74e:	f003 030f 	and.w	r3, r3, #15
 800c752:	4a41      	ldr	r2, [pc, #260]	; (800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800c754:	5cd3      	ldrb	r3, [r2, r3]
 800c756:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d015      	beq.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c762:	4b3c      	ldr	r3, [pc, #240]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	0c5b      	lsrs	r3, r3, #17
 800c768:	f003 0301 	and.w	r3, r3, #1
 800c76c:	4a3b      	ldr	r2, [pc, #236]	; (800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800c76e:	5cd3      	ldrb	r3, [r2, r3]
 800c770:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00d      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800c77c:	4a38      	ldr	r2, [pc, #224]	; (800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	fbb2 f2f3 	udiv	r2, r2, r3
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	fb02 f303 	mul.w	r3, r2, r3
 800c78a:	61fb      	str	r3, [r7, #28]
 800c78c:	e004      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	4a34      	ldr	r2, [pc, #208]	; (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800c792:	fb02 f303 	mul.w	r3, r2, r3
 800c796:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800c798:	4b2e      	ldr	r3, [pc, #184]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7a4:	d102      	bne.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	61bb      	str	r3, [r7, #24]
      break;
 800c7aa:	e04a      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	4a2d      	ldr	r2, [pc, #180]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800c7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b6:	085b      	lsrs	r3, r3, #1
 800c7b8:	61bb      	str	r3, [r7, #24]
      break;
 800c7ba:	e042      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800c7bc:	4b25      	ldr	r3, [pc, #148]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800c7be:	6a1b      	ldr	r3, [r3, #32]
 800c7c0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7cc:	d108      	bne.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800c7d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7dc:	61bb      	str	r3, [r7, #24]
 800c7de:	e01f      	b.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ea:	d109      	bne.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800c7ec:	4b19      	ldr	r3, [pc, #100]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	f003 0302 	and.w	r3, r3, #2
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800c7f8:	f649 4340 	movw	r3, #40000	; 0x9c40
 800c7fc:	61bb      	str	r3, [r7, #24]
 800c7fe:	e00f      	b.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c80a:	d11c      	bne.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800c80c:	4b11      	ldr	r3, [pc, #68]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c814:	2b00      	cmp	r3, #0
 800c816:	d016      	beq.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800c818:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c81c:	61bb      	str	r3, [r7, #24]
      break;
 800c81e:	e012      	b.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800c820:	e011      	b.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800c822:	f7ff fe85 	bl	800c530 <HAL_RCC_GetPCLK2Freq>
 800c826:	4602      	mov	r2, r0
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	0b9b      	lsrs	r3, r3, #14
 800c82e:	f003 0303 	and.w	r3, r3, #3
 800c832:	3301      	adds	r3, #1
 800c834:	005b      	lsls	r3, r3, #1
 800c836:	fbb2 f3f3 	udiv	r3, r2, r3
 800c83a:	61bb      	str	r3, [r7, #24]
      break;
 800c83c:	e004      	b.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800c83e:	bf00      	nop
 800c840:	e002      	b.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800c842:	bf00      	nop
 800c844:	e000      	b.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800c846:	bf00      	nop
    }
  }
  return (frequency);
 800c848:	69bb      	ldr	r3, [r7, #24]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3720      	adds	r7, #32
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	40021000 	.word	0x40021000
 800c858:	0800ee6c 	.word	0x0800ee6c
 800c85c:	0800ee7c 	.word	0x0800ee7c
 800c860:	007a1200 	.word	0x007a1200
 800c864:	003d0900 	.word	0x003d0900
 800c868:	aaaaaaab 	.word	0xaaaaaaab

0800c86c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e041      	b.n	800c902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7fd ff54 	bl	800a740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2202      	movs	r2, #2
 800c89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	f000 fed0 	bl	800d650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
	...

0800c90c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d001      	beq.n	800c924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	e03a      	b.n	800c99a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2202      	movs	r2, #2
 800c928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f042 0201 	orr.w	r2, r2, #1
 800c93a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a18      	ldr	r2, [pc, #96]	; (800c9a4 <HAL_TIM_Base_Start_IT+0x98>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d00e      	beq.n	800c964 <HAL_TIM_Base_Start_IT+0x58>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c94e:	d009      	beq.n	800c964 <HAL_TIM_Base_Start_IT+0x58>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a14      	ldr	r2, [pc, #80]	; (800c9a8 <HAL_TIM_Base_Start_IT+0x9c>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d004      	beq.n	800c964 <HAL_TIM_Base_Start_IT+0x58>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a13      	ldr	r2, [pc, #76]	; (800c9ac <HAL_TIM_Base_Start_IT+0xa0>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d111      	bne.n	800c988 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	f003 0307 	and.w	r3, r3, #7
 800c96e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2b06      	cmp	r3, #6
 800c974:	d010      	beq.n	800c998 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f042 0201 	orr.w	r2, r2, #1
 800c984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c986:	e007      	b.n	800c998 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f042 0201 	orr.w	r2, r2, #1
 800c996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bc80      	pop	{r7}
 800c9a2:	4770      	bx	lr
 800c9a4:	40012c00 	.word	0x40012c00
 800c9a8:	40000400 	.word	0x40000400
 800c9ac:	40000800 	.word	0x40000800

0800c9b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e041      	b.n	800ca46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 f839 	bl	800ca4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2202      	movs	r2, #2
 800c9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	f000 fe2e 	bl	800d650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ca4e:	b480      	push	{r7}
 800ca50:	b083      	sub	sp, #12
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ca56:	bf00      	nop
 800ca58:	370c      	adds	r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bc80      	pop	{r7}
 800ca5e:	4770      	bx	lr

0800ca60 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
 800ca6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d109      	bne.n	800ca8c <HAL_TIM_PWM_Start_DMA+0x2c>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	bf0c      	ite	eq
 800ca84:	2301      	moveq	r3, #1
 800ca86:	2300      	movne	r3, #0
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	e022      	b.n	800cad2 <HAL_TIM_PWM_Start_DMA+0x72>
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	d109      	bne.n	800caa6 <HAL_TIM_PWM_Start_DMA+0x46>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	bf0c      	ite	eq
 800ca9e:	2301      	moveq	r3, #1
 800caa0:	2300      	movne	r3, #0
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	e015      	b.n	800cad2 <HAL_TIM_PWM_Start_DMA+0x72>
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	2b08      	cmp	r3, #8
 800caaa:	d109      	bne.n	800cac0 <HAL_TIM_PWM_Start_DMA+0x60>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	bf0c      	ite	eq
 800cab8:	2301      	moveq	r3, #1
 800caba:	2300      	movne	r3, #0
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	e008      	b.n	800cad2 <HAL_TIM_PWM_Start_DMA+0x72>
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b02      	cmp	r3, #2
 800caca:	bf0c      	ite	eq
 800cacc:	2301      	moveq	r3, #1
 800cace:	2300      	movne	r3, #0
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800cad6:	2302      	movs	r3, #2
 800cad8:	e153      	b.n	800cd82 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d109      	bne.n	800caf4 <HAL_TIM_PWM_Start_DMA+0x94>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b01      	cmp	r3, #1
 800caea:	bf0c      	ite	eq
 800caec:	2301      	moveq	r3, #1
 800caee:	2300      	movne	r3, #0
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	e022      	b.n	800cb3a <HAL_TIM_PWM_Start_DMA+0xda>
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	d109      	bne.n	800cb0e <HAL_TIM_PWM_Start_DMA+0xae>
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	bf0c      	ite	eq
 800cb06:	2301      	moveq	r3, #1
 800cb08:	2300      	movne	r3, #0
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	e015      	b.n	800cb3a <HAL_TIM_PWM_Start_DMA+0xda>
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b08      	cmp	r3, #8
 800cb12:	d109      	bne.n	800cb28 <HAL_TIM_PWM_Start_DMA+0xc8>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	bf0c      	ite	eq
 800cb20:	2301      	moveq	r3, #1
 800cb22:	2300      	movne	r3, #0
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	e008      	b.n	800cb3a <HAL_TIM_PWM_Start_DMA+0xda>
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	bf0c      	ite	eq
 800cb34:	2301      	moveq	r3, #1
 800cb36:	2300      	movne	r3, #0
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d024      	beq.n	800cb88 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <HAL_TIM_PWM_Start_DMA+0xea>
 800cb44:	887b      	ldrh	r3, [r7, #2]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d101      	bne.n	800cb4e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e119      	b.n	800cd82 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d104      	bne.n	800cb5e <HAL_TIM_PWM_Start_DMA+0xfe>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2202      	movs	r2, #2
 800cb58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb5c:	e016      	b.n	800cb8c <HAL_TIM_PWM_Start_DMA+0x12c>
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b04      	cmp	r3, #4
 800cb62:	d104      	bne.n	800cb6e <HAL_TIM_PWM_Start_DMA+0x10e>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2202      	movs	r2, #2
 800cb68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb6c:	e00e      	b.n	800cb8c <HAL_TIM_PWM_Start_DMA+0x12c>
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2b08      	cmp	r3, #8
 800cb72:	d104      	bne.n	800cb7e <HAL_TIM_PWM_Start_DMA+0x11e>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2202      	movs	r2, #2
 800cb78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb7c:	e006      	b.n	800cb8c <HAL_TIM_PWM_Start_DMA+0x12c>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2202      	movs	r2, #2
 800cb82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb86:	e001      	b.n	800cb8c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e0fa      	b.n	800cd82 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b0c      	cmp	r3, #12
 800cb90:	f200 80ae 	bhi.w	800ccf0 <HAL_TIM_PWM_Start_DMA+0x290>
 800cb94:	a201      	add	r2, pc, #4	; (adr r2, 800cb9c <HAL_TIM_PWM_Start_DMA+0x13c>)
 800cb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9a:	bf00      	nop
 800cb9c:	0800cbd1 	.word	0x0800cbd1
 800cba0:	0800ccf1 	.word	0x0800ccf1
 800cba4:	0800ccf1 	.word	0x0800ccf1
 800cba8:	0800ccf1 	.word	0x0800ccf1
 800cbac:	0800cc19 	.word	0x0800cc19
 800cbb0:	0800ccf1 	.word	0x0800ccf1
 800cbb4:	0800ccf1 	.word	0x0800ccf1
 800cbb8:	0800ccf1 	.word	0x0800ccf1
 800cbbc:	0800cc61 	.word	0x0800cc61
 800cbc0:	0800ccf1 	.word	0x0800ccf1
 800cbc4:	0800ccf1 	.word	0x0800ccf1
 800cbc8:	0800ccf1 	.word	0x0800ccf1
 800cbcc:	0800cca9 	.word	0x0800cca9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	4a6d      	ldr	r2, [pc, #436]	; (800cd8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800cbd6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbdc:	4a6c      	ldr	r2, [pc, #432]	; (800cd90 <HAL_TIM_PWM_Start_DMA+0x330>)
 800cbde:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe4:	4a6b      	ldr	r2, [pc, #428]	; (800cd94 <HAL_TIM_PWM_Start_DMA+0x334>)
 800cbe6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cbec:	6879      	ldr	r1, [r7, #4]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	3334      	adds	r3, #52	; 0x34
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	887b      	ldrh	r3, [r7, #2]
 800cbf8:	f7fe fcf6 	bl	800b5e8 <HAL_DMA_Start_IT>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e0bd      	b.n	800cd82 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68da      	ldr	r2, [r3, #12]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc14:	60da      	str	r2, [r3, #12]
      break;
 800cc16:	e06e      	b.n	800ccf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1c:	4a5b      	ldr	r2, [pc, #364]	; (800cd8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800cc1e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc24:	4a5a      	ldr	r2, [pc, #360]	; (800cd90 <HAL_TIM_PWM_Start_DMA+0x330>)
 800cc26:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2c:	4a59      	ldr	r2, [pc, #356]	; (800cd94 <HAL_TIM_PWM_Start_DMA+0x334>)
 800cc2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800cc34:	6879      	ldr	r1, [r7, #4]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	3338      	adds	r3, #56	; 0x38
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	887b      	ldrh	r3, [r7, #2]
 800cc40:	f7fe fcd2 	bl	800b5e8 <HAL_DMA_Start_IT>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e099      	b.n	800cd82 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc5c:	60da      	str	r2, [r3, #12]
      break;
 800cc5e:	e04a      	b.n	800ccf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc64:	4a49      	ldr	r2, [pc, #292]	; (800cd8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800cc66:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6c:	4a48      	ldr	r2, [pc, #288]	; (800cd90 <HAL_TIM_PWM_Start_DMA+0x330>)
 800cc6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	4a47      	ldr	r2, [pc, #284]	; (800cd94 <HAL_TIM_PWM_Start_DMA+0x334>)
 800cc76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800cc7c:	6879      	ldr	r1, [r7, #4]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	333c      	adds	r3, #60	; 0x3c
 800cc84:	461a      	mov	r2, r3
 800cc86:	887b      	ldrh	r3, [r7, #2]
 800cc88:	f7fe fcae 	bl	800b5e8 <HAL_DMA_Start_IT>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d001      	beq.n	800cc96 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e075      	b.n	800cd82 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68da      	ldr	r2, [r3, #12]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cca4:	60da      	str	r2, [r3, #12]
      break;
 800cca6:	e026      	b.n	800ccf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccac:	4a37      	ldr	r2, [pc, #220]	; (800cd8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800ccae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb4:	4a36      	ldr	r2, [pc, #216]	; (800cd90 <HAL_TIM_PWM_Start_DMA+0x330>)
 800ccb6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbc:	4a35      	ldr	r2, [pc, #212]	; (800cd94 <HAL_TIM_PWM_Start_DMA+0x334>)
 800ccbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccc4:	6879      	ldr	r1, [r7, #4]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3340      	adds	r3, #64	; 0x40
 800cccc:	461a      	mov	r2, r3
 800ccce:	887b      	ldrh	r3, [r7, #2]
 800ccd0:	f7fe fc8a 	bl	800b5e8 <HAL_DMA_Start_IT>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e051      	b.n	800cd82 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68da      	ldr	r2, [r3, #12]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ccec:	60da      	str	r2, [r3, #12]
      break;
 800ccee:	e002      	b.n	800ccf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	75fb      	strb	r3, [r7, #23]
      break;
 800ccf4:	bf00      	nop
  }

  if (status == HAL_OK)
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d141      	bne.n	800cd80 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2201      	movs	r2, #1
 800cd02:	68b9      	ldr	r1, [r7, #8]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 ff23 	bl	800db50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a22      	ldr	r2, [pc, #136]	; (800cd98 <HAL_TIM_PWM_Start_DMA+0x338>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d107      	bne.n	800cd24 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a1b      	ldr	r2, [pc, #108]	; (800cd98 <HAL_TIM_PWM_Start_DMA+0x338>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d00e      	beq.n	800cd4c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd36:	d009      	beq.n	800cd4c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a17      	ldr	r2, [pc, #92]	; (800cd9c <HAL_TIM_PWM_Start_DMA+0x33c>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d004      	beq.n	800cd4c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a16      	ldr	r2, [pc, #88]	; (800cda0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d111      	bne.n	800cd70 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f003 0307 	and.w	r3, r3, #7
 800cd56:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	2b06      	cmp	r3, #6
 800cd5c:	d010      	beq.n	800cd80 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f042 0201 	orr.w	r2, r2, #1
 800cd6c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd6e:	e007      	b.n	800cd80 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f042 0201 	orr.w	r2, r2, #1
 800cd7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3718      	adds	r7, #24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	0800d53f 	.word	0x0800d53f
 800cd90:	0800d5e7 	.word	0x0800d5e7
 800cd94:	0800d4ad 	.word	0x0800d4ad
 800cd98:	40012c00 	.word	0x40012c00
 800cd9c:	40000400 	.word	0x40000400
 800cda0:	40000800 	.word	0x40000800

0800cda4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b0c      	cmp	r3, #12
 800cdb6:	d855      	bhi.n	800ce64 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800cdb8:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800cdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdbe:	bf00      	nop
 800cdc0:	0800cdf5 	.word	0x0800cdf5
 800cdc4:	0800ce65 	.word	0x0800ce65
 800cdc8:	0800ce65 	.word	0x0800ce65
 800cdcc:	0800ce65 	.word	0x0800ce65
 800cdd0:	0800ce11 	.word	0x0800ce11
 800cdd4:	0800ce65 	.word	0x0800ce65
 800cdd8:	0800ce65 	.word	0x0800ce65
 800cddc:	0800ce65 	.word	0x0800ce65
 800cde0:	0800ce2d 	.word	0x0800ce2d
 800cde4:	0800ce65 	.word	0x0800ce65
 800cde8:	0800ce65 	.word	0x0800ce65
 800cdec:	0800ce65 	.word	0x0800ce65
 800cdf0:	0800ce49 	.word	0x0800ce49
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68da      	ldr	r2, [r3, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ce02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe fc4d 	bl	800b6a8 <HAL_DMA_Abort_IT>
      break;
 800ce0e:	e02c      	b.n	800ce6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68da      	ldr	r2, [r3, #12]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe fc3f 	bl	800b6a8 <HAL_DMA_Abort_IT>
      break;
 800ce2a:	e01e      	b.n	800ce6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ce3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fe fc31 	bl	800b6a8 <HAL_DMA_Abort_IT>
      break;
 800ce46:	e010      	b.n	800ce6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ce56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe fc23 	bl	800b6a8 <HAL_DMA_Abort_IT>
      break;
 800ce62:	e002      	b.n	800ce6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	73fb      	strb	r3, [r7, #15]
      break;
 800ce68:	bf00      	nop
  }

  if (status == HAL_OK)
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d157      	bne.n	800cf20 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2200      	movs	r2, #0
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f000 fe69 	bl	800db50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a2a      	ldr	r2, [pc, #168]	; (800cf2c <HAL_TIM_PWM_Stop_DMA+0x188>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d117      	bne.n	800ceb8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6a1a      	ldr	r2, [r3, #32]
 800ce8e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ce92:	4013      	ands	r3, r2
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10f      	bne.n	800ceb8 <HAL_TIM_PWM_Stop_DMA+0x114>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6a1a      	ldr	r2, [r3, #32]
 800ce9e:	f240 4344 	movw	r3, #1092	; 0x444
 800cea2:	4013      	ands	r3, r2
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d107      	bne.n	800ceb8 <HAL_TIM_PWM_Stop_DMA+0x114>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ceb6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6a1a      	ldr	r2, [r3, #32]
 800cebe:	f241 1311 	movw	r3, #4369	; 0x1111
 800cec2:	4013      	ands	r3, r2
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10f      	bne.n	800cee8 <HAL_TIM_PWM_Stop_DMA+0x144>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6a1a      	ldr	r2, [r3, #32]
 800cece:	f240 4344 	movw	r3, #1092	; 0x444
 800ced2:	4013      	ands	r3, r2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d107      	bne.n	800cee8 <HAL_TIM_PWM_Stop_DMA+0x144>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f022 0201 	bic.w	r2, r2, #1
 800cee6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d104      	bne.n	800cef8 <HAL_TIM_PWM_Stop_DMA+0x154>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cef6:	e013      	b.n	800cf20 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	d104      	bne.n	800cf08 <HAL_TIM_PWM_Stop_DMA+0x164>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf06:	e00b      	b.n	800cf20 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	2b08      	cmp	r3, #8
 800cf0c:	d104      	bne.n	800cf18 <HAL_TIM_PWM_Stop_DMA+0x174>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf16:	e003      	b.n	800cf20 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	40012c00 	.word	0x40012c00

0800cf30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	f003 0302 	and.w	r3, r3, #2
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d122      	bne.n	800cf8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	f003 0302 	and.w	r3, r3, #2
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d11b      	bne.n	800cf8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f06f 0202 	mvn.w	r2, #2
 800cf5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	699b      	ldr	r3, [r3, #24]
 800cf6a:	f003 0303 	and.w	r3, r3, #3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d003      	beq.n	800cf7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fa76 	bl	800d464 <HAL_TIM_IC_CaptureCallback>
 800cf78:	e005      	b.n	800cf86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fa69 	bl	800d452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7fd f80d 	bl	8009fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	f003 0304 	and.w	r3, r3, #4
 800cf96:	2b04      	cmp	r3, #4
 800cf98:	d122      	bne.n	800cfe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	f003 0304 	and.w	r3, r3, #4
 800cfa4:	2b04      	cmp	r3, #4
 800cfa6:	d11b      	bne.n	800cfe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f06f 0204 	mvn.w	r2, #4
 800cfb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2202      	movs	r2, #2
 800cfb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fa4c 	bl	800d464 <HAL_TIM_IC_CaptureCallback>
 800cfcc:	e005      	b.n	800cfda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fa3f 	bl	800d452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7fc ffe3 	bl	8009fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	f003 0308 	and.w	r3, r3, #8
 800cfea:	2b08      	cmp	r3, #8
 800cfec:	d122      	bne.n	800d034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	f003 0308 	and.w	r3, r3, #8
 800cff8:	2b08      	cmp	r3, #8
 800cffa:	d11b      	bne.n	800d034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f06f 0208 	mvn.w	r2, #8
 800d004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2204      	movs	r2, #4
 800d00a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	69db      	ldr	r3, [r3, #28]
 800d012:	f003 0303 	and.w	r3, r3, #3
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa22 	bl	800d464 <HAL_TIM_IC_CaptureCallback>
 800d020:	e005      	b.n	800d02e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fa15 	bl	800d452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7fc ffb9 	bl	8009fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	f003 0310 	and.w	r3, r3, #16
 800d03e:	2b10      	cmp	r3, #16
 800d040:	d122      	bne.n	800d088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	f003 0310 	and.w	r3, r3, #16
 800d04c:	2b10      	cmp	r3, #16
 800d04e:	d11b      	bne.n	800d088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f06f 0210 	mvn.w	r2, #16
 800d058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2208      	movs	r2, #8
 800d05e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	69db      	ldr	r3, [r3, #28]
 800d066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f9f8 	bl	800d464 <HAL_TIM_IC_CaptureCallback>
 800d074:	e005      	b.n	800d082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f9eb 	bl	800d452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7fc ff8f 	bl	8009fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b01      	cmp	r3, #1
 800d094:	d10e      	bne.n	800d0b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d107      	bne.n	800d0b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f06f 0201 	mvn.w	r2, #1
 800d0ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7fc fff4 	bl	800a09c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	691b      	ldr	r3, [r3, #16]
 800d0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0be:	2b80      	cmp	r3, #128	; 0x80
 800d0c0:	d10e      	bne.n	800d0e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0cc:	2b80      	cmp	r3, #128	; 0x80
 800d0ce:	d107      	bne.n	800d0e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 fe14 	bl	800dd08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ea:	2b40      	cmp	r3, #64	; 0x40
 800d0ec:	d10e      	bne.n	800d10c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f8:	2b40      	cmp	r3, #64	; 0x40
 800d0fa:	d107      	bne.n	800d10c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f9be 	bl	800d488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	f003 0320 	and.w	r3, r3, #32
 800d116:	2b20      	cmp	r3, #32
 800d118:	d10e      	bne.n	800d138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	f003 0320 	and.w	r3, r3, #32
 800d124:	2b20      	cmp	r3, #32
 800d126:	d107      	bne.n	800d138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f06f 0220 	mvn.w	r2, #32
 800d130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fddf 	bl	800dcf6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d138:	bf00      	nop
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d14c:	2300      	movs	r3, #0
 800d14e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d156:	2b01      	cmp	r3, #1
 800d158:	d101      	bne.n	800d15e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d15a:	2302      	movs	r3, #2
 800d15c:	e0ae      	b.n	800d2bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b0c      	cmp	r3, #12
 800d16a:	f200 809f 	bhi.w	800d2ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d16e:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d174:	0800d1a9 	.word	0x0800d1a9
 800d178:	0800d2ad 	.word	0x0800d2ad
 800d17c:	0800d2ad 	.word	0x0800d2ad
 800d180:	0800d2ad 	.word	0x0800d2ad
 800d184:	0800d1e9 	.word	0x0800d1e9
 800d188:	0800d2ad 	.word	0x0800d2ad
 800d18c:	0800d2ad 	.word	0x0800d2ad
 800d190:	0800d2ad 	.word	0x0800d2ad
 800d194:	0800d22b 	.word	0x0800d22b
 800d198:	0800d2ad 	.word	0x0800d2ad
 800d19c:	0800d2ad 	.word	0x0800d2ad
 800d1a0:	0800d2ad 	.word	0x0800d2ad
 800d1a4:	0800d26b 	.word	0x0800d26b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 fab0 	bl	800d714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	699a      	ldr	r2, [r3, #24]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0208 	orr.w	r2, r2, #8
 800d1c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	699a      	ldr	r2, [r3, #24]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f022 0204 	bic.w	r2, r2, #4
 800d1d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	6999      	ldr	r1, [r3, #24]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	691a      	ldr	r2, [r3, #16]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	430a      	orrs	r2, r1
 800d1e4:	619a      	str	r2, [r3, #24]
      break;
 800d1e6:	e064      	b.n	800d2b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68b9      	ldr	r1, [r7, #8]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 faf6 	bl	800d7e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	699a      	ldr	r2, [r3, #24]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	699a      	ldr	r2, [r3, #24]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6999      	ldr	r1, [r3, #24]
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	021a      	lsls	r2, r3, #8
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	430a      	orrs	r2, r1
 800d226:	619a      	str	r2, [r3, #24]
      break;
 800d228:	e043      	b.n	800d2b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68b9      	ldr	r1, [r7, #8]
 800d230:	4618      	mov	r0, r3
 800d232:	f000 fb3f 	bl	800d8b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	69da      	ldr	r2, [r3, #28]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f042 0208 	orr.w	r2, r2, #8
 800d244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	69da      	ldr	r2, [r3, #28]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f022 0204 	bic.w	r2, r2, #4
 800d254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	69d9      	ldr	r1, [r3, #28]
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	691a      	ldr	r2, [r3, #16]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	430a      	orrs	r2, r1
 800d266:	61da      	str	r2, [r3, #28]
      break;
 800d268:	e023      	b.n	800d2b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	68b9      	ldr	r1, [r7, #8]
 800d270:	4618      	mov	r0, r3
 800d272:	f000 fb89 	bl	800d988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	69da      	ldr	r2, [r3, #28]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69da      	ldr	r2, [r3, #28]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69d9      	ldr	r1, [r3, #28]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	021a      	lsls	r2, r3, #8
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	430a      	orrs	r2, r1
 800d2a8:	61da      	str	r2, [r3, #28]
      break;
 800d2aa:	e002      	b.n	800d2b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	75fb      	strb	r3, [r7, #23]
      break;
 800d2b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d101      	bne.n	800d2e0 <HAL_TIM_ConfigClockSource+0x1c>
 800d2dc:	2302      	movs	r3, #2
 800d2de:	e0b4      	b.n	800d44a <HAL_TIM_ConfigClockSource+0x186>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2202      	movs	r2, #2
 800d2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	689b      	ldr	r3, [r3, #8]
 800d2f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d2fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d318:	d03e      	beq.n	800d398 <HAL_TIM_ConfigClockSource+0xd4>
 800d31a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d31e:	f200 8087 	bhi.w	800d430 <HAL_TIM_ConfigClockSource+0x16c>
 800d322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d326:	f000 8086 	beq.w	800d436 <HAL_TIM_ConfigClockSource+0x172>
 800d32a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d32e:	d87f      	bhi.n	800d430 <HAL_TIM_ConfigClockSource+0x16c>
 800d330:	2b70      	cmp	r3, #112	; 0x70
 800d332:	d01a      	beq.n	800d36a <HAL_TIM_ConfigClockSource+0xa6>
 800d334:	2b70      	cmp	r3, #112	; 0x70
 800d336:	d87b      	bhi.n	800d430 <HAL_TIM_ConfigClockSource+0x16c>
 800d338:	2b60      	cmp	r3, #96	; 0x60
 800d33a:	d050      	beq.n	800d3de <HAL_TIM_ConfigClockSource+0x11a>
 800d33c:	2b60      	cmp	r3, #96	; 0x60
 800d33e:	d877      	bhi.n	800d430 <HAL_TIM_ConfigClockSource+0x16c>
 800d340:	2b50      	cmp	r3, #80	; 0x50
 800d342:	d03c      	beq.n	800d3be <HAL_TIM_ConfigClockSource+0xfa>
 800d344:	2b50      	cmp	r3, #80	; 0x50
 800d346:	d873      	bhi.n	800d430 <HAL_TIM_ConfigClockSource+0x16c>
 800d348:	2b40      	cmp	r3, #64	; 0x40
 800d34a:	d058      	beq.n	800d3fe <HAL_TIM_ConfigClockSource+0x13a>
 800d34c:	2b40      	cmp	r3, #64	; 0x40
 800d34e:	d86f      	bhi.n	800d430 <HAL_TIM_ConfigClockSource+0x16c>
 800d350:	2b30      	cmp	r3, #48	; 0x30
 800d352:	d064      	beq.n	800d41e <HAL_TIM_ConfigClockSource+0x15a>
 800d354:	2b30      	cmp	r3, #48	; 0x30
 800d356:	d86b      	bhi.n	800d430 <HAL_TIM_ConfigClockSource+0x16c>
 800d358:	2b20      	cmp	r3, #32
 800d35a:	d060      	beq.n	800d41e <HAL_TIM_ConfigClockSource+0x15a>
 800d35c:	2b20      	cmp	r3, #32
 800d35e:	d867      	bhi.n	800d430 <HAL_TIM_ConfigClockSource+0x16c>
 800d360:	2b00      	cmp	r3, #0
 800d362:	d05c      	beq.n	800d41e <HAL_TIM_ConfigClockSource+0x15a>
 800d364:	2b10      	cmp	r3, #16
 800d366:	d05a      	beq.n	800d41e <HAL_TIM_ConfigClockSource+0x15a>
 800d368:	e062      	b.n	800d430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d37a:	f000 fbca 	bl	800db12 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d38c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	609a      	str	r2, [r3, #8]
      break;
 800d396:	e04f      	b.n	800d438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3a8:	f000 fbb3 	bl	800db12 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	689a      	ldr	r2, [r3, #8]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3ba:	609a      	str	r2, [r3, #8]
      break;
 800d3bc:	e03c      	b.n	800d438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	f000 fb2a 	bl	800da24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2150      	movs	r1, #80	; 0x50
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 fb81 	bl	800dade <TIM_ITRx_SetConfig>
      break;
 800d3dc:	e02c      	b.n	800d438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	f000 fb48 	bl	800da80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2160      	movs	r1, #96	; 0x60
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 fb71 	bl	800dade <TIM_ITRx_SetConfig>
      break;
 800d3fc:	e01c      	b.n	800d438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d40a:	461a      	mov	r2, r3
 800d40c:	f000 fb0a 	bl	800da24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2140      	movs	r1, #64	; 0x40
 800d416:	4618      	mov	r0, r3
 800d418:	f000 fb61 	bl	800dade <TIM_ITRx_SetConfig>
      break;
 800d41c:	e00c      	b.n	800d438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f000 fb58 	bl	800dade <TIM_ITRx_SetConfig>
      break;
 800d42e:	e003      	b.n	800d438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	73fb      	strb	r3, [r7, #15]
      break;
 800d434:	e000      	b.n	800d438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2201      	movs	r2, #1
 800d43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d448:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d452:	b480      	push	{r7}
 800d454:	b083      	sub	sp, #12
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d45a:	bf00      	nop
 800d45c:	370c      	adds	r7, #12
 800d45e:	46bd      	mov	sp, r7
 800d460:	bc80      	pop	{r7}
 800d462:	4770      	bx	lr

0800d464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d46c:	bf00      	nop
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	bc80      	pop	{r7}
 800d474:	4770      	bx	lr

0800d476 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d476:	b480      	push	{r7}
 800d478:	b083      	sub	sp, #12
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800d47e:	bf00      	nop
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	bc80      	pop	{r7}
 800d486:	4770      	bx	lr

0800d488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	bc80      	pop	{r7}
 800d498:	4770      	bx	lr

0800d49a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800d49a:	b480      	push	{r7}
 800d49c:	b083      	sub	sp, #12
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800d4a2:	bf00      	nop
 800d4a4:	370c      	adds	r7, #12
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bc80      	pop	{r7}
 800d4aa:	4770      	bx	lr

0800d4ac <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d107      	bne.n	800d4d4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4d2:	e02a      	b.n	800d52a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d107      	bne.n	800d4ee <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2202      	movs	r2, #2
 800d4e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4ec:	e01d      	b.n	800d52a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d107      	bne.n	800d508 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2204      	movs	r2, #4
 800d4fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2201      	movs	r2, #1
 800d502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d506:	e010      	b.n	800d52a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d107      	bne.n	800d522 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2208      	movs	r2, #8
 800d516:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d520:	e003      	b.n	800d52a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7ff ffb5 	bl	800d49a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	771a      	strb	r2, [r3, #28]
}
 800d536:	bf00      	nop
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b084      	sub	sp, #16
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	429a      	cmp	r2, r3
 800d554:	d10b      	bne.n	800d56e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2201      	movs	r2, #1
 800d55a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	699b      	ldr	r3, [r3, #24]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d136      	bne.n	800d5d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d56c:	e031      	b.n	800d5d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	429a      	cmp	r2, r3
 800d576:	d10b      	bne.n	800d590 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2202      	movs	r2, #2
 800d57c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	699b      	ldr	r3, [r3, #24]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d125      	bne.n	800d5d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d58e:	e020      	b.n	800d5d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	429a      	cmp	r2, r3
 800d598:	d10b      	bne.n	800d5b2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2204      	movs	r2, #4
 800d59e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d114      	bne.n	800d5d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5b0:	e00f      	b.n	800d5d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d10a      	bne.n	800d5d2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2208      	movs	r2, #8
 800d5c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	699b      	ldr	r3, [r3, #24]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d103      	bne.n	800d5d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7fc fce4 	bl	8009fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	771a      	strb	r2, [r3, #28]
}
 800d5de:	bf00      	nop
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b084      	sub	sp, #16
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d103      	bne.n	800d606 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2201      	movs	r2, #1
 800d602:	771a      	strb	r2, [r3, #28]
 800d604:	e019      	b.n	800d63a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d103      	bne.n	800d618 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2202      	movs	r2, #2
 800d614:	771a      	strb	r2, [r3, #28]
 800d616:	e010      	b.n	800d63a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d103      	bne.n	800d62a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2204      	movs	r2, #4
 800d626:	771a      	strb	r2, [r3, #28]
 800d628:	e007      	b.n	800d63a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	429a      	cmp	r2, r3
 800d632:	d102      	bne.n	800d63a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2208      	movs	r2, #8
 800d638:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7ff ff1b 	bl	800d476 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2200      	movs	r2, #0
 800d644:	771a      	strb	r2, [r3, #28]
}
 800d646:	bf00      	nop
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
	...

0800d650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a29      	ldr	r2, [pc, #164]	; (800d708 <TIM_Base_SetConfig+0xb8>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d00b      	beq.n	800d680 <TIM_Base_SetConfig+0x30>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d66e:	d007      	beq.n	800d680 <TIM_Base_SetConfig+0x30>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a26      	ldr	r2, [pc, #152]	; (800d70c <TIM_Base_SetConfig+0xbc>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d003      	beq.n	800d680 <TIM_Base_SetConfig+0x30>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a25      	ldr	r2, [pc, #148]	; (800d710 <TIM_Base_SetConfig+0xc0>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d108      	bne.n	800d692 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	4313      	orrs	r3, r2
 800d690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a1c      	ldr	r2, [pc, #112]	; (800d708 <TIM_Base_SetConfig+0xb8>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d00b      	beq.n	800d6b2 <TIM_Base_SetConfig+0x62>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6a0:	d007      	beq.n	800d6b2 <TIM_Base_SetConfig+0x62>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a19      	ldr	r2, [pc, #100]	; (800d70c <TIM_Base_SetConfig+0xbc>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d003      	beq.n	800d6b2 <TIM_Base_SetConfig+0x62>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a18      	ldr	r2, [pc, #96]	; (800d710 <TIM_Base_SetConfig+0xc0>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d108      	bne.n	800d6c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	689a      	ldr	r2, [r3, #8]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a07      	ldr	r2, [pc, #28]	; (800d708 <TIM_Base_SetConfig+0xb8>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d103      	bne.n	800d6f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	691a      	ldr	r2, [r3, #16]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	615a      	str	r2, [r3, #20]
}
 800d6fe:	bf00      	nop
 800d700:	3714      	adds	r7, #20
 800d702:	46bd      	mov	sp, r7
 800d704:	bc80      	pop	{r7}
 800d706:	4770      	bx	lr
 800d708:	40012c00 	.word	0x40012c00
 800d70c:	40000400 	.word	0x40000400
 800d710:	40000800 	.word	0x40000800

0800d714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a1b      	ldr	r3, [r3, #32]
 800d728:	f023 0201 	bic.w	r2, r3, #1
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	699b      	ldr	r3, [r3, #24]
 800d73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f023 0303 	bic.w	r3, r3, #3
 800d74a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	4313      	orrs	r3, r2
 800d754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	f023 0302 	bic.w	r3, r3, #2
 800d75c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	4313      	orrs	r3, r2
 800d766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a1c      	ldr	r2, [pc, #112]	; (800d7dc <TIM_OC1_SetConfig+0xc8>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d10c      	bne.n	800d78a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	f023 0308 	bic.w	r3, r3, #8
 800d776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	697a      	ldr	r2, [r7, #20]
 800d77e:	4313      	orrs	r3, r2
 800d780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f023 0304 	bic.w	r3, r3, #4
 800d788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4a13      	ldr	r2, [pc, #76]	; (800d7dc <TIM_OC1_SetConfig+0xc8>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d111      	bne.n	800d7b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	695b      	ldr	r3, [r3, #20]
 800d7a6:	693a      	ldr	r2, [r7, #16]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	693a      	ldr	r2, [r7, #16]
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	685a      	ldr	r2, [r3, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	697a      	ldr	r2, [r7, #20]
 800d7ce:	621a      	str	r2, [r3, #32]
}
 800d7d0:	bf00      	nop
 800d7d2:	371c      	adds	r7, #28
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bc80      	pop	{r7}
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	40012c00 	.word	0x40012c00

0800d7e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b087      	sub	sp, #28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6a1b      	ldr	r3, [r3, #32]
 800d7f4:	f023 0210 	bic.w	r2, r3, #16
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	021b      	lsls	r3, r3, #8
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	f023 0320 	bic.w	r3, r3, #32
 800d82a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	011b      	lsls	r3, r3, #4
 800d832:	697a      	ldr	r2, [r7, #20]
 800d834:	4313      	orrs	r3, r2
 800d836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4a1d      	ldr	r2, [pc, #116]	; (800d8b0 <TIM_OC2_SetConfig+0xd0>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d10d      	bne.n	800d85c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	011b      	lsls	r3, r3, #4
 800d84e:	697a      	ldr	r2, [r7, #20]
 800d850:	4313      	orrs	r3, r2
 800d852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d85a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a14      	ldr	r2, [pc, #80]	; (800d8b0 <TIM_OC2_SetConfig+0xd0>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d113      	bne.n	800d88c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d86a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	693a      	ldr	r2, [r7, #16]
 800d87c:	4313      	orrs	r3, r2
 800d87e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	699b      	ldr	r3, [r3, #24]
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	693a      	ldr	r2, [r7, #16]
 800d888:	4313      	orrs	r3, r2
 800d88a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	693a      	ldr	r2, [r7, #16]
 800d890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	621a      	str	r2, [r3, #32]
}
 800d8a6:	bf00      	nop
 800d8a8:	371c      	adds	r7, #28
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bc80      	pop	{r7}
 800d8ae:	4770      	bx	lr
 800d8b0:	40012c00 	.word	0x40012c00

0800d8b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a1b      	ldr	r3, [r3, #32]
 800d8c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	69db      	ldr	r3, [r3, #28]
 800d8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	021b      	lsls	r3, r3, #8
 800d904:	697a      	ldr	r2, [r7, #20]
 800d906:	4313      	orrs	r3, r2
 800d908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a1d      	ldr	r2, [pc, #116]	; (800d984 <TIM_OC3_SetConfig+0xd0>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d10d      	bne.n	800d92e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	021b      	lsls	r3, r3, #8
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	4313      	orrs	r3, r2
 800d924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d92c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a14      	ldr	r2, [pc, #80]	; (800d984 <TIM_OC3_SetConfig+0xd0>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d113      	bne.n	800d95e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d93c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	011b      	lsls	r3, r3, #4
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	4313      	orrs	r3, r2
 800d950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	011b      	lsls	r3, r3, #4
 800d958:	693a      	ldr	r2, [r7, #16]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68fa      	ldr	r2, [r7, #12]
 800d968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	685a      	ldr	r2, [r3, #4]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	697a      	ldr	r2, [r7, #20]
 800d976:	621a      	str	r2, [r3, #32]
}
 800d978:	bf00      	nop
 800d97a:	371c      	adds	r7, #28
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bc80      	pop	{r7}
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	40012c00 	.word	0x40012c00

0800d988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d988:	b480      	push	{r7}
 800d98a:	b087      	sub	sp, #28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6a1b      	ldr	r3, [r3, #32]
 800d996:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6a1b      	ldr	r3, [r3, #32]
 800d99c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	69db      	ldr	r3, [r3, #28]
 800d9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	021b      	lsls	r3, r3, #8
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d9d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	031b      	lsls	r3, r3, #12
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a0f      	ldr	r2, [pc, #60]	; (800da20 <TIM_OC4_SetConfig+0x98>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d109      	bne.n	800d9fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d9ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	695b      	ldr	r3, [r3, #20]
 800d9f4:	019b      	lsls	r3, r3, #6
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	693a      	ldr	r2, [r7, #16]
 800da14:	621a      	str	r2, [r3, #32]
}
 800da16:	bf00      	nop
 800da18:	371c      	adds	r7, #28
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bc80      	pop	{r7}
 800da1e:	4770      	bx	lr
 800da20:	40012c00 	.word	0x40012c00

0800da24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6a1b      	ldr	r3, [r3, #32]
 800da34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6a1b      	ldr	r3, [r3, #32]
 800da3a:	f023 0201 	bic.w	r2, r3, #1
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800da4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	011b      	lsls	r3, r3, #4
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	4313      	orrs	r3, r2
 800da58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	f023 030a 	bic.w	r3, r3, #10
 800da60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800da62:	697a      	ldr	r2, [r7, #20]
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	4313      	orrs	r3, r2
 800da68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	693a      	ldr	r2, [r7, #16]
 800da6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	697a      	ldr	r2, [r7, #20]
 800da74:	621a      	str	r2, [r3, #32]
}
 800da76:	bf00      	nop
 800da78:	371c      	adds	r7, #28
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bc80      	pop	{r7}
 800da7e:	4770      	bx	lr

0800da80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da80:	b480      	push	{r7}
 800da82:	b087      	sub	sp, #28
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	f023 0210 	bic.w	r2, r3, #16
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800daaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	031b      	lsls	r3, r3, #12
 800dab0:	693a      	ldr	r2, [r7, #16]
 800dab2:	4313      	orrs	r3, r2
 800dab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dabc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	011b      	lsls	r3, r3, #4
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	693a      	ldr	r2, [r7, #16]
 800dacc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	621a      	str	r2, [r3, #32]
}
 800dad4:	bf00      	nop
 800dad6:	371c      	adds	r7, #28
 800dad8:	46bd      	mov	sp, r7
 800dada:	bc80      	pop	{r7}
 800dadc:	4770      	bx	lr

0800dade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dade:	b480      	push	{r7}
 800dae0:	b085      	sub	sp, #20
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	f043 0307 	orr.w	r3, r3, #7
 800db00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	609a      	str	r2, [r3, #8]
}
 800db08:	bf00      	nop
 800db0a:	3714      	adds	r7, #20
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bc80      	pop	{r7}
 800db10:	4770      	bx	lr

0800db12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db12:	b480      	push	{r7}
 800db14:	b087      	sub	sp, #28
 800db16:	af00      	add	r7, sp, #0
 800db18:	60f8      	str	r0, [r7, #12]
 800db1a:	60b9      	str	r1, [r7, #8]
 800db1c:	607a      	str	r2, [r7, #4]
 800db1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	021a      	lsls	r2, r3, #8
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	431a      	orrs	r2, r3
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	4313      	orrs	r3, r2
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	697a      	ldr	r2, [r7, #20]
 800db44:	609a      	str	r2, [r3, #8]
}
 800db46:	bf00      	nop
 800db48:	371c      	adds	r7, #28
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bc80      	pop	{r7}
 800db4e:	4770      	bx	lr

0800db50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800db50:	b480      	push	{r7}
 800db52:	b087      	sub	sp, #28
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f003 031f 	and.w	r3, r3, #31
 800db62:	2201      	movs	r2, #1
 800db64:	fa02 f303 	lsl.w	r3, r2, r3
 800db68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6a1a      	ldr	r2, [r3, #32]
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	43db      	mvns	r3, r3
 800db72:	401a      	ands	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6a1a      	ldr	r2, [r3, #32]
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	f003 031f 	and.w	r3, r3, #31
 800db82:	6879      	ldr	r1, [r7, #4]
 800db84:	fa01 f303 	lsl.w	r3, r1, r3
 800db88:	431a      	orrs	r2, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	621a      	str	r2, [r3, #32]
}
 800db8e:	bf00      	nop
 800db90:	371c      	adds	r7, #28
 800db92:	46bd      	mov	sp, r7
 800db94:	bc80      	pop	{r7}
 800db96:	4770      	bx	lr

0800db98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d101      	bne.n	800dbb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dbac:	2302      	movs	r3, #2
 800dbae:	e046      	b.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2202      	movs	r2, #2
 800dbbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4a16      	ldr	r2, [pc, #88]	; (800dc48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d00e      	beq.n	800dc12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbfc:	d009      	beq.n	800dc12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a12      	ldr	r2, [pc, #72]	; (800dc4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d004      	beq.n	800dc12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a10      	ldr	r2, [pc, #64]	; (800dc50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d10c      	bne.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	68ba      	ldr	r2, [r7, #8]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bc80      	pop	{r7}
 800dc46:	4770      	bx	lr
 800dc48:	40012c00 	.word	0x40012c00
 800dc4c:	40000400 	.word	0x40000400
 800dc50:	40000800 	.word	0x40000800

0800dc54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d101      	bne.n	800dc70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	e03d      	b.n	800dcec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	4313      	orrs	r3, r2
 800dc84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	4313      	orrs	r3, r2
 800dc92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	695b      	ldr	r3, [r3, #20]
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	69db      	ldr	r3, [r3, #28]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3714      	adds	r7, #20
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bc80      	pop	{r7}
 800dcf4:	4770      	bx	lr

0800dcf6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dcf6:	b480      	push	{r7}
 800dcf8:	b083      	sub	sp, #12
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dcfe:	bf00      	nop
 800dd00:	370c      	adds	r7, #12
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bc80      	pop	{r7}
 800dd06:	4770      	bx	lr

0800dd08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bc80      	pop	{r7}
 800dd18:	4770      	bx	lr

0800dd1a <memset>:
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4402      	add	r2, r0
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d100      	bne.n	800dd24 <memset+0xa>
 800dd22:	4770      	bx	lr
 800dd24:	f803 1b01 	strb.w	r1, [r3], #1
 800dd28:	e7f9      	b.n	800dd1e <memset+0x4>
	...

0800dd2c <__libc_init_array>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	2600      	movs	r6, #0
 800dd30:	4d0c      	ldr	r5, [pc, #48]	; (800dd64 <__libc_init_array+0x38>)
 800dd32:	4c0d      	ldr	r4, [pc, #52]	; (800dd68 <__libc_init_array+0x3c>)
 800dd34:	1b64      	subs	r4, r4, r5
 800dd36:	10a4      	asrs	r4, r4, #2
 800dd38:	42a6      	cmp	r6, r4
 800dd3a:	d109      	bne.n	800dd50 <__libc_init_array+0x24>
 800dd3c:	f001 f874 	bl	800ee28 <_init>
 800dd40:	2600      	movs	r6, #0
 800dd42:	4d0a      	ldr	r5, [pc, #40]	; (800dd6c <__libc_init_array+0x40>)
 800dd44:	4c0a      	ldr	r4, [pc, #40]	; (800dd70 <__libc_init_array+0x44>)
 800dd46:	1b64      	subs	r4, r4, r5
 800dd48:	10a4      	asrs	r4, r4, #2
 800dd4a:	42a6      	cmp	r6, r4
 800dd4c:	d105      	bne.n	800dd5a <__libc_init_array+0x2e>
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd54:	4798      	blx	r3
 800dd56:	3601      	adds	r6, #1
 800dd58:	e7ee      	b.n	800dd38 <__libc_init_array+0xc>
 800dd5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd5e:	4798      	blx	r3
 800dd60:	3601      	adds	r6, #1
 800dd62:	e7f2      	b.n	800dd4a <__libc_init_array+0x1e>
 800dd64:	0800f058 	.word	0x0800f058
 800dd68:	0800f058 	.word	0x0800f058
 800dd6c:	0800f058 	.word	0x0800f058
 800dd70:	0800f05c 	.word	0x0800f05c

0800dd74 <tan>:
 800dd74:	b530      	push	{r4, r5, lr}
 800dd76:	4a12      	ldr	r2, [pc, #72]	; (800ddc0 <tan+0x4c>)
 800dd78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	b087      	sub	sp, #28
 800dd80:	dc06      	bgt.n	800dd90 <tan+0x1c>
 800dd82:	2301      	movs	r3, #1
 800dd84:	2200      	movs	r2, #0
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	2300      	movs	r3, #0
 800dd8a:	f000 f81d 	bl	800ddc8 <__kernel_tan>
 800dd8e:	e006      	b.n	800dd9e <tan+0x2a>
 800dd90:	4a0c      	ldr	r2, [pc, #48]	; (800ddc4 <tan+0x50>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	dd05      	ble.n	800dda2 <tan+0x2e>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	f7f2 f9dd 	bl	8000158 <__aeabi_dsub>
 800dd9e:	b007      	add	sp, #28
 800dda0:	bd30      	pop	{r4, r5, pc}
 800dda2:	aa02      	add	r2, sp, #8
 800dda4:	f000 fa0c 	bl	800e1c0 <__ieee754_rem_pio2>
 800dda8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddac:	0040      	lsls	r0, r0, #1
 800ddae:	f000 0002 	and.w	r0, r0, #2
 800ddb2:	f1c0 0001 	rsb	r0, r0, #1
 800ddb6:	9000      	str	r0, [sp, #0]
 800ddb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddbc:	e7e5      	b.n	800dd8a <tan+0x16>
 800ddbe:	bf00      	nop
 800ddc0:	3fe921fb 	.word	0x3fe921fb
 800ddc4:	7fefffff 	.word	0x7fefffff

0800ddc8 <__kernel_tan>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	b08b      	sub	sp, #44	; 0x2c
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	4bd9      	ldr	r3, [pc, #868]	; (800e138 <__kernel_tan+0x370>)
 800ddd2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ddd6:	429e      	cmp	r6, r3
 800ddd8:	4604      	mov	r4, r0
 800ddda:	460d      	mov	r5, r1
 800dddc:	4682      	mov	sl, r0
 800ddde:	468b      	mov	fp, r1
 800dde0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800dde2:	9202      	str	r2, [sp, #8]
 800dde4:	9107      	str	r1, [sp, #28]
 800dde6:	dc58      	bgt.n	800de9a <__kernel_tan+0xd2>
 800dde8:	f7f2 fe08 	bl	80009fc <__aeabi_d2iz>
 800ddec:	4605      	mov	r5, r0
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d178      	bne.n	800dee4 <__kernel_tan+0x11c>
 800ddf2:	1c7b      	adds	r3, r7, #1
 800ddf4:	4323      	orrs	r3, r4
 800ddf6:	4333      	orrs	r3, r6
 800ddf8:	d110      	bne.n	800de1c <__kernel_tan+0x54>
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	4659      	mov	r1, fp
 800ddfe:	f000 fbd3 	bl	800e5a8 <fabs>
 800de02:	4602      	mov	r2, r0
 800de04:	460b      	mov	r3, r1
 800de06:	2000      	movs	r0, #0
 800de08:	49cc      	ldr	r1, [pc, #816]	; (800e13c <__kernel_tan+0x374>)
 800de0a:	f7f2 fc87 	bl	800071c <__aeabi_ddiv>
 800de0e:	4682      	mov	sl, r0
 800de10:	468b      	mov	fp, r1
 800de12:	4650      	mov	r0, sl
 800de14:	4659      	mov	r1, fp
 800de16:	b00b      	add	sp, #44	; 0x2c
 800de18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1c:	2f01      	cmp	r7, #1
 800de1e:	d0f8      	beq.n	800de12 <__kernel_tan+0x4a>
 800de20:	4620      	mov	r0, r4
 800de22:	4659      	mov	r1, fp
 800de24:	9a02      	ldr	r2, [sp, #8]
 800de26:	9b00      	ldr	r3, [sp, #0]
 800de28:	f7f2 f998 	bl	800015c <__adddf3>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	460f      	mov	r7, r1
 800de32:	2000      	movs	r0, #0
 800de34:	49c2      	ldr	r1, [pc, #776]	; (800e140 <__kernel_tan+0x378>)
 800de36:	f7f2 fc71 	bl	800071c <__aeabi_ddiv>
 800de3a:	462e      	mov	r6, r5
 800de3c:	4689      	mov	r9, r1
 800de3e:	4652      	mov	r2, sl
 800de40:	465b      	mov	r3, fp
 800de42:	4680      	mov	r8, r0
 800de44:	462c      	mov	r4, r5
 800de46:	4630      	mov	r0, r6
 800de48:	460d      	mov	r5, r1
 800de4a:	4639      	mov	r1, r7
 800de4c:	f7f2 f984 	bl	8000158 <__aeabi_dsub>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	9802      	ldr	r0, [sp, #8]
 800de56:	9900      	ldr	r1, [sp, #0]
 800de58:	f7f2 f97e 	bl	8000158 <__aeabi_dsub>
 800de5c:	4632      	mov	r2, r6
 800de5e:	464b      	mov	r3, r9
 800de60:	f7f2 fb32 	bl	80004c8 <__aeabi_dmul>
 800de64:	4632      	mov	r2, r6
 800de66:	4682      	mov	sl, r0
 800de68:	468b      	mov	fp, r1
 800de6a:	464b      	mov	r3, r9
 800de6c:	4630      	mov	r0, r6
 800de6e:	4639      	mov	r1, r7
 800de70:	f7f2 fb2a 	bl	80004c8 <__aeabi_dmul>
 800de74:	2200      	movs	r2, #0
 800de76:	4bb1      	ldr	r3, [pc, #708]	; (800e13c <__kernel_tan+0x374>)
 800de78:	f7f2 f970 	bl	800015c <__adddf3>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	4650      	mov	r0, sl
 800de82:	4659      	mov	r1, fp
 800de84:	f7f2 f96a 	bl	800015c <__adddf3>
 800de88:	4642      	mov	r2, r8
 800de8a:	464b      	mov	r3, r9
 800de8c:	f7f2 fb1c 	bl	80004c8 <__aeabi_dmul>
 800de90:	4622      	mov	r2, r4
 800de92:	462b      	mov	r3, r5
 800de94:	f7f2 f962 	bl	800015c <__adddf3>
 800de98:	e7b9      	b.n	800de0e <__kernel_tan+0x46>
 800de9a:	4baa      	ldr	r3, [pc, #680]	; (800e144 <__kernel_tan+0x37c>)
 800de9c:	429e      	cmp	r6, r3
 800de9e:	dd21      	ble.n	800dee4 <__kernel_tan+0x11c>
 800dea0:	2900      	cmp	r1, #0
 800dea2:	da06      	bge.n	800deb2 <__kernel_tan+0xea>
 800dea4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800dea8:	469b      	mov	fp, r3
 800deaa:	9b00      	ldr	r3, [sp, #0]
 800deac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	4652      	mov	r2, sl
 800deb4:	a182      	add	r1, pc, #520	; (adr r1, 800e0c0 <__kernel_tan+0x2f8>)
 800deb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deba:	465b      	mov	r3, fp
 800debc:	f7f2 f94c 	bl	8000158 <__aeabi_dsub>
 800dec0:	4604      	mov	r4, r0
 800dec2:	460d      	mov	r5, r1
 800dec4:	a180      	add	r1, pc, #512	; (adr r1, 800e0c8 <__kernel_tan+0x300>)
 800dec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deca:	9a02      	ldr	r2, [sp, #8]
 800decc:	9b00      	ldr	r3, [sp, #0]
 800dece:	f7f2 f943 	bl	8000158 <__aeabi_dsub>
 800ded2:	462b      	mov	r3, r5
 800ded4:	4622      	mov	r2, r4
 800ded6:	f7f2 f941 	bl	800015c <__adddf3>
 800deda:	2300      	movs	r3, #0
 800dedc:	4682      	mov	sl, r0
 800dede:	468b      	mov	fp, r1
 800dee0:	9302      	str	r3, [sp, #8]
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	4652      	mov	r2, sl
 800dee6:	465b      	mov	r3, fp
 800dee8:	4650      	mov	r0, sl
 800deea:	4659      	mov	r1, fp
 800deec:	f7f2 faec 	bl	80004c8 <__aeabi_dmul>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4680      	mov	r8, r0
 800def6:	4689      	mov	r9, r1
 800def8:	f7f2 fae6 	bl	80004c8 <__aeabi_dmul>
 800defc:	4642      	mov	r2, r8
 800defe:	4604      	mov	r4, r0
 800df00:	460d      	mov	r5, r1
 800df02:	464b      	mov	r3, r9
 800df04:	4650      	mov	r0, sl
 800df06:	4659      	mov	r1, fp
 800df08:	f7f2 fade 	bl	80004c8 <__aeabi_dmul>
 800df0c:	a370      	add	r3, pc, #448	; (adr r3, 800e0d0 <__kernel_tan+0x308>)
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df16:	4620      	mov	r0, r4
 800df18:	4629      	mov	r1, r5
 800df1a:	f7f2 fad5 	bl	80004c8 <__aeabi_dmul>
 800df1e:	a36e      	add	r3, pc, #440	; (adr r3, 800e0d8 <__kernel_tan+0x310>)
 800df20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df24:	f7f2 f91a 	bl	800015c <__adddf3>
 800df28:	4622      	mov	r2, r4
 800df2a:	462b      	mov	r3, r5
 800df2c:	f7f2 facc 	bl	80004c8 <__aeabi_dmul>
 800df30:	a36b      	add	r3, pc, #428	; (adr r3, 800e0e0 <__kernel_tan+0x318>)
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	f7f2 f911 	bl	800015c <__adddf3>
 800df3a:	4622      	mov	r2, r4
 800df3c:	462b      	mov	r3, r5
 800df3e:	f7f2 fac3 	bl	80004c8 <__aeabi_dmul>
 800df42:	a369      	add	r3, pc, #420	; (adr r3, 800e0e8 <__kernel_tan+0x320>)
 800df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df48:	f7f2 f908 	bl	800015c <__adddf3>
 800df4c:	4622      	mov	r2, r4
 800df4e:	462b      	mov	r3, r5
 800df50:	f7f2 faba 	bl	80004c8 <__aeabi_dmul>
 800df54:	a366      	add	r3, pc, #408	; (adr r3, 800e0f0 <__kernel_tan+0x328>)
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	f7f2 f8ff 	bl	800015c <__adddf3>
 800df5e:	4622      	mov	r2, r4
 800df60:	462b      	mov	r3, r5
 800df62:	f7f2 fab1 	bl	80004c8 <__aeabi_dmul>
 800df66:	a364      	add	r3, pc, #400	; (adr r3, 800e0f8 <__kernel_tan+0x330>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	f7f2 f8f6 	bl	800015c <__adddf3>
 800df70:	4642      	mov	r2, r8
 800df72:	464b      	mov	r3, r9
 800df74:	f7f2 faa8 	bl	80004c8 <__aeabi_dmul>
 800df78:	a361      	add	r3, pc, #388	; (adr r3, 800e100 <__kernel_tan+0x338>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df82:	4620      	mov	r0, r4
 800df84:	4629      	mov	r1, r5
 800df86:	f7f2 fa9f 	bl	80004c8 <__aeabi_dmul>
 800df8a:	a35f      	add	r3, pc, #380	; (adr r3, 800e108 <__kernel_tan+0x340>)
 800df8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df90:	f7f2 f8e4 	bl	800015c <__adddf3>
 800df94:	4622      	mov	r2, r4
 800df96:	462b      	mov	r3, r5
 800df98:	f7f2 fa96 	bl	80004c8 <__aeabi_dmul>
 800df9c:	a35c      	add	r3, pc, #368	; (adr r3, 800e110 <__kernel_tan+0x348>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	f7f2 f8db 	bl	800015c <__adddf3>
 800dfa6:	4622      	mov	r2, r4
 800dfa8:	462b      	mov	r3, r5
 800dfaa:	f7f2 fa8d 	bl	80004c8 <__aeabi_dmul>
 800dfae:	a35a      	add	r3, pc, #360	; (adr r3, 800e118 <__kernel_tan+0x350>)
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	f7f2 f8d2 	bl	800015c <__adddf3>
 800dfb8:	4622      	mov	r2, r4
 800dfba:	462b      	mov	r3, r5
 800dfbc:	f7f2 fa84 	bl	80004c8 <__aeabi_dmul>
 800dfc0:	a357      	add	r3, pc, #348	; (adr r3, 800e120 <__kernel_tan+0x358>)
 800dfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc6:	f7f2 f8c9 	bl	800015c <__adddf3>
 800dfca:	4622      	mov	r2, r4
 800dfcc:	462b      	mov	r3, r5
 800dfce:	f7f2 fa7b 	bl	80004c8 <__aeabi_dmul>
 800dfd2:	a355      	add	r3, pc, #340	; (adr r3, 800e128 <__kernel_tan+0x360>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 f8c0 	bl	800015c <__adddf3>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dfe4:	f7f2 f8ba 	bl	800015c <__adddf3>
 800dfe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfec:	f7f2 fa6c 	bl	80004c8 <__aeabi_dmul>
 800dff0:	9a02      	ldr	r2, [sp, #8]
 800dff2:	9b00      	ldr	r3, [sp, #0]
 800dff4:	f7f2 f8b2 	bl	800015c <__adddf3>
 800dff8:	4642      	mov	r2, r8
 800dffa:	464b      	mov	r3, r9
 800dffc:	f7f2 fa64 	bl	80004c8 <__aeabi_dmul>
 800e000:	9a02      	ldr	r2, [sp, #8]
 800e002:	9b00      	ldr	r3, [sp, #0]
 800e004:	f7f2 f8aa 	bl	800015c <__adddf3>
 800e008:	a349      	add	r3, pc, #292	; (adr r3, 800e130 <__kernel_tan+0x368>)
 800e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00e:	4604      	mov	r4, r0
 800e010:	460d      	mov	r5, r1
 800e012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e016:	f7f2 fa57 	bl	80004c8 <__aeabi_dmul>
 800e01a:	4622      	mov	r2, r4
 800e01c:	462b      	mov	r3, r5
 800e01e:	f7f2 f89d 	bl	800015c <__adddf3>
 800e022:	460b      	mov	r3, r1
 800e024:	e9cd 0100 	strd	r0, r1, [sp]
 800e028:	4602      	mov	r2, r0
 800e02a:	4659      	mov	r1, fp
 800e02c:	4650      	mov	r0, sl
 800e02e:	f7f2 f895 	bl	800015c <__adddf3>
 800e032:	4b44      	ldr	r3, [pc, #272]	; (800e144 <__kernel_tan+0x37c>)
 800e034:	4604      	mov	r4, r0
 800e036:	429e      	cmp	r6, r3
 800e038:	460d      	mov	r5, r1
 800e03a:	f340 8085 	ble.w	800e148 <__kernel_tan+0x380>
 800e03e:	4638      	mov	r0, r7
 800e040:	f7f2 f9d8 	bl	80003f4 <__aeabi_i2d>
 800e044:	4622      	mov	r2, r4
 800e046:	4680      	mov	r8, r0
 800e048:	4689      	mov	r9, r1
 800e04a:	462b      	mov	r3, r5
 800e04c:	4620      	mov	r0, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	f7f2 fa3a 	bl	80004c8 <__aeabi_dmul>
 800e054:	4642      	mov	r2, r8
 800e056:	4606      	mov	r6, r0
 800e058:	460f      	mov	r7, r1
 800e05a:	464b      	mov	r3, r9
 800e05c:	4620      	mov	r0, r4
 800e05e:	4629      	mov	r1, r5
 800e060:	f7f2 f87c 	bl	800015c <__adddf3>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	4630      	mov	r0, r6
 800e06a:	4639      	mov	r1, r7
 800e06c:	f7f2 fb56 	bl	800071c <__aeabi_ddiv>
 800e070:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e074:	f7f2 f870 	bl	8000158 <__aeabi_dsub>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	4650      	mov	r0, sl
 800e07e:	4659      	mov	r1, fp
 800e080:	f7f2 f86a 	bl	8000158 <__aeabi_dsub>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	f7f2 f868 	bl	800015c <__adddf3>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	4640      	mov	r0, r8
 800e092:	4649      	mov	r1, r9
 800e094:	f7f2 f860 	bl	8000158 <__aeabi_dsub>
 800e098:	9b07      	ldr	r3, [sp, #28]
 800e09a:	4604      	mov	r4, r0
 800e09c:	179b      	asrs	r3, r3, #30
 800e09e:	f003 0302 	and.w	r3, r3, #2
 800e0a2:	f1c3 0001 	rsb	r0, r3, #1
 800e0a6:	460d      	mov	r5, r1
 800e0a8:	f7f2 f9a4 	bl	80003f4 <__aeabi_i2d>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	f7f2 fa08 	bl	80004c8 <__aeabi_dmul>
 800e0b8:	e6a9      	b.n	800de0e <__kernel_tan+0x46>
 800e0ba:	bf00      	nop
 800e0bc:	f3af 8000 	nop.w
 800e0c0:	54442d18 	.word	0x54442d18
 800e0c4:	3fe921fb 	.word	0x3fe921fb
 800e0c8:	33145c07 	.word	0x33145c07
 800e0cc:	3c81a626 	.word	0x3c81a626
 800e0d0:	74bf7ad4 	.word	0x74bf7ad4
 800e0d4:	3efb2a70 	.word	0x3efb2a70
 800e0d8:	32f0a7e9 	.word	0x32f0a7e9
 800e0dc:	3f12b80f 	.word	0x3f12b80f
 800e0e0:	1a8d1068 	.word	0x1a8d1068
 800e0e4:	3f3026f7 	.word	0x3f3026f7
 800e0e8:	fee08315 	.word	0xfee08315
 800e0ec:	3f57dbc8 	.word	0x3f57dbc8
 800e0f0:	e96e8493 	.word	0xe96e8493
 800e0f4:	3f8226e3 	.word	0x3f8226e3
 800e0f8:	1bb341fe 	.word	0x1bb341fe
 800e0fc:	3faba1ba 	.word	0x3faba1ba
 800e100:	db605373 	.word	0xdb605373
 800e104:	bef375cb 	.word	0xbef375cb
 800e108:	a03792a6 	.word	0xa03792a6
 800e10c:	3f147e88 	.word	0x3f147e88
 800e110:	f2f26501 	.word	0xf2f26501
 800e114:	3f4344d8 	.word	0x3f4344d8
 800e118:	c9560328 	.word	0xc9560328
 800e11c:	3f6d6d22 	.word	0x3f6d6d22
 800e120:	8406d637 	.word	0x8406d637
 800e124:	3f9664f4 	.word	0x3f9664f4
 800e128:	1110fe7a 	.word	0x1110fe7a
 800e12c:	3fc11111 	.word	0x3fc11111
 800e130:	55555563 	.word	0x55555563
 800e134:	3fd55555 	.word	0x3fd55555
 800e138:	3e2fffff 	.word	0x3e2fffff
 800e13c:	3ff00000 	.word	0x3ff00000
 800e140:	bff00000 	.word	0xbff00000
 800e144:	3fe59427 	.word	0x3fe59427
 800e148:	2f01      	cmp	r7, #1
 800e14a:	d031      	beq.n	800e1b0 <__kernel_tan+0x3e8>
 800e14c:	460f      	mov	r7, r1
 800e14e:	4602      	mov	r2, r0
 800e150:	460b      	mov	r3, r1
 800e152:	2000      	movs	r0, #0
 800e154:	4918      	ldr	r1, [pc, #96]	; (800e1b8 <__kernel_tan+0x3f0>)
 800e156:	f7f2 fae1 	bl	800071c <__aeabi_ddiv>
 800e15a:	2600      	movs	r6, #0
 800e15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e160:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e164:	4652      	mov	r2, sl
 800e166:	465b      	mov	r3, fp
 800e168:	4630      	mov	r0, r6
 800e16a:	4639      	mov	r1, r7
 800e16c:	f7f1 fff4 	bl	8000158 <__aeabi_dsub>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e178:	f7f1 ffee 	bl	8000158 <__aeabi_dsub>
 800e17c:	4632      	mov	r2, r6
 800e17e:	462b      	mov	r3, r5
 800e180:	f7f2 f9a2 	bl	80004c8 <__aeabi_dmul>
 800e184:	4632      	mov	r2, r6
 800e186:	4682      	mov	sl, r0
 800e188:	468b      	mov	fp, r1
 800e18a:	462b      	mov	r3, r5
 800e18c:	4630      	mov	r0, r6
 800e18e:	4639      	mov	r1, r7
 800e190:	f7f2 f99a 	bl	80004c8 <__aeabi_dmul>
 800e194:	2200      	movs	r2, #0
 800e196:	4b09      	ldr	r3, [pc, #36]	; (800e1bc <__kernel_tan+0x3f4>)
 800e198:	f7f1 ffe0 	bl	800015c <__adddf3>
 800e19c:	4602      	mov	r2, r0
 800e19e:	460b      	mov	r3, r1
 800e1a0:	4650      	mov	r0, sl
 800e1a2:	4659      	mov	r1, fp
 800e1a4:	f7f1 ffda 	bl	800015c <__adddf3>
 800e1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1ac:	4634      	mov	r4, r6
 800e1ae:	e66d      	b.n	800de8c <__kernel_tan+0xc4>
 800e1b0:	4682      	mov	sl, r0
 800e1b2:	468b      	mov	fp, r1
 800e1b4:	e62d      	b.n	800de12 <__kernel_tan+0x4a>
 800e1b6:	bf00      	nop
 800e1b8:	bff00000 	.word	0xbff00000
 800e1bc:	3ff00000 	.word	0x3ff00000

0800e1c0 <__ieee754_rem_pio2>:
 800e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	4ac2      	ldr	r2, [pc, #776]	; (800e4d0 <__ieee754_rem_pio2+0x310>)
 800e1c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800e1cc:	b08d      	sub	sp, #52	; 0x34
 800e1ce:	4592      	cmp	sl, r2
 800e1d0:	9104      	str	r1, [sp, #16]
 800e1d2:	dc07      	bgt.n	800e1e4 <__ieee754_rem_pio2+0x24>
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e9c4 0100 	strd	r0, r1, [r4]
 800e1dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e1e0:	2500      	movs	r5, #0
 800e1e2:	e024      	b.n	800e22e <__ieee754_rem_pio2+0x6e>
 800e1e4:	4abb      	ldr	r2, [pc, #748]	; (800e4d4 <__ieee754_rem_pio2+0x314>)
 800e1e6:	4592      	cmp	sl, r2
 800e1e8:	dc72      	bgt.n	800e2d0 <__ieee754_rem_pio2+0x110>
 800e1ea:	9b04      	ldr	r3, [sp, #16]
 800e1ec:	4dba      	ldr	r5, [pc, #744]	; (800e4d8 <__ieee754_rem_pio2+0x318>)
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	a3a9      	add	r3, pc, #676	; (adr r3, 800e498 <__ieee754_rem_pio2+0x2d8>)
 800e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f6:	dd36      	ble.n	800e266 <__ieee754_rem_pio2+0xa6>
 800e1f8:	f7f1 ffae 	bl	8000158 <__aeabi_dsub>
 800e1fc:	45aa      	cmp	sl, r5
 800e1fe:	4606      	mov	r6, r0
 800e200:	460f      	mov	r7, r1
 800e202:	d018      	beq.n	800e236 <__ieee754_rem_pio2+0x76>
 800e204:	a3a6      	add	r3, pc, #664	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x2e0>)
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	f7f1 ffa5 	bl	8000158 <__aeabi_dsub>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	4630      	mov	r0, r6
 800e214:	e9c4 2300 	strd	r2, r3, [r4]
 800e218:	4639      	mov	r1, r7
 800e21a:	f7f1 ff9d 	bl	8000158 <__aeabi_dsub>
 800e21e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x2e0>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	f7f1 ff98 	bl	8000158 <__aeabi_dsub>
 800e228:	2501      	movs	r5, #1
 800e22a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e22e:	4628      	mov	r0, r5
 800e230:	b00d      	add	sp, #52	; 0x34
 800e232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e236:	a39c      	add	r3, pc, #624	; (adr r3, 800e4a8 <__ieee754_rem_pio2+0x2e8>)
 800e238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23c:	f7f1 ff8c 	bl	8000158 <__aeabi_dsub>
 800e240:	a39b      	add	r3, pc, #620	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x2f0>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	4606      	mov	r6, r0
 800e248:	460f      	mov	r7, r1
 800e24a:	f7f1 ff85 	bl	8000158 <__aeabi_dsub>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	4630      	mov	r0, r6
 800e254:	e9c4 2300 	strd	r2, r3, [r4]
 800e258:	4639      	mov	r1, r7
 800e25a:	f7f1 ff7d 	bl	8000158 <__aeabi_dsub>
 800e25e:	a394      	add	r3, pc, #592	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x2f0>)
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	e7de      	b.n	800e224 <__ieee754_rem_pio2+0x64>
 800e266:	f7f1 ff79 	bl	800015c <__adddf3>
 800e26a:	45aa      	cmp	sl, r5
 800e26c:	4606      	mov	r6, r0
 800e26e:	460f      	mov	r7, r1
 800e270:	d016      	beq.n	800e2a0 <__ieee754_rem_pio2+0xe0>
 800e272:	a38b      	add	r3, pc, #556	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x2e0>)
 800e274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e278:	f7f1 ff70 	bl	800015c <__adddf3>
 800e27c:	4602      	mov	r2, r0
 800e27e:	460b      	mov	r3, r1
 800e280:	4630      	mov	r0, r6
 800e282:	e9c4 2300 	strd	r2, r3, [r4]
 800e286:	4639      	mov	r1, r7
 800e288:	f7f1 ff66 	bl	8000158 <__aeabi_dsub>
 800e28c:	a384      	add	r3, pc, #528	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x2e0>)
 800e28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e292:	f7f1 ff63 	bl	800015c <__adddf3>
 800e296:	f04f 35ff 	mov.w	r5, #4294967295
 800e29a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e29e:	e7c6      	b.n	800e22e <__ieee754_rem_pio2+0x6e>
 800e2a0:	a381      	add	r3, pc, #516	; (adr r3, 800e4a8 <__ieee754_rem_pio2+0x2e8>)
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	f7f1 ff59 	bl	800015c <__adddf3>
 800e2aa:	a381      	add	r3, pc, #516	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x2f0>)
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	4606      	mov	r6, r0
 800e2b2:	460f      	mov	r7, r1
 800e2b4:	f7f1 ff52 	bl	800015c <__adddf3>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4630      	mov	r0, r6
 800e2be:	e9c4 2300 	strd	r2, r3, [r4]
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	f7f1 ff48 	bl	8000158 <__aeabi_dsub>
 800e2c8:	a379      	add	r3, pc, #484	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x2f0>)
 800e2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ce:	e7e0      	b.n	800e292 <__ieee754_rem_pio2+0xd2>
 800e2d0:	4a82      	ldr	r2, [pc, #520]	; (800e4dc <__ieee754_rem_pio2+0x31c>)
 800e2d2:	4592      	cmp	sl, r2
 800e2d4:	f300 80d4 	bgt.w	800e480 <__ieee754_rem_pio2+0x2c0>
 800e2d8:	f000 f966 	bl	800e5a8 <fabs>
 800e2dc:	a376      	add	r3, pc, #472	; (adr r3, 800e4b8 <__ieee754_rem_pio2+0x2f8>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460f      	mov	r7, r1
 800e2e6:	f7f2 f8ef 	bl	80004c8 <__aeabi_dmul>
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	4b7c      	ldr	r3, [pc, #496]	; (800e4e0 <__ieee754_rem_pio2+0x320>)
 800e2ee:	f7f1 ff35 	bl	800015c <__adddf3>
 800e2f2:	f7f2 fb83 	bl	80009fc <__aeabi_d2iz>
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	f7f2 f87c 	bl	80003f4 <__aeabi_i2d>
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	460b      	mov	r3, r1
 800e300:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e304:	a364      	add	r3, pc, #400	; (adr r3, 800e498 <__ieee754_rem_pio2+0x2d8>)
 800e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30a:	f7f2 f8dd 	bl	80004c8 <__aeabi_dmul>
 800e30e:	4602      	mov	r2, r0
 800e310:	460b      	mov	r3, r1
 800e312:	4630      	mov	r0, r6
 800e314:	4639      	mov	r1, r7
 800e316:	f7f1 ff1f 	bl	8000158 <__aeabi_dsub>
 800e31a:	a361      	add	r3, pc, #388	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x2e0>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	4680      	mov	r8, r0
 800e322:	4689      	mov	r9, r1
 800e324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e328:	f7f2 f8ce 	bl	80004c8 <__aeabi_dmul>
 800e32c:	2d1f      	cmp	r5, #31
 800e32e:	4606      	mov	r6, r0
 800e330:	460f      	mov	r7, r1
 800e332:	dc0e      	bgt.n	800e352 <__ieee754_rem_pio2+0x192>
 800e334:	4b6b      	ldr	r3, [pc, #428]	; (800e4e4 <__ieee754_rem_pio2+0x324>)
 800e336:	1e6a      	subs	r2, r5, #1
 800e338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e33c:	4553      	cmp	r3, sl
 800e33e:	d008      	beq.n	800e352 <__ieee754_rem_pio2+0x192>
 800e340:	4632      	mov	r2, r6
 800e342:	463b      	mov	r3, r7
 800e344:	4640      	mov	r0, r8
 800e346:	4649      	mov	r1, r9
 800e348:	f7f1 ff06 	bl	8000158 <__aeabi_dsub>
 800e34c:	e9c4 0100 	strd	r0, r1, [r4]
 800e350:	e012      	b.n	800e378 <__ieee754_rem_pio2+0x1b8>
 800e352:	463b      	mov	r3, r7
 800e354:	4632      	mov	r2, r6
 800e356:	4640      	mov	r0, r8
 800e358:	4649      	mov	r1, r9
 800e35a:	f7f1 fefd 	bl	8000158 <__aeabi_dsub>
 800e35e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800e362:	9305      	str	r3, [sp, #20]
 800e364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e368:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800e36c:	2b10      	cmp	r3, #16
 800e36e:	dc1f      	bgt.n	800e3b0 <__ieee754_rem_pio2+0x1f0>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	e9c4 2300 	strd	r2, r3, [r4]
 800e378:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800e37c:	4640      	mov	r0, r8
 800e37e:	4653      	mov	r3, sl
 800e380:	4649      	mov	r1, r9
 800e382:	f7f1 fee9 	bl	8000158 <__aeabi_dsub>
 800e386:	4632      	mov	r2, r6
 800e388:	463b      	mov	r3, r7
 800e38a:	f7f1 fee5 	bl	8000158 <__aeabi_dsub>
 800e38e:	460b      	mov	r3, r1
 800e390:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e394:	9904      	ldr	r1, [sp, #16]
 800e396:	4602      	mov	r2, r0
 800e398:	2900      	cmp	r1, #0
 800e39a:	f6bf af48 	bge.w	800e22e <__ieee754_rem_pio2+0x6e>
 800e39e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800e3a2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e3a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e3aa:	60e3      	str	r3, [r4, #12]
 800e3ac:	426d      	negs	r5, r5
 800e3ae:	e73e      	b.n	800e22e <__ieee754_rem_pio2+0x6e>
 800e3b0:	a33d      	add	r3, pc, #244	; (adr r3, 800e4a8 <__ieee754_rem_pio2+0x2e8>)
 800e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3ba:	f7f2 f885 	bl	80004c8 <__aeabi_dmul>
 800e3be:	4606      	mov	r6, r0
 800e3c0:	460f      	mov	r7, r1
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f7f1 fec5 	bl	8000158 <__aeabi_dsub>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4682      	mov	sl, r0
 800e3d4:	468b      	mov	fp, r1
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	4649      	mov	r1, r9
 800e3da:	f7f1 febd 	bl	8000158 <__aeabi_dsub>
 800e3de:	4632      	mov	r2, r6
 800e3e0:	463b      	mov	r3, r7
 800e3e2:	f7f1 feb9 	bl	8000158 <__aeabi_dsub>
 800e3e6:	a332      	add	r3, pc, #200	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x2f0>)
 800e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ec:	4606      	mov	r6, r0
 800e3ee:	460f      	mov	r7, r1
 800e3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3f4:	f7f2 f868 	bl	80004c8 <__aeabi_dmul>
 800e3f8:	4632      	mov	r2, r6
 800e3fa:	463b      	mov	r3, r7
 800e3fc:	f7f1 feac 	bl	8000158 <__aeabi_dsub>
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	4606      	mov	r6, r0
 800e406:	460f      	mov	r7, r1
 800e408:	4650      	mov	r0, sl
 800e40a:	4659      	mov	r1, fp
 800e40c:	f7f1 fea4 	bl	8000158 <__aeabi_dsub>
 800e410:	9a05      	ldr	r2, [sp, #20]
 800e412:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	2b31      	cmp	r3, #49	; 0x31
 800e41a:	dc06      	bgt.n	800e42a <__ieee754_rem_pio2+0x26a>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	46d0      	mov	r8, sl
 800e422:	46d9      	mov	r9, fp
 800e424:	e9c4 2300 	strd	r2, r3, [r4]
 800e428:	e7a6      	b.n	800e378 <__ieee754_rem_pio2+0x1b8>
 800e42a:	a325      	add	r3, pc, #148	; (adr r3, 800e4c0 <__ieee754_rem_pio2+0x300>)
 800e42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e434:	f7f2 f848 	bl	80004c8 <__aeabi_dmul>
 800e438:	4606      	mov	r6, r0
 800e43a:	460f      	mov	r7, r1
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	4650      	mov	r0, sl
 800e442:	4659      	mov	r1, fp
 800e444:	f7f1 fe88 	bl	8000158 <__aeabi_dsub>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4680      	mov	r8, r0
 800e44e:	4689      	mov	r9, r1
 800e450:	4650      	mov	r0, sl
 800e452:	4659      	mov	r1, fp
 800e454:	f7f1 fe80 	bl	8000158 <__aeabi_dsub>
 800e458:	4632      	mov	r2, r6
 800e45a:	463b      	mov	r3, r7
 800e45c:	f7f1 fe7c 	bl	8000158 <__aeabi_dsub>
 800e460:	a319      	add	r3, pc, #100	; (adr r3, 800e4c8 <__ieee754_rem_pio2+0x308>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	4606      	mov	r6, r0
 800e468:	460f      	mov	r7, r1
 800e46a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e46e:	f7f2 f82b 	bl	80004c8 <__aeabi_dmul>
 800e472:	4632      	mov	r2, r6
 800e474:	463b      	mov	r3, r7
 800e476:	f7f1 fe6f 	bl	8000158 <__aeabi_dsub>
 800e47a:	4606      	mov	r6, r0
 800e47c:	460f      	mov	r7, r1
 800e47e:	e75f      	b.n	800e340 <__ieee754_rem_pio2+0x180>
 800e480:	4a19      	ldr	r2, [pc, #100]	; (800e4e8 <__ieee754_rem_pio2+0x328>)
 800e482:	4592      	cmp	sl, r2
 800e484:	dd32      	ble.n	800e4ec <__ieee754_rem_pio2+0x32c>
 800e486:	4602      	mov	r2, r0
 800e488:	460b      	mov	r3, r1
 800e48a:	f7f1 fe65 	bl	8000158 <__aeabi_dsub>
 800e48e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e492:	e9c4 0100 	strd	r0, r1, [r4]
 800e496:	e6a3      	b.n	800e1e0 <__ieee754_rem_pio2+0x20>
 800e498:	54400000 	.word	0x54400000
 800e49c:	3ff921fb 	.word	0x3ff921fb
 800e4a0:	1a626331 	.word	0x1a626331
 800e4a4:	3dd0b461 	.word	0x3dd0b461
 800e4a8:	1a600000 	.word	0x1a600000
 800e4ac:	3dd0b461 	.word	0x3dd0b461
 800e4b0:	2e037073 	.word	0x2e037073
 800e4b4:	3ba3198a 	.word	0x3ba3198a
 800e4b8:	6dc9c883 	.word	0x6dc9c883
 800e4bc:	3fe45f30 	.word	0x3fe45f30
 800e4c0:	2e000000 	.word	0x2e000000
 800e4c4:	3ba3198a 	.word	0x3ba3198a
 800e4c8:	252049c1 	.word	0x252049c1
 800e4cc:	397b839a 	.word	0x397b839a
 800e4d0:	3fe921fb 	.word	0x3fe921fb
 800e4d4:	4002d97b 	.word	0x4002d97b
 800e4d8:	3ff921fb 	.word	0x3ff921fb
 800e4dc:	413921fb 	.word	0x413921fb
 800e4e0:	3fe00000 	.word	0x3fe00000
 800e4e4:	0800ee80 	.word	0x0800ee80
 800e4e8:	7fefffff 	.word	0x7fefffff
 800e4ec:	ea4f 552a 	mov.w	r5, sl, asr #20
 800e4f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800e4f4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800e4f8:	460f      	mov	r7, r1
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	f7f2 fa7e 	bl	80009fc <__aeabi_d2iz>
 800e500:	f7f1 ff78 	bl	80003f4 <__aeabi_i2d>
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	4630      	mov	r0, r6
 800e50a:	4639      	mov	r1, r7
 800e50c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e510:	f7f1 fe22 	bl	8000158 <__aeabi_dsub>
 800e514:	2200      	movs	r2, #0
 800e516:	4b22      	ldr	r3, [pc, #136]	; (800e5a0 <__ieee754_rem_pio2+0x3e0>)
 800e518:	f7f1 ffd6 	bl	80004c8 <__aeabi_dmul>
 800e51c:	460f      	mov	r7, r1
 800e51e:	4606      	mov	r6, r0
 800e520:	f7f2 fa6c 	bl	80009fc <__aeabi_d2iz>
 800e524:	f7f1 ff66 	bl	80003f4 <__aeabi_i2d>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	4630      	mov	r0, r6
 800e52e:	4639      	mov	r1, r7
 800e530:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e534:	f7f1 fe10 	bl	8000158 <__aeabi_dsub>
 800e538:	2200      	movs	r2, #0
 800e53a:	4b19      	ldr	r3, [pc, #100]	; (800e5a0 <__ieee754_rem_pio2+0x3e0>)
 800e53c:	f7f1 ffc4 	bl	80004c8 <__aeabi_dmul>
 800e540:	f04f 0803 	mov.w	r8, #3
 800e544:	2600      	movs	r6, #0
 800e546:	2700      	movs	r7, #0
 800e548:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e54c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800e550:	4632      	mov	r2, r6
 800e552:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e556:	463b      	mov	r3, r7
 800e558:	46c2      	mov	sl, r8
 800e55a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e55e:	f7f2 fa1b 	bl	8000998 <__aeabi_dcmpeq>
 800e562:	2800      	cmp	r0, #0
 800e564:	d1f4      	bne.n	800e550 <__ieee754_rem_pio2+0x390>
 800e566:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <__ieee754_rem_pio2+0x3e4>)
 800e568:	462a      	mov	r2, r5
 800e56a:	9301      	str	r3, [sp, #4]
 800e56c:	2302      	movs	r3, #2
 800e56e:	4621      	mov	r1, r4
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	a806      	add	r0, sp, #24
 800e574:	4653      	mov	r3, sl
 800e576:	f000 f81b 	bl	800e5b0 <__kernel_rem_pio2>
 800e57a:	9b04      	ldr	r3, [sp, #16]
 800e57c:	4605      	mov	r5, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f6bf ae55 	bge.w	800e22e <__ieee754_rem_pio2+0x6e>
 800e584:	e9d4 2100 	ldrd	r2, r1, [r4]
 800e588:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e58c:	e9c4 2300 	strd	r2, r3, [r4]
 800e590:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800e594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e598:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e59c:	e706      	b.n	800e3ac <__ieee754_rem_pio2+0x1ec>
 800e59e:	bf00      	nop
 800e5a0:	41700000 	.word	0x41700000
 800e5a4:	0800ef00 	.word	0x0800ef00

0800e5a8 <fabs>:
 800e5a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4770      	bx	lr

0800e5b0 <__kernel_rem_pio2>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e5b8:	9308      	str	r3, [sp, #32]
 800e5ba:	9106      	str	r1, [sp, #24]
 800e5bc:	4bb6      	ldr	r3, [pc, #728]	; (800e898 <__kernel_rem_pio2+0x2e8>)
 800e5be:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e5c0:	f112 0f14 	cmn.w	r2, #20
 800e5c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5c8:	bfa8      	it	ge
 800e5ca:	1ed4      	subge	r4, r2, #3
 800e5cc:	9302      	str	r3, [sp, #8]
 800e5ce:	9b08      	ldr	r3, [sp, #32]
 800e5d0:	bfb8      	it	lt
 800e5d2:	2400      	movlt	r4, #0
 800e5d4:	f103 33ff 	add.w	r3, r3, #4294967295
 800e5d8:	9307      	str	r3, [sp, #28]
 800e5da:	bfa4      	itt	ge
 800e5dc:	2318      	movge	r3, #24
 800e5de:	fb94 f4f3 	sdivge	r4, r4, r3
 800e5e2:	f06f 0317 	mvn.w	r3, #23
 800e5e6:	fb04 3303 	mla	r3, r4, r3, r3
 800e5ea:	eb03 0b02 	add.w	fp, r3, r2
 800e5ee:	9a07      	ldr	r2, [sp, #28]
 800e5f0:	9b02      	ldr	r3, [sp, #8]
 800e5f2:	1aa7      	subs	r7, r4, r2
 800e5f4:	eb03 0802 	add.w	r8, r3, r2
 800e5f8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e5fa:	2500      	movs	r5, #0
 800e5fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e600:	2200      	movs	r2, #0
 800e602:	2300      	movs	r3, #0
 800e604:	9009      	str	r0, [sp, #36]	; 0x24
 800e606:	ae20      	add	r6, sp, #128	; 0x80
 800e608:	4545      	cmp	r5, r8
 800e60a:	dd14      	ble.n	800e636 <__kernel_rem_pio2+0x86>
 800e60c:	f04f 0800 	mov.w	r8, #0
 800e610:	9a08      	ldr	r2, [sp, #32]
 800e612:	ab20      	add	r3, sp, #128	; 0x80
 800e614:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800e618:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800e61c:	9b02      	ldr	r3, [sp, #8]
 800e61e:	4598      	cmp	r8, r3
 800e620:	dc35      	bgt.n	800e68e <__kernel_rem_pio2+0xde>
 800e622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e624:	2200      	movs	r2, #0
 800e626:	f1a3 0908 	sub.w	r9, r3, #8
 800e62a:	2300      	movs	r3, #0
 800e62c:	462f      	mov	r7, r5
 800e62e:	2600      	movs	r6, #0
 800e630:	e9cd 2300 	strd	r2, r3, [sp]
 800e634:	e01f      	b.n	800e676 <__kernel_rem_pio2+0xc6>
 800e636:	42ef      	cmn	r7, r5
 800e638:	d40b      	bmi.n	800e652 <__kernel_rem_pio2+0xa2>
 800e63a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e63e:	e9cd 2300 	strd	r2, r3, [sp]
 800e642:	f7f1 fed7 	bl	80003f4 <__aeabi_i2d>
 800e646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e64a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e64e:	3501      	adds	r5, #1
 800e650:	e7da      	b.n	800e608 <__kernel_rem_pio2+0x58>
 800e652:	4610      	mov	r0, r2
 800e654:	4619      	mov	r1, r3
 800e656:	e7f8      	b.n	800e64a <__kernel_rem_pio2+0x9a>
 800e658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e65c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e660:	f7f1 ff32 	bl	80004c8 <__aeabi_dmul>
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e66c:	f7f1 fd76 	bl	800015c <__adddf3>
 800e670:	e9cd 0100 	strd	r0, r1, [sp]
 800e674:	3601      	adds	r6, #1
 800e676:	9b07      	ldr	r3, [sp, #28]
 800e678:	3f08      	subs	r7, #8
 800e67a:	429e      	cmp	r6, r3
 800e67c:	ddec      	ble.n	800e658 <__kernel_rem_pio2+0xa8>
 800e67e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e682:	f108 0801 	add.w	r8, r8, #1
 800e686:	e8ea 2302 	strd	r2, r3, [sl], #8
 800e68a:	3508      	adds	r5, #8
 800e68c:	e7c6      	b.n	800e61c <__kernel_rem_pio2+0x6c>
 800e68e:	9b02      	ldr	r3, [sp, #8]
 800e690:	aa0c      	add	r2, sp, #48	; 0x30
 800e692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e696:	930b      	str	r3, [sp, #44]	; 0x2c
 800e698:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e69a:	9e02      	ldr	r6, [sp, #8]
 800e69c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e6a0:	930a      	str	r3, [sp, #40]	; 0x28
 800e6a2:	ab98      	add	r3, sp, #608	; 0x260
 800e6a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e6a8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800e6ac:	ab70      	add	r3, sp, #448	; 0x1c0
 800e6ae:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800e6b2:	46d0      	mov	r8, sl
 800e6b4:	46b1      	mov	r9, r6
 800e6b6:	af0c      	add	r7, sp, #48	; 0x30
 800e6b8:	9700      	str	r7, [sp, #0]
 800e6ba:	f1b9 0f00 	cmp.w	r9, #0
 800e6be:	f1a8 0808 	sub.w	r8, r8, #8
 800e6c2:	dc70      	bgt.n	800e7a6 <__kernel_rem_pio2+0x1f6>
 800e6c4:	465a      	mov	r2, fp
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	f000 fab1 	bl	800ec30 <scalbn>
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	460d      	mov	r5, r1
 800e6d8:	f7f1 fef6 	bl	80004c8 <__aeabi_dmul>
 800e6dc:	f000 fb24 	bl	800ed28 <floor>
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	4b6e      	ldr	r3, [pc, #440]	; (800e89c <__kernel_rem_pio2+0x2ec>)
 800e6e4:	f7f1 fef0 	bl	80004c8 <__aeabi_dmul>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7f1 fd32 	bl	8000158 <__aeabi_dsub>
 800e6f4:	460d      	mov	r5, r1
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	f7f2 f980 	bl	80009fc <__aeabi_d2iz>
 800e6fc:	9004      	str	r0, [sp, #16]
 800e6fe:	f7f1 fe79 	bl	80003f4 <__aeabi_i2d>
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	4620      	mov	r0, r4
 800e708:	4629      	mov	r1, r5
 800e70a:	f7f1 fd25 	bl	8000158 <__aeabi_dsub>
 800e70e:	f1bb 0f00 	cmp.w	fp, #0
 800e712:	4680      	mov	r8, r0
 800e714:	4689      	mov	r9, r1
 800e716:	dd6f      	ble.n	800e7f8 <__kernel_rem_pio2+0x248>
 800e718:	1e71      	subs	r1, r6, #1
 800e71a:	ab0c      	add	r3, sp, #48	; 0x30
 800e71c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e720:	9c04      	ldr	r4, [sp, #16]
 800e722:	f1cb 0018 	rsb	r0, fp, #24
 800e726:	fa43 f200 	asr.w	r2, r3, r0
 800e72a:	4414      	add	r4, r2
 800e72c:	4082      	lsls	r2, r0
 800e72e:	1a9b      	subs	r3, r3, r2
 800e730:	aa0c      	add	r2, sp, #48	; 0x30
 800e732:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e736:	f1cb 0217 	rsb	r2, fp, #23
 800e73a:	9404      	str	r4, [sp, #16]
 800e73c:	4113      	asrs	r3, r2
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	9b00      	ldr	r3, [sp, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	dd66      	ble.n	800e814 <__kernel_rem_pio2+0x264>
 800e746:	2200      	movs	r2, #0
 800e748:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e74c:	4614      	mov	r4, r2
 800e74e:	9b04      	ldr	r3, [sp, #16]
 800e750:	3301      	adds	r3, #1
 800e752:	9304      	str	r3, [sp, #16]
 800e754:	4296      	cmp	r6, r2
 800e756:	f300 80ad 	bgt.w	800e8b4 <__kernel_rem_pio2+0x304>
 800e75a:	f1bb 0f00 	cmp.w	fp, #0
 800e75e:	dd07      	ble.n	800e770 <__kernel_rem_pio2+0x1c0>
 800e760:	f1bb 0f01 	cmp.w	fp, #1
 800e764:	f000 80b5 	beq.w	800e8d2 <__kernel_rem_pio2+0x322>
 800e768:	f1bb 0f02 	cmp.w	fp, #2
 800e76c:	f000 80bb 	beq.w	800e8e6 <__kernel_rem_pio2+0x336>
 800e770:	9b00      	ldr	r3, [sp, #0]
 800e772:	2b02      	cmp	r3, #2
 800e774:	d14e      	bne.n	800e814 <__kernel_rem_pio2+0x264>
 800e776:	4642      	mov	r2, r8
 800e778:	464b      	mov	r3, r9
 800e77a:	2000      	movs	r0, #0
 800e77c:	4948      	ldr	r1, [pc, #288]	; (800e8a0 <__kernel_rem_pio2+0x2f0>)
 800e77e:	f7f1 fceb 	bl	8000158 <__aeabi_dsub>
 800e782:	4680      	mov	r8, r0
 800e784:	4689      	mov	r9, r1
 800e786:	2c00      	cmp	r4, #0
 800e788:	d044      	beq.n	800e814 <__kernel_rem_pio2+0x264>
 800e78a:	465a      	mov	r2, fp
 800e78c:	2000      	movs	r0, #0
 800e78e:	4944      	ldr	r1, [pc, #272]	; (800e8a0 <__kernel_rem_pio2+0x2f0>)
 800e790:	f000 fa4e 	bl	800ec30 <scalbn>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4640      	mov	r0, r8
 800e79a:	4649      	mov	r1, r9
 800e79c:	f7f1 fcdc 	bl	8000158 <__aeabi_dsub>
 800e7a0:	4680      	mov	r8, r0
 800e7a2:	4689      	mov	r9, r1
 800e7a4:	e036      	b.n	800e814 <__kernel_rem_pio2+0x264>
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	4b3e      	ldr	r3, [pc, #248]	; (800e8a4 <__kernel_rem_pio2+0x2f4>)
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	f7f1 fe8b 	bl	80004c8 <__aeabi_dmul>
 800e7b2:	f7f2 f923 	bl	80009fc <__aeabi_d2iz>
 800e7b6:	f7f1 fe1d 	bl	80003f4 <__aeabi_i2d>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	4b38      	ldr	r3, [pc, #224]	; (800e8a8 <__kernel_rem_pio2+0x2f8>)
 800e7c6:	f7f1 fe7f 	bl	80004c8 <__aeabi_dmul>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	f7f1 fcc1 	bl	8000158 <__aeabi_dsub>
 800e7d6:	f7f2 f911 	bl	80009fc <__aeabi_d2iz>
 800e7da:	9b00      	ldr	r3, [sp, #0]
 800e7dc:	f109 39ff 	add.w	r9, r9, #4294967295
 800e7e0:	f843 0b04 	str.w	r0, [r3], #4
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e7ee:	f7f1 fcb5 	bl	800015c <__adddf3>
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	460d      	mov	r5, r1
 800e7f6:	e760      	b.n	800e6ba <__kernel_rem_pio2+0x10a>
 800e7f8:	d105      	bne.n	800e806 <__kernel_rem_pio2+0x256>
 800e7fa:	1e73      	subs	r3, r6, #1
 800e7fc:	aa0c      	add	r2, sp, #48	; 0x30
 800e7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e802:	15db      	asrs	r3, r3, #23
 800e804:	e79b      	b.n	800e73e <__kernel_rem_pio2+0x18e>
 800e806:	2200      	movs	r2, #0
 800e808:	4b28      	ldr	r3, [pc, #160]	; (800e8ac <__kernel_rem_pio2+0x2fc>)
 800e80a:	f7f2 f8e3 	bl	80009d4 <__aeabi_dcmpge>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d13e      	bne.n	800e890 <__kernel_rem_pio2+0x2e0>
 800e812:	9000      	str	r0, [sp, #0]
 800e814:	2200      	movs	r2, #0
 800e816:	2300      	movs	r3, #0
 800e818:	4640      	mov	r0, r8
 800e81a:	4649      	mov	r1, r9
 800e81c:	f7f2 f8bc 	bl	8000998 <__aeabi_dcmpeq>
 800e820:	2800      	cmp	r0, #0
 800e822:	f000 80b2 	beq.w	800e98a <__kernel_rem_pio2+0x3da>
 800e826:	1e74      	subs	r4, r6, #1
 800e828:	4623      	mov	r3, r4
 800e82a:	2200      	movs	r2, #0
 800e82c:	9902      	ldr	r1, [sp, #8]
 800e82e:	428b      	cmp	r3, r1
 800e830:	da60      	bge.n	800e8f4 <__kernel_rem_pio2+0x344>
 800e832:	2a00      	cmp	r2, #0
 800e834:	d075      	beq.n	800e922 <__kernel_rem_pio2+0x372>
 800e836:	ab0c      	add	r3, sp, #48	; 0x30
 800e838:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e83c:	f1ab 0b18 	sub.w	fp, fp, #24
 800e840:	2b00      	cmp	r3, #0
 800e842:	f000 80a0 	beq.w	800e986 <__kernel_rem_pio2+0x3d6>
 800e846:	465a      	mov	r2, fp
 800e848:	2000      	movs	r0, #0
 800e84a:	4915      	ldr	r1, [pc, #84]	; (800e8a0 <__kernel_rem_pio2+0x2f0>)
 800e84c:	f000 f9f0 	bl	800ec30 <scalbn>
 800e850:	46a2      	mov	sl, r4
 800e852:	4606      	mov	r6, r0
 800e854:	460f      	mov	r7, r1
 800e856:	f04f 0800 	mov.w	r8, #0
 800e85a:	ab70      	add	r3, sp, #448	; 0x1c0
 800e85c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800e8a4 <__kernel_rem_pio2+0x2f4>
 800e860:	00e5      	lsls	r5, r4, #3
 800e862:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800e866:	f1ba 0f00 	cmp.w	sl, #0
 800e86a:	f280 80c4 	bge.w	800e9f6 <__kernel_rem_pio2+0x446>
 800e86e:	4626      	mov	r6, r4
 800e870:	2e00      	cmp	r6, #0
 800e872:	f2c0 80f6 	blt.w	800ea62 <__kernel_rem_pio2+0x4b2>
 800e876:	4b0e      	ldr	r3, [pc, #56]	; (800e8b0 <__kernel_rem_pio2+0x300>)
 800e878:	f04f 0a00 	mov.w	sl, #0
 800e87c:	9307      	str	r3, [sp, #28]
 800e87e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e880:	f04f 0b00 	mov.w	fp, #0
 800e884:	f04f 0800 	mov.w	r8, #0
 800e888:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e88c:	1ba7      	subs	r7, r4, r6
 800e88e:	e0dc      	b.n	800ea4a <__kernel_rem_pio2+0x49a>
 800e890:	2302      	movs	r3, #2
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	e757      	b.n	800e746 <__kernel_rem_pio2+0x196>
 800e896:	bf00      	nop
 800e898:	0800f048 	.word	0x0800f048
 800e89c:	40200000 	.word	0x40200000
 800e8a0:	3ff00000 	.word	0x3ff00000
 800e8a4:	3e700000 	.word	0x3e700000
 800e8a8:	41700000 	.word	0x41700000
 800e8ac:	3fe00000 	.word	0x3fe00000
 800e8b0:	0800f008 	.word	0x0800f008
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	b944      	cbnz	r4, 800e8ca <__kernel_rem_pio2+0x31a>
 800e8b8:	b11b      	cbz	r3, 800e8c2 <__kernel_rem_pio2+0x312>
 800e8ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	461c      	mov	r4, r3
 800e8c4:	3201      	adds	r2, #1
 800e8c6:	3704      	adds	r7, #4
 800e8c8:	e744      	b.n	800e754 <__kernel_rem_pio2+0x1a4>
 800e8ca:	1acb      	subs	r3, r1, r3
 800e8cc:	603b      	str	r3, [r7, #0]
 800e8ce:	4623      	mov	r3, r4
 800e8d0:	e7f7      	b.n	800e8c2 <__kernel_rem_pio2+0x312>
 800e8d2:	1e72      	subs	r2, r6, #1
 800e8d4:	ab0c      	add	r3, sp, #48	; 0x30
 800e8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e8de:	a90c      	add	r1, sp, #48	; 0x30
 800e8e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e8e4:	e744      	b.n	800e770 <__kernel_rem_pio2+0x1c0>
 800e8e6:	1e72      	subs	r2, r6, #1
 800e8e8:	ab0c      	add	r3, sp, #48	; 0x30
 800e8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e8f2:	e7f4      	b.n	800e8de <__kernel_rem_pio2+0x32e>
 800e8f4:	a90c      	add	r1, sp, #48	; 0x30
 800e8f6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	e795      	b.n	800e82c <__kernel_rem_pio2+0x27c>
 800e900:	3301      	adds	r3, #1
 800e902:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e906:	2900      	cmp	r1, #0
 800e908:	d0fa      	beq.n	800e900 <__kernel_rem_pio2+0x350>
 800e90a:	9a08      	ldr	r2, [sp, #32]
 800e90c:	a920      	add	r1, sp, #128	; 0x80
 800e90e:	18b2      	adds	r2, r6, r2
 800e910:	f106 0801 	add.w	r8, r6, #1
 800e914:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e918:	18f4      	adds	r4, r6, r3
 800e91a:	4544      	cmp	r4, r8
 800e91c:	da04      	bge.n	800e928 <__kernel_rem_pio2+0x378>
 800e91e:	4626      	mov	r6, r4
 800e920:	e6bf      	b.n	800e6a2 <__kernel_rem_pio2+0xf2>
 800e922:	2301      	movs	r3, #1
 800e924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e926:	e7ec      	b.n	800e902 <__kernel_rem_pio2+0x352>
 800e928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e92a:	f04f 0900 	mov.w	r9, #0
 800e92e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e932:	f7f1 fd5f 	bl	80003f4 <__aeabi_i2d>
 800e936:	2600      	movs	r6, #0
 800e938:	2700      	movs	r7, #0
 800e93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e93c:	e9c5 0100 	strd	r0, r1, [r5]
 800e940:	3b08      	subs	r3, #8
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	9504      	str	r5, [sp, #16]
 800e946:	9b07      	ldr	r3, [sp, #28]
 800e948:	4599      	cmp	r9, r3
 800e94a:	dd05      	ble.n	800e958 <__kernel_rem_pio2+0x3a8>
 800e94c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800e950:	f108 0801 	add.w	r8, r8, #1
 800e954:	3508      	adds	r5, #8
 800e956:	e7e0      	b.n	800e91a <__kernel_rem_pio2+0x36a>
 800e958:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e95c:	9900      	ldr	r1, [sp, #0]
 800e95e:	f109 0901 	add.w	r9, r9, #1
 800e962:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800e966:	9100      	str	r1, [sp, #0]
 800e968:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800e96c:	f8cd c010 	str.w	ip, [sp, #16]
 800e970:	f7f1 fdaa 	bl	80004c8 <__aeabi_dmul>
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4630      	mov	r0, r6
 800e97a:	4639      	mov	r1, r7
 800e97c:	f7f1 fbee 	bl	800015c <__adddf3>
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	e7df      	b.n	800e946 <__kernel_rem_pio2+0x396>
 800e986:	3c01      	subs	r4, #1
 800e988:	e755      	b.n	800e836 <__kernel_rem_pio2+0x286>
 800e98a:	f1cb 0200 	rsb	r2, fp, #0
 800e98e:	4640      	mov	r0, r8
 800e990:	4649      	mov	r1, r9
 800e992:	f000 f94d 	bl	800ec30 <scalbn>
 800e996:	2200      	movs	r2, #0
 800e998:	4ba3      	ldr	r3, [pc, #652]	; (800ec28 <__kernel_rem_pio2+0x678>)
 800e99a:	4604      	mov	r4, r0
 800e99c:	460d      	mov	r5, r1
 800e99e:	f7f2 f819 	bl	80009d4 <__aeabi_dcmpge>
 800e9a2:	b1f8      	cbz	r0, 800e9e4 <__kernel_rem_pio2+0x434>
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	4ba1      	ldr	r3, [pc, #644]	; (800ec2c <__kernel_rem_pio2+0x67c>)
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	f7f1 fd8c 	bl	80004c8 <__aeabi_dmul>
 800e9b0:	f7f2 f824 	bl	80009fc <__aeabi_d2iz>
 800e9b4:	4607      	mov	r7, r0
 800e9b6:	f7f1 fd1d 	bl	80003f4 <__aeabi_i2d>
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	4b9a      	ldr	r3, [pc, #616]	; (800ec28 <__kernel_rem_pio2+0x678>)
 800e9be:	f7f1 fd83 	bl	80004c8 <__aeabi_dmul>
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	4629      	mov	r1, r5
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f7f1 fbc5 	bl	8000158 <__aeabi_dsub>
 800e9ce:	f7f2 f815 	bl	80009fc <__aeabi_d2iz>
 800e9d2:	1c74      	adds	r4, r6, #1
 800e9d4:	ab0c      	add	r3, sp, #48	; 0x30
 800e9d6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800e9da:	f10b 0b18 	add.w	fp, fp, #24
 800e9de:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800e9e2:	e730      	b.n	800e846 <__kernel_rem_pio2+0x296>
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	f7f2 f808 	bl	80009fc <__aeabi_d2iz>
 800e9ec:	ab0c      	add	r3, sp, #48	; 0x30
 800e9ee:	4634      	mov	r4, r6
 800e9f0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800e9f4:	e727      	b.n	800e846 <__kernel_rem_pio2+0x296>
 800e9f6:	ab0c      	add	r3, sp, #48	; 0x30
 800e9f8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e9fc:	f7f1 fcfa 	bl	80003f4 <__aeabi_i2d>
 800ea00:	4632      	mov	r2, r6
 800ea02:	463b      	mov	r3, r7
 800ea04:	f7f1 fd60 	bl	80004c8 <__aeabi_dmul>
 800ea08:	4642      	mov	r2, r8
 800ea0a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800ea0e:	464b      	mov	r3, r9
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f1 fd58 	bl	80004c8 <__aeabi_dmul>
 800ea18:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea1c:	4606      	mov	r6, r0
 800ea1e:	460f      	mov	r7, r1
 800ea20:	e721      	b.n	800e866 <__kernel_rem_pio2+0x2b6>
 800ea22:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ea26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ea2a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800ea2e:	f8cd c01c 	str.w	ip, [sp, #28]
 800ea32:	f7f1 fd49 	bl	80004c8 <__aeabi_dmul>
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	4650      	mov	r0, sl
 800ea3c:	4659      	mov	r1, fp
 800ea3e:	f7f1 fb8d 	bl	800015c <__adddf3>
 800ea42:	4682      	mov	sl, r0
 800ea44:	468b      	mov	fp, r1
 800ea46:	f108 0801 	add.w	r8, r8, #1
 800ea4a:	9b02      	ldr	r3, [sp, #8]
 800ea4c:	4598      	cmp	r8, r3
 800ea4e:	dc01      	bgt.n	800ea54 <__kernel_rem_pio2+0x4a4>
 800ea50:	45b8      	cmp	r8, r7
 800ea52:	dde6      	ble.n	800ea22 <__kernel_rem_pio2+0x472>
 800ea54:	ab48      	add	r3, sp, #288	; 0x120
 800ea56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ea5a:	e9c7 ab00 	strd	sl, fp, [r7]
 800ea5e:	3e01      	subs	r6, #1
 800ea60:	e706      	b.n	800e870 <__kernel_rem_pio2+0x2c0>
 800ea62:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	dc09      	bgt.n	800ea7c <__kernel_rem_pio2+0x4cc>
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	dc32      	bgt.n	800ead2 <__kernel_rem_pio2+0x522>
 800ea6c:	d058      	beq.n	800eb20 <__kernel_rem_pio2+0x570>
 800ea6e:	9b04      	ldr	r3, [sp, #16]
 800ea70:	f003 0007 	and.w	r0, r3, #7
 800ea74:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ea78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ea7e:	2b03      	cmp	r3, #3
 800ea80:	d1f5      	bne.n	800ea6e <__kernel_rem_pio2+0x4be>
 800ea82:	ab48      	add	r3, sp, #288	; 0x120
 800ea84:	441d      	add	r5, r3
 800ea86:	46aa      	mov	sl, r5
 800ea88:	46a3      	mov	fp, r4
 800ea8a:	f1bb 0f00 	cmp.w	fp, #0
 800ea8e:	dc74      	bgt.n	800eb7a <__kernel_rem_pio2+0x5ca>
 800ea90:	46aa      	mov	sl, r5
 800ea92:	46a3      	mov	fp, r4
 800ea94:	f1bb 0f01 	cmp.w	fp, #1
 800ea98:	f300 808e 	bgt.w	800ebb8 <__kernel_rem_pio2+0x608>
 800ea9c:	2700      	movs	r7, #0
 800ea9e:	463e      	mov	r6, r7
 800eaa0:	2c01      	cmp	r4, #1
 800eaa2:	f300 80a8 	bgt.w	800ebf6 <__kernel_rem_pio2+0x646>
 800eaa6:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800eaaa:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800eaae:	9b00      	ldr	r3, [sp, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f040 80aa 	bne.w	800ec0a <__kernel_rem_pio2+0x65a>
 800eab6:	4603      	mov	r3, r0
 800eab8:	462a      	mov	r2, r5
 800eaba:	9806      	ldr	r0, [sp, #24]
 800eabc:	e9c0 2300 	strd	r2, r3, [r0]
 800eac0:	4622      	mov	r2, r4
 800eac2:	460b      	mov	r3, r1
 800eac4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eac8:	463a      	mov	r2, r7
 800eaca:	4633      	mov	r3, r6
 800eacc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ead0:	e7cd      	b.n	800ea6e <__kernel_rem_pio2+0x4be>
 800ead2:	2000      	movs	r0, #0
 800ead4:	46a0      	mov	r8, r4
 800ead6:	4601      	mov	r1, r0
 800ead8:	ab48      	add	r3, sp, #288	; 0x120
 800eada:	441d      	add	r5, r3
 800eadc:	f1b8 0f00 	cmp.w	r8, #0
 800eae0:	da38      	bge.n	800eb54 <__kernel_rem_pio2+0x5a4>
 800eae2:	9b00      	ldr	r3, [sp, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d03c      	beq.n	800eb62 <__kernel_rem_pio2+0x5b2>
 800eae8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800eaec:	4602      	mov	r2, r0
 800eaee:	462b      	mov	r3, r5
 800eaf0:	9d06      	ldr	r5, [sp, #24]
 800eaf2:	2601      	movs	r6, #1
 800eaf4:	e9c5 2300 	strd	r2, r3, [r5]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800eafe:	f7f1 fb2b 	bl	8000158 <__aeabi_dsub>
 800eb02:	4684      	mov	ip, r0
 800eb04:	460f      	mov	r7, r1
 800eb06:	ad48      	add	r5, sp, #288	; 0x120
 800eb08:	42b4      	cmp	r4, r6
 800eb0a:	da2c      	bge.n	800eb66 <__kernel_rem_pio2+0x5b6>
 800eb0c:	9b00      	ldr	r3, [sp, #0]
 800eb0e:	b10b      	cbz	r3, 800eb14 <__kernel_rem_pio2+0x564>
 800eb10:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800eb14:	4662      	mov	r2, ip
 800eb16:	463b      	mov	r3, r7
 800eb18:	9906      	ldr	r1, [sp, #24]
 800eb1a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800eb1e:	e7a6      	b.n	800ea6e <__kernel_rem_pio2+0x4be>
 800eb20:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800eb22:	ab48      	add	r3, sp, #288	; 0x120
 800eb24:	4637      	mov	r7, r6
 800eb26:	441d      	add	r5, r3
 800eb28:	2c00      	cmp	r4, #0
 800eb2a:	da09      	bge.n	800eb40 <__kernel_rem_pio2+0x590>
 800eb2c:	9b00      	ldr	r3, [sp, #0]
 800eb2e:	b10b      	cbz	r3, 800eb34 <__kernel_rem_pio2+0x584>
 800eb30:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800eb34:	4632      	mov	r2, r6
 800eb36:	463b      	mov	r3, r7
 800eb38:	9906      	ldr	r1, [sp, #24]
 800eb3a:	e9c1 2300 	strd	r2, r3, [r1]
 800eb3e:	e796      	b.n	800ea6e <__kernel_rem_pio2+0x4be>
 800eb40:	4630      	mov	r0, r6
 800eb42:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800eb46:	4639      	mov	r1, r7
 800eb48:	f7f1 fb08 	bl	800015c <__adddf3>
 800eb4c:	3c01      	subs	r4, #1
 800eb4e:	4606      	mov	r6, r0
 800eb50:	460f      	mov	r7, r1
 800eb52:	e7e9      	b.n	800eb28 <__kernel_rem_pio2+0x578>
 800eb54:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800eb58:	f7f1 fb00 	bl	800015c <__adddf3>
 800eb5c:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb60:	e7bc      	b.n	800eadc <__kernel_rem_pio2+0x52c>
 800eb62:	460d      	mov	r5, r1
 800eb64:	e7c2      	b.n	800eaec <__kernel_rem_pio2+0x53c>
 800eb66:	4660      	mov	r0, ip
 800eb68:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	f7f1 faf5 	bl	800015c <__adddf3>
 800eb72:	3601      	adds	r6, #1
 800eb74:	4684      	mov	ip, r0
 800eb76:	460f      	mov	r7, r1
 800eb78:	e7c6      	b.n	800eb08 <__kernel_rem_pio2+0x558>
 800eb7a:	e9da 6700 	ldrd	r6, r7, [sl]
 800eb7e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800eb82:	4632      	mov	r2, r6
 800eb84:	463b      	mov	r3, r7
 800eb86:	4640      	mov	r0, r8
 800eb88:	4649      	mov	r1, r9
 800eb8a:	f7f1 fae7 	bl	800015c <__adddf3>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb96:	4640      	mov	r0, r8
 800eb98:	4649      	mov	r1, r9
 800eb9a:	f7f1 fadd 	bl	8000158 <__aeabi_dsub>
 800eb9e:	4632      	mov	r2, r6
 800eba0:	463b      	mov	r3, r7
 800eba2:	f7f1 fadb 	bl	800015c <__adddf3>
 800eba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebaa:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ebae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebb2:	e9ca 2300 	strd	r2, r3, [sl]
 800ebb6:	e768      	b.n	800ea8a <__kernel_rem_pio2+0x4da>
 800ebb8:	e9da 8900 	ldrd	r8, r9, [sl]
 800ebbc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ebc0:	4642      	mov	r2, r8
 800ebc2:	464b      	mov	r3, r9
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	4639      	mov	r1, r7
 800ebc8:	f7f1 fac8 	bl	800015c <__adddf3>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebd4:	4630      	mov	r0, r6
 800ebd6:	4639      	mov	r1, r7
 800ebd8:	f7f1 fabe 	bl	8000158 <__aeabi_dsub>
 800ebdc:	4642      	mov	r2, r8
 800ebde:	464b      	mov	r3, r9
 800ebe0:	f7f1 fabc 	bl	800015c <__adddf3>
 800ebe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebe8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ebec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebf0:	e9ca 2300 	strd	r2, r3, [sl]
 800ebf4:	e74e      	b.n	800ea94 <__kernel_rem_pio2+0x4e4>
 800ebf6:	4638      	mov	r0, r7
 800ebf8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ebfc:	4631      	mov	r1, r6
 800ebfe:	f7f1 faad 	bl	800015c <__adddf3>
 800ec02:	3c01      	subs	r4, #1
 800ec04:	4607      	mov	r7, r0
 800ec06:	460e      	mov	r6, r1
 800ec08:	e74a      	b.n	800eaa0 <__kernel_rem_pio2+0x4f0>
 800ec0a:	9b06      	ldr	r3, [sp, #24]
 800ec0c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ec10:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ec14:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ec18:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ec1c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ec20:	601d      	str	r5, [r3, #0]
 800ec22:	615e      	str	r6, [r3, #20]
 800ec24:	e723      	b.n	800ea6e <__kernel_rem_pio2+0x4be>
 800ec26:	bf00      	nop
 800ec28:	41700000 	.word	0x41700000
 800ec2c:	3e700000 	.word	0x3e700000

0800ec30 <scalbn>:
 800ec30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec32:	4616      	mov	r6, r2
 800ec34:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ec38:	4604      	mov	r4, r0
 800ec3a:	460d      	mov	r5, r1
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	b992      	cbnz	r2, 800ec66 <scalbn+0x36>
 800ec40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec44:	4303      	orrs	r3, r0
 800ec46:	d03c      	beq.n	800ecc2 <scalbn+0x92>
 800ec48:	4b31      	ldr	r3, [pc, #196]	; (800ed10 <scalbn+0xe0>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f7f1 fc3c 	bl	80004c8 <__aeabi_dmul>
 800ec50:	4b30      	ldr	r3, [pc, #192]	; (800ed14 <scalbn+0xe4>)
 800ec52:	4604      	mov	r4, r0
 800ec54:	429e      	cmp	r6, r3
 800ec56:	460d      	mov	r5, r1
 800ec58:	da0f      	bge.n	800ec7a <scalbn+0x4a>
 800ec5a:	a329      	add	r3, pc, #164	; (adr r3, 800ed00 <scalbn+0xd0>)
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	f7f1 fc32 	bl	80004c8 <__aeabi_dmul>
 800ec64:	e006      	b.n	800ec74 <scalbn+0x44>
 800ec66:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ec6a:	42ba      	cmp	r2, r7
 800ec6c:	d109      	bne.n	800ec82 <scalbn+0x52>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	f7f1 fa74 	bl	800015c <__adddf3>
 800ec74:	4604      	mov	r4, r0
 800ec76:	460d      	mov	r5, r1
 800ec78:	e023      	b.n	800ecc2 <scalbn+0x92>
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ec80:	3a36      	subs	r2, #54	; 0x36
 800ec82:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ec86:	428e      	cmp	r6, r1
 800ec88:	dd0e      	ble.n	800eca8 <scalbn+0x78>
 800ec8a:	a31f      	add	r3, pc, #124	; (adr r3, 800ed08 <scalbn+0xd8>)
 800ec8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec90:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ec94:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ec98:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ec9c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800eca0:	481d      	ldr	r0, [pc, #116]	; (800ed18 <scalbn+0xe8>)
 800eca2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800eca6:	e7db      	b.n	800ec60 <scalbn+0x30>
 800eca8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ecac:	4432      	add	r2, r6
 800ecae:	428a      	cmp	r2, r1
 800ecb0:	dceb      	bgt.n	800ec8a <scalbn+0x5a>
 800ecb2:	2a00      	cmp	r2, #0
 800ecb4:	dd08      	ble.n	800ecc8 <scalbn+0x98>
 800ecb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ecba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ecbe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecc8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eccc:	da0c      	bge.n	800ece8 <scalbn+0xb8>
 800ecce:	a30c      	add	r3, pc, #48	; (adr r3, 800ed00 <scalbn+0xd0>)
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ecd8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ecdc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ece0:	480e      	ldr	r0, [pc, #56]	; (800ed1c <scalbn+0xec>)
 800ece2:	f041 011f 	orr.w	r1, r1, #31
 800ece6:	e7bb      	b.n	800ec60 <scalbn+0x30>
 800ece8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ecec:	3236      	adds	r2, #54	; 0x36
 800ecee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ecf2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	4b08      	ldr	r3, [pc, #32]	; (800ed20 <scalbn+0xf0>)
 800ecfe:	e7af      	b.n	800ec60 <scalbn+0x30>
 800ed00:	c2f8f359 	.word	0xc2f8f359
 800ed04:	01a56e1f 	.word	0x01a56e1f
 800ed08:	8800759c 	.word	0x8800759c
 800ed0c:	7e37e43c 	.word	0x7e37e43c
 800ed10:	43500000 	.word	0x43500000
 800ed14:	ffff3cb0 	.word	0xffff3cb0
 800ed18:	8800759c 	.word	0x8800759c
 800ed1c:	c2f8f359 	.word	0xc2f8f359
 800ed20:	3c900000 	.word	0x3c900000
 800ed24:	00000000 	.word	0x00000000

0800ed28 <floor>:
 800ed28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ed2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed30:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ed34:	2e13      	cmp	r6, #19
 800ed36:	460b      	mov	r3, r1
 800ed38:	4607      	mov	r7, r0
 800ed3a:	460c      	mov	r4, r1
 800ed3c:	4605      	mov	r5, r0
 800ed3e:	dc32      	bgt.n	800eda6 <floor+0x7e>
 800ed40:	2e00      	cmp	r6, #0
 800ed42:	da14      	bge.n	800ed6e <floor+0x46>
 800ed44:	a334      	add	r3, pc, #208	; (adr r3, 800ee18 <floor+0xf0>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	f7f1 fa07 	bl	800015c <__adddf3>
 800ed4e:	2200      	movs	r2, #0
 800ed50:	2300      	movs	r3, #0
 800ed52:	f7f1 fe49 	bl	80009e8 <__aeabi_dcmpgt>
 800ed56:	b138      	cbz	r0, 800ed68 <floor+0x40>
 800ed58:	2c00      	cmp	r4, #0
 800ed5a:	da56      	bge.n	800ee0a <floor+0xe2>
 800ed5c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ed60:	4325      	orrs	r5, r4
 800ed62:	d055      	beq.n	800ee10 <floor+0xe8>
 800ed64:	2500      	movs	r5, #0
 800ed66:	4c2e      	ldr	r4, [pc, #184]	; (800ee20 <floor+0xf8>)
 800ed68:	4623      	mov	r3, r4
 800ed6a:	462f      	mov	r7, r5
 800ed6c:	e025      	b.n	800edba <floor+0x92>
 800ed6e:	4a2d      	ldr	r2, [pc, #180]	; (800ee24 <floor+0xfc>)
 800ed70:	fa42 f806 	asr.w	r8, r2, r6
 800ed74:	ea01 0208 	and.w	r2, r1, r8
 800ed78:	4302      	orrs	r2, r0
 800ed7a:	d01e      	beq.n	800edba <floor+0x92>
 800ed7c:	a326      	add	r3, pc, #152	; (adr r3, 800ee18 <floor+0xf0>)
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	f7f1 f9eb 	bl	800015c <__adddf3>
 800ed86:	2200      	movs	r2, #0
 800ed88:	2300      	movs	r3, #0
 800ed8a:	f7f1 fe2d 	bl	80009e8 <__aeabi_dcmpgt>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	d0ea      	beq.n	800ed68 <floor+0x40>
 800ed92:	2c00      	cmp	r4, #0
 800ed94:	bfbe      	ittt	lt
 800ed96:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ed9a:	4133      	asrlt	r3, r6
 800ed9c:	18e4      	addlt	r4, r4, r3
 800ed9e:	2500      	movs	r5, #0
 800eda0:	ea24 0408 	bic.w	r4, r4, r8
 800eda4:	e7e0      	b.n	800ed68 <floor+0x40>
 800eda6:	2e33      	cmp	r6, #51	; 0x33
 800eda8:	dd0b      	ble.n	800edc2 <floor+0x9a>
 800edaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800edae:	d104      	bne.n	800edba <floor+0x92>
 800edb0:	4602      	mov	r2, r0
 800edb2:	f7f1 f9d3 	bl	800015c <__adddf3>
 800edb6:	4607      	mov	r7, r0
 800edb8:	460b      	mov	r3, r1
 800edba:	4638      	mov	r0, r7
 800edbc:	4619      	mov	r1, r3
 800edbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edc2:	f04f 38ff 	mov.w	r8, #4294967295
 800edc6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800edca:	fa28 f802 	lsr.w	r8, r8, r2
 800edce:	ea10 0f08 	tst.w	r0, r8
 800edd2:	d0f2      	beq.n	800edba <floor+0x92>
 800edd4:	a310      	add	r3, pc, #64	; (adr r3, 800ee18 <floor+0xf0>)
 800edd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edda:	f7f1 f9bf 	bl	800015c <__adddf3>
 800edde:	2200      	movs	r2, #0
 800ede0:	2300      	movs	r3, #0
 800ede2:	f7f1 fe01 	bl	80009e8 <__aeabi_dcmpgt>
 800ede6:	2800      	cmp	r0, #0
 800ede8:	d0be      	beq.n	800ed68 <floor+0x40>
 800edea:	2c00      	cmp	r4, #0
 800edec:	da0a      	bge.n	800ee04 <floor+0xdc>
 800edee:	2e14      	cmp	r6, #20
 800edf0:	d101      	bne.n	800edf6 <floor+0xce>
 800edf2:	3401      	adds	r4, #1
 800edf4:	e006      	b.n	800ee04 <floor+0xdc>
 800edf6:	2301      	movs	r3, #1
 800edf8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800edfc:	40b3      	lsls	r3, r6
 800edfe:	441d      	add	r5, r3
 800ee00:	42af      	cmp	r7, r5
 800ee02:	d8f6      	bhi.n	800edf2 <floor+0xca>
 800ee04:	ea25 0508 	bic.w	r5, r5, r8
 800ee08:	e7ae      	b.n	800ed68 <floor+0x40>
 800ee0a:	2500      	movs	r5, #0
 800ee0c:	462c      	mov	r4, r5
 800ee0e:	e7ab      	b.n	800ed68 <floor+0x40>
 800ee10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ee14:	e7a8      	b.n	800ed68 <floor+0x40>
 800ee16:	bf00      	nop
 800ee18:	8800759c 	.word	0x8800759c
 800ee1c:	7e37e43c 	.word	0x7e37e43c
 800ee20:	bff00000 	.word	0xbff00000
 800ee24:	000fffff 	.word	0x000fffff

0800ee28 <_init>:
 800ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2a:	bf00      	nop
 800ee2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee2e:	bc08      	pop	{r3}
 800ee30:	469e      	mov	lr, r3
 800ee32:	4770      	bx	lr

0800ee34 <_fini>:
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	bf00      	nop
 800ee38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee3a:	bc08      	pop	{r3}
 800ee3c:	469e      	mov	lr, r3
 800ee3e:	4770      	bx	lr
