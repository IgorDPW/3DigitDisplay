
TMR_INTERRUPT_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c170  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800c280  0800c280  0001c280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c498  0800c498  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800c498  0800c498  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c498  0800c498  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c49c  0800c49c  0001c49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001824  20000180  0800c620  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019a4  0800c620  000219a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a45b  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca6  00000000  00000000  0002a647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008fc  00000000  00000000  0002ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020b2  00000000  00000000  0002d784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dacd  00000000  00000000  0002f836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d0dc  00000000  00000000  0003d303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033b8  00000000  00000000  000ca3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000cd798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c268 	.word	0x0800c268

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800c268 	.word	0x0800c268

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <ADC_Select_CH0>:
int32_t Sensor_Out;

int datasentflag = 0;


void ADC_Select_CH0 (void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	609a      	str	r2, [r3, #8]
//  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5e:	4905      	ldr	r1, [pc, #20]	; (8000d74 <ADC_Select_CH0+0x2c>)
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <ADC_Select_CH0+0x30>)
 8000d62:	f007 fb65 	bl	8008430 <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <ADC_Select_CH0+0x28>
  {
    Error_Handler();
 8000d6c:	f006 fe8c 	bl	8007a88 <Error_Handler>

  }
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000019c 	.word	0x2000019c
 8000d78:	200001a8 	.word	0x200001a8

08000d7c <ADC_Select_CH1>:

void ADC_Select_CH1 (void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	4905      	ldr	r1, [pc, #20]	; (8000da8 <ADC_Select_CH1+0x2c>)
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <ADC_Select_CH1+0x30>)
 8000d96:	f007 fb4b 	bl	8008430 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <ADC_Select_CH1+0x28>
  {
    Error_Handler();
 8000da0:	f006 fe72 	bl	8007a88 <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000019c 	.word	0x2000019c
 8000dac:	200001a8 	.word	0x200001a8

08000db0 <ADC_Select_CH9>:

void ADC_Select_CH9 (void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000db6:	2209      	movs	r2, #9
 8000db8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <ADC_Select_CH9+0x2c>)
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <ADC_Select_CH9+0x30>)
 8000dca:	f007 fb31 	bl	8008430 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <ADC_Select_CH9+0x28>
  {
    Error_Handler();
 8000dd4:	f006 fe58 	bl	8007a88 <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000019c 	.word	0x2000019c
 8000de0:	200001a8 	.word	0x200001a8

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f006 fffc 	bl	8007de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f854 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f000 fa30 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df4:	f000 fa10 	bl	8001218 <MX_DMA_Init>
  MX_TIM4_Init();
 8000df8:	f000 f9c0 	bl	800117c <MX_TIM4_Init>
  MX_TIM3_Init();
 8000dfc:	f000 f970 	bl	80010e0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e00:	f000 f8a6 	bl	8000f50 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e04:	f000 f8cc 	bl	8000fa0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim4);
 8000e08:	481d      	ldr	r0, [pc, #116]	; (8000e80 <main+0x9c>)
 8000e0a:	f008 ff9f 	bl	8009d4c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000e0e:	481d      	ldr	r0, [pc, #116]	; (8000e84 <main+0xa0>)
 8000e10:	f008 ff9c 	bl	8009d4c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	481b      	ldr	r0, [pc, #108]	; (8000e88 <main+0xa4>)
 8000e1c:	f008 f994 	bl	8009148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG2, 2);
 8000e20:	2202      	movs	r2, #2
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <main+0xa4>)
 8000e28:	f008 f98e 	bl	8009148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG3, 3);
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <main+0xa4>)
 8000e34:	f008 f988 	bl	8009148 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000e38:	4814      	ldr	r0, [pc, #80]	; (8000e8c <main+0xa8>)
 8000e3a:	f007 f90d 	bl	8008058 <HAL_ADC_Start>

	 WS2512_Send();
 8000e3e:	f006 fdb5 	bl	80079ac <WS2512_Send>

    /* USER CODE BEGIN 3 */



		ADC_Handler();						//realiza captação dos valores analógicos
 8000e42:	f000 faa3 	bl	800138c <ADC_Handler>

		Analog_Buffer();						//Buffer para estabilização dos sinais
 8000e46:	f006 fa37 	bl	80072b8 <Analog_Buffer>

		AnalogHandler();					//Conversão dos sinais
 8000e4a:	f000 fae1 	bl	8001410 <AnalogHandler>

		var = Value[2];						//variável utilizada para acionamento display
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <main+0xac>)
 8000e50:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <main+0xb0>)
 8000e56:	801a      	strh	r2, [r3, #0]
		DigitExtract(var);					//Atribuição dos valores usados nos 3 digitos 7 segmentos
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <main+0xb0>)
 8000e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 fafc 	bl	800745c <DigitExtract>

		ColorModeSelect();					//Identificação do Modo de atuação do SPEED
 8000e64:	f000 fb38 	bl	80014d8 <ColorModeSelect>

		var = Value[1];						//variável utilizada para acionamento dos LEDs
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <main+0xac>)
 8000e6a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <main+0xb0>)
 8000e70:	801a      	strh	r2, [r3, #0]

		//ApagaLeds();

		LEDHandler(var);					//Acionamento dos LEDs WS2812  utilizando o sinal do Speed
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <main+0xb0>)
 8000e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fc39 	bl	80016f0 <LEDHandler>
		ADC_Handler();						//realiza captação dos valores analógicos
 8000e7e:	e7e0      	b.n	8000e42 <main+0x5e>
 8000e80:	20000268 	.word	0x20000268
 8000e84:	20000220 	.word	0x20000220
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	200001a8 	.word	0x200001a8
 8000e90:	20000320 	.word	0x20000320
 8000e94:	20000318 	.word	0x20000318

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea2:	2228      	movs	r2, #40	; 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f00a f957 	bl	800b15a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ee4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f008 f974 	bl	80091dc <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000efa:	f006 fdc5 	bl	8007a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f008 fbe0 	bl	80096e0 <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f26:	f006 fdaf 	bl	8007a88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f008 fd4c 	bl	80099d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f42:	f006 fda1 	bl	8007a88 <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3750      	adds	r7, #80	; 0x50
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <MX_ADC1_Init+0x4c>)
 8000f58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f70:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0x48>)
 8000f84:	f006 ff90 	bl	8007ea8 <HAL_ADC_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8000f8e:	f006 fd7b 	bl	8007a88 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001a8 	.word	0x200001a8
 8000f9c:	40012400 	.word	0x40012400

08000fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b096      	sub	sp, #88	; 0x58
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00a f8be 	bl	800b15a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000fe0:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <MX_TIM1_Init+0x13c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000ff2:	2259      	movs	r2, #89	; 0x59
 8000ff4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_TIM1_Init+0x138>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001008:	4833      	ldr	r0, [pc, #204]	; (80010d8 <MX_TIM1_Init+0x138>)
 800100a:	f008 fe4f 	bl	8009cac <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001014:	f006 fd38 	bl	8007a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001022:	4619      	mov	r1, r3
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001026:	f009 fb6d 	bl	800a704 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001030:	f006 fd2a 	bl	8007a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001036:	f008 fedb 	bl	8009df0 <HAL_TIM_PWM_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001040:	f006 fd22 	bl	8007a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800104c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001050:	4619      	mov	r1, r3
 8001052:	4821      	ldr	r0, [pc, #132]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001054:	f009 ffc0 	bl	800afd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800105e:	f006 fd13 	bl	8007a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001062:	2360      	movs	r3, #96	; 0x60
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	4814      	ldr	r0, [pc, #80]	; (80010d8 <MX_TIM1_Init+0x138>)
 8001088:	f009 fa7a 	bl	800a580 <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001092:	f006 fcf9 	bl	8007a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <MX_TIM1_Init+0x138>)
 80010ba:	f009 ffeb 	bl	800b094 <HAL_TIMEx_ConfigBreakDeadTime>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80010c4:	f006 fce0 	bl	8007a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <MX_TIM1_Init+0x138>)
 80010ca:	f006 fddb 	bl	8007c84 <HAL_TIM_MspPostInit>

}
 80010ce:	bf00      	nop
 80010d0:	3758      	adds	r7, #88	; 0x58
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200001d8 	.word	0x200001d8
 80010dc:	40012c00 	.word	0x40012c00

080010e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_TIM3_Init+0x94>)
 80010fe:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <MX_TIM3_Init+0x98>)
 8001100:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_TIM3_Init+0x94>)
 8001104:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001108:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM3_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_TIM3_Init+0x94>)
 8001112:	2201      	movs	r2, #1
 8001114:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_TIM3_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM3_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <MX_TIM3_Init+0x94>)
 8001124:	f008 fdc2 	bl	8009cac <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800112e:	f006 fcab 	bl	8007a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_TIM3_Init+0x94>)
 8001140:	f009 fae0 	bl	800a704 <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800114a:	f006 fc9d 	bl	8007a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_TIM3_Init+0x94>)
 800115c:	f009 ff3c 	bl	800afd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001166:	f006 fc8f 	bl	8007a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000220 	.word	0x20000220
 8001178:	40000400 	.word	0x40000400

0800117c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_TIM4_Init+0x94>)
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <MX_TIM4_Init+0x98>)
 800119c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_TIM4_Init+0x94>)
 80011a0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80011a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_TIM4_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_TIM4_Init+0x94>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_TIM4_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_TIM4_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <MX_TIM4_Init+0x94>)
 80011c0:	f008 fd74 	bl	8009cac <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011ca:	f006 fc5d 	bl	8007a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_TIM4_Init+0x94>)
 80011dc:	f009 fa92 	bl	800a704 <HAL_TIM_ConfigClockSource>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011e6:	f006 fc4f 	bl	8007a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_TIM4_Init+0x94>)
 80011f8:	f009 feee 	bl	800afd8 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001202:	f006 fc41 	bl	8007a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000268 	.word	0x20000268
 8001214:	40000800 	.word	0x40000800

08001218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_DMA_Init+0x38>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <MX_DMA_Init+0x38>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_DMA_Init+0x38>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	200c      	movs	r0, #12
 800123c:	f007 fb63 	bl	8008906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001240:	200c      	movs	r0, #12
 8001242:	f007 fb7c 	bl	800893e <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <MX_GPIO_Init+0x124>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a42      	ldr	r2, [pc, #264]	; (8001378 <MX_GPIO_Init+0x124>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <MX_GPIO_Init+0x124>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001280:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <MX_GPIO_Init+0x124>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <MX_GPIO_Init+0x124>)
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <MX_GPIO_Init+0x124>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <MX_GPIO_Init+0x124>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a36      	ldr	r2, [pc, #216]	; (8001378 <MX_GPIO_Init+0x124>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MX_GPIO_Init+0x124>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <MX_GPIO_Init+0x124>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a30      	ldr	r2, [pc, #192]	; (8001378 <MX_GPIO_Init+0x124>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <MX_GPIO_Init+0x124>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80012ce:	482b      	ldr	r0, [pc, #172]	; (800137c <MX_GPIO_Init+0x128>)
 80012d0:	f007 ff3a 	bl	8009148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin|TRACK_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 80012da:	4829      	ldr	r0, [pc, #164]	; (8001380 <MX_GPIO_Init+0x12c>)
 80012dc:	f007 ff34 	bl	8009148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin|ECO_Pin|SPORT_Pin|PERFORMANCE_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80012e6:	4827      	ldr	r0, [pc, #156]	; (8001384 <MX_GPIO_Init+0x130>)
 80012e8:	f007 ff2e 	bl	8009148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
 80012ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	481d      	ldr	r0, [pc, #116]	; (800137c <MX_GPIO_Init+0x128>)
 8001306:	f007 fd9b 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_GPIO_Init+0x134>)
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	4818      	ldr	r0, [pc, #96]	; (8001380 <MX_GPIO_Init+0x12c>)
 800131e:	f007 fd8f 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHCP_pin_Pin STCP_pin_Pin DS_pin_Pin TRACK_Pin */
  GPIO_InitStruct.Pin = SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin|TRACK_Pin;
 8001322:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <MX_GPIO_Init+0x12c>)
 800133c:	f007 fd80 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ORIGINAL_Pin ECO_Pin SPORT_Pin PERFORMANCE_Pin TRACK_Pin */
  GPIO_InitStruct.Pin = ORIGINAL_Pin|ECO_Pin|SPORT_Pin|PERFORMANCE_Pin;
 8001340:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <MX_GPIO_Init+0x130>)
 800135a:	f007 fd71 	bl	8008e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2006      	movs	r0, #6
 8001364:	f007 facf 	bl	8008906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001368:	2006      	movs	r0, #6
 800136a:	f007 fae8 	bl	800893e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136e:	bf00      	nop
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	40011000 	.word	0x40011000
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40010800 	.word	0x40010800
 8001388:	10110000 	.word	0x10110000

0800138c <ADC_Handler>:

/* USER CODE BEGIN 4 */

void ADC_Handler() {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

	ADC_Select_CH0();
 8001390:	f7ff fcda 	bl	8000d48 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 8001394:	481c      	ldr	r0, [pc, #112]	; (8001408 <ADC_Handler+0x7c>)
 8001396:	f006 fe5f 	bl	8008058 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);		//TODO definir se está correto. Padrão = 1000
 800139a:	2101      	movs	r1, #1
 800139c:	481a      	ldr	r0, [pc, #104]	; (8001408 <ADC_Handler+0x7c>)
 800139e:	f006 ff35 	bl	800820c <HAL_ADC_PollForConversion>
	readValue[0] = HAL_ADC_GetValue(&hadc1);
 80013a2:	4819      	ldr	r0, [pc, #100]	; (8001408 <ADC_Handler+0x7c>)
 80013a4:	f007 f838 	bl	8008418 <HAL_ADC_GetValue>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <ADC_Handler+0x80>)
 80013ae:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80013b0:	4815      	ldr	r0, [pc, #84]	; (8001408 <ADC_Handler+0x7c>)
 80013b2:	f006 feff 	bl	80081b4 <HAL_ADC_Stop>

	ADC_Select_CH1();
 80013b6:	f7ff fce1 	bl	8000d7c <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 80013ba:	4813      	ldr	r0, [pc, #76]	; (8001408 <ADC_Handler+0x7c>)
 80013bc:	f006 fe4c 	bl	8008058 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80013c0:	2101      	movs	r1, #1
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <ADC_Handler+0x7c>)
 80013c4:	f006 ff22 	bl	800820c <HAL_ADC_PollForConversion>
	readValue[1] = HAL_ADC_GetValue(&hadc1);
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <ADC_Handler+0x7c>)
 80013ca:	f007 f825 	bl	8008418 <HAL_ADC_GetValue>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <ADC_Handler+0x80>)
 80013d4:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <ADC_Handler+0x7c>)
 80013d8:	f006 feec 	bl	80081b4 <HAL_ADC_Stop>

	ADC_Select_CH9();
 80013dc:	f7ff fce8 	bl	8000db0 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <ADC_Handler+0x7c>)
 80013e2:	f006 fe39 	bl	8008058 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80013e6:	2101      	movs	r1, #1
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <ADC_Handler+0x7c>)
 80013ea:	f006 ff0f 	bl	800820c <HAL_ADC_PollForConversion>
	readValue[2] = HAL_ADC_GetValue(&hadc1);
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <ADC_Handler+0x7c>)
 80013f0:	f007 f812 	bl	8008418 <HAL_ADC_GetValue>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <ADC_Handler+0x80>)
 80013fa:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <ADC_Handler+0x7c>)
 80013fe:	f006 fed9 	bl	80081b4 <HAL_ADC_Stop>

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200001a8 	.word	0x200001a8
 800140c:	20000660 	.word	0x20000660

08001410 <AnalogHandler>:

void AnalogHandler() {
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0

	//Adequa a escala de cada sinal

		////conversao de 0 a 100% para uso do pedal Ranger
		int max1 = 2290;
 8001416:	f640 03f2 	movw	r3, #2290	; 0x8f2
 800141a:	60fb      	str	r3, [r7, #12]
		int min1 = 560;
 800141c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001420:	60bb      	str	r3, [r7, #8]

		int max2 = 2370;
 8001422:	f640 1342 	movw	r3, #2370	; 0x942
 8001426:	607b      	str	r3, [r7, #4]
		int min2 = 545;
 8001428:	f240 2321 	movw	r3, #545	; 0x221
 800142c:	603b      	str	r3, [r7, #0]

		Value[1] = ( Sensor_in - min1 ) *100 / (max1 - min1 );
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <AnalogHandler+0xa8>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2264      	movs	r2, #100	; 0x64
 8001438:	fb03 f202 	mul.w	r2, r3, r2
 800143c:	68f9      	ldr	r1, [r7, #12]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1acb      	subs	r3, r1, r3
 8001442:	fb92 f3f3 	sdiv	r3, r2, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <AnalogHandler+0xac>)
 800144a:	805a      	strh	r2, [r3, #2]
		if ( Value[1] > 100){
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <AnalogHandler+0xac>)
 800144e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	dd03      	ble.n	800145e <AnalogHandler+0x4e>
			Value[1] = 100;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <AnalogHandler+0xac>)
 8001458:	2264      	movs	r2, #100	; 0x64
 800145a:	805a      	strh	r2, [r3, #2]
 800145c:	e007      	b.n	800146e <AnalogHandler+0x5e>
		}else if ( Value[1] < 0){
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <AnalogHandler+0xac>)
 8001460:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001464:	2b00      	cmp	r3, #0
 8001466:	da02      	bge.n	800146e <AnalogHandler+0x5e>
			Value[1] = 0;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <AnalogHandler+0xac>)
 800146a:	2200      	movs	r2, #0
 800146c:	805a      	strh	r2, [r3, #2]
		}

		Value[2] = ( Sensor_Out - min2 ) *100 / (max2 - min2 );
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <AnalogHandler+0xb0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2264      	movs	r2, #100	; 0x64
 8001478:	fb03 f202 	mul.w	r2, r3, r2
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	1acb      	subs	r3, r1, r3
 8001482:	fb92 f3f3 	sdiv	r3, r2, r3
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <AnalogHandler+0xac>)
 800148a:	809a      	strh	r2, [r3, #4]
		if ( Value[2] > 100){
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <AnalogHandler+0xac>)
 800148e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	dd03      	ble.n	800149e <AnalogHandler+0x8e>
			Value[2] = 100;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <AnalogHandler+0xac>)
 8001498:	2264      	movs	r2, #100	; 0x64
 800149a:	809a      	strh	r2, [r3, #4]
		}else if ( Value[2] < 0){
			Value[2] = 0;
		}

}
 800149c:	e007      	b.n	80014ae <AnalogHandler+0x9e>
		}else if ( Value[2] < 0){
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <AnalogHandler+0xac>)
 80014a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da02      	bge.n	80014ae <AnalogHandler+0x9e>
			Value[2] = 0;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <AnalogHandler+0xac>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	809a      	strh	r2, [r3, #4]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	2000066c 	.word	0x2000066c
 80014bc:	20000320 	.word	0x20000320
 80014c0:	20000670 	.word	0x20000670

080014c4 <HAL_GPIO_EXTI_Callback>:

//TODO Documentar
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
//	if ((currentMillis - previousMillis) > 200) {
//
//		previousMillis = currentMillis;

//	}
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <ColorModeSelect>:

//TODO Documentar método
void ColorModeSelect() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

	//Define o modo de atuação SPEED

	if(SpeedMode<430){			//modo original
 80014dc:	4b7d      	ldr	r3, [pc, #500]	; (80016d4 <ColorModeSelect+0x1fc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80014e4:	da03      	bge.n	80014ee <ColorModeSelect+0x16>
		Value[0] = 0;
 80014e6:	4b7c      	ldr	r3, [pc, #496]	; (80016d8 <ColorModeSelect+0x200>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	e02c      	b.n	8001548 <ColorModeSelect+0x70>
	} else if(SpeedMode<800){	//modo Eco
 80014ee:	4b79      	ldr	r3, [pc, #484]	; (80016d4 <ColorModeSelect+0x1fc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80014f6:	da03      	bge.n	8001500 <ColorModeSelect+0x28>
		Value[0] = 1;
 80014f8:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <ColorModeSelect+0x200>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	801a      	strh	r2, [r3, #0]
 80014fe:	e023      	b.n	8001548 <ColorModeSelect+0x70>
	} else if(SpeedMode<1200){	//modo Sport
 8001500:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <ColorModeSelect+0x1fc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001508:	da03      	bge.n	8001512 <ColorModeSelect+0x3a>
		Value[0] = 2;
 800150a:	4b73      	ldr	r3, [pc, #460]	; (80016d8 <ColorModeSelect+0x200>)
 800150c:	2202      	movs	r2, #2
 800150e:	801a      	strh	r2, [r3, #0]
 8001510:	e01a      	b.n	8001548 <ColorModeSelect+0x70>
	} else if(SpeedMode<1600){	//modo Performance
 8001512:	4b70      	ldr	r3, [pc, #448]	; (80016d4 <ColorModeSelect+0x1fc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800151a:	da03      	bge.n	8001524 <ColorModeSelect+0x4c>
		Value[0] = 3;
 800151c:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <ColorModeSelect+0x200>)
 800151e:	2203      	movs	r2, #3
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	e011      	b.n	8001548 <ColorModeSelect+0x70>
	} else if(SpeedMode<2000){	//modo Track
 8001524:	4b6b      	ldr	r3, [pc, #428]	; (80016d4 <ColorModeSelect+0x1fc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800152c:	da03      	bge.n	8001536 <ColorModeSelect+0x5e>
		Value[0] = 4;
 800152e:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <ColorModeSelect+0x200>)
 8001530:	2204      	movs	r2, #4
 8001532:	801a      	strh	r2, [r3, #0]
 8001534:	e008      	b.n	8001548 <ColorModeSelect+0x70>
	} else if(SpeedMode<2500){	//modo Valet
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <ColorModeSelect+0x1fc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800153e:	4293      	cmp	r3, r2
 8001540:	dc02      	bgt.n	8001548 <ColorModeSelect+0x70>
		Value[0] = 5;
 8001542:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <ColorModeSelect+0x200>)
 8001544:	2205      	movs	r2, #5
 8001546:	801a      	strh	r2, [r3, #0]
	}

	switch (Value[0]) {
 8001548:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <ColorModeSelect+0x200>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	2b05      	cmp	r3, #5
 8001550:	f200 80ac 	bhi.w	80016ac <ColorModeSelect+0x1d4>
 8001554:	a201      	add	r2, pc, #4	; (adr r2, 800155c <ColorModeSelect+0x84>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	08001575 	.word	0x08001575
 8001560:	080015ab 	.word	0x080015ab
 8001564:	080015e1 	.word	0x080015e1
 8001568:	08001617 	.word	0x08001617
 800156c:	0800164d 	.word	0x0800164d
 8001570:	08001677 	.word	0x08001677

	case branco:
		Red = 255;
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <ColorModeSelect+0x204>)
 8001576:	22ff      	movs	r2, #255	; 0xff
 8001578:	601a      	str	r2, [r3, #0]
		Green = 255;
 800157a:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <ColorModeSelect+0x208>)
 800157c:	22ff      	movs	r2, #255	; 0xff
 800157e:	601a      	str	r2, [r3, #0]
		Blue = 255;
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <ColorModeSelect+0x20c>)
 8001582:	22ff      	movs	r2, #255	; 0xff
 8001584:	601a      	str	r2, [r3, #0]

//		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_SET);

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800158c:	4856      	ldr	r0, [pc, #344]	; (80016e8 <ColorModeSelect+0x210>)
 800158e:	f007 fddb 	bl	8009148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001598:	4853      	ldr	r0, [pc, #332]	; (80016e8 <ColorModeSelect+0x210>)
 800159a:	f007 fdd5 	bl	8009148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2120      	movs	r1, #32
 80015a2:	4852      	ldr	r0, [pc, #328]	; (80016ec <ColorModeSelect+0x214>)
 80015a4:	f007 fdd0 	bl	8009148 <HAL_GPIO_WritePin>

		break;
 80015a8:	e092      	b.n	80016d0 <ColorModeSelect+0x1f8>

	case eco:
		Red = 0;
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <ColorModeSelect+0x204>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
		Green = 180;
 80015b0:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <ColorModeSelect+0x208>)
 80015b2:	22b4      	movs	r2, #180	; 0xb4
 80015b4:	601a      	str	r2, [r3, #0]
		Blue = 255;
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <ColorModeSelect+0x20c>)
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA, ECO_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c2:	4849      	ldr	r0, [pc, #292]	; (80016e8 <ColorModeSelect+0x210>)
 80015c4:	f007 fdc0 	bl	8009148 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin | SPORT_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80015ce:	4846      	ldr	r0, [pc, #280]	; (80016e8 <ColorModeSelect+0x210>)
 80015d0:	f007 fdba 	bl	8009148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2120      	movs	r1, #32
 80015d8:	4844      	ldr	r0, [pc, #272]	; (80016ec <ColorModeSelect+0x214>)
 80015da:	f007 fdb5 	bl	8009148 <HAL_GPIO_WritePin>


		break;
 80015de:	e077      	b.n	80016d0 <ColorModeSelect+0x1f8>

	case verde:
		Red = 0;
 80015e0:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <ColorModeSelect+0x204>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
		Green = 255;
 80015e6:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <ColorModeSelect+0x208>)
 80015e8:	22ff      	movs	r2, #255	; 0xff
 80015ea:	601a      	str	r2, [r3, #0]
		Blue = 0;
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <ColorModeSelect+0x20c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA, SPORT_Pin , GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f8:	483b      	ldr	r0, [pc, #236]	; (80016e8 <ColorModeSelect+0x210>)
 80015fa:	f007 fda5 	bl	8009148 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | ORIGINAL_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001604:	4838      	ldr	r0, [pc, #224]	; (80016e8 <ColorModeSelect+0x210>)
 8001606:	f007 fd9f 	bl	8009148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2120      	movs	r1, #32
 800160e:	4837      	ldr	r0, [pc, #220]	; (80016ec <ColorModeSelect+0x214>)
 8001610:	f007 fd9a 	bl	8009148 <HAL_GPIO_WritePin>

		break;
 8001614:	e05c      	b.n	80016d0 <ColorModeSelect+0x1f8>

	case amarelo:
		Red = 255;
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <ColorModeSelect+0x204>)
 8001618:	22ff      	movs	r2, #255	; 0xff
 800161a:	601a      	str	r2, [r3, #0]
		Green = 255;
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <ColorModeSelect+0x208>)
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	601a      	str	r2, [r3, #0]
		Blue = 0;
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <ColorModeSelect+0x20c>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA, PERFORMANCE_Pin, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	482e      	ldr	r0, [pc, #184]	; (80016e8 <ColorModeSelect+0x210>)
 8001630:	f007 fd8a 	bl	8009148 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | ORIGINAL_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800163a:	482b      	ldr	r0, [pc, #172]	; (80016e8 <ColorModeSelect+0x210>)
 800163c:	f007 fd84 	bl	8009148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <ColorModeSelect+0x214>)
 8001646:	f007 fd7f 	bl	8009148 <HAL_GPIO_WritePin>

		break;
 800164a:	e041      	b.n	80016d0 <ColorModeSelect+0x1f8>

	case vermelho:
		Red = 255;
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <ColorModeSelect+0x204>)
 800164e:	22ff      	movs	r2, #255	; 0xff
 8001650:	601a      	str	r2, [r3, #0]
		Green = 0;
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <ColorModeSelect+0x208>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
		Blue = 0;
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <ColorModeSelect+0x20c>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2120      	movs	r1, #32
 8001662:	4822      	ldr	r0, [pc, #136]	; (80016ec <ColorModeSelect+0x214>)
 8001664:	f007 fd70 	bl	8009148 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | PERFORMANCE_Pin | ORIGINAL_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800166e:	481e      	ldr	r0, [pc, #120]	; (80016e8 <ColorModeSelect+0x210>)
 8001670:	f007 fd6a 	bl	8009148 <HAL_GPIO_WritePin>

		break;
 8001674:	e02c      	b.n	80016d0 <ColorModeSelect+0x1f8>

	case azul:
		Red = 0;
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <ColorModeSelect+0x204>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
		Green = 0;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <ColorModeSelect+0x208>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
		Blue = 255;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <ColorModeSelect+0x20c>)
 8001684:	22ff      	movs	r2, #255	; 0xff
 8001686:	601a      	str	r2, [r3, #0]

		//HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_SET);

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800168e:	4816      	ldr	r0, [pc, #88]	; (80016e8 <ColorModeSelect+0x210>)
 8001690:	f007 fd5a 	bl	8009148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	2120      	movs	r1, #32
 8001698:	4814      	ldr	r0, [pc, #80]	; (80016ec <ColorModeSelect+0x214>)
 800169a:	f007 fd55 	bl	8009148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a4:	4810      	ldr	r0, [pc, #64]	; (80016e8 <ColorModeSelect+0x210>)
 80016a6:	f007 fd4f 	bl	8009148 <HAL_GPIO_WritePin>

		break;
 80016aa:	e011      	b.n	80016d0 <ColorModeSelect+0x1f8>

	default:

		HAL_GPIO_WritePin(GPIOA, ORIGINAL_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <ColorModeSelect+0x210>)
 80016b4:	f007 fd48 	bl	8009148 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, ECO_Pin | SPORT_Pin | PERFORMANCE_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <ColorModeSelect+0x210>)
 80016c0:	f007 fd42 	bl	8009148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2120      	movs	r1, #32
 80016c8:	4808      	ldr	r0, [pc, #32]	; (80016ec <ColorModeSelect+0x214>)
 80016ca:	f007 fd3d 	bl	8009148 <HAL_GPIO_WritePin>

		break;
 80016ce:	bf00      	nop
	}
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000668 	.word	0x20000668
 80016d8:	20000320 	.word	0x20000320
 80016dc:	20000008 	.word	0x20000008
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	20000010 	.word	0x20000010
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00

080016f0 <LEDHandler>:

void LEDHandler(int Valor) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

	int led = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]

	//apagar todos os leds
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0); led++;
 80016fc:	2300      	movs	r3, #0
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f005 fe7e 	bl	8007404 <Set_LED>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3301      	adds	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	2300      	movs	r3, #0
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f005 fe75 	bl	8007404 <Set_LED>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3301      	adds	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	2300      	movs	r3, #0
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f005 fe6c 	bl	8007404 <Set_LED>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3301      	adds	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	2300      	movs	r3, #0
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f005 fe63 	bl	8007404 <Set_LED>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	2300      	movs	r3, #0
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f005 fe5a 	bl	8007404 <Set_LED>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3301      	adds	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f005 fe51 	bl	8007404 <Set_LED>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3301      	adds	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	2300      	movs	r3, #0
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f005 fe48 	bl	8007404 <Set_LED>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 800177a:	2300      	movs	r3, #0
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f005 fe3f 	bl	8007404 <Set_LED>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3301      	adds	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	2300      	movs	r3, #0
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f005 fe36 	bl	8007404 <Set_LED>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	2300      	movs	r3, #0
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f005 fe2d 	bl	8007404 <Set_LED>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	2300      	movs	r3, #0
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f005 fe24 	bl	8007404 <Set_LED>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	2300      	movs	r3, #0
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f005 fe1b 	bl	8007404 <Set_LED>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3301      	adds	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	2300      	movs	r3, #0
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f005 fe12 	bl	8007404 <Set_LED>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3301      	adds	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	2300      	movs	r3, #0
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f005 fe09 	bl	8007404 <Set_LED>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 80017f8:	2300      	movs	r3, #0
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f005 fe00 	bl	8007404 <Set_LED>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3301      	adds	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	2300      	movs	r3, #0
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f005 fdf7 	bl	8007404 <Set_LED>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	2300      	movs	r3, #0
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f005 fdee 	bl	8007404 <Set_LED>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3301      	adds	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	2300      	movs	r3, #0
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f005 fde5 	bl	8007404 <Set_LED>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	2300      	movs	r3, #0
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f005 fddc 	bl	8007404 <Set_LED>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3301      	adds	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	2300      	movs	r3, #0
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f005 fdd3 	bl	8007404 <Set_LED>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3301      	adds	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	2300      	movs	r3, #0
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f005 fdca 	bl	8007404 <Set_LED>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3301      	adds	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001876:	2300      	movs	r3, #0
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f005 fdc1 	bl	8007404 <Set_LED>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	2300      	movs	r3, #0
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f005 fdb8 	bl	8007404 <Set_LED>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	2300      	movs	r3, #0
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f005 fdaf 	bl	8007404 <Set_LED>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3301      	adds	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	2300      	movs	r3, #0
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f005 fda6 	bl	8007404 <Set_LED>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	2300      	movs	r3, #0
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f005 fd9d 	bl	8007404 <Set_LED>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f005 fd94 	bl	8007404 <Set_LED>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3301      	adds	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	2300      	movs	r3, #0
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f005 fd8b 	bl	8007404 <Set_LED>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 80018f4:	2300      	movs	r3, #0
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f005 fd82 	bl	8007404 <Set_LED>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	2300      	movs	r3, #0
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f005 fd79 	bl	8007404 <Set_LED>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	2300      	movs	r3, #0
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f005 fd70 	bl	8007404 <Set_LED>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	2300      	movs	r3, #0
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f005 fd67 	bl	8007404 <Set_LED>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	2300      	movs	r3, #0
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f005 fd5e 	bl	8007404 <Set_LED>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f005 fd55 	bl	8007404 <Set_LED>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	2300      	movs	r3, #0
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f005 fd4c 	bl	8007404 <Set_LED>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3301      	adds	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001972:	2300      	movs	r3, #0
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f005 fd43 	bl	8007404 <Set_LED>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3301      	adds	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	2300      	movs	r3, #0
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f005 fd3a 	bl	8007404 <Set_LED>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f005 fd31 	bl	8007404 <Set_LED>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	2300      	movs	r3, #0
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f005 fd28 	bl	8007404 <Set_LED>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f005 fd1f 	bl	8007404 <Set_LED>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3301      	adds	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	2300      	movs	r3, #0
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f005 fd16 	bl	8007404 <Set_LED>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	2300      	movs	r3, #0
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f005 fd0d 	bl	8007404 <Set_LED>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 80019f0:	2300      	movs	r3, #0
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f005 fd04 	bl	8007404 <Set_LED>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f005 fcfb 	bl	8007404 <Set_LED>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3301      	adds	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	2300      	movs	r3, #0
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f005 fcf2 	bl	8007404 <Set_LED>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	2300      	movs	r3, #0
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f005 fce9 	bl	8007404 <Set_LED>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3301      	adds	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f005 fce0 	bl	8007404 <Set_LED>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f005 fcd7 	bl	8007404 <Set_LED>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f005 fcce 	bl	8007404 <Set_LED>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f005 fcc5 	bl	8007404 <Set_LED>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	2300      	movs	r3, #0
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f005 fcbc 	bl	8007404 <Set_LED>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	2300      	movs	r3, #0
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f005 fcb3 	bl	8007404 <Set_LED>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f005 fcaa 	bl	8007404 <Set_LED>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f005 fca1 	bl	8007404 <Set_LED>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f005 fc98 	bl	8007404 <Set_LED>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	2300      	movs	r3, #0
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f005 fc8f 	bl	8007404 <Set_LED>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001aec:	2300      	movs	r3, #0
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f005 fc86 	bl	8007404 <Set_LED>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f005 fc7d 	bl	8007404 <Set_LED>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	2300      	movs	r3, #0
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f005 fc74 	bl	8007404 <Set_LED>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	2300      	movs	r3, #0
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f005 fc6b 	bl	8007404 <Set_LED>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	2300      	movs	r3, #0
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f005 fc62 	bl	8007404 <Set_LED>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	2300      	movs	r3, #0
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f005 fc59 	bl	8007404 <Set_LED>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f005 fc50 	bl	8007404 <Set_LED>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f005 fc47 	bl	8007404 <Set_LED>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f005 fc3e 	bl	8007404 <Set_LED>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f005 fc35 	bl	8007404 <Set_LED>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f005 fc2c 	bl	8007404 <Set_LED>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f005 fc23 	bl	8007404 <Set_LED>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f005 fc1a 	bl	8007404 <Set_LED>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f005 fc11 	bl	8007404 <Set_LED>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001be8:	2300      	movs	r3, #0
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f005 fc08 	bl	8007404 <Set_LED>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f005 fbff 	bl	8007404 <Set_LED>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f005 fbf6 	bl	8007404 <Set_LED>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f005 fbed 	bl	8007404 <Set_LED>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	2300      	movs	r3, #0
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f005 fbe4 	bl	8007404 <Set_LED>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	2300      	movs	r3, #0
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f005 fbdb 	bl	8007404 <Set_LED>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3301      	adds	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	2300      	movs	r3, #0
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f005 fbd2 	bl	8007404 <Set_LED>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;
 8001c66:	2300      	movs	r3, #0
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f005 fbc9 	bl	8007404 <Set_LED>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	3301      	adds	r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f005 fbc0 	bl	8007404 <Set_LED>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f005 fbb7 	bl	8007404 <Set_LED>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f005 fbae 	bl	8007404 <Set_LED>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3301      	adds	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f005 fba5 	bl	8007404 <Set_LED>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f005 fb9c 	bl	8007404 <Set_LED>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f005 fb93 	bl	8007404 <Set_LED>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);	led++;	Set_LED(led, 0, 0, 0);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f005 fb8a 	bl	8007404 <Set_LED>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f005 fb81 	bl	8007404 <Set_LED>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f005 fb78 	bl	8007404 <Set_LED>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f005 fb6f 	bl	8007404 <Set_LED>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f005 fb66 	bl	8007404 <Set_LED>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f005 fb5d 	bl	8007404 <Set_LED>

	var1 = Value[2];	var2 =  Value[0] * 17;
 8001d4a:	4baa      	ldr	r3, [pc, #680]	; (8001ff4 <LEDHandler+0x904>)
 8001d4c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001d50:	4ba9      	ldr	r3, [pc, #676]	; (8001ff8 <LEDHandler+0x908>)
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	4ba7      	ldr	r3, [pc, #668]	; (8001ff4 <LEDHandler+0x904>)
 8001d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	4ba5      	ldr	r3, [pc, #660]	; (8001ffc <LEDHandler+0x90c>)
 8001d68:	801a      	strh	r2, [r3, #0]

	if ( (Value[0] != 0) && (Value[0] != 5)) {
 8001d6a:	4ba2      	ldr	r3, [pc, #648]	; (8001ff4 <LEDHandler+0x904>)
 8001d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f003 80b9 	beq.w	8004ee8 <LEDHandler+0x37f8>
 8001d76:	4b9f      	ldr	r3, [pc, #636]	; (8001ff4 <LEDHandler+0x904>)
 8001d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	f003 80b3 	beq.w	8004ee8 <LEDHandler+0x37f8>

		if (Valor == 0) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 813b 	bne.w	8002000 <LEDHandler+0x910>

			Set_LED(var2, 0, 0, 0);			var2++;		//LED1
 8001d8a:	4b9c      	ldr	r3, [pc, #624]	; (8001ffc <LEDHandler+0x90c>)
 8001d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d90:	4618      	mov	r0, r3
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	f005 fb34 	bl	8007404 <Set_LED>
 8001d9c:	4b97      	ldr	r3, [pc, #604]	; (8001ffc <LEDHandler+0x90c>)
 8001d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	4b94      	ldr	r3, [pc, #592]	; (8001ffc <LEDHandler+0x90c>)
 8001dac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED2
 8001dae:	4b93      	ldr	r3, [pc, #588]	; (8001ffc <LEDHandler+0x90c>)
 8001db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db4:	4618      	mov	r0, r3
 8001db6:	2300      	movs	r3, #0
 8001db8:	2200      	movs	r2, #0
 8001dba:	2100      	movs	r1, #0
 8001dbc:	f005 fb22 	bl	8007404 <Set_LED>
 8001dc0:	4b8e      	ldr	r3, [pc, #568]	; (8001ffc <LEDHandler+0x90c>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <LEDHandler+0x90c>)
 8001dd0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED3
 8001dd2:	4b8a      	ldr	r3, [pc, #552]	; (8001ffc <LEDHandler+0x90c>)
 8001dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	f005 fb10 	bl	8007404 <Set_LED>
 8001de4:	4b85      	ldr	r3, [pc, #532]	; (8001ffc <LEDHandler+0x90c>)
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <LEDHandler+0x90c>)
 8001df4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED4
 8001df6:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <LEDHandler+0x90c>)
 8001df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	f005 fafe 	bl	8007404 <Set_LED>
 8001e08:	4b7c      	ldr	r3, [pc, #496]	; (8001ffc <LEDHandler+0x90c>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	4b79      	ldr	r3, [pc, #484]	; (8001ffc <LEDHandler+0x90c>)
 8001e18:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED5
 8001e1a:	4b78      	ldr	r3, [pc, #480]	; (8001ffc <LEDHandler+0x90c>)
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	4618      	mov	r0, r3
 8001e22:	2300      	movs	r3, #0
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	f005 faec 	bl	8007404 <Set_LED>
 8001e2c:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <LEDHandler+0x90c>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3301      	adds	r3, #1
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b70      	ldr	r3, [pc, #448]	; (8001ffc <LEDHandler+0x90c>)
 8001e3c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED6
 8001e3e:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <LEDHandler+0x90c>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	4618      	mov	r0, r3
 8001e46:	2300      	movs	r3, #0
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f005 fada 	bl	8007404 <Set_LED>
 8001e50:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <LEDHandler+0x90c>)
 8001e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <LEDHandler+0x90c>)
 8001e60:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED7
 8001e62:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <LEDHandler+0x90c>)
 8001e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f005 fac8 	bl	8007404 <Set_LED>
 8001e74:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <LEDHandler+0x90c>)
 8001e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	4b5e      	ldr	r3, [pc, #376]	; (8001ffc <LEDHandler+0x90c>)
 8001e84:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED8
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <LEDHandler+0x90c>)
 8001e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	f005 fab6 	bl	8007404 <Set_LED>
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <LEDHandler+0x90c>)
 8001e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	4b55      	ldr	r3, [pc, #340]	; (8001ffc <LEDHandler+0x90c>)
 8001ea8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED9
 8001eaa:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <LEDHandler+0x90c>)
 8001eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	f005 faa4 	bl	8007404 <Set_LED>
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <LEDHandler+0x90c>)
 8001ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <LEDHandler+0x90c>)
 8001ecc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED10
 8001ece:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <LEDHandler+0x90c>)
 8001ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	f005 fa92 	bl	8007404 <Set_LED>
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <LEDHandler+0x90c>)
 8001ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <LEDHandler+0x90c>)
 8001ef0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED11
 8001ef2:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <LEDHandler+0x90c>)
 8001ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	2300      	movs	r3, #0
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	f005 fa80 	bl	8007404 <Set_LED>
 8001f04:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <LEDHandler+0x90c>)
 8001f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <LEDHandler+0x90c>)
 8001f14:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED12
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <LEDHandler+0x90c>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	f005 fa6e 	bl	8007404 <Set_LED>
 8001f28:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <LEDHandler+0x90c>)
 8001f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <LEDHandler+0x90c>)
 8001f38:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED13
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <LEDHandler+0x90c>)
 8001f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f40:	4618      	mov	r0, r3
 8001f42:	2300      	movs	r3, #0
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	f005 fa5c 	bl	8007404 <Set_LED>
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <LEDHandler+0x90c>)
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <LEDHandler+0x90c>)
 8001f5c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED14
 8001f5e:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <LEDHandler+0x90c>)
 8001f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f64:	4618      	mov	r0, r3
 8001f66:	2300      	movs	r3, #0
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f005 fa4a 	bl	8007404 <Set_LED>
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <LEDHandler+0x90c>)
 8001f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b21a      	sxth	r2, r3
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <LEDHandler+0x90c>)
 8001f80:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED15
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <LEDHandler+0x90c>)
 8001f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f005 fa38 	bl	8007404 <Set_LED>
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <LEDHandler+0x90c>)
 8001f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <LEDHandler+0x90c>)
 8001fa4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED16
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <LEDHandler+0x90c>)
 8001fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fac:	4618      	mov	r0, r3
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f005 fa26 	bl	8007404 <Set_LED>
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <LEDHandler+0x90c>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <LEDHandler+0x90c>)
 8001fc8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED17
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <LEDHandler+0x90c>)
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f005 fa14 	bl	8007404 <Set_LED>
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <LEDHandler+0x90c>)
 8001fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <LEDHandler+0x90c>)
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	f002 bf7b 	b.w	8004ee8 <LEDHandler+0x37f8>
 8001ff2:	bf00      	nop
 8001ff4:	20000320 	.word	0x20000320
 8001ff8:	2000031a 	.word	0x2000031a
 8001ffc:	2000031c 	.word	0x2000031c

		} else if (Valor >= 1 && Valor < 6) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f340 8144 	ble.w	8002290 <LEDHandler+0xba0>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b05      	cmp	r3, #5
 800200c:	f300 8140 	bgt.w	8002290 <LEDHandler+0xba0>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8002010:	4b9b      	ldr	r3, [pc, #620]	; (8002280 <LEDHandler+0xb90>)
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	4618      	mov	r0, r3
 8002018:	4b9a      	ldr	r3, [pc, #616]	; (8002284 <LEDHandler+0xb94>)
 800201a:	6819      	ldr	r1, [r3, #0]
 800201c:	4b9a      	ldr	r3, [pc, #616]	; (8002288 <LEDHandler+0xb98>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b9a      	ldr	r3, [pc, #616]	; (800228c <LEDHandler+0xb9c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f005 f9ee 	bl	8007404 <Set_LED>
 8002028:	4b95      	ldr	r3, [pc, #596]	; (8002280 <LEDHandler+0xb90>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	b29b      	uxth	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	b21a      	sxth	r2, r3
 8002036:	4b92      	ldr	r3, [pc, #584]	; (8002280 <LEDHandler+0xb90>)
 8002038:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED2
 800203a:	4b91      	ldr	r3, [pc, #580]	; (8002280 <LEDHandler+0xb90>)
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	4618      	mov	r0, r3
 8002042:	2300      	movs	r3, #0
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	f005 f9dc 	bl	8007404 <Set_LED>
 800204c:	4b8c      	ldr	r3, [pc, #560]	; (8002280 <LEDHandler+0xb90>)
 800204e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002052:	b29b      	uxth	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	b29b      	uxth	r3, r3
 8002058:	b21a      	sxth	r2, r3
 800205a:	4b89      	ldr	r3, [pc, #548]	; (8002280 <LEDHandler+0xb90>)
 800205c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED3
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <LEDHandler+0xb90>)
 8002060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002064:	4618      	mov	r0, r3
 8002066:	2300      	movs	r3, #0
 8002068:	2200      	movs	r2, #0
 800206a:	2100      	movs	r1, #0
 800206c:	f005 f9ca 	bl	8007404 <Set_LED>
 8002070:	4b83      	ldr	r3, [pc, #524]	; (8002280 <LEDHandler+0xb90>)
 8002072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002076:	b29b      	uxth	r3, r3
 8002078:	3301      	adds	r3, #1
 800207a:	b29b      	uxth	r3, r3
 800207c:	b21a      	sxth	r2, r3
 800207e:	4b80      	ldr	r3, [pc, #512]	; (8002280 <LEDHandler+0xb90>)
 8002080:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED4
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <LEDHandler+0xb90>)
 8002084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002088:	4618      	mov	r0, r3
 800208a:	2300      	movs	r3, #0
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	f005 f9b8 	bl	8007404 <Set_LED>
 8002094:	4b7a      	ldr	r3, [pc, #488]	; (8002280 <LEDHandler+0xb90>)
 8002096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209a:	b29b      	uxth	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	4b77      	ldr	r3, [pc, #476]	; (8002280 <LEDHandler+0xb90>)
 80020a4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED5
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <LEDHandler+0xb90>)
 80020a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ac:	4618      	mov	r0, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	f005 f9a6 	bl	8007404 <Set_LED>
 80020b8:	4b71      	ldr	r3, [pc, #452]	; (8002280 <LEDHandler+0xb90>)
 80020ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <LEDHandler+0xb90>)
 80020c8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED6
 80020ca:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <LEDHandler+0xb90>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	4618      	mov	r0, r3
 80020d2:	2300      	movs	r3, #0
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	f005 f994 	bl	8007404 <Set_LED>
 80020dc:	4b68      	ldr	r3, [pc, #416]	; (8002280 <LEDHandler+0xb90>)
 80020de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <LEDHandler+0xb90>)
 80020ec:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED7
 80020ee:	4b64      	ldr	r3, [pc, #400]	; (8002280 <LEDHandler+0xb90>)
 80020f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f4:	4618      	mov	r0, r3
 80020f6:	2300      	movs	r3, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	f005 f982 	bl	8007404 <Set_LED>
 8002100:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <LEDHandler+0xb90>)
 8002102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002106:	b29b      	uxth	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	b29b      	uxth	r3, r3
 800210c:	b21a      	sxth	r2, r3
 800210e:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <LEDHandler+0xb90>)
 8002110:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED8
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <LEDHandler+0xb90>)
 8002114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002118:	4618      	mov	r0, r3
 800211a:	2300      	movs	r3, #0
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	f005 f970 	bl	8007404 <Set_LED>
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <LEDHandler+0xb90>)
 8002126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212a:	b29b      	uxth	r3, r3
 800212c:	3301      	adds	r3, #1
 800212e:	b29b      	uxth	r3, r3
 8002130:	b21a      	sxth	r2, r3
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <LEDHandler+0xb90>)
 8002134:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED9
 8002136:	4b52      	ldr	r3, [pc, #328]	; (8002280 <LEDHandler+0xb90>)
 8002138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213c:	4618      	mov	r0, r3
 800213e:	2300      	movs	r3, #0
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	f005 f95e 	bl	8007404 <Set_LED>
 8002148:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <LEDHandler+0xb90>)
 800214a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214e:	b29b      	uxth	r3, r3
 8002150:	3301      	adds	r3, #1
 8002152:	b29b      	uxth	r3, r3
 8002154:	b21a      	sxth	r2, r3
 8002156:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <LEDHandler+0xb90>)
 8002158:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED10
 800215a:	4b49      	ldr	r3, [pc, #292]	; (8002280 <LEDHandler+0xb90>)
 800215c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002160:	4618      	mov	r0, r3
 8002162:	2300      	movs	r3, #0
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	f005 f94c 	bl	8007404 <Set_LED>
 800216c:	4b44      	ldr	r3, [pc, #272]	; (8002280 <LEDHandler+0xb90>)
 800216e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002172:	b29b      	uxth	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	b21a      	sxth	r2, r3
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <LEDHandler+0xb90>)
 800217c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED11
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <LEDHandler+0xb90>)
 8002180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002184:	4618      	mov	r0, r3
 8002186:	2300      	movs	r3, #0
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	f005 f93a 	bl	8007404 <Set_LED>
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <LEDHandler+0xb90>)
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	b29b      	uxth	r3, r3
 8002198:	3301      	adds	r3, #1
 800219a:	b29b      	uxth	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <LEDHandler+0xb90>)
 80021a0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED12
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <LEDHandler+0xb90>)
 80021a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a8:	4618      	mov	r0, r3
 80021aa:	2300      	movs	r3, #0
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	f005 f928 	bl	8007404 <Set_LED>
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <LEDHandler+0xb90>)
 80021b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <LEDHandler+0xb90>)
 80021c4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED13
 80021c6:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <LEDHandler+0xb90>)
 80021c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021cc:	4618      	mov	r0, r3
 80021ce:	2300      	movs	r3, #0
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	f005 f916 	bl	8007404 <Set_LED>
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <LEDHandler+0xb90>)
 80021da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	b21a      	sxth	r2, r3
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <LEDHandler+0xb90>)
 80021e8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED14
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <LEDHandler+0xb90>)
 80021ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f0:	4618      	mov	r0, r3
 80021f2:	2300      	movs	r3, #0
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	f005 f904 	bl	8007404 <Set_LED>
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <LEDHandler+0xb90>)
 80021fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002202:	b29b      	uxth	r3, r3
 8002204:	3301      	adds	r3, #1
 8002206:	b29b      	uxth	r3, r3
 8002208:	b21a      	sxth	r2, r3
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <LEDHandler+0xb90>)
 800220c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED15
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <LEDHandler+0xb90>)
 8002210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002214:	4618      	mov	r0, r3
 8002216:	2300      	movs	r3, #0
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	f005 f8f2 	bl	8007404 <Set_LED>
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <LEDHandler+0xb90>)
 8002222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002226:	b29b      	uxth	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	b21a      	sxth	r2, r3
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <LEDHandler+0xb90>)
 8002230:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED16
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <LEDHandler+0xb90>)
 8002234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002238:	4618      	mov	r0, r3
 800223a:	2300      	movs	r3, #0
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	f005 f8e0 	bl	8007404 <Set_LED>
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <LEDHandler+0xb90>)
 8002246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224a:	b29b      	uxth	r3, r3
 800224c:	3301      	adds	r3, #1
 800224e:	b29b      	uxth	r3, r3
 8002250:	b21a      	sxth	r2, r3
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <LEDHandler+0xb90>)
 8002254:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;		//LED17
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <LEDHandler+0xb90>)
 8002258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225c:	4618      	mov	r0, r3
 800225e:	2300      	movs	r3, #0
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	f005 f8ce 	bl	8007404 <Set_LED>
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <LEDHandler+0xb90>)
 800226a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226e:	b29b      	uxth	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	b29b      	uxth	r3, r3
 8002274:	b21a      	sxth	r2, r3
 8002276:	4b02      	ldr	r3, [pc, #8]	; (8002280 <LEDHandler+0xb90>)
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	f002 be35 	b.w	8004ee8 <LEDHandler+0x37f8>
 800227e:	bf00      	nop
 8002280:	2000031c 	.word	0x2000031c
 8002284:	20000008 	.word	0x20000008
 8002288:	2000000c 	.word	0x2000000c
 800228c:	20000010 	.word	0x20000010

		} else if (Valor >= 6 && Valor < 12) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b05      	cmp	r3, #5
 8002294:	f340 8146 	ble.w	8002524 <LEDHandler+0xe34>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b0b      	cmp	r3, #11
 800229c:	f300 8142 	bgt.w	8002524 <LEDHandler+0xe34>

			Set_LED(var2, Red, Green, Blue);			var2++;	//LED1
 80022a0:	4b9c      	ldr	r3, [pc, #624]	; (8002514 <LEDHandler+0xe24>)
 80022a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a6:	4618      	mov	r0, r3
 80022a8:	4b9b      	ldr	r3, [pc, #620]	; (8002518 <LEDHandler+0xe28>)
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	4b9b      	ldr	r3, [pc, #620]	; (800251c <LEDHandler+0xe2c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b9b      	ldr	r3, [pc, #620]	; (8002520 <LEDHandler+0xe30>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f005 f8a6 	bl	8007404 <Set_LED>
 80022b8:	4b96      	ldr	r3, [pc, #600]	; (8002514 <LEDHandler+0xe24>)
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	4b93      	ldr	r3, [pc, #588]	; (8002514 <LEDHandler+0xe24>)
 80022c8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED2
 80022ca:	4b92      	ldr	r3, [pc, #584]	; (8002514 <LEDHandler+0xe24>)
 80022cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d0:	4618      	mov	r0, r3
 80022d2:	4b91      	ldr	r3, [pc, #580]	; (8002518 <LEDHandler+0xe28>)
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	4b91      	ldr	r3, [pc, #580]	; (800251c <LEDHandler+0xe2c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b91      	ldr	r3, [pc, #580]	; (8002520 <LEDHandler+0xe30>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f005 f891 	bl	8007404 <Set_LED>
 80022e2:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <LEDHandler+0xe24>)
 80022e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b21a      	sxth	r2, r3
 80022f0:	4b88      	ldr	r3, [pc, #544]	; (8002514 <LEDHandler+0xe24>)
 80022f2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED3
 80022f4:	4b87      	ldr	r3, [pc, #540]	; (8002514 <LEDHandler+0xe24>)
 80022f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fa:	4618      	mov	r0, r3
 80022fc:	2300      	movs	r3, #0
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	f005 f87f 	bl	8007404 <Set_LED>
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <LEDHandler+0xe24>)
 8002308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230c:	b29b      	uxth	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	b29b      	uxth	r3, r3
 8002312:	b21a      	sxth	r2, r3
 8002314:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <LEDHandler+0xe24>)
 8002316:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED4
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <LEDHandler+0xe24>)
 800231a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231e:	4618      	mov	r0, r3
 8002320:	2300      	movs	r3, #0
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	f005 f86d 	bl	8007404 <Set_LED>
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <LEDHandler+0xe24>)
 800232c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002330:	b29b      	uxth	r3, r3
 8002332:	3301      	adds	r3, #1
 8002334:	b29b      	uxth	r3, r3
 8002336:	b21a      	sxth	r2, r3
 8002338:	4b76      	ldr	r3, [pc, #472]	; (8002514 <LEDHandler+0xe24>)
 800233a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED5
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <LEDHandler+0xe24>)
 800233e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002342:	4618      	mov	r0, r3
 8002344:	2300      	movs	r3, #0
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	f005 f85b 	bl	8007404 <Set_LED>
 800234e:	4b71      	ldr	r3, [pc, #452]	; (8002514 <LEDHandler+0xe24>)
 8002350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002354:	b29b      	uxth	r3, r3
 8002356:	3301      	adds	r3, #1
 8002358:	b29b      	uxth	r3, r3
 800235a:	b21a      	sxth	r2, r3
 800235c:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <LEDHandler+0xe24>)
 800235e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED6
 8002360:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <LEDHandler+0xe24>)
 8002362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002366:	4618      	mov	r0, r3
 8002368:	2300      	movs	r3, #0
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	f005 f849 	bl	8007404 <Set_LED>
 8002372:	4b68      	ldr	r3, [pc, #416]	; (8002514 <LEDHandler+0xe24>)
 8002374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002378:	b29b      	uxth	r3, r3
 800237a:	3301      	adds	r3, #1
 800237c:	b29b      	uxth	r3, r3
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b64      	ldr	r3, [pc, #400]	; (8002514 <LEDHandler+0xe24>)
 8002382:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED7
 8002384:	4b63      	ldr	r3, [pc, #396]	; (8002514 <LEDHandler+0xe24>)
 8002386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238a:	4618      	mov	r0, r3
 800238c:	2300      	movs	r3, #0
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	f005 f837 	bl	8007404 <Set_LED>
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <LEDHandler+0xe24>)
 8002398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239c:	b29b      	uxth	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <LEDHandler+0xe24>)
 80023a6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED8
 80023a8:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <LEDHandler+0xe24>)
 80023aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ae:	4618      	mov	r0, r3
 80023b0:	2300      	movs	r3, #0
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	f005 f825 	bl	8007404 <Set_LED>
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <LEDHandler+0xe24>)
 80023bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	4b52      	ldr	r3, [pc, #328]	; (8002514 <LEDHandler+0xe24>)
 80023ca:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED9
 80023cc:	4b51      	ldr	r3, [pc, #324]	; (8002514 <LEDHandler+0xe24>)
 80023ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d2:	4618      	mov	r0, r3
 80023d4:	2300      	movs	r3, #0
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	f005 f813 	bl	8007404 <Set_LED>
 80023de:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <LEDHandler+0xe24>)
 80023e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	4b49      	ldr	r3, [pc, #292]	; (8002514 <LEDHandler+0xe24>)
 80023ee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED10
 80023f0:	4b48      	ldr	r3, [pc, #288]	; (8002514 <LEDHandler+0xe24>)
 80023f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f6:	4618      	mov	r0, r3
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	f005 f801 	bl	8007404 <Set_LED>
 8002402:	4b44      	ldr	r3, [pc, #272]	; (8002514 <LEDHandler+0xe24>)
 8002404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002408:	b29b      	uxth	r3, r3
 800240a:	3301      	adds	r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	b21a      	sxth	r2, r3
 8002410:	4b40      	ldr	r3, [pc, #256]	; (8002514 <LEDHandler+0xe24>)
 8002412:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED11
 8002414:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <LEDHandler+0xe24>)
 8002416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800241a:	4618      	mov	r0, r3
 800241c:	2300      	movs	r3, #0
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	f004 ffef 	bl	8007404 <Set_LED>
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <LEDHandler+0xe24>)
 8002428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242c:	b29b      	uxth	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	b29b      	uxth	r3, r3
 8002432:	b21a      	sxth	r2, r3
 8002434:	4b37      	ldr	r3, [pc, #220]	; (8002514 <LEDHandler+0xe24>)
 8002436:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED12
 8002438:	4b36      	ldr	r3, [pc, #216]	; (8002514 <LEDHandler+0xe24>)
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	4618      	mov	r0, r3
 8002440:	2300      	movs	r3, #0
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	f004 ffdd 	bl	8007404 <Set_LED>
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <LEDHandler+0xe24>)
 800244c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002450:	b29b      	uxth	r3, r3
 8002452:	3301      	adds	r3, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	b21a      	sxth	r2, r3
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <LEDHandler+0xe24>)
 800245a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED13
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <LEDHandler+0xe24>)
 800245e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002462:	4618      	mov	r0, r3
 8002464:	2300      	movs	r3, #0
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	f004 ffcb 	bl	8007404 <Set_LED>
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <LEDHandler+0xe24>)
 8002470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002474:	b29b      	uxth	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b29b      	uxth	r3, r3
 800247a:	b21a      	sxth	r2, r3
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <LEDHandler+0xe24>)
 800247e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED14
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <LEDHandler+0xe24>)
 8002482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002486:	4618      	mov	r0, r3
 8002488:	2300      	movs	r3, #0
 800248a:	2200      	movs	r2, #0
 800248c:	2100      	movs	r1, #0
 800248e:	f004 ffb9 	bl	8007404 <Set_LED>
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <LEDHandler+0xe24>)
 8002494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002498:	b29b      	uxth	r3, r3
 800249a:	3301      	adds	r3, #1
 800249c:	b29b      	uxth	r3, r3
 800249e:	b21a      	sxth	r2, r3
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <LEDHandler+0xe24>)
 80024a2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED15
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <LEDHandler+0xe24>)
 80024a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024aa:	4618      	mov	r0, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	f004 ffa7 	bl	8007404 <Set_LED>
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <LEDHandler+0xe24>)
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <LEDHandler+0xe24>)
 80024c6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED16
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <LEDHandler+0xe24>)
 80024ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ce:	4618      	mov	r0, r3
 80024d0:	2300      	movs	r3, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	f004 ff95 	bl	8007404 <Set_LED>
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <LEDHandler+0xe24>)
 80024dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <LEDHandler+0xe24>)
 80024ea:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED17
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <LEDHandler+0xe24>)
 80024ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f2:	4618      	mov	r0, r3
 80024f4:	2300      	movs	r3, #0
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	f004 ff83 	bl	8007404 <Set_LED>
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <LEDHandler+0xe24>)
 8002500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002504:	b29b      	uxth	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	b29b      	uxth	r3, r3
 800250a:	b21a      	sxth	r2, r3
 800250c:	4b01      	ldr	r3, [pc, #4]	; (8002514 <LEDHandler+0xe24>)
 800250e:	801a      	strh	r2, [r3, #0]
 8002510:	f002 bcea 	b.w	8004ee8 <LEDHandler+0x37f8>
 8002514:	2000031c 	.word	0x2000031c
 8002518:	20000008 	.word	0x20000008
 800251c:	2000000c 	.word	0x2000000c
 8002520:	20000010 	.word	0x20000010

		} else if (Valor >= 12 && Valor < 18) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b0b      	cmp	r3, #11
 8002528:	f340 814a 	ble.w	80027c0 <LEDHandler+0x10d0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b11      	cmp	r3, #17
 8002530:	f300 8146 	bgt.w	80027c0 <LEDHandler+0x10d0>

			Set_LED(var2, Red, Green, Blue);			var2++;	//LED1
 8002534:	4b9e      	ldr	r3, [pc, #632]	; (80027b0 <LEDHandler+0x10c0>)
 8002536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253a:	4618      	mov	r0, r3
 800253c:	4b9d      	ldr	r3, [pc, #628]	; (80027b4 <LEDHandler+0x10c4>)
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	4b9d      	ldr	r3, [pc, #628]	; (80027b8 <LEDHandler+0x10c8>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b9d      	ldr	r3, [pc, #628]	; (80027bc <LEDHandler+0x10cc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f004 ff5c 	bl	8007404 <Set_LED>
 800254c:	4b98      	ldr	r3, [pc, #608]	; (80027b0 <LEDHandler+0x10c0>)
 800254e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002552:	b29b      	uxth	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	b29b      	uxth	r3, r3
 8002558:	b21a      	sxth	r2, r3
 800255a:	4b95      	ldr	r3, [pc, #596]	; (80027b0 <LEDHandler+0x10c0>)
 800255c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED2
 800255e:	4b94      	ldr	r3, [pc, #592]	; (80027b0 <LEDHandler+0x10c0>)
 8002560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002564:	4618      	mov	r0, r3
 8002566:	4b93      	ldr	r3, [pc, #588]	; (80027b4 <LEDHandler+0x10c4>)
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	4b93      	ldr	r3, [pc, #588]	; (80027b8 <LEDHandler+0x10c8>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b93      	ldr	r3, [pc, #588]	; (80027bc <LEDHandler+0x10cc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f004 ff47 	bl	8007404 <Set_LED>
 8002576:	4b8e      	ldr	r3, [pc, #568]	; (80027b0 <LEDHandler+0x10c0>)
 8002578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257c:	b29b      	uxth	r3, r3
 800257e:	3301      	adds	r3, #1
 8002580:	b29b      	uxth	r3, r3
 8002582:	b21a      	sxth	r2, r3
 8002584:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <LEDHandler+0x10c0>)
 8002586:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED3
 8002588:	4b89      	ldr	r3, [pc, #548]	; (80027b0 <LEDHandler+0x10c0>)
 800258a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258e:	4618      	mov	r0, r3
 8002590:	4b88      	ldr	r3, [pc, #544]	; (80027b4 <LEDHandler+0x10c4>)
 8002592:	6819      	ldr	r1, [r3, #0]
 8002594:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <LEDHandler+0x10c8>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b88      	ldr	r3, [pc, #544]	; (80027bc <LEDHandler+0x10cc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f004 ff32 	bl	8007404 <Set_LED>
 80025a0:	4b83      	ldr	r3, [pc, #524]	; (80027b0 <LEDHandler+0x10c0>)
 80025a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <LEDHandler+0x10c0>)
 80025b0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED4
 80025b2:	4b7f      	ldr	r3, [pc, #508]	; (80027b0 <LEDHandler+0x10c0>)
 80025b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b8:	4618      	mov	r0, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	f004 ff20 	bl	8007404 <Set_LED>
 80025c4:	4b7a      	ldr	r3, [pc, #488]	; (80027b0 <LEDHandler+0x10c0>)
 80025c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	4b77      	ldr	r3, [pc, #476]	; (80027b0 <LEDHandler+0x10c0>)
 80025d4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED5
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <LEDHandler+0x10c0>)
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	4618      	mov	r0, r3
 80025de:	2300      	movs	r3, #0
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	f004 ff0e 	bl	8007404 <Set_LED>
 80025e8:	4b71      	ldr	r3, [pc, #452]	; (80027b0 <LEDHandler+0x10c0>)
 80025ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	4b6e      	ldr	r3, [pc, #440]	; (80027b0 <LEDHandler+0x10c0>)
 80025f8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED6
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <LEDHandler+0x10c0>)
 80025fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002600:	4618      	mov	r0, r3
 8002602:	2300      	movs	r3, #0
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	f004 fefc 	bl	8007404 <Set_LED>
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <LEDHandler+0x10c0>)
 800260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002612:	b29b      	uxth	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21a      	sxth	r2, r3
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <LEDHandler+0x10c0>)
 800261c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED7
 800261e:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <LEDHandler+0x10c0>)
 8002620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002624:	4618      	mov	r0, r3
 8002626:	2300      	movs	r3, #0
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	f004 feea 	bl	8007404 <Set_LED>
 8002630:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <LEDHandler+0x10c0>)
 8002632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002636:	b29b      	uxth	r3, r3
 8002638:	3301      	adds	r3, #1
 800263a:	b29b      	uxth	r3, r3
 800263c:	b21a      	sxth	r2, r3
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <LEDHandler+0x10c0>)
 8002640:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED8
 8002642:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <LEDHandler+0x10c0>)
 8002644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002648:	4618      	mov	r0, r3
 800264a:	2300      	movs	r3, #0
 800264c:	2200      	movs	r2, #0
 800264e:	2100      	movs	r1, #0
 8002650:	f004 fed8 	bl	8007404 <Set_LED>
 8002654:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <LEDHandler+0x10c0>)
 8002656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265a:	b29b      	uxth	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	b21a      	sxth	r2, r3
 8002662:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <LEDHandler+0x10c0>)
 8002664:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED9
 8002666:	4b52      	ldr	r3, [pc, #328]	; (80027b0 <LEDHandler+0x10c0>)
 8002668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266c:	4618      	mov	r0, r3
 800266e:	2300      	movs	r3, #0
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	f004 fec6 	bl	8007404 <Set_LED>
 8002678:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <LEDHandler+0x10c0>)
 800267a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267e:	b29b      	uxth	r3, r3
 8002680:	3301      	adds	r3, #1
 8002682:	b29b      	uxth	r3, r3
 8002684:	b21a      	sxth	r2, r3
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <LEDHandler+0x10c0>)
 8002688:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED10
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <LEDHandler+0x10c0>)
 800268c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002690:	4618      	mov	r0, r3
 8002692:	2300      	movs	r3, #0
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	f004 feb4 	bl	8007404 <Set_LED>
 800269c:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <LEDHandler+0x10c0>)
 800269e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <LEDHandler+0x10c0>)
 80026ac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED11
 80026ae:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <LEDHandler+0x10c0>)
 80026b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b4:	4618      	mov	r0, r3
 80026b6:	2300      	movs	r3, #0
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	f004 fea2 	bl	8007404 <Set_LED>
 80026c0:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <LEDHandler+0x10c0>)
 80026c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <LEDHandler+0x10c0>)
 80026d0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED12
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <LEDHandler+0x10c0>)
 80026d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d8:	4618      	mov	r0, r3
 80026da:	2300      	movs	r3, #0
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	f004 fe90 	bl	8007404 <Set_LED>
 80026e4:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <LEDHandler+0x10c0>)
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	b21a      	sxth	r2, r3
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <LEDHandler+0x10c0>)
 80026f4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED13
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <LEDHandler+0x10c0>)
 80026f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026fc:	4618      	mov	r0, r3
 80026fe:	2300      	movs	r3, #0
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	f004 fe7e 	bl	8007404 <Set_LED>
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <LEDHandler+0x10c0>)
 800270a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270e:	b29b      	uxth	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	b21a      	sxth	r2, r3
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <LEDHandler+0x10c0>)
 8002718:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED14
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <LEDHandler+0x10c0>)
 800271c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002720:	4618      	mov	r0, r3
 8002722:	2300      	movs	r3, #0
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	f004 fe6c 	bl	8007404 <Set_LED>
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <LEDHandler+0x10c0>)
 800272e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002732:	b29b      	uxth	r3, r3
 8002734:	3301      	adds	r3, #1
 8002736:	b29b      	uxth	r3, r3
 8002738:	b21a      	sxth	r2, r3
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <LEDHandler+0x10c0>)
 800273c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED15
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <LEDHandler+0x10c0>)
 8002740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002744:	4618      	mov	r0, r3
 8002746:	2300      	movs	r3, #0
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	f004 fe5a 	bl	8007404 <Set_LED>
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <LEDHandler+0x10c0>)
 8002752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002756:	b29b      	uxth	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	b21a      	sxth	r2, r3
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <LEDHandler+0x10c0>)
 8002760:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED16
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <LEDHandler+0x10c0>)
 8002764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002768:	4618      	mov	r0, r3
 800276a:	2300      	movs	r3, #0
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	f004 fe48 	bl	8007404 <Set_LED>
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <LEDHandler+0x10c0>)
 8002776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277a:	b29b      	uxth	r3, r3
 800277c:	3301      	adds	r3, #1
 800277e:	b29b      	uxth	r3, r3
 8002780:	b21a      	sxth	r2, r3
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <LEDHandler+0x10c0>)
 8002784:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED17
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <LEDHandler+0x10c0>)
 8002788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800278c:	4618      	mov	r0, r3
 800278e:	2300      	movs	r3, #0
 8002790:	2200      	movs	r2, #0
 8002792:	2100      	movs	r1, #0
 8002794:	f004 fe36 	bl	8007404 <Set_LED>
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <LEDHandler+0x10c0>)
 800279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <LEDHandler+0x10c0>)
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	f002 bb9d 	b.w	8004ee8 <LEDHandler+0x37f8>
 80027ae:	bf00      	nop
 80027b0:	2000031c 	.word	0x2000031c
 80027b4:	20000008 	.word	0x20000008
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	20000010 	.word	0x20000010

		} else if (Valor >= 18 && Valor < 24) {
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b11      	cmp	r3, #17
 80027c4:	f340 814c 	ble.w	8002a60 <LEDHandler+0x1370>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b17      	cmp	r3, #23
 80027cc:	f300 8148 	bgt.w	8002a60 <LEDHandler+0x1370>

			Set_LED(var2, Red, Green, Blue);			var2++;	//LED1
 80027d0:	4b9f      	ldr	r3, [pc, #636]	; (8002a50 <LEDHandler+0x1360>)
 80027d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d6:	4618      	mov	r0, r3
 80027d8:	4b9e      	ldr	r3, [pc, #632]	; (8002a54 <LEDHandler+0x1364>)
 80027da:	6819      	ldr	r1, [r3, #0]
 80027dc:	4b9e      	ldr	r3, [pc, #632]	; (8002a58 <LEDHandler+0x1368>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b9e      	ldr	r3, [pc, #632]	; (8002a5c <LEDHandler+0x136c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f004 fe0e 	bl	8007404 <Set_LED>
 80027e8:	4b99      	ldr	r3, [pc, #612]	; (8002a50 <LEDHandler+0x1360>)
 80027ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <LEDHandler+0x1360>)
 80027f8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED2
 80027fa:	4b95      	ldr	r3, [pc, #596]	; (8002a50 <LEDHandler+0x1360>)
 80027fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002800:	4618      	mov	r0, r3
 8002802:	4b94      	ldr	r3, [pc, #592]	; (8002a54 <LEDHandler+0x1364>)
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	4b94      	ldr	r3, [pc, #592]	; (8002a58 <LEDHandler+0x1368>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b94      	ldr	r3, [pc, #592]	; (8002a5c <LEDHandler+0x136c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f004 fdf9 	bl	8007404 <Set_LED>
 8002812:	4b8f      	ldr	r3, [pc, #572]	; (8002a50 <LEDHandler+0x1360>)
 8002814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002818:	b29b      	uxth	r3, r3
 800281a:	3301      	adds	r3, #1
 800281c:	b29b      	uxth	r3, r3
 800281e:	b21a      	sxth	r2, r3
 8002820:	4b8b      	ldr	r3, [pc, #556]	; (8002a50 <LEDHandler+0x1360>)
 8002822:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED3
 8002824:	4b8a      	ldr	r3, [pc, #552]	; (8002a50 <LEDHandler+0x1360>)
 8002826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800282a:	4618      	mov	r0, r3
 800282c:	4b89      	ldr	r3, [pc, #548]	; (8002a54 <LEDHandler+0x1364>)
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	4b89      	ldr	r3, [pc, #548]	; (8002a58 <LEDHandler+0x1368>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b89      	ldr	r3, [pc, #548]	; (8002a5c <LEDHandler+0x136c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f004 fde4 	bl	8007404 <Set_LED>
 800283c:	4b84      	ldr	r3, [pc, #528]	; (8002a50 <LEDHandler+0x1360>)
 800283e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002842:	b29b      	uxth	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	b29b      	uxth	r3, r3
 8002848:	b21a      	sxth	r2, r3
 800284a:	4b81      	ldr	r3, [pc, #516]	; (8002a50 <LEDHandler+0x1360>)
 800284c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED4
 800284e:	4b80      	ldr	r3, [pc, #512]	; (8002a50 <LEDHandler+0x1360>)
 8002850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002854:	4618      	mov	r0, r3
 8002856:	4b7f      	ldr	r3, [pc, #508]	; (8002a54 <LEDHandler+0x1364>)
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <LEDHandler+0x1368>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <LEDHandler+0x136c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f004 fdcf 	bl	8007404 <Set_LED>
 8002866:	4b7a      	ldr	r3, [pc, #488]	; (8002a50 <LEDHandler+0x1360>)
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	b29b      	uxth	r3, r3
 800286e:	3301      	adds	r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	b21a      	sxth	r2, r3
 8002874:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <LEDHandler+0x1360>)
 8002876:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED5
 8002878:	4b75      	ldr	r3, [pc, #468]	; (8002a50 <LEDHandler+0x1360>)
 800287a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287e:	4618      	mov	r0, r3
 8002880:	2300      	movs	r3, #0
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	f004 fdbd 	bl	8007404 <Set_LED>
 800288a:	4b71      	ldr	r3, [pc, #452]	; (8002a50 <LEDHandler+0x1360>)
 800288c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002890:	b29b      	uxth	r3, r3
 8002892:	3301      	adds	r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	b21a      	sxth	r2, r3
 8002898:	4b6d      	ldr	r3, [pc, #436]	; (8002a50 <LEDHandler+0x1360>)
 800289a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED6
 800289c:	4b6c      	ldr	r3, [pc, #432]	; (8002a50 <LEDHandler+0x1360>)
 800289e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a2:	4618      	mov	r0, r3
 80028a4:	2300      	movs	r3, #0
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	f004 fdab 	bl	8007404 <Set_LED>
 80028ae:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <LEDHandler+0x1360>)
 80028b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <LEDHandler+0x1360>)
 80028be:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED7
 80028c0:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <LEDHandler+0x1360>)
 80028c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c6:	4618      	mov	r0, r3
 80028c8:	2300      	movs	r3, #0
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	f004 fd99 	bl	8007404 <Set_LED>
 80028d2:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <LEDHandler+0x1360>)
 80028d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	b21a      	sxth	r2, r3
 80028e0:	4b5b      	ldr	r3, [pc, #364]	; (8002a50 <LEDHandler+0x1360>)
 80028e2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED8
 80028e4:	4b5a      	ldr	r3, [pc, #360]	; (8002a50 <LEDHandler+0x1360>)
 80028e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ea:	4618      	mov	r0, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	f004 fd87 	bl	8007404 <Set_LED>
 80028f6:	4b56      	ldr	r3, [pc, #344]	; (8002a50 <LEDHandler+0x1360>)
 80028f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	b29b      	uxth	r3, r3
 8002902:	b21a      	sxth	r2, r3
 8002904:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <LEDHandler+0x1360>)
 8002906:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED9
 8002908:	4b51      	ldr	r3, [pc, #324]	; (8002a50 <LEDHandler+0x1360>)
 800290a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290e:	4618      	mov	r0, r3
 8002910:	2300      	movs	r3, #0
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	f004 fd75 	bl	8007404 <Set_LED>
 800291a:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <LEDHandler+0x1360>)
 800291c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002920:	b29b      	uxth	r3, r3
 8002922:	3301      	adds	r3, #1
 8002924:	b29b      	uxth	r3, r3
 8002926:	b21a      	sxth	r2, r3
 8002928:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <LEDHandler+0x1360>)
 800292a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED10
 800292c:	4b48      	ldr	r3, [pc, #288]	; (8002a50 <LEDHandler+0x1360>)
 800292e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002932:	4618      	mov	r0, r3
 8002934:	2300      	movs	r3, #0
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	f004 fd63 	bl	8007404 <Set_LED>
 800293e:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <LEDHandler+0x1360>)
 8002940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002944:	b29b      	uxth	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	b29b      	uxth	r3, r3
 800294a:	b21a      	sxth	r2, r3
 800294c:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <LEDHandler+0x1360>)
 800294e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED11
 8002950:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <LEDHandler+0x1360>)
 8002952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002956:	4618      	mov	r0, r3
 8002958:	2300      	movs	r3, #0
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	f004 fd51 	bl	8007404 <Set_LED>
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <LEDHandler+0x1360>)
 8002964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002968:	b29b      	uxth	r3, r3
 800296a:	3301      	adds	r3, #1
 800296c:	b29b      	uxth	r3, r3
 800296e:	b21a      	sxth	r2, r3
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <LEDHandler+0x1360>)
 8002972:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED12
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <LEDHandler+0x1360>)
 8002976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297a:	4618      	mov	r0, r3
 800297c:	2300      	movs	r3, #0
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	f004 fd3f 	bl	8007404 <Set_LED>
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <LEDHandler+0x1360>)
 8002988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298c:	b29b      	uxth	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	b29b      	uxth	r3, r3
 8002992:	b21a      	sxth	r2, r3
 8002994:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <LEDHandler+0x1360>)
 8002996:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED13
 8002998:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <LEDHandler+0x1360>)
 800299a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299e:	4618      	mov	r0, r3
 80029a0:	2300      	movs	r3, #0
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	f004 fd2d 	bl	8007404 <Set_LED>
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <LEDHandler+0x1360>)
 80029ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <LEDHandler+0x1360>)
 80029ba:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED14
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <LEDHandler+0x1360>)
 80029be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c2:	4618      	mov	r0, r3
 80029c4:	2300      	movs	r3, #0
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	f004 fd1b 	bl	8007404 <Set_LED>
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <LEDHandler+0x1360>)
 80029d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b21a      	sxth	r2, r3
 80029dc:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <LEDHandler+0x1360>)
 80029de:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED15
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <LEDHandler+0x1360>)
 80029e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e6:	4618      	mov	r0, r3
 80029e8:	2300      	movs	r3, #0
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	f004 fd09 	bl	8007404 <Set_LED>
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <LEDHandler+0x1360>)
 80029f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <LEDHandler+0x1360>)
 8002a02:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED16
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <LEDHandler+0x1360>)
 8002a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	f004 fcf7 	bl	8007404 <Set_LED>
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <LEDHandler+0x1360>)
 8002a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <LEDHandler+0x1360>)
 8002a26:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED17
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <LEDHandler+0x1360>)
 8002a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	2300      	movs	r3, #0
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	f004 fce5 	bl	8007404 <Set_LED>
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <LEDHandler+0x1360>)
 8002a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	4b01      	ldr	r3, [pc, #4]	; (8002a50 <LEDHandler+0x1360>)
 8002a4a:	801a      	strh	r2, [r3, #0]
 8002a4c:	f002 ba4c 	b.w	8004ee8 <LEDHandler+0x37f8>
 8002a50:	2000031c 	.word	0x2000031c
 8002a54:	20000008 	.word	0x20000008
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	20000010 	.word	0x20000010

		} else if (Valor >= 24 && Valor < 30) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b17      	cmp	r3, #23
 8002a64:	f340 8150 	ble.w	8002d08 <LEDHandler+0x1618>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b1d      	cmp	r3, #29
 8002a6c:	f300 814c 	bgt.w	8002d08 <LEDHandler+0x1618>

			Set_LED(var2, Red, Green, Blue);			var2++;	//LED1
 8002a70:	4ba1      	ldr	r3, [pc, #644]	; (8002cf8 <LEDHandler+0x1608>)
 8002a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a76:	4618      	mov	r0, r3
 8002a78:	4ba0      	ldr	r3, [pc, #640]	; (8002cfc <LEDHandler+0x160c>)
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	4ba0      	ldr	r3, [pc, #640]	; (8002d00 <LEDHandler+0x1610>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4ba0      	ldr	r3, [pc, #640]	; (8002d04 <LEDHandler+0x1614>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f004 fcbe 	bl	8007404 <Set_LED>
 8002a88:	4b9b      	ldr	r3, [pc, #620]	; (8002cf8 <LEDHandler+0x1608>)
 8002a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	4b98      	ldr	r3, [pc, #608]	; (8002cf8 <LEDHandler+0x1608>)
 8002a98:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED2
 8002a9a:	4b97      	ldr	r3, [pc, #604]	; (8002cf8 <LEDHandler+0x1608>)
 8002a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	4b96      	ldr	r3, [pc, #600]	; (8002cfc <LEDHandler+0x160c>)
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	4b96      	ldr	r3, [pc, #600]	; (8002d00 <LEDHandler+0x1610>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b96      	ldr	r3, [pc, #600]	; (8002d04 <LEDHandler+0x1614>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f004 fca9 	bl	8007404 <Set_LED>
 8002ab2:	4b91      	ldr	r3, [pc, #580]	; (8002cf8 <LEDHandler+0x1608>)
 8002ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	b21a      	sxth	r2, r3
 8002ac0:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <LEDHandler+0x1608>)
 8002ac2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED3
 8002ac4:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <LEDHandler+0x1608>)
 8002ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aca:	4618      	mov	r0, r3
 8002acc:	4b8b      	ldr	r3, [pc, #556]	; (8002cfc <LEDHandler+0x160c>)
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <LEDHandler+0x1610>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b8b      	ldr	r3, [pc, #556]	; (8002d04 <LEDHandler+0x1614>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f004 fc94 	bl	8007404 <Set_LED>
 8002adc:	4b86      	ldr	r3, [pc, #536]	; (8002cf8 <LEDHandler+0x1608>)
 8002ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	4b83      	ldr	r3, [pc, #524]	; (8002cf8 <LEDHandler+0x1608>)
 8002aec:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED4
 8002aee:	4b82      	ldr	r3, [pc, #520]	; (8002cf8 <LEDHandler+0x1608>)
 8002af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af4:	4618      	mov	r0, r3
 8002af6:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <LEDHandler+0x160c>)
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <LEDHandler+0x1610>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <LEDHandler+0x1614>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f004 fc7f 	bl	8007404 <Set_LED>
 8002b06:	4b7c      	ldr	r3, [pc, #496]	; (8002cf8 <LEDHandler+0x1608>)
 8002b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	b21a      	sxth	r2, r3
 8002b14:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <LEDHandler+0x1608>)
 8002b16:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;	//LED5
 8002b18:	4b77      	ldr	r3, [pc, #476]	; (8002cf8 <LEDHandler+0x1608>)
 8002b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	4b76      	ldr	r3, [pc, #472]	; (8002cfc <LEDHandler+0x160c>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <LEDHandler+0x1610>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <LEDHandler+0x1614>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f004 fc6a 	bl	8007404 <Set_LED>
 8002b30:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <LEDHandler+0x1608>)
 8002b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	b21a      	sxth	r2, r3
 8002b3e:	4b6e      	ldr	r3, [pc, #440]	; (8002cf8 <LEDHandler+0x1608>)
 8002b40:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED6
 8002b42:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <LEDHandler+0x1608>)
 8002b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f004 fc58 	bl	8007404 <Set_LED>
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <LEDHandler+0x1608>)
 8002b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	b21a      	sxth	r2, r3
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <LEDHandler+0x1608>)
 8002b64:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED7
 8002b66:	4b64      	ldr	r3, [pc, #400]	; (8002cf8 <LEDHandler+0x1608>)
 8002b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	f004 fc46 	bl	8007404 <Set_LED>
 8002b78:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <LEDHandler+0x1608>)
 8002b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	b21a      	sxth	r2, r3
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <LEDHandler+0x1608>)
 8002b88:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED8
 8002b8a:	4b5b      	ldr	r3, [pc, #364]	; (8002cf8 <LEDHandler+0x1608>)
 8002b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b90:	4618      	mov	r0, r3
 8002b92:	2300      	movs	r3, #0
 8002b94:	2200      	movs	r2, #0
 8002b96:	2100      	movs	r1, #0
 8002b98:	f004 fc34 	bl	8007404 <Set_LED>
 8002b9c:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <LEDHandler+0x1608>)
 8002b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <LEDHandler+0x1608>)
 8002bac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED9
 8002bae:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <LEDHandler+0x1608>)
 8002bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2100      	movs	r1, #0
 8002bbc:	f004 fc22 	bl	8007404 <Set_LED>
 8002bc0:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <LEDHandler+0x1608>)
 8002bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	4b4a      	ldr	r3, [pc, #296]	; (8002cf8 <LEDHandler+0x1608>)
 8002bd0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED10
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <LEDHandler+0x1608>)
 8002bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	f004 fc10 	bl	8007404 <Set_LED>
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <LEDHandler+0x1608>)
 8002be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	b21a      	sxth	r2, r3
 8002bf2:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <LEDHandler+0x1608>)
 8002bf4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED11
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <LEDHandler+0x1608>)
 8002bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2200      	movs	r2, #0
 8002c02:	2100      	movs	r1, #0
 8002c04:	f004 fbfe 	bl	8007404 <Set_LED>
 8002c08:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <LEDHandler+0x1608>)
 8002c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <LEDHandler+0x1608>)
 8002c18:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED12
 8002c1a:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <LEDHandler+0x1608>)
 8002c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c20:	4618      	mov	r0, r3
 8002c22:	2300      	movs	r3, #0
 8002c24:	2200      	movs	r2, #0
 8002c26:	2100      	movs	r1, #0
 8002c28:	f004 fbec 	bl	8007404 <Set_LED>
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <LEDHandler+0x1608>)
 8002c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <LEDHandler+0x1608>)
 8002c3c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED13
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <LEDHandler+0x1608>)
 8002c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c44:	4618      	mov	r0, r3
 8002c46:	2300      	movs	r3, #0
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	f004 fbda 	bl	8007404 <Set_LED>
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <LEDHandler+0x1608>)
 8002c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <LEDHandler+0x1608>)
 8002c60:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED14
 8002c62:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <LEDHandler+0x1608>)
 8002c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	f004 fbc8 	bl	8007404 <Set_LED>
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <LEDHandler+0x1608>)
 8002c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <LEDHandler+0x1608>)
 8002c84:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED15
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <LEDHandler+0x1608>)
 8002c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	f004 fbb6 	bl	8007404 <Set_LED>
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <LEDHandler+0x1608>)
 8002c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	b21a      	sxth	r2, r3
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <LEDHandler+0x1608>)
 8002ca8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED16
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <LEDHandler+0x1608>)
 8002cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f004 fba4 	bl	8007404 <Set_LED>
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <LEDHandler+0x1608>)
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b21a      	sxth	r2, r3
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <LEDHandler+0x1608>)
 8002ccc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;			//LED17
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <LEDHandler+0x1608>)
 8002cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	f004 fb92 	bl	8007404 <Set_LED>
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <LEDHandler+0x1608>)
 8002ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b21a      	sxth	r2, r3
 8002cee:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <LEDHandler+0x1608>)
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	f002 b8f9 	b.w	8004ee8 <LEDHandler+0x37f8>
 8002cf6:	bf00      	nop
 8002cf8:	2000031c 	.word	0x2000031c
 8002cfc:	20000008 	.word	0x20000008
 8002d00:	2000000c 	.word	0x2000000c
 8002d04:	20000010 	.word	0x20000010

		} else if (Valor >= 30 && Valor < 36) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b1d      	cmp	r3, #29
 8002d0c:	f340 8152 	ble.w	8002fb4 <LEDHandler+0x18c4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b23      	cmp	r3, #35	; 0x23
 8002d14:	f300 814e 	bgt.w	8002fb4 <LEDHandler+0x18c4>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8002d18:	4ba2      	ldr	r3, [pc, #648]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	4ba1      	ldr	r3, [pc, #644]	; (8002fa8 <LEDHandler+0x18b8>)
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	4ba1      	ldr	r3, [pc, #644]	; (8002fac <LEDHandler+0x18bc>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4ba1      	ldr	r3, [pc, #644]	; (8002fb0 <LEDHandler+0x18c0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f004 fb6a 	bl	8007404 <Set_LED>
 8002d30:	4b9c      	ldr	r3, [pc, #624]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	b21a      	sxth	r2, r3
 8002d3e:	4b99      	ldr	r3, [pc, #612]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d40:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8002d42:	4b98      	ldr	r3, [pc, #608]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	4b97      	ldr	r3, [pc, #604]	; (8002fa8 <LEDHandler+0x18b8>)
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	4b97      	ldr	r3, [pc, #604]	; (8002fac <LEDHandler+0x18bc>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b97      	ldr	r3, [pc, #604]	; (8002fb0 <LEDHandler+0x18c0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f004 fb55 	bl	8007404 <Set_LED>
 8002d5a:	4b92      	ldr	r3, [pc, #584]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b21a      	sxth	r2, r3
 8002d68:	4b8e      	ldr	r3, [pc, #568]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d6a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8002d6c:	4b8d      	ldr	r3, [pc, #564]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d72:	4618      	mov	r0, r3
 8002d74:	4b8c      	ldr	r3, [pc, #560]	; (8002fa8 <LEDHandler+0x18b8>)
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	4b8c      	ldr	r3, [pc, #560]	; (8002fac <LEDHandler+0x18bc>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <LEDHandler+0x18c0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f004 fb40 	bl	8007404 <Set_LED>
 8002d84:	4b87      	ldr	r3, [pc, #540]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	b21a      	sxth	r2, r3
 8002d92:	4b84      	ldr	r3, [pc, #528]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d94:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8002d96:	4b83      	ldr	r3, [pc, #524]	; (8002fa4 <LEDHandler+0x18b4>)
 8002d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <LEDHandler+0x18b8>)
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	4b82      	ldr	r3, [pc, #520]	; (8002fac <LEDHandler+0x18bc>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <LEDHandler+0x18c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f004 fb2b 	bl	8007404 <Set_LED>
 8002dae:	4b7d      	ldr	r3, [pc, #500]	; (8002fa4 <LEDHandler+0x18b4>)
 8002db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	b21a      	sxth	r2, r3
 8002dbc:	4b79      	ldr	r3, [pc, #484]	; (8002fa4 <LEDHandler+0x18b4>)
 8002dbe:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8002dc0:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <LEDHandler+0x18b4>)
 8002dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	4b77      	ldr	r3, [pc, #476]	; (8002fa8 <LEDHandler+0x18b8>)
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	4b77      	ldr	r3, [pc, #476]	; (8002fac <LEDHandler+0x18bc>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b77      	ldr	r3, [pc, #476]	; (8002fb0 <LEDHandler+0x18c0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f004 fb16 	bl	8007404 <Set_LED>
 8002dd8:	4b72      	ldr	r3, [pc, #456]	; (8002fa4 <LEDHandler+0x18b4>)
 8002dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b21a      	sxth	r2, r3
 8002de6:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <LEDHandler+0x18b4>)
 8002de8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8002dea:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <LEDHandler+0x18b4>)
 8002dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df0:	4618      	mov	r0, r3
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <LEDHandler+0x18b8>)
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <LEDHandler+0x18bc>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <LEDHandler+0x18c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f004 fb01 	bl	8007404 <Set_LED>
 8002e02:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e12:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002e14:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	f004 faef 	bl	8007404 <Set_LED>
 8002e26:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e36:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002e38:	4b5a      	ldr	r3, [pc, #360]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	f004 fadd 	bl	8007404 <Set_LED>
 8002e4a:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e5a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002e5c:	4b51      	ldr	r3, [pc, #324]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e62:	4618      	mov	r0, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	f004 facb 	bl	8007404 <Set_LED>
 8002e6e:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	b21a      	sxth	r2, r3
 8002e7c:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e7e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002e80:	4b48      	ldr	r3, [pc, #288]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e86:	4618      	mov	r0, r3
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f004 fab9 	bl	8007404 <Set_LED>
 8002e92:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <LEDHandler+0x18b4>)
 8002e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b21a      	sxth	r2, r3
 8002ea0:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <LEDHandler+0x18b4>)
 8002ea2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <LEDHandler+0x18b4>)
 8002ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	2300      	movs	r3, #0
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	f004 faa7 	bl	8007404 <Set_LED>
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <LEDHandler+0x18b4>)
 8002eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	b21a      	sxth	r2, r3
 8002ec4:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <LEDHandler+0x18b4>)
 8002ec6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <LEDHandler+0x18b4>)
 8002eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	f004 fa95 	bl	8007404 <Set_LED>
 8002eda:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <LEDHandler+0x18b4>)
 8002edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <LEDHandler+0x18b4>)
 8002eea:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <LEDHandler+0x18b4>)
 8002eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	f004 fa83 	bl	8007404 <Set_LED>
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b21a      	sxth	r2, r3
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f0e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	4618      	mov	r0, r3
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f004 fa71 	bl	8007404 <Set_LED>
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b21a      	sxth	r2, r3
 8002f30:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f32:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	f004 fa5f 	bl	8007404 <Set_LED>
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f56:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	2300      	movs	r3, #0
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	f004 fa4d 	bl	8007404 <Set_LED>
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f7a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f82:	4618      	mov	r0, r3
 8002f84:	2300      	movs	r3, #0
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	f004 fa3b 	bl	8007404 <Set_LED>
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b21a      	sxth	r2, r3
 8002f9c:	4b01      	ldr	r3, [pc, #4]	; (8002fa4 <LEDHandler+0x18b4>)
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	f001 bfa2 	b.w	8004ee8 <LEDHandler+0x37f8>
 8002fa4:	2000031c 	.word	0x2000031c
 8002fa8:	20000008 	.word	0x20000008
 8002fac:	2000000c 	.word	0x2000000c
 8002fb0:	20000010 	.word	0x20000010

		} else if (Valor >= 36 && Valor < 42) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b23      	cmp	r3, #35	; 0x23
 8002fb8:	f340 8156 	ble.w	8003268 <LEDHandler+0x1b78>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b29      	cmp	r3, #41	; 0x29
 8002fc0:	f300 8152 	bgt.w	8003268 <LEDHandler+0x1b78>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8002fc4:	4ba4      	ldr	r3, [pc, #656]	; (8003258 <LEDHandler+0x1b68>)
 8002fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4ba3      	ldr	r3, [pc, #652]	; (800325c <LEDHandler+0x1b6c>)
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	4ba3      	ldr	r3, [pc, #652]	; (8003260 <LEDHandler+0x1b70>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4ba3      	ldr	r3, [pc, #652]	; (8003264 <LEDHandler+0x1b74>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f004 fa14 	bl	8007404 <Set_LED>
 8002fdc:	4b9e      	ldr	r3, [pc, #632]	; (8003258 <LEDHandler+0x1b68>)
 8002fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	4b9b      	ldr	r3, [pc, #620]	; (8003258 <LEDHandler+0x1b68>)
 8002fec:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8002fee:	4b9a      	ldr	r3, [pc, #616]	; (8003258 <LEDHandler+0x1b68>)
 8002ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	4b99      	ldr	r3, [pc, #612]	; (800325c <LEDHandler+0x1b6c>)
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	4b99      	ldr	r3, [pc, #612]	; (8003260 <LEDHandler+0x1b70>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b99      	ldr	r3, [pc, #612]	; (8003264 <LEDHandler+0x1b74>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f004 f9ff 	bl	8007404 <Set_LED>
 8003006:	4b94      	ldr	r3, [pc, #592]	; (8003258 <LEDHandler+0x1b68>)
 8003008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300c:	b29b      	uxth	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	b29b      	uxth	r3, r3
 8003012:	b21a      	sxth	r2, r3
 8003014:	4b90      	ldr	r3, [pc, #576]	; (8003258 <LEDHandler+0x1b68>)
 8003016:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003018:	4b8f      	ldr	r3, [pc, #572]	; (8003258 <LEDHandler+0x1b68>)
 800301a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301e:	4618      	mov	r0, r3
 8003020:	4b8e      	ldr	r3, [pc, #568]	; (800325c <LEDHandler+0x1b6c>)
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	4b8e      	ldr	r3, [pc, #568]	; (8003260 <LEDHandler+0x1b70>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b8e      	ldr	r3, [pc, #568]	; (8003264 <LEDHandler+0x1b74>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f004 f9ea 	bl	8007404 <Set_LED>
 8003030:	4b89      	ldr	r3, [pc, #548]	; (8003258 <LEDHandler+0x1b68>)
 8003032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003036:	b29b      	uxth	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	b21a      	sxth	r2, r3
 800303e:	4b86      	ldr	r3, [pc, #536]	; (8003258 <LEDHandler+0x1b68>)
 8003040:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003042:	4b85      	ldr	r3, [pc, #532]	; (8003258 <LEDHandler+0x1b68>)
 8003044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003048:	4618      	mov	r0, r3
 800304a:	4b84      	ldr	r3, [pc, #528]	; (800325c <LEDHandler+0x1b6c>)
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	4b84      	ldr	r3, [pc, #528]	; (8003260 <LEDHandler+0x1b70>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b84      	ldr	r3, [pc, #528]	; (8003264 <LEDHandler+0x1b74>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f004 f9d5 	bl	8007404 <Set_LED>
 800305a:	4b7f      	ldr	r3, [pc, #508]	; (8003258 <LEDHandler+0x1b68>)
 800305c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003060:	b29b      	uxth	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	b21a      	sxth	r2, r3
 8003068:	4b7b      	ldr	r3, [pc, #492]	; (8003258 <LEDHandler+0x1b68>)
 800306a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800306c:	4b7a      	ldr	r3, [pc, #488]	; (8003258 <LEDHandler+0x1b68>)
 800306e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003072:	4618      	mov	r0, r3
 8003074:	4b79      	ldr	r3, [pc, #484]	; (800325c <LEDHandler+0x1b6c>)
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <LEDHandler+0x1b70>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b79      	ldr	r3, [pc, #484]	; (8003264 <LEDHandler+0x1b74>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f004 f9c0 	bl	8007404 <Set_LED>
 8003084:	4b74      	ldr	r3, [pc, #464]	; (8003258 <LEDHandler+0x1b68>)
 8003086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800308a:	b29b      	uxth	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	b21a      	sxth	r2, r3
 8003092:	4b71      	ldr	r3, [pc, #452]	; (8003258 <LEDHandler+0x1b68>)
 8003094:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003096:	4b70      	ldr	r3, [pc, #448]	; (8003258 <LEDHandler+0x1b68>)
 8003098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800309c:	4618      	mov	r0, r3
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <LEDHandler+0x1b6c>)
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	4b6f      	ldr	r3, [pc, #444]	; (8003260 <LEDHandler+0x1b70>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <LEDHandler+0x1b74>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f004 f9ab 	bl	8007404 <Set_LED>
 80030ae:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <LEDHandler+0x1b68>)
 80030b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	b21a      	sxth	r2, r3
 80030bc:	4b66      	ldr	r3, [pc, #408]	; (8003258 <LEDHandler+0x1b68>)
 80030be:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80030c0:	4b65      	ldr	r3, [pc, #404]	; (8003258 <LEDHandler+0x1b68>)
 80030c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c6:	4618      	mov	r0, r3
 80030c8:	4b64      	ldr	r3, [pc, #400]	; (800325c <LEDHandler+0x1b6c>)
 80030ca:	6819      	ldr	r1, [r3, #0]
 80030cc:	4b64      	ldr	r3, [pc, #400]	; (8003260 <LEDHandler+0x1b70>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b64      	ldr	r3, [pc, #400]	; (8003264 <LEDHandler+0x1b74>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f004 f996 	bl	8007404 <Set_LED>
 80030d8:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <LEDHandler+0x1b68>)
 80030da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	4b5c      	ldr	r3, [pc, #368]	; (8003258 <LEDHandler+0x1b68>)
 80030e8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <LEDHandler+0x1b68>)
 80030ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f0:	4618      	mov	r0, r3
 80030f2:	2300      	movs	r3, #0
 80030f4:	2200      	movs	r2, #0
 80030f6:	2100      	movs	r1, #0
 80030f8:	f004 f984 	bl	8007404 <Set_LED>
 80030fc:	4b56      	ldr	r3, [pc, #344]	; (8003258 <LEDHandler+0x1b68>)
 80030fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003102:	b29b      	uxth	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	b29b      	uxth	r3, r3
 8003108:	b21a      	sxth	r2, r3
 800310a:	4b53      	ldr	r3, [pc, #332]	; (8003258 <LEDHandler+0x1b68>)
 800310c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800310e:	4b52      	ldr	r3, [pc, #328]	; (8003258 <LEDHandler+0x1b68>)
 8003110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003114:	4618      	mov	r0, r3
 8003116:	2300      	movs	r3, #0
 8003118:	2200      	movs	r2, #0
 800311a:	2100      	movs	r1, #0
 800311c:	f004 f972 	bl	8007404 <Set_LED>
 8003120:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <LEDHandler+0x1b68>)
 8003122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003126:	b29b      	uxth	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	b21a      	sxth	r2, r3
 800312e:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <LEDHandler+0x1b68>)
 8003130:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <LEDHandler+0x1b68>)
 8003134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003138:	4618      	mov	r0, r3
 800313a:	2300      	movs	r3, #0
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	f004 f960 	bl	8007404 <Set_LED>
 8003144:	4b44      	ldr	r3, [pc, #272]	; (8003258 <LEDHandler+0x1b68>)
 8003146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314a:	b29b      	uxth	r3, r3
 800314c:	3301      	adds	r3, #1
 800314e:	b29b      	uxth	r3, r3
 8003150:	b21a      	sxth	r2, r3
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <LEDHandler+0x1b68>)
 8003154:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003156:	4b40      	ldr	r3, [pc, #256]	; (8003258 <LEDHandler+0x1b68>)
 8003158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315c:	4618      	mov	r0, r3
 800315e:	2300      	movs	r3, #0
 8003160:	2200      	movs	r2, #0
 8003162:	2100      	movs	r1, #0
 8003164:	f004 f94e 	bl	8007404 <Set_LED>
 8003168:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <LEDHandler+0x1b68>)
 800316a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316e:	b29b      	uxth	r3, r3
 8003170:	3301      	adds	r3, #1
 8003172:	b29b      	uxth	r3, r3
 8003174:	b21a      	sxth	r2, r3
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <LEDHandler+0x1b68>)
 8003178:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <LEDHandler+0x1b68>)
 800317c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003180:	4618      	mov	r0, r3
 8003182:	2300      	movs	r3, #0
 8003184:	2200      	movs	r2, #0
 8003186:	2100      	movs	r1, #0
 8003188:	f004 f93c 	bl	8007404 <Set_LED>
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <LEDHandler+0x1b68>)
 800318e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003192:	b29b      	uxth	r3, r3
 8003194:	3301      	adds	r3, #1
 8003196:	b29b      	uxth	r3, r3
 8003198:	b21a      	sxth	r2, r3
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <LEDHandler+0x1b68>)
 800319c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <LEDHandler+0x1b68>)
 80031a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a4:	4618      	mov	r0, r3
 80031a6:	2300      	movs	r3, #0
 80031a8:	2200      	movs	r2, #0
 80031aa:	2100      	movs	r1, #0
 80031ac:	f004 f92a 	bl	8007404 <Set_LED>
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <LEDHandler+0x1b68>)
 80031b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	b21a      	sxth	r2, r3
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <LEDHandler+0x1b68>)
 80031c0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <LEDHandler+0x1b68>)
 80031c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c8:	4618      	mov	r0, r3
 80031ca:	2300      	movs	r3, #0
 80031cc:	2200      	movs	r2, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	f004 f918 	bl	8007404 <Set_LED>
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <LEDHandler+0x1b68>)
 80031d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3301      	adds	r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	b21a      	sxth	r2, r3
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <LEDHandler+0x1b68>)
 80031e4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <LEDHandler+0x1b68>)
 80031e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ec:	4618      	mov	r0, r3
 80031ee:	2300      	movs	r3, #0
 80031f0:	2200      	movs	r2, #0
 80031f2:	2100      	movs	r1, #0
 80031f4:	f004 f906 	bl	8007404 <Set_LED>
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <LEDHandler+0x1b68>)
 80031fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3301      	adds	r3, #1
 8003202:	b29b      	uxth	r3, r3
 8003204:	b21a      	sxth	r2, r3
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <LEDHandler+0x1b68>)
 8003208:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <LEDHandler+0x1b68>)
 800320c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003210:	4618      	mov	r0, r3
 8003212:	2300      	movs	r3, #0
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	f004 f8f4 	bl	8007404 <Set_LED>
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <LEDHandler+0x1b68>)
 800321e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003222:	b29b      	uxth	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	b29b      	uxth	r3, r3
 8003228:	b21a      	sxth	r2, r3
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <LEDHandler+0x1b68>)
 800322c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <LEDHandler+0x1b68>)
 8003230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003234:	4618      	mov	r0, r3
 8003236:	2300      	movs	r3, #0
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	f004 f8e2 	bl	8007404 <Set_LED>
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <LEDHandler+0x1b68>)
 8003242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003246:	b29b      	uxth	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	b29b      	uxth	r3, r3
 800324c:	b21a      	sxth	r2, r3
 800324e:	4b02      	ldr	r3, [pc, #8]	; (8003258 <LEDHandler+0x1b68>)
 8003250:	801a      	strh	r2, [r3, #0]
 8003252:	f001 be49 	b.w	8004ee8 <LEDHandler+0x37f8>
 8003256:	bf00      	nop
 8003258:	2000031c 	.word	0x2000031c
 800325c:	20000008 	.word	0x20000008
 8003260:	2000000c 	.word	0x2000000c
 8003264:	20000010 	.word	0x20000010

		} else if (Valor >= 42 && Valor < 48) {
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b29      	cmp	r3, #41	; 0x29
 800326c:	f340 8158 	ble.w	8003520 <LEDHandler+0x1e30>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b2f      	cmp	r3, #47	; 0x2f
 8003274:	f300 8154 	bgt.w	8003520 <LEDHandler+0x1e30>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8003278:	4ba5      	ldr	r3, [pc, #660]	; (8003510 <LEDHandler+0x1e20>)
 800327a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800327e:	4618      	mov	r0, r3
 8003280:	4ba4      	ldr	r3, [pc, #656]	; (8003514 <LEDHandler+0x1e24>)
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	4ba4      	ldr	r3, [pc, #656]	; (8003518 <LEDHandler+0x1e28>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4ba4      	ldr	r3, [pc, #656]	; (800351c <LEDHandler+0x1e2c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f004 f8ba 	bl	8007404 <Set_LED>
 8003290:	4b9f      	ldr	r3, [pc, #636]	; (8003510 <LEDHandler+0x1e20>)
 8003292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003296:	b29b      	uxth	r3, r3
 8003298:	3301      	adds	r3, #1
 800329a:	b29b      	uxth	r3, r3
 800329c:	b21a      	sxth	r2, r3
 800329e:	4b9c      	ldr	r3, [pc, #624]	; (8003510 <LEDHandler+0x1e20>)
 80032a0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80032a2:	4b9b      	ldr	r3, [pc, #620]	; (8003510 <LEDHandler+0x1e20>)
 80032a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a8:	4618      	mov	r0, r3
 80032aa:	4b9a      	ldr	r3, [pc, #616]	; (8003514 <LEDHandler+0x1e24>)
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	4b9a      	ldr	r3, [pc, #616]	; (8003518 <LEDHandler+0x1e28>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b9a      	ldr	r3, [pc, #616]	; (800351c <LEDHandler+0x1e2c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f004 f8a5 	bl	8007404 <Set_LED>
 80032ba:	4b95      	ldr	r3, [pc, #596]	; (8003510 <LEDHandler+0x1e20>)
 80032bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	4b91      	ldr	r3, [pc, #580]	; (8003510 <LEDHandler+0x1e20>)
 80032ca:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80032cc:	4b90      	ldr	r3, [pc, #576]	; (8003510 <LEDHandler+0x1e20>)
 80032ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d2:	4618      	mov	r0, r3
 80032d4:	4b8f      	ldr	r3, [pc, #572]	; (8003514 <LEDHandler+0x1e24>)
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <LEDHandler+0x1e28>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b8f      	ldr	r3, [pc, #572]	; (800351c <LEDHandler+0x1e2c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f004 f890 	bl	8007404 <Set_LED>
 80032e4:	4b8a      	ldr	r3, [pc, #552]	; (8003510 <LEDHandler+0x1e20>)
 80032e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	b21a      	sxth	r2, r3
 80032f2:	4b87      	ldr	r3, [pc, #540]	; (8003510 <LEDHandler+0x1e20>)
 80032f4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80032f6:	4b86      	ldr	r3, [pc, #536]	; (8003510 <LEDHandler+0x1e20>)
 80032f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032fc:	4618      	mov	r0, r3
 80032fe:	4b85      	ldr	r3, [pc, #532]	; (8003514 <LEDHandler+0x1e24>)
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	4b85      	ldr	r3, [pc, #532]	; (8003518 <LEDHandler+0x1e28>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b85      	ldr	r3, [pc, #532]	; (800351c <LEDHandler+0x1e2c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f004 f87b 	bl	8007404 <Set_LED>
 800330e:	4b80      	ldr	r3, [pc, #512]	; (8003510 <LEDHandler+0x1e20>)
 8003310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003314:	b29b      	uxth	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	b21a      	sxth	r2, r3
 800331c:	4b7c      	ldr	r3, [pc, #496]	; (8003510 <LEDHandler+0x1e20>)
 800331e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003320:	4b7b      	ldr	r3, [pc, #492]	; (8003510 <LEDHandler+0x1e20>)
 8003322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003326:	4618      	mov	r0, r3
 8003328:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <LEDHandler+0x1e24>)
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	4b7a      	ldr	r3, [pc, #488]	; (8003518 <LEDHandler+0x1e28>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b7a      	ldr	r3, [pc, #488]	; (800351c <LEDHandler+0x1e2c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f004 f866 	bl	8007404 <Set_LED>
 8003338:	4b75      	ldr	r3, [pc, #468]	; (8003510 <LEDHandler+0x1e20>)
 800333a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800333e:	b29b      	uxth	r3, r3
 8003340:	3301      	adds	r3, #1
 8003342:	b29b      	uxth	r3, r3
 8003344:	b21a      	sxth	r2, r3
 8003346:	4b72      	ldr	r3, [pc, #456]	; (8003510 <LEDHandler+0x1e20>)
 8003348:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800334a:	4b71      	ldr	r3, [pc, #452]	; (8003510 <LEDHandler+0x1e20>)
 800334c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003350:	4618      	mov	r0, r3
 8003352:	4b70      	ldr	r3, [pc, #448]	; (8003514 <LEDHandler+0x1e24>)
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	4b70      	ldr	r3, [pc, #448]	; (8003518 <LEDHandler+0x1e28>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b70      	ldr	r3, [pc, #448]	; (800351c <LEDHandler+0x1e2c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f004 f851 	bl	8007404 <Set_LED>
 8003362:	4b6b      	ldr	r3, [pc, #428]	; (8003510 <LEDHandler+0x1e20>)
 8003364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003368:	b29b      	uxth	r3, r3
 800336a:	3301      	adds	r3, #1
 800336c:	b29b      	uxth	r3, r3
 800336e:	b21a      	sxth	r2, r3
 8003370:	4b67      	ldr	r3, [pc, #412]	; (8003510 <LEDHandler+0x1e20>)
 8003372:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <LEDHandler+0x1e20>)
 8003376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337a:	4618      	mov	r0, r3
 800337c:	4b65      	ldr	r3, [pc, #404]	; (8003514 <LEDHandler+0x1e24>)
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	4b65      	ldr	r3, [pc, #404]	; (8003518 <LEDHandler+0x1e28>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b65      	ldr	r3, [pc, #404]	; (800351c <LEDHandler+0x1e2c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f004 f83c 	bl	8007404 <Set_LED>
 800338c:	4b60      	ldr	r3, [pc, #384]	; (8003510 <LEDHandler+0x1e20>)
 800338e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003392:	b29b      	uxth	r3, r3
 8003394:	3301      	adds	r3, #1
 8003396:	b29b      	uxth	r3, r3
 8003398:	b21a      	sxth	r2, r3
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <LEDHandler+0x1e20>)
 800339c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <LEDHandler+0x1e20>)
 80033a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a4:	4618      	mov	r0, r3
 80033a6:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <LEDHandler+0x1e24>)
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <LEDHandler+0x1e28>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b5b      	ldr	r3, [pc, #364]	; (800351c <LEDHandler+0x1e2c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f004 f827 	bl	8007404 <Set_LED>
 80033b6:	4b56      	ldr	r3, [pc, #344]	; (8003510 <LEDHandler+0x1e20>)
 80033b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	b21a      	sxth	r2, r3
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <LEDHandler+0x1e20>)
 80033c6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80033c8:	4b51      	ldr	r3, [pc, #324]	; (8003510 <LEDHandler+0x1e20>)
 80033ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ce:	4618      	mov	r0, r3
 80033d0:	2300      	movs	r3, #0
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	f004 f815 	bl	8007404 <Set_LED>
 80033da:	4b4d      	ldr	r3, [pc, #308]	; (8003510 <LEDHandler+0x1e20>)
 80033dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b21a      	sxth	r2, r3
 80033e8:	4b49      	ldr	r3, [pc, #292]	; (8003510 <LEDHandler+0x1e20>)
 80033ea:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80033ec:	4b48      	ldr	r3, [pc, #288]	; (8003510 <LEDHandler+0x1e20>)
 80033ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f2:	4618      	mov	r0, r3
 80033f4:	2300      	movs	r3, #0
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	f004 f803 	bl	8007404 <Set_LED>
 80033fe:	4b44      	ldr	r3, [pc, #272]	; (8003510 <LEDHandler+0x1e20>)
 8003400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003404:	b29b      	uxth	r3, r3
 8003406:	3301      	adds	r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	b21a      	sxth	r2, r3
 800340c:	4b40      	ldr	r3, [pc, #256]	; (8003510 <LEDHandler+0x1e20>)
 800340e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <LEDHandler+0x1e20>)
 8003412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003416:	4618      	mov	r0, r3
 8003418:	2300      	movs	r3, #0
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	f003 fff1 	bl	8007404 <Set_LED>
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <LEDHandler+0x1e20>)
 8003424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003428:	b29b      	uxth	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	b21a      	sxth	r2, r3
 8003430:	4b37      	ldr	r3, [pc, #220]	; (8003510 <LEDHandler+0x1e20>)
 8003432:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <LEDHandler+0x1e20>)
 8003436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343a:	4618      	mov	r0, r3
 800343c:	2300      	movs	r3, #0
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	f003 ffdf 	bl	8007404 <Set_LED>
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <LEDHandler+0x1e20>)
 8003448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800344c:	b29b      	uxth	r3, r3
 800344e:	3301      	adds	r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	b21a      	sxth	r2, r3
 8003454:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <LEDHandler+0x1e20>)
 8003456:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003458:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <LEDHandler+0x1e20>)
 800345a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345e:	4618      	mov	r0, r3
 8003460:	2300      	movs	r3, #0
 8003462:	2200      	movs	r2, #0
 8003464:	2100      	movs	r1, #0
 8003466:	f003 ffcd 	bl	8007404 <Set_LED>
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <LEDHandler+0x1e20>)
 800346c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003470:	b29b      	uxth	r3, r3
 8003472:	3301      	adds	r3, #1
 8003474:	b29b      	uxth	r3, r3
 8003476:	b21a      	sxth	r2, r3
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <LEDHandler+0x1e20>)
 800347a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <LEDHandler+0x1e20>)
 800347e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003482:	4618      	mov	r0, r3
 8003484:	2300      	movs	r3, #0
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	f003 ffbb 	bl	8007404 <Set_LED>
 800348e:	4b20      	ldr	r3, [pc, #128]	; (8003510 <LEDHandler+0x1e20>)
 8003490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003494:	b29b      	uxth	r3, r3
 8003496:	3301      	adds	r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	b21a      	sxth	r2, r3
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <LEDHandler+0x1e20>)
 800349e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <LEDHandler+0x1e20>)
 80034a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a6:	4618      	mov	r0, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	f003 ffa9 	bl	8007404 <Set_LED>
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <LEDHandler+0x1e20>)
 80034b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	b29b      	uxth	r3, r3
 80034be:	b21a      	sxth	r2, r3
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <LEDHandler+0x1e20>)
 80034c2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <LEDHandler+0x1e20>)
 80034c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ca:	4618      	mov	r0, r3
 80034cc:	2300      	movs	r3, #0
 80034ce:	2200      	movs	r2, #0
 80034d0:	2100      	movs	r1, #0
 80034d2:	f003 ff97 	bl	8007404 <Set_LED>
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <LEDHandler+0x1e20>)
 80034d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	b21a      	sxth	r2, r3
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <LEDHandler+0x1e20>)
 80034e6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <LEDHandler+0x1e20>)
 80034ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ee:	4618      	mov	r0, r3
 80034f0:	2300      	movs	r3, #0
 80034f2:	2200      	movs	r2, #0
 80034f4:	2100      	movs	r1, #0
 80034f6:	f003 ff85 	bl	8007404 <Set_LED>
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <LEDHandler+0x1e20>)
 80034fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003500:	b29b      	uxth	r3, r3
 8003502:	3301      	adds	r3, #1
 8003504:	b29b      	uxth	r3, r3
 8003506:	b21a      	sxth	r2, r3
 8003508:	4b01      	ldr	r3, [pc, #4]	; (8003510 <LEDHandler+0x1e20>)
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	f001 bcec 	b.w	8004ee8 <LEDHandler+0x37f8>
 8003510:	2000031c 	.word	0x2000031c
 8003514:	20000008 	.word	0x20000008
 8003518:	2000000c 	.word	0x2000000c
 800351c:	20000010 	.word	0x20000010

		} else if (Valor >= 48 && Valor < 54) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b2f      	cmp	r3, #47	; 0x2f
 8003524:	f340 815c 	ble.w	80037e0 <LEDHandler+0x20f0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b35      	cmp	r3, #53	; 0x35
 800352c:	f300 8158 	bgt.w	80037e0 <LEDHandler+0x20f0>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8003530:	4ba7      	ldr	r3, [pc, #668]	; (80037d0 <LEDHandler+0x20e0>)
 8003532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003536:	4618      	mov	r0, r3
 8003538:	4ba6      	ldr	r3, [pc, #664]	; (80037d4 <LEDHandler+0x20e4>)
 800353a:	6819      	ldr	r1, [r3, #0]
 800353c:	4ba6      	ldr	r3, [pc, #664]	; (80037d8 <LEDHandler+0x20e8>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4ba6      	ldr	r3, [pc, #664]	; (80037dc <LEDHandler+0x20ec>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 ff5e 	bl	8007404 <Set_LED>
 8003548:	4ba1      	ldr	r3, [pc, #644]	; (80037d0 <LEDHandler+0x20e0>)
 800354a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354e:	b29b      	uxth	r3, r3
 8003550:	3301      	adds	r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	b21a      	sxth	r2, r3
 8003556:	4b9e      	ldr	r3, [pc, #632]	; (80037d0 <LEDHandler+0x20e0>)
 8003558:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800355a:	4b9d      	ldr	r3, [pc, #628]	; (80037d0 <LEDHandler+0x20e0>)
 800355c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003560:	4618      	mov	r0, r3
 8003562:	4b9c      	ldr	r3, [pc, #624]	; (80037d4 <LEDHandler+0x20e4>)
 8003564:	6819      	ldr	r1, [r3, #0]
 8003566:	4b9c      	ldr	r3, [pc, #624]	; (80037d8 <LEDHandler+0x20e8>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b9c      	ldr	r3, [pc, #624]	; (80037dc <LEDHandler+0x20ec>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 ff49 	bl	8007404 <Set_LED>
 8003572:	4b97      	ldr	r3, [pc, #604]	; (80037d0 <LEDHandler+0x20e0>)
 8003574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003578:	b29b      	uxth	r3, r3
 800357a:	3301      	adds	r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	b21a      	sxth	r2, r3
 8003580:	4b93      	ldr	r3, [pc, #588]	; (80037d0 <LEDHandler+0x20e0>)
 8003582:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003584:	4b92      	ldr	r3, [pc, #584]	; (80037d0 <LEDHandler+0x20e0>)
 8003586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800358a:	4618      	mov	r0, r3
 800358c:	4b91      	ldr	r3, [pc, #580]	; (80037d4 <LEDHandler+0x20e4>)
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	4b91      	ldr	r3, [pc, #580]	; (80037d8 <LEDHandler+0x20e8>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b91      	ldr	r3, [pc, #580]	; (80037dc <LEDHandler+0x20ec>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 ff34 	bl	8007404 <Set_LED>
 800359c:	4b8c      	ldr	r3, [pc, #560]	; (80037d0 <LEDHandler+0x20e0>)
 800359e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	4b89      	ldr	r3, [pc, #548]	; (80037d0 <LEDHandler+0x20e0>)
 80035ac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80035ae:	4b88      	ldr	r3, [pc, #544]	; (80037d0 <LEDHandler+0x20e0>)
 80035b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b4:	4618      	mov	r0, r3
 80035b6:	4b87      	ldr	r3, [pc, #540]	; (80037d4 <LEDHandler+0x20e4>)
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	4b87      	ldr	r3, [pc, #540]	; (80037d8 <LEDHandler+0x20e8>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b87      	ldr	r3, [pc, #540]	; (80037dc <LEDHandler+0x20ec>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 ff1f 	bl	8007404 <Set_LED>
 80035c6:	4b82      	ldr	r3, [pc, #520]	; (80037d0 <LEDHandler+0x20e0>)
 80035c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b21a      	sxth	r2, r3
 80035d4:	4b7e      	ldr	r3, [pc, #504]	; (80037d0 <LEDHandler+0x20e0>)
 80035d6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80035d8:	4b7d      	ldr	r3, [pc, #500]	; (80037d0 <LEDHandler+0x20e0>)
 80035da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035de:	4618      	mov	r0, r3
 80035e0:	4b7c      	ldr	r3, [pc, #496]	; (80037d4 <LEDHandler+0x20e4>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	4b7c      	ldr	r3, [pc, #496]	; (80037d8 <LEDHandler+0x20e8>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <LEDHandler+0x20ec>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 ff0a 	bl	8007404 <Set_LED>
 80035f0:	4b77      	ldr	r3, [pc, #476]	; (80037d0 <LEDHandler+0x20e0>)
 80035f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	b21a      	sxth	r2, r3
 80035fe:	4b74      	ldr	r3, [pc, #464]	; (80037d0 <LEDHandler+0x20e0>)
 8003600:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003602:	4b73      	ldr	r3, [pc, #460]	; (80037d0 <LEDHandler+0x20e0>)
 8003604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003608:	4618      	mov	r0, r3
 800360a:	4b72      	ldr	r3, [pc, #456]	; (80037d4 <LEDHandler+0x20e4>)
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	4b72      	ldr	r3, [pc, #456]	; (80037d8 <LEDHandler+0x20e8>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b72      	ldr	r3, [pc, #456]	; (80037dc <LEDHandler+0x20ec>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 fef5 	bl	8007404 <Set_LED>
 800361a:	4b6d      	ldr	r3, [pc, #436]	; (80037d0 <LEDHandler+0x20e0>)
 800361c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003620:	b29b      	uxth	r3, r3
 8003622:	3301      	adds	r3, #1
 8003624:	b29b      	uxth	r3, r3
 8003626:	b21a      	sxth	r2, r3
 8003628:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <LEDHandler+0x20e0>)
 800362a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800362c:	4b68      	ldr	r3, [pc, #416]	; (80037d0 <LEDHandler+0x20e0>)
 800362e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003632:	4618      	mov	r0, r3
 8003634:	4b67      	ldr	r3, [pc, #412]	; (80037d4 <LEDHandler+0x20e4>)
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	4b67      	ldr	r3, [pc, #412]	; (80037d8 <LEDHandler+0x20e8>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b67      	ldr	r3, [pc, #412]	; (80037dc <LEDHandler+0x20ec>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 fee0 	bl	8007404 <Set_LED>
 8003644:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <LEDHandler+0x20e0>)
 8003646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364a:	b29b      	uxth	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	b29b      	uxth	r3, r3
 8003650:	b21a      	sxth	r2, r3
 8003652:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <LEDHandler+0x20e0>)
 8003654:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003656:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <LEDHandler+0x20e0>)
 8003658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800365c:	4618      	mov	r0, r3
 800365e:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <LEDHandler+0x20e4>)
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <LEDHandler+0x20e8>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <LEDHandler+0x20ec>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 fecb 	bl	8007404 <Set_LED>
 800366e:	4b58      	ldr	r3, [pc, #352]	; (80037d0 <LEDHandler+0x20e0>)
 8003670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003674:	b29b      	uxth	r3, r3
 8003676:	3301      	adds	r3, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	b21a      	sxth	r2, r3
 800367c:	4b54      	ldr	r3, [pc, #336]	; (80037d0 <LEDHandler+0x20e0>)
 800367e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <LEDHandler+0x20e0>)
 8003682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003686:	4618      	mov	r0, r3
 8003688:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <LEDHandler+0x20e4>)
 800368a:	6819      	ldr	r1, [r3, #0]
 800368c:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <LEDHandler+0x20e8>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b52      	ldr	r3, [pc, #328]	; (80037dc <LEDHandler+0x20ec>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 feb6 	bl	8007404 <Set_LED>
 8003698:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <LEDHandler+0x20e0>)
 800369a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <LEDHandler+0x20e0>)
 80036a8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80036aa:	4b49      	ldr	r3, [pc, #292]	; (80037d0 <LEDHandler+0x20e0>)
 80036ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b0:	4618      	mov	r0, r3
 80036b2:	2300      	movs	r3, #0
 80036b4:	2200      	movs	r2, #0
 80036b6:	2100      	movs	r1, #0
 80036b8:	f003 fea4 	bl	8007404 <Set_LED>
 80036bc:	4b44      	ldr	r3, [pc, #272]	; (80037d0 <LEDHandler+0x20e0>)
 80036be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <LEDHandler+0x20e0>)
 80036cc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80036ce:	4b40      	ldr	r3, [pc, #256]	; (80037d0 <LEDHandler+0x20e0>)
 80036d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d4:	4618      	mov	r0, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	2200      	movs	r2, #0
 80036da:	2100      	movs	r1, #0
 80036dc:	f003 fe92 	bl	8007404 <Set_LED>
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <LEDHandler+0x20e0>)
 80036e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	b21a      	sxth	r2, r3
 80036ee:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <LEDHandler+0x20e0>)
 80036f0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80036f2:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <LEDHandler+0x20e0>)
 80036f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f8:	4618      	mov	r0, r3
 80036fa:	2300      	movs	r3, #0
 80036fc:	2200      	movs	r2, #0
 80036fe:	2100      	movs	r1, #0
 8003700:	f003 fe80 	bl	8007404 <Set_LED>
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <LEDHandler+0x20e0>)
 8003706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370a:	b29b      	uxth	r3, r3
 800370c:	3301      	adds	r3, #1
 800370e:	b29b      	uxth	r3, r3
 8003710:	b21a      	sxth	r2, r3
 8003712:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <LEDHandler+0x20e0>)
 8003714:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <LEDHandler+0x20e0>)
 8003718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371c:	4618      	mov	r0, r3
 800371e:	2300      	movs	r3, #0
 8003720:	2200      	movs	r2, #0
 8003722:	2100      	movs	r1, #0
 8003724:	f003 fe6e 	bl	8007404 <Set_LED>
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <LEDHandler+0x20e0>)
 800372a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372e:	b29b      	uxth	r3, r3
 8003730:	3301      	adds	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	b21a      	sxth	r2, r3
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <LEDHandler+0x20e0>)
 8003738:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800373a:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <LEDHandler+0x20e0>)
 800373c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003740:	4618      	mov	r0, r3
 8003742:	2300      	movs	r3, #0
 8003744:	2200      	movs	r2, #0
 8003746:	2100      	movs	r1, #0
 8003748:	f003 fe5c 	bl	8007404 <Set_LED>
 800374c:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <LEDHandler+0x20e0>)
 800374e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003752:	b29b      	uxth	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	b29b      	uxth	r3, r3
 8003758:	b21a      	sxth	r2, r3
 800375a:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <LEDHandler+0x20e0>)
 800375c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <LEDHandler+0x20e0>)
 8003760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003764:	4618      	mov	r0, r3
 8003766:	2300      	movs	r3, #0
 8003768:	2200      	movs	r2, #0
 800376a:	2100      	movs	r1, #0
 800376c:	f003 fe4a 	bl	8007404 <Set_LED>
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <LEDHandler+0x20e0>)
 8003772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003776:	b29b      	uxth	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	b29b      	uxth	r3, r3
 800377c:	b21a      	sxth	r2, r3
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <LEDHandler+0x20e0>)
 8003780:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <LEDHandler+0x20e0>)
 8003784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003788:	4618      	mov	r0, r3
 800378a:	2300      	movs	r3, #0
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	f003 fe38 	bl	8007404 <Set_LED>
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <LEDHandler+0x20e0>)
 8003796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379a:	b29b      	uxth	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	b29b      	uxth	r3, r3
 80037a0:	b21a      	sxth	r2, r3
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <LEDHandler+0x20e0>)
 80037a4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <LEDHandler+0x20e0>)
 80037a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ac:	4618      	mov	r0, r3
 80037ae:	2300      	movs	r3, #0
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	f003 fe26 	bl	8007404 <Set_LED>
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <LEDHandler+0x20e0>)
 80037ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	b21a      	sxth	r2, r3
 80037c6:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <LEDHandler+0x20e0>)
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	f001 bb8d 	b.w	8004ee8 <LEDHandler+0x37f8>
 80037ce:	bf00      	nop
 80037d0:	2000031c 	.word	0x2000031c
 80037d4:	20000008 	.word	0x20000008
 80037d8:	2000000c 	.word	0x2000000c
 80037dc:	20000010 	.word	0x20000010

		} else if (Valor >= 54 && Valor < 60) {
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b35      	cmp	r3, #53	; 0x35
 80037e4:	f340 8162 	ble.w	8003aac <LEDHandler+0x23bc>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b3b      	cmp	r3, #59	; 0x3b
 80037ec:	f300 815e 	bgt.w	8003aac <LEDHandler+0x23bc>

			Set_LED(var2, Red, Green, Blue);			var2++;
 80037f0:	4ba6      	ldr	r3, [pc, #664]	; (8003a8c <LEDHandler+0x239c>)
 80037f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f6:	4618      	mov	r0, r3
 80037f8:	4ba5      	ldr	r3, [pc, #660]	; (8003a90 <LEDHandler+0x23a0>)
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	4ba5      	ldr	r3, [pc, #660]	; (8003a94 <LEDHandler+0x23a4>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4ba5      	ldr	r3, [pc, #660]	; (8003a98 <LEDHandler+0x23a8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 fdfe 	bl	8007404 <Set_LED>
 8003808:	4ba0      	ldr	r3, [pc, #640]	; (8003a8c <LEDHandler+0x239c>)
 800380a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380e:	b29b      	uxth	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	b21a      	sxth	r2, r3
 8003816:	4b9d      	ldr	r3, [pc, #628]	; (8003a8c <LEDHandler+0x239c>)
 8003818:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800381a:	4b9c      	ldr	r3, [pc, #624]	; (8003a8c <LEDHandler+0x239c>)
 800381c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003820:	4618      	mov	r0, r3
 8003822:	4b9b      	ldr	r3, [pc, #620]	; (8003a90 <LEDHandler+0x23a0>)
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	4b9b      	ldr	r3, [pc, #620]	; (8003a94 <LEDHandler+0x23a4>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b9b      	ldr	r3, [pc, #620]	; (8003a98 <LEDHandler+0x23a8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 fde9 	bl	8007404 <Set_LED>
 8003832:	4b96      	ldr	r3, [pc, #600]	; (8003a8c <LEDHandler+0x239c>)
 8003834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003838:	b29b      	uxth	r3, r3
 800383a:	3301      	adds	r3, #1
 800383c:	b29b      	uxth	r3, r3
 800383e:	b21a      	sxth	r2, r3
 8003840:	4b92      	ldr	r3, [pc, #584]	; (8003a8c <LEDHandler+0x239c>)
 8003842:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003844:	4b91      	ldr	r3, [pc, #580]	; (8003a8c <LEDHandler+0x239c>)
 8003846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800384a:	4618      	mov	r0, r3
 800384c:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <LEDHandler+0x23a0>)
 800384e:	6819      	ldr	r1, [r3, #0]
 8003850:	4b90      	ldr	r3, [pc, #576]	; (8003a94 <LEDHandler+0x23a4>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b90      	ldr	r3, [pc, #576]	; (8003a98 <LEDHandler+0x23a8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 fdd4 	bl	8007404 <Set_LED>
 800385c:	4b8b      	ldr	r3, [pc, #556]	; (8003a8c <LEDHandler+0x239c>)
 800385e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003862:	b29b      	uxth	r3, r3
 8003864:	3301      	adds	r3, #1
 8003866:	b29b      	uxth	r3, r3
 8003868:	b21a      	sxth	r2, r3
 800386a:	4b88      	ldr	r3, [pc, #544]	; (8003a8c <LEDHandler+0x239c>)
 800386c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800386e:	4b87      	ldr	r3, [pc, #540]	; (8003a8c <LEDHandler+0x239c>)
 8003870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003874:	4618      	mov	r0, r3
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <LEDHandler+0x23a0>)
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	4b86      	ldr	r3, [pc, #536]	; (8003a94 <LEDHandler+0x23a4>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b86      	ldr	r3, [pc, #536]	; (8003a98 <LEDHandler+0x23a8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 fdbf 	bl	8007404 <Set_LED>
 8003886:	4b81      	ldr	r3, [pc, #516]	; (8003a8c <LEDHandler+0x239c>)
 8003888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388c:	b29b      	uxth	r3, r3
 800388e:	3301      	adds	r3, #1
 8003890:	b29b      	uxth	r3, r3
 8003892:	b21a      	sxth	r2, r3
 8003894:	4b7d      	ldr	r3, [pc, #500]	; (8003a8c <LEDHandler+0x239c>)
 8003896:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003898:	4b7c      	ldr	r3, [pc, #496]	; (8003a8c <LEDHandler+0x239c>)
 800389a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800389e:	4618      	mov	r0, r3
 80038a0:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <LEDHandler+0x23a0>)
 80038a2:	6819      	ldr	r1, [r3, #0]
 80038a4:	4b7b      	ldr	r3, [pc, #492]	; (8003a94 <LEDHandler+0x23a4>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <LEDHandler+0x23a8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 fdaa 	bl	8007404 <Set_LED>
 80038b0:	4b76      	ldr	r3, [pc, #472]	; (8003a8c <LEDHandler+0x239c>)
 80038b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b21a      	sxth	r2, r3
 80038be:	4b73      	ldr	r3, [pc, #460]	; (8003a8c <LEDHandler+0x239c>)
 80038c0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80038c2:	4b72      	ldr	r3, [pc, #456]	; (8003a8c <LEDHandler+0x239c>)
 80038c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c8:	4618      	mov	r0, r3
 80038ca:	4b71      	ldr	r3, [pc, #452]	; (8003a90 <LEDHandler+0x23a0>)
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	4b71      	ldr	r3, [pc, #452]	; (8003a94 <LEDHandler+0x23a4>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b71      	ldr	r3, [pc, #452]	; (8003a98 <LEDHandler+0x23a8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 fd95 	bl	8007404 <Set_LED>
 80038da:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <LEDHandler+0x239c>)
 80038dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <LEDHandler+0x239c>)
 80038ea:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80038ec:	4b67      	ldr	r3, [pc, #412]	; (8003a8c <LEDHandler+0x239c>)
 80038ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f2:	4618      	mov	r0, r3
 80038f4:	4b66      	ldr	r3, [pc, #408]	; (8003a90 <LEDHandler+0x23a0>)
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	4b66      	ldr	r3, [pc, #408]	; (8003a94 <LEDHandler+0x23a4>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <LEDHandler+0x23a8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 fd80 	bl	8007404 <Set_LED>
 8003904:	4b61      	ldr	r3, [pc, #388]	; (8003a8c <LEDHandler+0x239c>)
 8003906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800390a:	b29b      	uxth	r3, r3
 800390c:	3301      	adds	r3, #1
 800390e:	b29b      	uxth	r3, r3
 8003910:	b21a      	sxth	r2, r3
 8003912:	4b5e      	ldr	r3, [pc, #376]	; (8003a8c <LEDHandler+0x239c>)
 8003914:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003916:	4b5d      	ldr	r3, [pc, #372]	; (8003a8c <LEDHandler+0x239c>)
 8003918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391c:	4618      	mov	r0, r3
 800391e:	4b5c      	ldr	r3, [pc, #368]	; (8003a90 <LEDHandler+0x23a0>)
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	4b5c      	ldr	r3, [pc, #368]	; (8003a94 <LEDHandler+0x23a4>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b5c      	ldr	r3, [pc, #368]	; (8003a98 <LEDHandler+0x23a8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 fd6b 	bl	8007404 <Set_LED>
 800392e:	4b57      	ldr	r3, [pc, #348]	; (8003a8c <LEDHandler+0x239c>)
 8003930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003934:	b29b      	uxth	r3, r3
 8003936:	3301      	adds	r3, #1
 8003938:	b29b      	uxth	r3, r3
 800393a:	b21a      	sxth	r2, r3
 800393c:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <LEDHandler+0x239c>)
 800393e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003940:	4b52      	ldr	r3, [pc, #328]	; (8003a8c <LEDHandler+0x239c>)
 8003942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003946:	4618      	mov	r0, r3
 8003948:	4b51      	ldr	r3, [pc, #324]	; (8003a90 <LEDHandler+0x23a0>)
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	4b51      	ldr	r3, [pc, #324]	; (8003a94 <LEDHandler+0x23a4>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <LEDHandler+0x23a8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 fd56 	bl	8007404 <Set_LED>
 8003958:	4b4c      	ldr	r3, [pc, #304]	; (8003a8c <LEDHandler+0x239c>)
 800395a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800395e:	b29b      	uxth	r3, r3
 8003960:	3301      	adds	r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	b21a      	sxth	r2, r3
 8003966:	4b49      	ldr	r3, [pc, #292]	; (8003a8c <LEDHandler+0x239c>)
 8003968:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800396a:	4b48      	ldr	r3, [pc, #288]	; (8003a8c <LEDHandler+0x239c>)
 800396c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003970:	4618      	mov	r0, r3
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <LEDHandler+0x23a0>)
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <LEDHandler+0x23a4>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <LEDHandler+0x23a8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 fd41 	bl	8007404 <Set_LED>
 8003982:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <LEDHandler+0x239c>)
 8003984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003988:	b29b      	uxth	r3, r3
 800398a:	3301      	adds	r3, #1
 800398c:	b29b      	uxth	r3, r3
 800398e:	b21a      	sxth	r2, r3
 8003990:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <LEDHandler+0x239c>)
 8003992:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003994:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <LEDHandler+0x239c>)
 8003996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800399a:	4618      	mov	r0, r3
 800399c:	2300      	movs	r3, #0
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	f003 fd2f 	bl	8007404 <Set_LED>
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <LEDHandler+0x239c>)
 80039a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	b21a      	sxth	r2, r3
 80039b4:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <LEDHandler+0x239c>)
 80039b6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80039b8:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <LEDHandler+0x239c>)
 80039ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039be:	4618      	mov	r0, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	f003 fd1d 	bl	8007404 <Set_LED>
 80039ca:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <LEDHandler+0x239c>)
 80039cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b21a      	sxth	r2, r3
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <LEDHandler+0x239c>)
 80039da:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80039dc:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <LEDHandler+0x239c>)
 80039de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e2:	4618      	mov	r0, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	2200      	movs	r2, #0
 80039e8:	2100      	movs	r1, #0
 80039ea:	f003 fd0b 	bl	8007404 <Set_LED>
 80039ee:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <LEDHandler+0x239c>)
 80039f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b21a      	sxth	r2, r3
 80039fc:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <LEDHandler+0x239c>)
 80039fe:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <LEDHandler+0x239c>)
 8003a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a06:	4618      	mov	r0, r3
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f003 fcf9 	bl	8007404 <Set_LED>
 8003a12:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <LEDHandler+0x239c>)
 8003a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b21a      	sxth	r2, r3
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <LEDHandler+0x239c>)
 8003a22:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003a24:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <LEDHandler+0x239c>)
 8003a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2100      	movs	r1, #0
 8003a32:	f003 fce7 	bl	8007404 <Set_LED>
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <LEDHandler+0x239c>)
 8003a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b21a      	sxth	r2, r3
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <LEDHandler+0x239c>)
 8003a46:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <LEDHandler+0x239c>)
 8003a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	2300      	movs	r3, #0
 8003a52:	2200      	movs	r2, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	f003 fcd5 	bl	8007404 <Set_LED>
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <LEDHandler+0x239c>)
 8003a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b21a      	sxth	r2, r3
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <LEDHandler+0x239c>)
 8003a6a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <LEDHandler+0x239c>)
 8003a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a72:	4618      	mov	r0, r3
 8003a74:	2300      	movs	r3, #0
 8003a76:	2200      	movs	r2, #0
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f003 fcc3 	bl	8007404 <Set_LED>
 8003a7e:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <LEDHandler+0x239c>)
 8003a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	e008      	b.n	8003a9c <LEDHandler+0x23ac>
 8003a8a:	bf00      	nop
 8003a8c:	2000031c 	.word	0x2000031c
 8003a90:	20000008 	.word	0x20000008
 8003a94:	2000000c 	.word	0x2000000c
 8003a98:	20000010 	.word	0x20000010
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	b21a      	sxth	r2, r3
 8003aa0:	4b01      	ldr	r3, [pc, #4]	; (8003aa8 <LEDHandler+0x23b8>)
 8003aa2:	801a      	strh	r2, [r3, #0]
 8003aa4:	f001 ba20 	b.w	8004ee8 <LEDHandler+0x37f8>
 8003aa8:	2000031c 	.word	0x2000031c

		} else if (Valor >= 60 && Valor < 66) {
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b3b      	cmp	r3, #59	; 0x3b
 8003ab0:	f340 8166 	ble.w	8003d80 <LEDHandler+0x2690>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b41      	cmp	r3, #65	; 0x41
 8003ab8:	f300 8162 	bgt.w	8003d80 <LEDHandler+0x2690>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8003abc:	4ba4      	ldr	r3, [pc, #656]	; (8003d50 <LEDHandler+0x2660>)
 8003abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	4ba3      	ldr	r3, [pc, #652]	; (8003d54 <LEDHandler+0x2664>)
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	4ba3      	ldr	r3, [pc, #652]	; (8003d58 <LEDHandler+0x2668>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4ba3      	ldr	r3, [pc, #652]	; (8003d5c <LEDHandler+0x266c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 fc98 	bl	8007404 <Set_LED>
 8003ad4:	4b9e      	ldr	r3, [pc, #632]	; (8003d50 <LEDHandler+0x2660>)
 8003ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	b21a      	sxth	r2, r3
 8003ae2:	4b9b      	ldr	r3, [pc, #620]	; (8003d50 <LEDHandler+0x2660>)
 8003ae4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003ae6:	4b9a      	ldr	r3, [pc, #616]	; (8003d50 <LEDHandler+0x2660>)
 8003ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aec:	4618      	mov	r0, r3
 8003aee:	4b99      	ldr	r3, [pc, #612]	; (8003d54 <LEDHandler+0x2664>)
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	4b99      	ldr	r3, [pc, #612]	; (8003d58 <LEDHandler+0x2668>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b99      	ldr	r3, [pc, #612]	; (8003d5c <LEDHandler+0x266c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 fc83 	bl	8007404 <Set_LED>
 8003afe:	4b94      	ldr	r3, [pc, #592]	; (8003d50 <LEDHandler+0x2660>)
 8003b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	b21a      	sxth	r2, r3
 8003b0c:	4b90      	ldr	r3, [pc, #576]	; (8003d50 <LEDHandler+0x2660>)
 8003b0e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003b10:	4b8f      	ldr	r3, [pc, #572]	; (8003d50 <LEDHandler+0x2660>)
 8003b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b16:	4618      	mov	r0, r3
 8003b18:	4b8e      	ldr	r3, [pc, #568]	; (8003d54 <LEDHandler+0x2664>)
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	4b8e      	ldr	r3, [pc, #568]	; (8003d58 <LEDHandler+0x2668>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b8e      	ldr	r3, [pc, #568]	; (8003d5c <LEDHandler+0x266c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 fc6e 	bl	8007404 <Set_LED>
 8003b28:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <LEDHandler+0x2660>)
 8003b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	b21a      	sxth	r2, r3
 8003b36:	4b86      	ldr	r3, [pc, #536]	; (8003d50 <LEDHandler+0x2660>)
 8003b38:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003b3a:	4b85      	ldr	r3, [pc, #532]	; (8003d50 <LEDHandler+0x2660>)
 8003b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b40:	4618      	mov	r0, r3
 8003b42:	4b84      	ldr	r3, [pc, #528]	; (8003d54 <LEDHandler+0x2664>)
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	4b84      	ldr	r3, [pc, #528]	; (8003d58 <LEDHandler+0x2668>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b84      	ldr	r3, [pc, #528]	; (8003d5c <LEDHandler+0x266c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 fc59 	bl	8007404 <Set_LED>
 8003b52:	4b7f      	ldr	r3, [pc, #508]	; (8003d50 <LEDHandler+0x2660>)
 8003b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	b21a      	sxth	r2, r3
 8003b60:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <LEDHandler+0x2660>)
 8003b62:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003b64:	4b7a      	ldr	r3, [pc, #488]	; (8003d50 <LEDHandler+0x2660>)
 8003b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	4b79      	ldr	r3, [pc, #484]	; (8003d54 <LEDHandler+0x2664>)
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	4b79      	ldr	r3, [pc, #484]	; (8003d58 <LEDHandler+0x2668>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b79      	ldr	r3, [pc, #484]	; (8003d5c <LEDHandler+0x266c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 fc44 	bl	8007404 <Set_LED>
 8003b7c:	4b74      	ldr	r3, [pc, #464]	; (8003d50 <LEDHandler+0x2660>)
 8003b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	b21a      	sxth	r2, r3
 8003b8a:	4b71      	ldr	r3, [pc, #452]	; (8003d50 <LEDHandler+0x2660>)
 8003b8c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003b8e:	4b70      	ldr	r3, [pc, #448]	; (8003d50 <LEDHandler+0x2660>)
 8003b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b94:	4618      	mov	r0, r3
 8003b96:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <LEDHandler+0x2664>)
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <LEDHandler+0x2668>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b6f      	ldr	r3, [pc, #444]	; (8003d5c <LEDHandler+0x266c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 fc2f 	bl	8007404 <Set_LED>
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <LEDHandler+0x2660>)
 8003ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b21a      	sxth	r2, r3
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <LEDHandler+0x2660>)
 8003bb6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003bb8:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <LEDHandler+0x2660>)
 8003bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	4b64      	ldr	r3, [pc, #400]	; (8003d54 <LEDHandler+0x2664>)
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	4b64      	ldr	r3, [pc, #400]	; (8003d58 <LEDHandler+0x2668>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b64      	ldr	r3, [pc, #400]	; (8003d5c <LEDHandler+0x266c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 fc1a 	bl	8007404 <Set_LED>
 8003bd0:	4b5f      	ldr	r3, [pc, #380]	; (8003d50 <LEDHandler+0x2660>)
 8003bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	b21a      	sxth	r2, r3
 8003bde:	4b5c      	ldr	r3, [pc, #368]	; (8003d50 <LEDHandler+0x2660>)
 8003be0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003be2:	4b5b      	ldr	r3, [pc, #364]	; (8003d50 <LEDHandler+0x2660>)
 8003be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be8:	4618      	mov	r0, r3
 8003bea:	4b5a      	ldr	r3, [pc, #360]	; (8003d54 <LEDHandler+0x2664>)
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <LEDHandler+0x2668>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <LEDHandler+0x266c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 fc05 	bl	8007404 <Set_LED>
 8003bfa:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <LEDHandler+0x2660>)
 8003bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	b21a      	sxth	r2, r3
 8003c08:	4b51      	ldr	r3, [pc, #324]	; (8003d50 <LEDHandler+0x2660>)
 8003c0a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <LEDHandler+0x2660>)
 8003c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c12:	4618      	mov	r0, r3
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <LEDHandler+0x2664>)
 8003c16:	6819      	ldr	r1, [r3, #0]
 8003c18:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <LEDHandler+0x2668>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <LEDHandler+0x266c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 fbf0 	bl	8007404 <Set_LED>
 8003c24:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <LEDHandler+0x2660>)
 8003c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	b21a      	sxth	r2, r3
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <LEDHandler+0x2660>)
 8003c34:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003c36:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <LEDHandler+0x2660>)
 8003c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <LEDHandler+0x2664>)
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <LEDHandler+0x2668>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b45      	ldr	r3, [pc, #276]	; (8003d5c <LEDHandler+0x266c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 fbdb 	bl	8007404 <Set_LED>
 8003c4e:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <LEDHandler+0x2660>)
 8003c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	b21a      	sxth	r2, r3
 8003c5c:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <LEDHandler+0x2660>)
 8003c5e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003c60:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <LEDHandler+0x2660>)
 8003c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c66:	4618      	mov	r0, r3
 8003c68:	4b3a      	ldr	r3, [pc, #232]	; (8003d54 <LEDHandler+0x2664>)
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	4b3a      	ldr	r3, [pc, #232]	; (8003d58 <LEDHandler+0x2668>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <LEDHandler+0x266c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 fbc6 	bl	8007404 <Set_LED>
 8003c78:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <LEDHandler+0x2660>)
 8003c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b21a      	sxth	r2, r3
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <LEDHandler+0x2660>)
 8003c88:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003c8a:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <LEDHandler+0x2660>)
 8003c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c90:	4618      	mov	r0, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	2200      	movs	r2, #0
 8003c96:	2100      	movs	r1, #0
 8003c98:	f003 fbb4 	bl	8007404 <Set_LED>
 8003c9c:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <LEDHandler+0x2660>)
 8003c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b21a      	sxth	r2, r3
 8003caa:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <LEDHandler+0x2660>)
 8003cac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <LEDHandler+0x2660>)
 8003cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f003 fba2 	bl	8007404 <Set_LED>
 8003cc0:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <LEDHandler+0x2660>)
 8003cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	b21a      	sxth	r2, r3
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <LEDHandler+0x2660>)
 8003cd0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003cd2:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <LEDHandler+0x2660>)
 8003cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f003 fb90 	bl	8007404 <Set_LED>
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <LEDHandler+0x2660>)
 8003ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	b21a      	sxth	r2, r3
 8003cf2:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <LEDHandler+0x2660>)
 8003cf4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003cf6:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <LEDHandler+0x2660>)
 8003cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2200      	movs	r2, #0
 8003d02:	2100      	movs	r1, #0
 8003d04:	f003 fb7e 	bl	8007404 <Set_LED>
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <LEDHandler+0x2660>)
 8003d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <LEDHandler+0x2660>)
 8003d18:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <LEDHandler+0x2660>)
 8003d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d20:	4618      	mov	r0, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	2200      	movs	r2, #0
 8003d26:	2100      	movs	r1, #0
 8003d28:	f003 fb6c 	bl	8007404 <Set_LED>
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <LEDHandler+0x2660>)
 8003d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <LEDHandler+0x2660>)
 8003d3c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <LEDHandler+0x2660>)
 8003d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d44:	4618      	mov	r0, r3
 8003d46:	2300      	movs	r3, #0
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	e008      	b.n	8003d60 <LEDHandler+0x2670>
 8003d4e:	bf00      	nop
 8003d50:	2000031c 	.word	0x2000031c
 8003d54:	20000008 	.word	0x20000008
 8003d58:	2000000c 	.word	0x2000000c
 8003d5c:	20000010 	.word	0x20000010
 8003d60:	f003 fb50 	bl	8007404 <Set_LED>
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <LEDHandler+0x268c>)
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	b21a      	sxth	r2, r3
 8003d72:	4b02      	ldr	r3, [pc, #8]	; (8003d7c <LEDHandler+0x268c>)
 8003d74:	801a      	strh	r2, [r3, #0]
 8003d76:	f001 b8b7 	b.w	8004ee8 <LEDHandler+0x37f8>
 8003d7a:	bf00      	nop
 8003d7c:	2000031c 	.word	0x2000031c

		} else if (Valor >= 66 && Valor < 72) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b41      	cmp	r3, #65	; 0x41
 8003d84:	f340 8168 	ble.w	8004058 <LEDHandler+0x2968>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b47      	cmp	r3, #71	; 0x47
 8003d8c:	f300 8164 	bgt.w	8004058 <LEDHandler+0x2968>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8003d90:	4ba2      	ldr	r3, [pc, #648]	; (800401c <LEDHandler+0x292c>)
 8003d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d96:	4618      	mov	r0, r3
 8003d98:	4ba1      	ldr	r3, [pc, #644]	; (8004020 <LEDHandler+0x2930>)
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	4ba1      	ldr	r3, [pc, #644]	; (8004024 <LEDHandler+0x2934>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4ba1      	ldr	r3, [pc, #644]	; (8004028 <LEDHandler+0x2938>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 fb2e 	bl	8007404 <Set_LED>
 8003da8:	4b9c      	ldr	r3, [pc, #624]	; (800401c <LEDHandler+0x292c>)
 8003daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	b21a      	sxth	r2, r3
 8003db6:	4b99      	ldr	r3, [pc, #612]	; (800401c <LEDHandler+0x292c>)
 8003db8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003dba:	4b98      	ldr	r3, [pc, #608]	; (800401c <LEDHandler+0x292c>)
 8003dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	4b97      	ldr	r3, [pc, #604]	; (8004020 <LEDHandler+0x2930>)
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	4b97      	ldr	r3, [pc, #604]	; (8004024 <LEDHandler+0x2934>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b97      	ldr	r3, [pc, #604]	; (8004028 <LEDHandler+0x2938>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 fb19 	bl	8007404 <Set_LED>
 8003dd2:	4b92      	ldr	r3, [pc, #584]	; (800401c <LEDHandler+0x292c>)
 8003dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	b21a      	sxth	r2, r3
 8003de0:	4b8e      	ldr	r3, [pc, #568]	; (800401c <LEDHandler+0x292c>)
 8003de2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003de4:	4b8d      	ldr	r3, [pc, #564]	; (800401c <LEDHandler+0x292c>)
 8003de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dea:	4618      	mov	r0, r3
 8003dec:	4b8c      	ldr	r3, [pc, #560]	; (8004020 <LEDHandler+0x2930>)
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	4b8c      	ldr	r3, [pc, #560]	; (8004024 <LEDHandler+0x2934>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b8c      	ldr	r3, [pc, #560]	; (8004028 <LEDHandler+0x2938>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 fb04 	bl	8007404 <Set_LED>
 8003dfc:	4b87      	ldr	r3, [pc, #540]	; (800401c <LEDHandler+0x292c>)
 8003dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b21a      	sxth	r2, r3
 8003e0a:	4b84      	ldr	r3, [pc, #528]	; (800401c <LEDHandler+0x292c>)
 8003e0c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003e0e:	4b83      	ldr	r3, [pc, #524]	; (800401c <LEDHandler+0x292c>)
 8003e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e14:	4618      	mov	r0, r3
 8003e16:	4b82      	ldr	r3, [pc, #520]	; (8004020 <LEDHandler+0x2930>)
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	4b82      	ldr	r3, [pc, #520]	; (8004024 <LEDHandler+0x2934>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b82      	ldr	r3, [pc, #520]	; (8004028 <LEDHandler+0x2938>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 faef 	bl	8007404 <Set_LED>
 8003e26:	4b7d      	ldr	r3, [pc, #500]	; (800401c <LEDHandler+0x292c>)
 8003e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	b21a      	sxth	r2, r3
 8003e34:	4b79      	ldr	r3, [pc, #484]	; (800401c <LEDHandler+0x292c>)
 8003e36:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003e38:	4b78      	ldr	r3, [pc, #480]	; (800401c <LEDHandler+0x292c>)
 8003e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	4b77      	ldr	r3, [pc, #476]	; (8004020 <LEDHandler+0x2930>)
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	4b77      	ldr	r3, [pc, #476]	; (8004024 <LEDHandler+0x2934>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b77      	ldr	r3, [pc, #476]	; (8004028 <LEDHandler+0x2938>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 fada 	bl	8007404 <Set_LED>
 8003e50:	4b72      	ldr	r3, [pc, #456]	; (800401c <LEDHandler+0x292c>)
 8003e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b21a      	sxth	r2, r3
 8003e5e:	4b6f      	ldr	r3, [pc, #444]	; (800401c <LEDHandler+0x292c>)
 8003e60:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003e62:	4b6e      	ldr	r3, [pc, #440]	; (800401c <LEDHandler+0x292c>)
 8003e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	; (8004020 <LEDHandler+0x2930>)
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <LEDHandler+0x2934>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b6d      	ldr	r3, [pc, #436]	; (8004028 <LEDHandler+0x2938>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 fac5 	bl	8007404 <Set_LED>
 8003e7a:	4b68      	ldr	r3, [pc, #416]	; (800401c <LEDHandler+0x292c>)
 8003e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	b21a      	sxth	r2, r3
 8003e88:	4b64      	ldr	r3, [pc, #400]	; (800401c <LEDHandler+0x292c>)
 8003e8a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003e8c:	4b63      	ldr	r3, [pc, #396]	; (800401c <LEDHandler+0x292c>)
 8003e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e92:	4618      	mov	r0, r3
 8003e94:	4b62      	ldr	r3, [pc, #392]	; (8004020 <LEDHandler+0x2930>)
 8003e96:	6819      	ldr	r1, [r3, #0]
 8003e98:	4b62      	ldr	r3, [pc, #392]	; (8004024 <LEDHandler+0x2934>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b62      	ldr	r3, [pc, #392]	; (8004028 <LEDHandler+0x2938>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 fab0 	bl	8007404 <Set_LED>
 8003ea4:	4b5d      	ldr	r3, [pc, #372]	; (800401c <LEDHandler+0x292c>)
 8003ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b21a      	sxth	r2, r3
 8003eb2:	4b5a      	ldr	r3, [pc, #360]	; (800401c <LEDHandler+0x292c>)
 8003eb4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003eb6:	4b59      	ldr	r3, [pc, #356]	; (800401c <LEDHandler+0x292c>)
 8003eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	4b58      	ldr	r3, [pc, #352]	; (8004020 <LEDHandler+0x2930>)
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	4b58      	ldr	r3, [pc, #352]	; (8004024 <LEDHandler+0x2934>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b58      	ldr	r3, [pc, #352]	; (8004028 <LEDHandler+0x2938>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 fa9b 	bl	8007404 <Set_LED>
 8003ece:	4b53      	ldr	r3, [pc, #332]	; (800401c <LEDHandler+0x292c>)
 8003ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b21a      	sxth	r2, r3
 8003edc:	4b4f      	ldr	r3, [pc, #316]	; (800401c <LEDHandler+0x292c>)
 8003ede:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003ee0:	4b4e      	ldr	r3, [pc, #312]	; (800401c <LEDHandler+0x292c>)
 8003ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	4b4d      	ldr	r3, [pc, #308]	; (8004020 <LEDHandler+0x2930>)
 8003eea:	6819      	ldr	r1, [r3, #0]
 8003eec:	4b4d      	ldr	r3, [pc, #308]	; (8004024 <LEDHandler+0x2934>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b4d      	ldr	r3, [pc, #308]	; (8004028 <LEDHandler+0x2938>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 fa86 	bl	8007404 <Set_LED>
 8003ef8:	4b48      	ldr	r3, [pc, #288]	; (800401c <LEDHandler+0x292c>)
 8003efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	b21a      	sxth	r2, r3
 8003f06:	4b45      	ldr	r3, [pc, #276]	; (800401c <LEDHandler+0x292c>)
 8003f08:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003f0a:	4b44      	ldr	r3, [pc, #272]	; (800401c <LEDHandler+0x292c>)
 8003f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f10:	4618      	mov	r0, r3
 8003f12:	4b43      	ldr	r3, [pc, #268]	; (8004020 <LEDHandler+0x2930>)
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	4b43      	ldr	r3, [pc, #268]	; (8004024 <LEDHandler+0x2934>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b43      	ldr	r3, [pc, #268]	; (8004028 <LEDHandler+0x2938>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 fa71 	bl	8007404 <Set_LED>
 8003f22:	4b3e      	ldr	r3, [pc, #248]	; (800401c <LEDHandler+0x292c>)
 8003f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	b21a      	sxth	r2, r3
 8003f30:	4b3a      	ldr	r3, [pc, #232]	; (800401c <LEDHandler+0x292c>)
 8003f32:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003f34:	4b39      	ldr	r3, [pc, #228]	; (800401c <LEDHandler+0x292c>)
 8003f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	4b38      	ldr	r3, [pc, #224]	; (8004020 <LEDHandler+0x2930>)
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	4b38      	ldr	r3, [pc, #224]	; (8004024 <LEDHandler+0x2934>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b38      	ldr	r3, [pc, #224]	; (8004028 <LEDHandler+0x2938>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 fa5c 	bl	8007404 <Set_LED>
 8003f4c:	4b33      	ldr	r3, [pc, #204]	; (800401c <LEDHandler+0x292c>)
 8003f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	b21a      	sxth	r2, r3
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <LEDHandler+0x292c>)
 8003f5c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8003f5e:	4b2f      	ldr	r3, [pc, #188]	; (800401c <LEDHandler+0x292c>)
 8003f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f64:	4618      	mov	r0, r3
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <LEDHandler+0x2930>)
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	4b2e      	ldr	r3, [pc, #184]	; (8004024 <LEDHandler+0x2934>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <LEDHandler+0x2938>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 fa47 	bl	8007404 <Set_LED>
 8003f76:	4b29      	ldr	r3, [pc, #164]	; (800401c <LEDHandler+0x292c>)
 8003f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	b21a      	sxth	r2, r3
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <LEDHandler+0x292c>)
 8003f86:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003f88:	4b24      	ldr	r3, [pc, #144]	; (800401c <LEDHandler+0x292c>)
 8003f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	2300      	movs	r3, #0
 8003f92:	2200      	movs	r2, #0
 8003f94:	2100      	movs	r1, #0
 8003f96:	f003 fa35 	bl	8007404 <Set_LED>
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <LEDHandler+0x292c>)
 8003f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	b21a      	sxth	r2, r3
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	; (800401c <LEDHandler+0x292c>)
 8003faa:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <LEDHandler+0x292c>)
 8003fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f003 fa23 	bl	8007404 <Set_LED>
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <LEDHandler+0x292c>)
 8003fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	b21a      	sxth	r2, r3
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <LEDHandler+0x292c>)
 8003fce:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <LEDHandler+0x292c>)
 8003fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2100      	movs	r1, #0
 8003fde:	f003 fa11 	bl	8007404 <Set_LED>
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <LEDHandler+0x292c>)
 8003fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3301      	adds	r3, #1
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	b21a      	sxth	r2, r3
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <LEDHandler+0x292c>)
 8003ff2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <LEDHandler+0x292c>)
 8003ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	f003 f9ff 	bl	8007404 <Set_LED>
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <LEDHandler+0x292c>)
 8004008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800400c:	b29b      	uxth	r3, r3
 800400e:	3301      	adds	r3, #1
 8004010:	b29b      	uxth	r3, r3
 8004012:	b21a      	sxth	r2, r3
 8004014:	4b01      	ldr	r3, [pc, #4]	; (800401c <LEDHandler+0x292c>)
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e008      	b.n	800402c <LEDHandler+0x293c>
 800401a:	bf00      	nop
 800401c:	2000031c 	.word	0x2000031c
 8004020:	20000008 	.word	0x20000008
 8004024:	2000000c 	.word	0x2000000c
 8004028:	20000010 	.word	0x20000010
			Set_LED(var2, 0, 0, 0);			var2++;
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <LEDHandler+0x2964>)
 800402e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004032:	4618      	mov	r0, r3
 8004034:	2300      	movs	r3, #0
 8004036:	2200      	movs	r2, #0
 8004038:	2100      	movs	r1, #0
 800403a:	f003 f9e3 	bl	8007404 <Set_LED>
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <LEDHandler+0x2964>)
 8004040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004044:	b29b      	uxth	r3, r3
 8004046:	3301      	adds	r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	b21a      	sxth	r2, r3
 800404c:	4b01      	ldr	r3, [pc, #4]	; (8004054 <LEDHandler+0x2964>)
 800404e:	801a      	strh	r2, [r3, #0]
 8004050:	f000 bf4a 	b.w	8004ee8 <LEDHandler+0x37f8>
 8004054:	2000031c 	.word	0x2000031c

		} else if (Valor >= 72 && Valor < 78) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b47      	cmp	r3, #71	; 0x47
 800405c:	f340 816c 	ble.w	8004338 <LEDHandler+0x2c48>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b4d      	cmp	r3, #77	; 0x4d
 8004064:	f300 8168 	bgt.w	8004338 <LEDHandler+0x2c48>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8004068:	4ba1      	ldr	r3, [pc, #644]	; (80042f0 <LEDHandler+0x2c00>)
 800406a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800406e:	4618      	mov	r0, r3
 8004070:	4ba0      	ldr	r3, [pc, #640]	; (80042f4 <LEDHandler+0x2c04>)
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	4ba0      	ldr	r3, [pc, #640]	; (80042f8 <LEDHandler+0x2c08>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4ba0      	ldr	r3, [pc, #640]	; (80042fc <LEDHandler+0x2c0c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 f9c2 	bl	8007404 <Set_LED>
 8004080:	4b9b      	ldr	r3, [pc, #620]	; (80042f0 <LEDHandler+0x2c00>)
 8004082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004086:	b29b      	uxth	r3, r3
 8004088:	3301      	adds	r3, #1
 800408a:	b29b      	uxth	r3, r3
 800408c:	b21a      	sxth	r2, r3
 800408e:	4b98      	ldr	r3, [pc, #608]	; (80042f0 <LEDHandler+0x2c00>)
 8004090:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004092:	4b97      	ldr	r3, [pc, #604]	; (80042f0 <LEDHandler+0x2c00>)
 8004094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004098:	4618      	mov	r0, r3
 800409a:	4b96      	ldr	r3, [pc, #600]	; (80042f4 <LEDHandler+0x2c04>)
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	4b96      	ldr	r3, [pc, #600]	; (80042f8 <LEDHandler+0x2c08>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b96      	ldr	r3, [pc, #600]	; (80042fc <LEDHandler+0x2c0c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 f9ad 	bl	8007404 <Set_LED>
 80040aa:	4b91      	ldr	r3, [pc, #580]	; (80042f0 <LEDHandler+0x2c00>)
 80040ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3301      	adds	r3, #1
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	b21a      	sxth	r2, r3
 80040b8:	4b8d      	ldr	r3, [pc, #564]	; (80042f0 <LEDHandler+0x2c00>)
 80040ba:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80040bc:	4b8c      	ldr	r3, [pc, #560]	; (80042f0 <LEDHandler+0x2c00>)
 80040be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c2:	4618      	mov	r0, r3
 80040c4:	4b8b      	ldr	r3, [pc, #556]	; (80042f4 <LEDHandler+0x2c04>)
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	4b8b      	ldr	r3, [pc, #556]	; (80042f8 <LEDHandler+0x2c08>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b8b      	ldr	r3, [pc, #556]	; (80042fc <LEDHandler+0x2c0c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 f998 	bl	8007404 <Set_LED>
 80040d4:	4b86      	ldr	r3, [pc, #536]	; (80042f0 <LEDHandler+0x2c00>)
 80040d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	b29b      	uxth	r3, r3
 80040e0:	b21a      	sxth	r2, r3
 80040e2:	4b83      	ldr	r3, [pc, #524]	; (80042f0 <LEDHandler+0x2c00>)
 80040e4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80040e6:	4b82      	ldr	r3, [pc, #520]	; (80042f0 <LEDHandler+0x2c00>)
 80040e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ec:	4618      	mov	r0, r3
 80040ee:	4b81      	ldr	r3, [pc, #516]	; (80042f4 <LEDHandler+0x2c04>)
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	4b81      	ldr	r3, [pc, #516]	; (80042f8 <LEDHandler+0x2c08>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b81      	ldr	r3, [pc, #516]	; (80042fc <LEDHandler+0x2c0c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 f983 	bl	8007404 <Set_LED>
 80040fe:	4b7c      	ldr	r3, [pc, #496]	; (80042f0 <LEDHandler+0x2c00>)
 8004100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004104:	b29b      	uxth	r3, r3
 8004106:	3301      	adds	r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	b21a      	sxth	r2, r3
 800410c:	4b78      	ldr	r3, [pc, #480]	; (80042f0 <LEDHandler+0x2c00>)
 800410e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004110:	4b77      	ldr	r3, [pc, #476]	; (80042f0 <LEDHandler+0x2c00>)
 8004112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004116:	4618      	mov	r0, r3
 8004118:	4b76      	ldr	r3, [pc, #472]	; (80042f4 <LEDHandler+0x2c04>)
 800411a:	6819      	ldr	r1, [r3, #0]
 800411c:	4b76      	ldr	r3, [pc, #472]	; (80042f8 <LEDHandler+0x2c08>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b76      	ldr	r3, [pc, #472]	; (80042fc <LEDHandler+0x2c0c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 f96e 	bl	8007404 <Set_LED>
 8004128:	4b71      	ldr	r3, [pc, #452]	; (80042f0 <LEDHandler+0x2c00>)
 800412a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800412e:	b29b      	uxth	r3, r3
 8004130:	3301      	adds	r3, #1
 8004132:	b29b      	uxth	r3, r3
 8004134:	b21a      	sxth	r2, r3
 8004136:	4b6e      	ldr	r3, [pc, #440]	; (80042f0 <LEDHandler+0x2c00>)
 8004138:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <LEDHandler+0x2c00>)
 800413c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004140:	4618      	mov	r0, r3
 8004142:	4b6c      	ldr	r3, [pc, #432]	; (80042f4 <LEDHandler+0x2c04>)
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	4b6c      	ldr	r3, [pc, #432]	; (80042f8 <LEDHandler+0x2c08>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b6c      	ldr	r3, [pc, #432]	; (80042fc <LEDHandler+0x2c0c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 f959 	bl	8007404 <Set_LED>
 8004152:	4b67      	ldr	r3, [pc, #412]	; (80042f0 <LEDHandler+0x2c00>)
 8004154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004158:	b29b      	uxth	r3, r3
 800415a:	3301      	adds	r3, #1
 800415c:	b29b      	uxth	r3, r3
 800415e:	b21a      	sxth	r2, r3
 8004160:	4b63      	ldr	r3, [pc, #396]	; (80042f0 <LEDHandler+0x2c00>)
 8004162:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004164:	4b62      	ldr	r3, [pc, #392]	; (80042f0 <LEDHandler+0x2c00>)
 8004166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800416a:	4618      	mov	r0, r3
 800416c:	4b61      	ldr	r3, [pc, #388]	; (80042f4 <LEDHandler+0x2c04>)
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <LEDHandler+0x2c08>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b61      	ldr	r3, [pc, #388]	; (80042fc <LEDHandler+0x2c0c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 f944 	bl	8007404 <Set_LED>
 800417c:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <LEDHandler+0x2c00>)
 800417e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004182:	b29b      	uxth	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	b29b      	uxth	r3, r3
 8004188:	b21a      	sxth	r2, r3
 800418a:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <LEDHandler+0x2c00>)
 800418c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800418e:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <LEDHandler+0x2c00>)
 8004190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004194:	4618      	mov	r0, r3
 8004196:	4b57      	ldr	r3, [pc, #348]	; (80042f4 <LEDHandler+0x2c04>)
 8004198:	6819      	ldr	r1, [r3, #0]
 800419a:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <LEDHandler+0x2c08>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b57      	ldr	r3, [pc, #348]	; (80042fc <LEDHandler+0x2c0c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 f92f 	bl	8007404 <Set_LED>
 80041a6:	4b52      	ldr	r3, [pc, #328]	; (80042f0 <LEDHandler+0x2c00>)
 80041a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3301      	adds	r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	b21a      	sxth	r2, r3
 80041b4:	4b4e      	ldr	r3, [pc, #312]	; (80042f0 <LEDHandler+0x2c00>)
 80041b6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80041b8:	4b4d      	ldr	r3, [pc, #308]	; (80042f0 <LEDHandler+0x2c00>)
 80041ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041be:	4618      	mov	r0, r3
 80041c0:	4b4c      	ldr	r3, [pc, #304]	; (80042f4 <LEDHandler+0x2c04>)
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <LEDHandler+0x2c08>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b4c      	ldr	r3, [pc, #304]	; (80042fc <LEDHandler+0x2c0c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 f91a 	bl	8007404 <Set_LED>
 80041d0:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <LEDHandler+0x2c00>)
 80041d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	b21a      	sxth	r2, r3
 80041de:	4b44      	ldr	r3, [pc, #272]	; (80042f0 <LEDHandler+0x2c00>)
 80041e0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80041e2:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <LEDHandler+0x2c00>)
 80041e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041e8:	4618      	mov	r0, r3
 80041ea:	4b42      	ldr	r3, [pc, #264]	; (80042f4 <LEDHandler+0x2c04>)
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	4b42      	ldr	r3, [pc, #264]	; (80042f8 <LEDHandler+0x2c08>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b42      	ldr	r3, [pc, #264]	; (80042fc <LEDHandler+0x2c0c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 f905 	bl	8007404 <Set_LED>
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <LEDHandler+0x2c00>)
 80041fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004200:	b29b      	uxth	r3, r3
 8004202:	3301      	adds	r3, #1
 8004204:	b29b      	uxth	r3, r3
 8004206:	b21a      	sxth	r2, r3
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <LEDHandler+0x2c00>)
 800420a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800420c:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <LEDHandler+0x2c00>)
 800420e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004212:	4618      	mov	r0, r3
 8004214:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <LEDHandler+0x2c04>)
 8004216:	6819      	ldr	r1, [r3, #0]
 8004218:	4b37      	ldr	r3, [pc, #220]	; (80042f8 <LEDHandler+0x2c08>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b37      	ldr	r3, [pc, #220]	; (80042fc <LEDHandler+0x2c0c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 f8f0 	bl	8007404 <Set_LED>
 8004224:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <LEDHandler+0x2c00>)
 8004226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800422a:	b29b      	uxth	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	b29b      	uxth	r3, r3
 8004230:	b21a      	sxth	r2, r3
 8004232:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <LEDHandler+0x2c00>)
 8004234:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004236:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <LEDHandler+0x2c00>)
 8004238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800423c:	4618      	mov	r0, r3
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <LEDHandler+0x2c04>)
 8004240:	6819      	ldr	r1, [r3, #0]
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <LEDHandler+0x2c08>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <LEDHandler+0x2c0c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 f8db 	bl	8007404 <Set_LED>
 800424e:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <LEDHandler+0x2c00>)
 8004250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004254:	b29b      	uxth	r3, r3
 8004256:	3301      	adds	r3, #1
 8004258:	b29b      	uxth	r3, r3
 800425a:	b21a      	sxth	r2, r3
 800425c:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <LEDHandler+0x2c00>)
 800425e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004260:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <LEDHandler+0x2c00>)
 8004262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004266:	4618      	mov	r0, r3
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <LEDHandler+0x2c04>)
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <LEDHandler+0x2c08>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b22      	ldr	r3, [pc, #136]	; (80042fc <LEDHandler+0x2c0c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 f8c6 	bl	8007404 <Set_LED>
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <LEDHandler+0x2c00>)
 800427a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800427e:	b29b      	uxth	r3, r3
 8004280:	3301      	adds	r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	b21a      	sxth	r2, r3
 8004286:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <LEDHandler+0x2c00>)
 8004288:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800428a:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <LEDHandler+0x2c00>)
 800428c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004290:	4618      	mov	r0, r3
 8004292:	2300      	movs	r3, #0
 8004294:	2200      	movs	r2, #0
 8004296:	2100      	movs	r1, #0
 8004298:	f003 f8b4 	bl	8007404 <Set_LED>
 800429c:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <LEDHandler+0x2c00>)
 800429e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	b21a      	sxth	r2, r3
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <LEDHandler+0x2c00>)
 80042ac:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80042ae:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <LEDHandler+0x2c00>)
 80042b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b4:	4618      	mov	r0, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	2200      	movs	r2, #0
 80042ba:	2100      	movs	r1, #0
 80042bc:	f003 f8a2 	bl	8007404 <Set_LED>
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <LEDHandler+0x2c00>)
 80042c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3301      	adds	r3, #1
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	b21a      	sxth	r2, r3
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <LEDHandler+0x2c00>)
 80042d0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <LEDHandler+0x2c00>)
 80042d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d8:	4618      	mov	r0, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	2200      	movs	r2, #0
 80042de:	2100      	movs	r1, #0
 80042e0:	f003 f890 	bl	8007404 <Set_LED>
 80042e4:	4b02      	ldr	r3, [pc, #8]	; (80042f0 <LEDHandler+0x2c00>)
 80042e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	e008      	b.n	8004300 <LEDHandler+0x2c10>
 80042ee:	bf00      	nop
 80042f0:	2000031c 	.word	0x2000031c
 80042f4:	20000008 	.word	0x20000008
 80042f8:	2000000c 	.word	0x2000000c
 80042fc:	20000010 	.word	0x20000010
 8004300:	3301      	adds	r3, #1
 8004302:	b29b      	uxth	r3, r3
 8004304:	b21a      	sxth	r2, r3
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <LEDHandler+0x2c44>)
 8004308:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <LEDHandler+0x2c44>)
 800430c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004310:	4618      	mov	r0, r3
 8004312:	2300      	movs	r3, #0
 8004314:	2200      	movs	r2, #0
 8004316:	2100      	movs	r1, #0
 8004318:	f003 f874 	bl	8007404 <Set_LED>
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <LEDHandler+0x2c44>)
 800431e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004322:	b29b      	uxth	r3, r3
 8004324:	3301      	adds	r3, #1
 8004326:	b29b      	uxth	r3, r3
 8004328:	b21a      	sxth	r2, r3
 800432a:	4b02      	ldr	r3, [pc, #8]	; (8004334 <LEDHandler+0x2c44>)
 800432c:	801a      	strh	r2, [r3, #0]
 800432e:	f000 bddb 	b.w	8004ee8 <LEDHandler+0x37f8>
 8004332:	bf00      	nop
 8004334:	2000031c 	.word	0x2000031c

		} else if (Valor >= 78 && Valor < 84) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b4d      	cmp	r3, #77	; 0x4d
 800433c:	f340 816e 	ble.w	800461c <LEDHandler+0x2f2c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b53      	cmp	r3, #83	; 0x53
 8004344:	f300 816a 	bgt.w	800461c <LEDHandler+0x2f2c>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8004348:	4b9f      	ldr	r3, [pc, #636]	; (80045c8 <LEDHandler+0x2ed8>)
 800434a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800434e:	4618      	mov	r0, r3
 8004350:	4b9e      	ldr	r3, [pc, #632]	; (80045cc <LEDHandler+0x2edc>)
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	4b9e      	ldr	r3, [pc, #632]	; (80045d0 <LEDHandler+0x2ee0>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b9e      	ldr	r3, [pc, #632]	; (80045d4 <LEDHandler+0x2ee4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 f852 	bl	8007404 <Set_LED>
 8004360:	4b99      	ldr	r3, [pc, #612]	; (80045c8 <LEDHandler+0x2ed8>)
 8004362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004366:	b29b      	uxth	r3, r3
 8004368:	3301      	adds	r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	b21a      	sxth	r2, r3
 800436e:	4b96      	ldr	r3, [pc, #600]	; (80045c8 <LEDHandler+0x2ed8>)
 8004370:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004372:	4b95      	ldr	r3, [pc, #596]	; (80045c8 <LEDHandler+0x2ed8>)
 8004374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004378:	4618      	mov	r0, r3
 800437a:	4b94      	ldr	r3, [pc, #592]	; (80045cc <LEDHandler+0x2edc>)
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	4b94      	ldr	r3, [pc, #592]	; (80045d0 <LEDHandler+0x2ee0>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b94      	ldr	r3, [pc, #592]	; (80045d4 <LEDHandler+0x2ee4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 f83d 	bl	8007404 <Set_LED>
 800438a:	4b8f      	ldr	r3, [pc, #572]	; (80045c8 <LEDHandler+0x2ed8>)
 800438c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004390:	b29b      	uxth	r3, r3
 8004392:	3301      	adds	r3, #1
 8004394:	b29b      	uxth	r3, r3
 8004396:	b21a      	sxth	r2, r3
 8004398:	4b8b      	ldr	r3, [pc, #556]	; (80045c8 <LEDHandler+0x2ed8>)
 800439a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800439c:	4b8a      	ldr	r3, [pc, #552]	; (80045c8 <LEDHandler+0x2ed8>)
 800439e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a2:	4618      	mov	r0, r3
 80043a4:	4b89      	ldr	r3, [pc, #548]	; (80045cc <LEDHandler+0x2edc>)
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	4b89      	ldr	r3, [pc, #548]	; (80045d0 <LEDHandler+0x2ee0>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b89      	ldr	r3, [pc, #548]	; (80045d4 <LEDHandler+0x2ee4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 f828 	bl	8007404 <Set_LED>
 80043b4:	4b84      	ldr	r3, [pc, #528]	; (80045c8 <LEDHandler+0x2ed8>)
 80043b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3301      	adds	r3, #1
 80043be:	b29b      	uxth	r3, r3
 80043c0:	b21a      	sxth	r2, r3
 80043c2:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <LEDHandler+0x2ed8>)
 80043c4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80043c6:	4b80      	ldr	r3, [pc, #512]	; (80045c8 <LEDHandler+0x2ed8>)
 80043c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043cc:	4618      	mov	r0, r3
 80043ce:	4b7f      	ldr	r3, [pc, #508]	; (80045cc <LEDHandler+0x2edc>)
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	4b7f      	ldr	r3, [pc, #508]	; (80045d0 <LEDHandler+0x2ee0>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <LEDHandler+0x2ee4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 f813 	bl	8007404 <Set_LED>
 80043de:	4b7a      	ldr	r3, [pc, #488]	; (80045c8 <LEDHandler+0x2ed8>)
 80043e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	b21a      	sxth	r2, r3
 80043ec:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <LEDHandler+0x2ed8>)
 80043ee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80043f0:	4b75      	ldr	r3, [pc, #468]	; (80045c8 <LEDHandler+0x2ed8>)
 80043f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f6:	4618      	mov	r0, r3
 80043f8:	4b74      	ldr	r3, [pc, #464]	; (80045cc <LEDHandler+0x2edc>)
 80043fa:	6819      	ldr	r1, [r3, #0]
 80043fc:	4b74      	ldr	r3, [pc, #464]	; (80045d0 <LEDHandler+0x2ee0>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b74      	ldr	r3, [pc, #464]	; (80045d4 <LEDHandler+0x2ee4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f002 fffe 	bl	8007404 <Set_LED>
 8004408:	4b6f      	ldr	r3, [pc, #444]	; (80045c8 <LEDHandler+0x2ed8>)
 800440a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800440e:	b29b      	uxth	r3, r3
 8004410:	3301      	adds	r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	b21a      	sxth	r2, r3
 8004416:	4b6c      	ldr	r3, [pc, #432]	; (80045c8 <LEDHandler+0x2ed8>)
 8004418:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800441a:	4b6b      	ldr	r3, [pc, #428]	; (80045c8 <LEDHandler+0x2ed8>)
 800441c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004420:	4618      	mov	r0, r3
 8004422:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <LEDHandler+0x2edc>)
 8004424:	6819      	ldr	r1, [r3, #0]
 8004426:	4b6a      	ldr	r3, [pc, #424]	; (80045d0 <LEDHandler+0x2ee0>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <LEDHandler+0x2ee4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f002 ffe9 	bl	8007404 <Set_LED>
 8004432:	4b65      	ldr	r3, [pc, #404]	; (80045c8 <LEDHandler+0x2ed8>)
 8004434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004438:	b29b      	uxth	r3, r3
 800443a:	3301      	adds	r3, #1
 800443c:	b29b      	uxth	r3, r3
 800443e:	b21a      	sxth	r2, r3
 8004440:	4b61      	ldr	r3, [pc, #388]	; (80045c8 <LEDHandler+0x2ed8>)
 8004442:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004444:	4b60      	ldr	r3, [pc, #384]	; (80045c8 <LEDHandler+0x2ed8>)
 8004446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800444a:	4618      	mov	r0, r3
 800444c:	4b5f      	ldr	r3, [pc, #380]	; (80045cc <LEDHandler+0x2edc>)
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	4b5f      	ldr	r3, [pc, #380]	; (80045d0 <LEDHandler+0x2ee0>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b5f      	ldr	r3, [pc, #380]	; (80045d4 <LEDHandler+0x2ee4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f002 ffd4 	bl	8007404 <Set_LED>
 800445c:	4b5a      	ldr	r3, [pc, #360]	; (80045c8 <LEDHandler+0x2ed8>)
 800445e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004462:	b29b      	uxth	r3, r3
 8004464:	3301      	adds	r3, #1
 8004466:	b29b      	uxth	r3, r3
 8004468:	b21a      	sxth	r2, r3
 800446a:	4b57      	ldr	r3, [pc, #348]	; (80045c8 <LEDHandler+0x2ed8>)
 800446c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800446e:	4b56      	ldr	r3, [pc, #344]	; (80045c8 <LEDHandler+0x2ed8>)
 8004470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004474:	4618      	mov	r0, r3
 8004476:	4b55      	ldr	r3, [pc, #340]	; (80045cc <LEDHandler+0x2edc>)
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	4b55      	ldr	r3, [pc, #340]	; (80045d0 <LEDHandler+0x2ee0>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b55      	ldr	r3, [pc, #340]	; (80045d4 <LEDHandler+0x2ee4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f002 ffbf 	bl	8007404 <Set_LED>
 8004486:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <LEDHandler+0x2ed8>)
 8004488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800448c:	b29b      	uxth	r3, r3
 800448e:	3301      	adds	r3, #1
 8004490:	b29b      	uxth	r3, r3
 8004492:	b21a      	sxth	r2, r3
 8004494:	4b4c      	ldr	r3, [pc, #304]	; (80045c8 <LEDHandler+0x2ed8>)
 8004496:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004498:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <LEDHandler+0x2ed8>)
 800449a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800449e:	4618      	mov	r0, r3
 80044a0:	4b4a      	ldr	r3, [pc, #296]	; (80045cc <LEDHandler+0x2edc>)
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <LEDHandler+0x2ee0>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <LEDHandler+0x2ee4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f002 ffaa 	bl	8007404 <Set_LED>
 80044b0:	4b45      	ldr	r3, [pc, #276]	; (80045c8 <LEDHandler+0x2ed8>)
 80044b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3301      	adds	r3, #1
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	b21a      	sxth	r2, r3
 80044be:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <LEDHandler+0x2ed8>)
 80044c0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <LEDHandler+0x2ed8>)
 80044c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044c8:	4618      	mov	r0, r3
 80044ca:	4b40      	ldr	r3, [pc, #256]	; (80045cc <LEDHandler+0x2edc>)
 80044cc:	6819      	ldr	r1, [r3, #0]
 80044ce:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <LEDHandler+0x2ee0>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <LEDHandler+0x2ee4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f002 ff95 	bl	8007404 <Set_LED>
 80044da:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <LEDHandler+0x2ed8>)
 80044dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3301      	adds	r3, #1
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	b21a      	sxth	r2, r3
 80044e8:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <LEDHandler+0x2ed8>)
 80044ea:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <LEDHandler+0x2ed8>)
 80044ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f2:	4618      	mov	r0, r3
 80044f4:	4b35      	ldr	r3, [pc, #212]	; (80045cc <LEDHandler+0x2edc>)
 80044f6:	6819      	ldr	r1, [r3, #0]
 80044f8:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <LEDHandler+0x2ee0>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b35      	ldr	r3, [pc, #212]	; (80045d4 <LEDHandler+0x2ee4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f002 ff80 	bl	8007404 <Set_LED>
 8004504:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <LEDHandler+0x2ed8>)
 8004506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800450a:	b29b      	uxth	r3, r3
 800450c:	3301      	adds	r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	b21a      	sxth	r2, r3
 8004512:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <LEDHandler+0x2ed8>)
 8004514:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004516:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <LEDHandler+0x2ed8>)
 8004518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800451c:	4618      	mov	r0, r3
 800451e:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <LEDHandler+0x2edc>)
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <LEDHandler+0x2ee0>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <LEDHandler+0x2ee4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f002 ff6b 	bl	8007404 <Set_LED>
 800452e:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <LEDHandler+0x2ed8>)
 8004530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004534:	b29b      	uxth	r3, r3
 8004536:	3301      	adds	r3, #1
 8004538:	b29b      	uxth	r3, r3
 800453a:	b21a      	sxth	r2, r3
 800453c:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <LEDHandler+0x2ed8>)
 800453e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004540:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <LEDHandler+0x2ed8>)
 8004542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004546:	4618      	mov	r0, r3
 8004548:	4b20      	ldr	r3, [pc, #128]	; (80045cc <LEDHandler+0x2edc>)
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <LEDHandler+0x2ee0>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <LEDHandler+0x2ee4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f002 ff56 	bl	8007404 <Set_LED>
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <LEDHandler+0x2ed8>)
 800455a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800455e:	b29b      	uxth	r3, r3
 8004560:	3301      	adds	r3, #1
 8004562:	b29b      	uxth	r3, r3
 8004564:	b21a      	sxth	r2, r3
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <LEDHandler+0x2ed8>)
 8004568:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <LEDHandler+0x2ed8>)
 800456c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004570:	4618      	mov	r0, r3
 8004572:	4b16      	ldr	r3, [pc, #88]	; (80045cc <LEDHandler+0x2edc>)
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <LEDHandler+0x2ee0>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <LEDHandler+0x2ee4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f002 ff41 	bl	8007404 <Set_LED>
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <LEDHandler+0x2ed8>)
 8004584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004588:	b29b      	uxth	r3, r3
 800458a:	3301      	adds	r3, #1
 800458c:	b29b      	uxth	r3, r3
 800458e:	b21a      	sxth	r2, r3
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <LEDHandler+0x2ed8>)
 8004592:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <LEDHandler+0x2ed8>)
 8004596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459a:	4618      	mov	r0, r3
 800459c:	2300      	movs	r3, #0
 800459e:	2200      	movs	r2, #0
 80045a0:	2100      	movs	r1, #0
 80045a2:	f002 ff2f 	bl	8007404 <Set_LED>
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <LEDHandler+0x2ed8>)
 80045a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3301      	adds	r3, #1
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	b21a      	sxth	r2, r3
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <LEDHandler+0x2ed8>)
 80045b6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <LEDHandler+0x2ed8>)
 80045ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045be:	4618      	mov	r0, r3
 80045c0:	2300      	movs	r3, #0
 80045c2:	2200      	movs	r2, #0
 80045c4:	e008      	b.n	80045d8 <LEDHandler+0x2ee8>
 80045c6:	bf00      	nop
 80045c8:	2000031c 	.word	0x2000031c
 80045cc:	20000008 	.word	0x20000008
 80045d0:	2000000c 	.word	0x2000000c
 80045d4:	20000010 	.word	0x20000010
 80045d8:	2100      	movs	r1, #0
 80045da:	f002 ff13 	bl	8007404 <Set_LED>
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <LEDHandler+0x2f28>)
 80045e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3301      	adds	r3, #1
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	b21a      	sxth	r2, r3
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <LEDHandler+0x2f28>)
 80045ee:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <LEDHandler+0x2f28>)
 80045f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f6:	4618      	mov	r0, r3
 80045f8:	2300      	movs	r3, #0
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	f002 ff01 	bl	8007404 <Set_LED>
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <LEDHandler+0x2f28>)
 8004604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004608:	b29b      	uxth	r3, r3
 800460a:	3301      	adds	r3, #1
 800460c:	b29b      	uxth	r3, r3
 800460e:	b21a      	sxth	r2, r3
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <LEDHandler+0x2f28>)
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	f000 bc68 	b.w	8004ee8 <LEDHandler+0x37f8>
 8004618:	2000031c 	.word	0x2000031c

		} else if (Valor >= 84 && Valor < 90) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b53      	cmp	r3, #83	; 0x53
 8004620:	f340 8170 	ble.w	8004904 <LEDHandler+0x3214>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b59      	cmp	r3, #89	; 0x59
 8004628:	f300 816c 	bgt.w	8004904 <LEDHandler+0x3214>

			Set_LED(var2, Red, Green, Blue);			var2++;
 800462c:	4b9c      	ldr	r3, [pc, #624]	; (80048a0 <LEDHandler+0x31b0>)
 800462e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004632:	4618      	mov	r0, r3
 8004634:	4b9b      	ldr	r3, [pc, #620]	; (80048a4 <LEDHandler+0x31b4>)
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	4b9b      	ldr	r3, [pc, #620]	; (80048a8 <LEDHandler+0x31b8>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b9b      	ldr	r3, [pc, #620]	; (80048ac <LEDHandler+0x31bc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f002 fee0 	bl	8007404 <Set_LED>
 8004644:	4b96      	ldr	r3, [pc, #600]	; (80048a0 <LEDHandler+0x31b0>)
 8004646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464a:	b29b      	uxth	r3, r3
 800464c:	3301      	adds	r3, #1
 800464e:	b29b      	uxth	r3, r3
 8004650:	b21a      	sxth	r2, r3
 8004652:	4b93      	ldr	r3, [pc, #588]	; (80048a0 <LEDHandler+0x31b0>)
 8004654:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004656:	4b92      	ldr	r3, [pc, #584]	; (80048a0 <LEDHandler+0x31b0>)
 8004658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800465c:	4618      	mov	r0, r3
 800465e:	4b91      	ldr	r3, [pc, #580]	; (80048a4 <LEDHandler+0x31b4>)
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	4b91      	ldr	r3, [pc, #580]	; (80048a8 <LEDHandler+0x31b8>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b91      	ldr	r3, [pc, #580]	; (80048ac <LEDHandler+0x31bc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f002 fecb 	bl	8007404 <Set_LED>
 800466e:	4b8c      	ldr	r3, [pc, #560]	; (80048a0 <LEDHandler+0x31b0>)
 8004670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004674:	b29b      	uxth	r3, r3
 8004676:	3301      	adds	r3, #1
 8004678:	b29b      	uxth	r3, r3
 800467a:	b21a      	sxth	r2, r3
 800467c:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <LEDHandler+0x31b0>)
 800467e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004680:	4b87      	ldr	r3, [pc, #540]	; (80048a0 <LEDHandler+0x31b0>)
 8004682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004686:	4618      	mov	r0, r3
 8004688:	4b86      	ldr	r3, [pc, #536]	; (80048a4 <LEDHandler+0x31b4>)
 800468a:	6819      	ldr	r1, [r3, #0]
 800468c:	4b86      	ldr	r3, [pc, #536]	; (80048a8 <LEDHandler+0x31b8>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b86      	ldr	r3, [pc, #536]	; (80048ac <LEDHandler+0x31bc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f002 feb6 	bl	8007404 <Set_LED>
 8004698:	4b81      	ldr	r3, [pc, #516]	; (80048a0 <LEDHandler+0x31b0>)
 800469a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3301      	adds	r3, #1
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	b21a      	sxth	r2, r3
 80046a6:	4b7e      	ldr	r3, [pc, #504]	; (80048a0 <LEDHandler+0x31b0>)
 80046a8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80046aa:	4b7d      	ldr	r3, [pc, #500]	; (80048a0 <LEDHandler+0x31b0>)
 80046ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b0:	4618      	mov	r0, r3
 80046b2:	4b7c      	ldr	r3, [pc, #496]	; (80048a4 <LEDHandler+0x31b4>)
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	4b7c      	ldr	r3, [pc, #496]	; (80048a8 <LEDHandler+0x31b8>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b7c      	ldr	r3, [pc, #496]	; (80048ac <LEDHandler+0x31bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f002 fea1 	bl	8007404 <Set_LED>
 80046c2:	4b77      	ldr	r3, [pc, #476]	; (80048a0 <LEDHandler+0x31b0>)
 80046c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3301      	adds	r3, #1
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	b21a      	sxth	r2, r3
 80046d0:	4b73      	ldr	r3, [pc, #460]	; (80048a0 <LEDHandler+0x31b0>)
 80046d2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80046d4:	4b72      	ldr	r3, [pc, #456]	; (80048a0 <LEDHandler+0x31b0>)
 80046d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046da:	4618      	mov	r0, r3
 80046dc:	4b71      	ldr	r3, [pc, #452]	; (80048a4 <LEDHandler+0x31b4>)
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	4b71      	ldr	r3, [pc, #452]	; (80048a8 <LEDHandler+0x31b8>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b71      	ldr	r3, [pc, #452]	; (80048ac <LEDHandler+0x31bc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f002 fe8c 	bl	8007404 <Set_LED>
 80046ec:	4b6c      	ldr	r3, [pc, #432]	; (80048a0 <LEDHandler+0x31b0>)
 80046ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3301      	adds	r3, #1
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	b21a      	sxth	r2, r3
 80046fa:	4b69      	ldr	r3, [pc, #420]	; (80048a0 <LEDHandler+0x31b0>)
 80046fc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80046fe:	4b68      	ldr	r3, [pc, #416]	; (80048a0 <LEDHandler+0x31b0>)
 8004700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004704:	4618      	mov	r0, r3
 8004706:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <LEDHandler+0x31b4>)
 8004708:	6819      	ldr	r1, [r3, #0]
 800470a:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <LEDHandler+0x31b8>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b67      	ldr	r3, [pc, #412]	; (80048ac <LEDHandler+0x31bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f002 fe77 	bl	8007404 <Set_LED>
 8004716:	4b62      	ldr	r3, [pc, #392]	; (80048a0 <LEDHandler+0x31b0>)
 8004718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800471c:	b29b      	uxth	r3, r3
 800471e:	3301      	adds	r3, #1
 8004720:	b29b      	uxth	r3, r3
 8004722:	b21a      	sxth	r2, r3
 8004724:	4b5e      	ldr	r3, [pc, #376]	; (80048a0 <LEDHandler+0x31b0>)
 8004726:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004728:	4b5d      	ldr	r3, [pc, #372]	; (80048a0 <LEDHandler+0x31b0>)
 800472a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800472e:	4618      	mov	r0, r3
 8004730:	4b5c      	ldr	r3, [pc, #368]	; (80048a4 <LEDHandler+0x31b4>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	4b5c      	ldr	r3, [pc, #368]	; (80048a8 <LEDHandler+0x31b8>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b5c      	ldr	r3, [pc, #368]	; (80048ac <LEDHandler+0x31bc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f002 fe62 	bl	8007404 <Set_LED>
 8004740:	4b57      	ldr	r3, [pc, #348]	; (80048a0 <LEDHandler+0x31b0>)
 8004742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004746:	b29b      	uxth	r3, r3
 8004748:	3301      	adds	r3, #1
 800474a:	b29b      	uxth	r3, r3
 800474c:	b21a      	sxth	r2, r3
 800474e:	4b54      	ldr	r3, [pc, #336]	; (80048a0 <LEDHandler+0x31b0>)
 8004750:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004752:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <LEDHandler+0x31b0>)
 8004754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004758:	4618      	mov	r0, r3
 800475a:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <LEDHandler+0x31b4>)
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	4b52      	ldr	r3, [pc, #328]	; (80048a8 <LEDHandler+0x31b8>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b52      	ldr	r3, [pc, #328]	; (80048ac <LEDHandler+0x31bc>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f002 fe4d 	bl	8007404 <Set_LED>
 800476a:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <LEDHandler+0x31b0>)
 800476c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004770:	b29b      	uxth	r3, r3
 8004772:	3301      	adds	r3, #1
 8004774:	b29b      	uxth	r3, r3
 8004776:	b21a      	sxth	r2, r3
 8004778:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <LEDHandler+0x31b0>)
 800477a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800477c:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <LEDHandler+0x31b0>)
 800477e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004782:	4618      	mov	r0, r3
 8004784:	4b47      	ldr	r3, [pc, #284]	; (80048a4 <LEDHandler+0x31b4>)
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <LEDHandler+0x31b8>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b47      	ldr	r3, [pc, #284]	; (80048ac <LEDHandler+0x31bc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f002 fe38 	bl	8007404 <Set_LED>
 8004794:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <LEDHandler+0x31b0>)
 8004796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800479a:	b29b      	uxth	r3, r3
 800479c:	3301      	adds	r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	4b3f      	ldr	r3, [pc, #252]	; (80048a0 <LEDHandler+0x31b0>)
 80047a4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80047a6:	4b3e      	ldr	r3, [pc, #248]	; (80048a0 <LEDHandler+0x31b0>)
 80047a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ac:	4618      	mov	r0, r3
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <LEDHandler+0x31b4>)
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	4b3d      	ldr	r3, [pc, #244]	; (80048a8 <LEDHandler+0x31b8>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4b3d      	ldr	r3, [pc, #244]	; (80048ac <LEDHandler+0x31bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f002 fe23 	bl	8007404 <Set_LED>
 80047be:	4b38      	ldr	r3, [pc, #224]	; (80048a0 <LEDHandler+0x31b0>)
 80047c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <LEDHandler+0x31b0>)
 80047ce:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80047d0:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <LEDHandler+0x31b0>)
 80047d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047d6:	4618      	mov	r0, r3
 80047d8:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <LEDHandler+0x31b4>)
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	4b32      	ldr	r3, [pc, #200]	; (80048a8 <LEDHandler+0x31b8>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b32      	ldr	r3, [pc, #200]	; (80048ac <LEDHandler+0x31bc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f002 fe0e 	bl	8007404 <Set_LED>
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <LEDHandler+0x31b0>)
 80047ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	b21a      	sxth	r2, r3
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <LEDHandler+0x31b0>)
 80047f8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80047fa:	4b29      	ldr	r3, [pc, #164]	; (80048a0 <LEDHandler+0x31b0>)
 80047fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004800:	4618      	mov	r0, r3
 8004802:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <LEDHandler+0x31b4>)
 8004804:	6819      	ldr	r1, [r3, #0]
 8004806:	4b28      	ldr	r3, [pc, #160]	; (80048a8 <LEDHandler+0x31b8>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b28      	ldr	r3, [pc, #160]	; (80048ac <LEDHandler+0x31bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f002 fdf9 	bl	8007404 <Set_LED>
 8004812:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <LEDHandler+0x31b0>)
 8004814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004818:	b29b      	uxth	r3, r3
 800481a:	3301      	adds	r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	b21a      	sxth	r2, r3
 8004820:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <LEDHandler+0x31b0>)
 8004822:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004824:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <LEDHandler+0x31b0>)
 8004826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800482a:	4618      	mov	r0, r3
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <LEDHandler+0x31b4>)
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <LEDHandler+0x31b8>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <LEDHandler+0x31bc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f002 fde4 	bl	8007404 <Set_LED>
 800483c:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <LEDHandler+0x31b0>)
 800483e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004842:	b29b      	uxth	r3, r3
 8004844:	3301      	adds	r3, #1
 8004846:	b29b      	uxth	r3, r3
 8004848:	b21a      	sxth	r2, r3
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <LEDHandler+0x31b0>)
 800484c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <LEDHandler+0x31b0>)
 8004850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004854:	4618      	mov	r0, r3
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <LEDHandler+0x31b4>)
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <LEDHandler+0x31b8>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b13      	ldr	r3, [pc, #76]	; (80048ac <LEDHandler+0x31bc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f002 fdcf 	bl	8007404 <Set_LED>
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <LEDHandler+0x31b0>)
 8004868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800486c:	b29b      	uxth	r3, r3
 800486e:	3301      	adds	r3, #1
 8004870:	b29b      	uxth	r3, r3
 8004872:	b21a      	sxth	r2, r3
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <LEDHandler+0x31b0>)
 8004876:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <LEDHandler+0x31b0>)
 800487a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800487e:	4618      	mov	r0, r3
 8004880:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <LEDHandler+0x31b4>)
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <LEDHandler+0x31b8>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <LEDHandler+0x31bc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f002 fdba 	bl	8007404 <Set_LED>
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <LEDHandler+0x31b0>)
 8004892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004896:	b29b      	uxth	r3, r3
 8004898:	3301      	adds	r3, #1
 800489a:	b29b      	uxth	r3, r3
 800489c:	b21a      	sxth	r2, r3
 800489e:	e007      	b.n	80048b0 <LEDHandler+0x31c0>
 80048a0:	2000031c 	.word	0x2000031c
 80048a4:	20000008 	.word	0x20000008
 80048a8:	2000000c 	.word	0x2000000c
 80048ac:	20000010 	.word	0x20000010
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <LEDHandler+0x3210>)
 80048b2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <LEDHandler+0x3210>)
 80048b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ba:	4618      	mov	r0, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	f002 fd9f 	bl	8007404 <Set_LED>
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <LEDHandler+0x3210>)
 80048c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3301      	adds	r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	b21a      	sxth	r2, r3
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <LEDHandler+0x3210>)
 80048d6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <LEDHandler+0x3210>)
 80048da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048de:	4618      	mov	r0, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	2200      	movs	r2, #0
 80048e4:	2100      	movs	r1, #0
 80048e6:	f002 fd8d 	bl	8007404 <Set_LED>
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <LEDHandler+0x3210>)
 80048ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	b21a      	sxth	r2, r3
 80048f8:	4b01      	ldr	r3, [pc, #4]	; (8004900 <LEDHandler+0x3210>)
 80048fa:	801a      	strh	r2, [r3, #0]
 80048fc:	e2f4      	b.n	8004ee8 <LEDHandler+0x37f8>
 80048fe:	bf00      	nop
 8004900:	2000031c 	.word	0x2000031c

		} else if (Valor >= 90 && Valor < 96) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b59      	cmp	r3, #89	; 0x59
 8004908:	f340 8178 	ble.w	8004bfc <LEDHandler+0x350c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b5f      	cmp	r3, #95	; 0x5f
 8004910:	f300 8174 	bgt.w	8004bfc <LEDHandler+0x350c>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8004914:	4b9c      	ldr	r3, [pc, #624]	; (8004b88 <LEDHandler+0x3498>)
 8004916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800491a:	4618      	mov	r0, r3
 800491c:	4b9b      	ldr	r3, [pc, #620]	; (8004b8c <LEDHandler+0x349c>)
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	4b9b      	ldr	r3, [pc, #620]	; (8004b90 <LEDHandler+0x34a0>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b9b      	ldr	r3, [pc, #620]	; (8004b94 <LEDHandler+0x34a4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f002 fd6c 	bl	8007404 <Set_LED>
 800492c:	4b96      	ldr	r3, [pc, #600]	; (8004b88 <LEDHandler+0x3498>)
 800492e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004932:	b29b      	uxth	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	b29b      	uxth	r3, r3
 8004938:	b21a      	sxth	r2, r3
 800493a:	4b93      	ldr	r3, [pc, #588]	; (8004b88 <LEDHandler+0x3498>)
 800493c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 800493e:	4b92      	ldr	r3, [pc, #584]	; (8004b88 <LEDHandler+0x3498>)
 8004940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004944:	4618      	mov	r0, r3
 8004946:	4b91      	ldr	r3, [pc, #580]	; (8004b8c <LEDHandler+0x349c>)
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	4b91      	ldr	r3, [pc, #580]	; (8004b90 <LEDHandler+0x34a0>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b91      	ldr	r3, [pc, #580]	; (8004b94 <LEDHandler+0x34a4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f002 fd57 	bl	8007404 <Set_LED>
 8004956:	4b8c      	ldr	r3, [pc, #560]	; (8004b88 <LEDHandler+0x3498>)
 8004958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800495c:	b29b      	uxth	r3, r3
 800495e:	3301      	adds	r3, #1
 8004960:	b29b      	uxth	r3, r3
 8004962:	b21a      	sxth	r2, r3
 8004964:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <LEDHandler+0x3498>)
 8004966:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004968:	4b87      	ldr	r3, [pc, #540]	; (8004b88 <LEDHandler+0x3498>)
 800496a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800496e:	4618      	mov	r0, r3
 8004970:	4b86      	ldr	r3, [pc, #536]	; (8004b8c <LEDHandler+0x349c>)
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	4b86      	ldr	r3, [pc, #536]	; (8004b90 <LEDHandler+0x34a0>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b86      	ldr	r3, [pc, #536]	; (8004b94 <LEDHandler+0x34a4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f002 fd42 	bl	8007404 <Set_LED>
 8004980:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <LEDHandler+0x3498>)
 8004982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004986:	b29b      	uxth	r3, r3
 8004988:	3301      	adds	r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	b21a      	sxth	r2, r3
 800498e:	4b7e      	ldr	r3, [pc, #504]	; (8004b88 <LEDHandler+0x3498>)
 8004990:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004992:	4b7d      	ldr	r3, [pc, #500]	; (8004b88 <LEDHandler+0x3498>)
 8004994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004998:	4618      	mov	r0, r3
 800499a:	4b7c      	ldr	r3, [pc, #496]	; (8004b8c <LEDHandler+0x349c>)
 800499c:	6819      	ldr	r1, [r3, #0]
 800499e:	4b7c      	ldr	r3, [pc, #496]	; (8004b90 <LEDHandler+0x34a0>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b7c      	ldr	r3, [pc, #496]	; (8004b94 <LEDHandler+0x34a4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f002 fd2d 	bl	8007404 <Set_LED>
 80049aa:	4b77      	ldr	r3, [pc, #476]	; (8004b88 <LEDHandler+0x3498>)
 80049ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	b21a      	sxth	r2, r3
 80049b8:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <LEDHandler+0x3498>)
 80049ba:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80049bc:	4b72      	ldr	r3, [pc, #456]	; (8004b88 <LEDHandler+0x3498>)
 80049be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049c2:	4618      	mov	r0, r3
 80049c4:	4b71      	ldr	r3, [pc, #452]	; (8004b8c <LEDHandler+0x349c>)
 80049c6:	6819      	ldr	r1, [r3, #0]
 80049c8:	4b71      	ldr	r3, [pc, #452]	; (8004b90 <LEDHandler+0x34a0>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b71      	ldr	r3, [pc, #452]	; (8004b94 <LEDHandler+0x34a4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f002 fd18 	bl	8007404 <Set_LED>
 80049d4:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <LEDHandler+0x3498>)
 80049d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	b29b      	uxth	r3, r3
 80049e0:	b21a      	sxth	r2, r3
 80049e2:	4b69      	ldr	r3, [pc, #420]	; (8004b88 <LEDHandler+0x3498>)
 80049e4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 80049e6:	4b68      	ldr	r3, [pc, #416]	; (8004b88 <LEDHandler+0x3498>)
 80049e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049ec:	4618      	mov	r0, r3
 80049ee:	4b67      	ldr	r3, [pc, #412]	; (8004b8c <LEDHandler+0x349c>)
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <LEDHandler+0x34a0>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b67      	ldr	r3, [pc, #412]	; (8004b94 <LEDHandler+0x34a4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f002 fd03 	bl	8007404 <Set_LED>
 80049fe:	4b62      	ldr	r3, [pc, #392]	; (8004b88 <LEDHandler+0x3498>)
 8004a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	b21a      	sxth	r2, r3
 8004a0c:	4b5e      	ldr	r3, [pc, #376]	; (8004b88 <LEDHandler+0x3498>)
 8004a0e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004a10:	4b5d      	ldr	r3, [pc, #372]	; (8004b88 <LEDHandler+0x3498>)
 8004a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a16:	4618      	mov	r0, r3
 8004a18:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <LEDHandler+0x349c>)
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	4b5c      	ldr	r3, [pc, #368]	; (8004b90 <LEDHandler+0x34a0>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b5c      	ldr	r3, [pc, #368]	; (8004b94 <LEDHandler+0x34a4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f002 fcee 	bl	8007404 <Set_LED>
 8004a28:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <LEDHandler+0x3498>)
 8004a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3301      	adds	r3, #1
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	b21a      	sxth	r2, r3
 8004a36:	4b54      	ldr	r3, [pc, #336]	; (8004b88 <LEDHandler+0x3498>)
 8004a38:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004a3a:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <LEDHandler+0x3498>)
 8004a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a40:	4618      	mov	r0, r3
 8004a42:	4b52      	ldr	r3, [pc, #328]	; (8004b8c <LEDHandler+0x349c>)
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	4b52      	ldr	r3, [pc, #328]	; (8004b90 <LEDHandler+0x34a0>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b52      	ldr	r3, [pc, #328]	; (8004b94 <LEDHandler+0x34a4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f002 fcd9 	bl	8007404 <Set_LED>
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <LEDHandler+0x3498>)
 8004a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	b21a      	sxth	r2, r3
 8004a60:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <LEDHandler+0x3498>)
 8004a62:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004a64:	4b48      	ldr	r3, [pc, #288]	; (8004b88 <LEDHandler+0x3498>)
 8004a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <LEDHandler+0x349c>)
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <LEDHandler+0x34a0>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b47      	ldr	r3, [pc, #284]	; (8004b94 <LEDHandler+0x34a4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f002 fcc4 	bl	8007404 <Set_LED>
 8004a7c:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <LEDHandler+0x3498>)
 8004a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3301      	adds	r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	b21a      	sxth	r2, r3
 8004a8a:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <LEDHandler+0x3498>)
 8004a8c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004a8e:	4b3e      	ldr	r3, [pc, #248]	; (8004b88 <LEDHandler+0x3498>)
 8004a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a94:	4618      	mov	r0, r3
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <LEDHandler+0x349c>)
 8004a98:	6819      	ldr	r1, [r3, #0]
 8004a9a:	4b3d      	ldr	r3, [pc, #244]	; (8004b90 <LEDHandler+0x34a0>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <LEDHandler+0x34a4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f002 fcaf 	bl	8007404 <Set_LED>
 8004aa6:	4b38      	ldr	r3, [pc, #224]	; (8004b88 <LEDHandler+0x3498>)
 8004aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b21a      	sxth	r2, r3
 8004ab4:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <LEDHandler+0x3498>)
 8004ab6:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004ab8:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <LEDHandler+0x3498>)
 8004aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <LEDHandler+0x349c>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <LEDHandler+0x34a0>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <LEDHandler+0x34a4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f002 fc9a 	bl	8007404 <Set_LED>
 8004ad0:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <LEDHandler+0x3498>)
 8004ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3301      	adds	r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	b21a      	sxth	r2, r3
 8004ade:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <LEDHandler+0x3498>)
 8004ae0:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004ae2:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <LEDHandler+0x3498>)
 8004ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <LEDHandler+0x349c>)
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <LEDHandler+0x34a0>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <LEDHandler+0x34a4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f002 fc85 	bl	8007404 <Set_LED>
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <LEDHandler+0x3498>)
 8004afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	b21a      	sxth	r2, r3
 8004b08:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <LEDHandler+0x3498>)
 8004b0a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004b0c:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <LEDHandler+0x3498>)
 8004b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b12:	4618      	mov	r0, r3
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <LEDHandler+0x349c>)
 8004b16:	6819      	ldr	r1, [r3, #0]
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <LEDHandler+0x34a0>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <LEDHandler+0x34a4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f002 fc70 	bl	8007404 <Set_LED>
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <LEDHandler+0x3498>)
 8004b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	b21a      	sxth	r2, r3
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <LEDHandler+0x3498>)
 8004b34:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <LEDHandler+0x3498>)
 8004b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <LEDHandler+0x349c>)
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <LEDHandler+0x34a0>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <LEDHandler+0x34a4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f002 fc5b 	bl	8007404 <Set_LED>
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <LEDHandler+0x3498>)
 8004b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	b21a      	sxth	r2, r3
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <LEDHandler+0x3498>)
 8004b5e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <LEDHandler+0x3498>)
 8004b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b66:	4618      	mov	r0, r3
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <LEDHandler+0x349c>)
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <LEDHandler+0x34a0>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <LEDHandler+0x34a4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f002 fc46 	bl	8007404 <Set_LED>
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <LEDHandler+0x3498>)
 8004b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3301      	adds	r3, #1
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	b21a      	sxth	r2, r3
 8004b86:	e007      	b.n	8004b98 <LEDHandler+0x34a8>
 8004b88:	2000031c 	.word	0x2000031c
 8004b8c:	20000008 	.word	0x20000008
 8004b90:	2000000c 	.word	0x2000000c
 8004b94:	20000010 	.word	0x20000010
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <LEDHandler+0x34fc>)
 8004b9a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <LEDHandler+0x34fc>)
 8004b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <LEDHandler+0x3500>)
 8004ba6:	6819      	ldr	r1, [r3, #0]
 8004ba8:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <LEDHandler+0x3504>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <LEDHandler+0x3508>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f002 fc28 	bl	8007404 <Set_LED>
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <LEDHandler+0x34fc>)
 8004bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	b21a      	sxth	r2, r3
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <LEDHandler+0x34fc>)
 8004bc4:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, 0, 0, 0);			var2++;
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <LEDHandler+0x34fc>)
 8004bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	f002 fc16 	bl	8007404 <Set_LED>
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <LEDHandler+0x34fc>)
 8004bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3301      	adds	r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	b21a      	sxth	r2, r3
 8004be6:	4b01      	ldr	r3, [pc, #4]	; (8004bec <LEDHandler+0x34fc>)
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	e17d      	b.n	8004ee8 <LEDHandler+0x37f8>
 8004bec:	2000031c 	.word	0x2000031c
 8004bf0:	20000008 	.word	0x20000008
 8004bf4:	2000000c 	.word	0x2000000c
 8004bf8:	20000010 	.word	0x20000010

		} else if (Valor >= 96 && Valor < 101) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b5f      	cmp	r3, #95	; 0x5f
 8004c00:	f340 8172 	ble.w	8004ee8 <LEDHandler+0x37f8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	f300 816e 	bgt.w	8004ee8 <LEDHandler+0x37f8>

			Set_LED(var2, Red, Green, Blue);			var2++;
 8004c0c:	4b9c      	ldr	r3, [pc, #624]	; (8004e80 <LEDHandler+0x3790>)
 8004c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c12:	4618      	mov	r0, r3
 8004c14:	4b9b      	ldr	r3, [pc, #620]	; (8004e84 <LEDHandler+0x3794>)
 8004c16:	6819      	ldr	r1, [r3, #0]
 8004c18:	4b9b      	ldr	r3, [pc, #620]	; (8004e88 <LEDHandler+0x3798>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b9b      	ldr	r3, [pc, #620]	; (8004e8c <LEDHandler+0x379c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f002 fbf0 	bl	8007404 <Set_LED>
 8004c24:	4b96      	ldr	r3, [pc, #600]	; (8004e80 <LEDHandler+0x3790>)
 8004c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	b21a      	sxth	r2, r3
 8004c32:	4b93      	ldr	r3, [pc, #588]	; (8004e80 <LEDHandler+0x3790>)
 8004c34:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004c36:	4b92      	ldr	r3, [pc, #584]	; (8004e80 <LEDHandler+0x3790>)
 8004c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	4b91      	ldr	r3, [pc, #580]	; (8004e84 <LEDHandler+0x3794>)
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	4b91      	ldr	r3, [pc, #580]	; (8004e88 <LEDHandler+0x3798>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b91      	ldr	r3, [pc, #580]	; (8004e8c <LEDHandler+0x379c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f002 fbdb 	bl	8007404 <Set_LED>
 8004c4e:	4b8c      	ldr	r3, [pc, #560]	; (8004e80 <LEDHandler+0x3790>)
 8004c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	b21a      	sxth	r2, r3
 8004c5c:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <LEDHandler+0x3790>)
 8004c5e:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004c60:	4b87      	ldr	r3, [pc, #540]	; (8004e80 <LEDHandler+0x3790>)
 8004c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c66:	4618      	mov	r0, r3
 8004c68:	4b86      	ldr	r3, [pc, #536]	; (8004e84 <LEDHandler+0x3794>)
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	4b86      	ldr	r3, [pc, #536]	; (8004e88 <LEDHandler+0x3798>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b86      	ldr	r3, [pc, #536]	; (8004e8c <LEDHandler+0x379c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f002 fbc6 	bl	8007404 <Set_LED>
 8004c78:	4b81      	ldr	r3, [pc, #516]	; (8004e80 <LEDHandler+0x3790>)
 8004c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3301      	adds	r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	b21a      	sxth	r2, r3
 8004c86:	4b7e      	ldr	r3, [pc, #504]	; (8004e80 <LEDHandler+0x3790>)
 8004c88:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004c8a:	4b7d      	ldr	r3, [pc, #500]	; (8004e80 <LEDHandler+0x3790>)
 8004c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c90:	4618      	mov	r0, r3
 8004c92:	4b7c      	ldr	r3, [pc, #496]	; (8004e84 <LEDHandler+0x3794>)
 8004c94:	6819      	ldr	r1, [r3, #0]
 8004c96:	4b7c      	ldr	r3, [pc, #496]	; (8004e88 <LEDHandler+0x3798>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b7c      	ldr	r3, [pc, #496]	; (8004e8c <LEDHandler+0x379c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f002 fbb1 	bl	8007404 <Set_LED>
 8004ca2:	4b77      	ldr	r3, [pc, #476]	; (8004e80 <LEDHandler+0x3790>)
 8004ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3301      	adds	r3, #1
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	b21a      	sxth	r2, r3
 8004cb0:	4b73      	ldr	r3, [pc, #460]	; (8004e80 <LEDHandler+0x3790>)
 8004cb2:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004cb4:	4b72      	ldr	r3, [pc, #456]	; (8004e80 <LEDHandler+0x3790>)
 8004cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	4b71      	ldr	r3, [pc, #452]	; (8004e84 <LEDHandler+0x3794>)
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	4b71      	ldr	r3, [pc, #452]	; (8004e88 <LEDHandler+0x3798>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b71      	ldr	r3, [pc, #452]	; (8004e8c <LEDHandler+0x379c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f002 fb9c 	bl	8007404 <Set_LED>
 8004ccc:	4b6c      	ldr	r3, [pc, #432]	; (8004e80 <LEDHandler+0x3790>)
 8004cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	b21a      	sxth	r2, r3
 8004cda:	4b69      	ldr	r3, [pc, #420]	; (8004e80 <LEDHandler+0x3790>)
 8004cdc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004cde:	4b68      	ldr	r3, [pc, #416]	; (8004e80 <LEDHandler+0x3790>)
 8004ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	4b67      	ldr	r3, [pc, #412]	; (8004e84 <LEDHandler+0x3794>)
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	4b67      	ldr	r3, [pc, #412]	; (8004e88 <LEDHandler+0x3798>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b67      	ldr	r3, [pc, #412]	; (8004e8c <LEDHandler+0x379c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f002 fb87 	bl	8007404 <Set_LED>
 8004cf6:	4b62      	ldr	r3, [pc, #392]	; (8004e80 <LEDHandler+0x3790>)
 8004cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	b21a      	sxth	r2, r3
 8004d04:	4b5e      	ldr	r3, [pc, #376]	; (8004e80 <LEDHandler+0x3790>)
 8004d06:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004d08:	4b5d      	ldr	r3, [pc, #372]	; (8004e80 <LEDHandler+0x3790>)
 8004d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	4b5c      	ldr	r3, [pc, #368]	; (8004e84 <LEDHandler+0x3794>)
 8004d12:	6819      	ldr	r1, [r3, #0]
 8004d14:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <LEDHandler+0x3798>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b5c      	ldr	r3, [pc, #368]	; (8004e8c <LEDHandler+0x379c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f002 fb72 	bl	8007404 <Set_LED>
 8004d20:	4b57      	ldr	r3, [pc, #348]	; (8004e80 <LEDHandler+0x3790>)
 8004d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	b21a      	sxth	r2, r3
 8004d2e:	4b54      	ldr	r3, [pc, #336]	; (8004e80 <LEDHandler+0x3790>)
 8004d30:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004d32:	4b53      	ldr	r3, [pc, #332]	; (8004e80 <LEDHandler+0x3790>)
 8004d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	4b52      	ldr	r3, [pc, #328]	; (8004e84 <LEDHandler+0x3794>)
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	4b52      	ldr	r3, [pc, #328]	; (8004e88 <LEDHandler+0x3798>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b52      	ldr	r3, [pc, #328]	; (8004e8c <LEDHandler+0x379c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f002 fb5d 	bl	8007404 <Set_LED>
 8004d4a:	4b4d      	ldr	r3, [pc, #308]	; (8004e80 <LEDHandler+0x3790>)
 8004d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	b21a      	sxth	r2, r3
 8004d58:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <LEDHandler+0x3790>)
 8004d5a:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004d5c:	4b48      	ldr	r3, [pc, #288]	; (8004e80 <LEDHandler+0x3790>)
 8004d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d62:	4618      	mov	r0, r3
 8004d64:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <LEDHandler+0x3794>)
 8004d66:	6819      	ldr	r1, [r3, #0]
 8004d68:	4b47      	ldr	r3, [pc, #284]	; (8004e88 <LEDHandler+0x3798>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <LEDHandler+0x379c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f002 fb48 	bl	8007404 <Set_LED>
 8004d74:	4b42      	ldr	r3, [pc, #264]	; (8004e80 <LEDHandler+0x3790>)
 8004d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	b21a      	sxth	r2, r3
 8004d82:	4b3f      	ldr	r3, [pc, #252]	; (8004e80 <LEDHandler+0x3790>)
 8004d84:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004d86:	4b3e      	ldr	r3, [pc, #248]	; (8004e80 <LEDHandler+0x3790>)
 8004d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <LEDHandler+0x3794>)
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	4b3d      	ldr	r3, [pc, #244]	; (8004e88 <LEDHandler+0x3798>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <LEDHandler+0x379c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f002 fb33 	bl	8007404 <Set_LED>
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <LEDHandler+0x3790>)
 8004da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3301      	adds	r3, #1
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	b21a      	sxth	r2, r3
 8004dac:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <LEDHandler+0x3790>)
 8004dae:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004db0:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <LEDHandler+0x3790>)
 8004db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db6:	4618      	mov	r0, r3
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <LEDHandler+0x3794>)
 8004dba:	6819      	ldr	r1, [r3, #0]
 8004dbc:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <LEDHandler+0x3798>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <LEDHandler+0x379c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f002 fb1e 	bl	8007404 <Set_LED>
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <LEDHandler+0x3790>)
 8004dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b21a      	sxth	r2, r3
 8004dd6:	4b2a      	ldr	r3, [pc, #168]	; (8004e80 <LEDHandler+0x3790>)
 8004dd8:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004dda:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <LEDHandler+0x3790>)
 8004ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004de0:	4618      	mov	r0, r3
 8004de2:	4b28      	ldr	r3, [pc, #160]	; (8004e84 <LEDHandler+0x3794>)
 8004de4:	6819      	ldr	r1, [r3, #0]
 8004de6:	4b28      	ldr	r3, [pc, #160]	; (8004e88 <LEDHandler+0x3798>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <LEDHandler+0x379c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f002 fb09 	bl	8007404 <Set_LED>
 8004df2:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <LEDHandler+0x3790>)
 8004df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	b21a      	sxth	r2, r3
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <LEDHandler+0x3790>)
 8004e02:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004e04:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <LEDHandler+0x3790>)
 8004e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <LEDHandler+0x3794>)
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <LEDHandler+0x3798>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <LEDHandler+0x379c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f002 faf4 	bl	8007404 <Set_LED>
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <LEDHandler+0x3790>)
 8004e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3301      	adds	r3, #1
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	b21a      	sxth	r2, r3
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <LEDHandler+0x3790>)
 8004e2c:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004e2e:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <LEDHandler+0x3790>)
 8004e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e34:	4618      	mov	r0, r3
 8004e36:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <LEDHandler+0x3794>)
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <LEDHandler+0x3798>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <LEDHandler+0x379c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f002 fadf 	bl	8007404 <Set_LED>
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <LEDHandler+0x3790>)
 8004e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	b21a      	sxth	r2, r3
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <LEDHandler+0x3790>)
 8004e56:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <LEDHandler+0x3790>)
 8004e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <LEDHandler+0x3794>)
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <LEDHandler+0x3798>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <LEDHandler+0x379c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f002 faca 	bl	8007404 <Set_LED>
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <LEDHandler+0x3790>)
 8004e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	b21a      	sxth	r2, r3
 8004e7e:	e007      	b.n	8004e90 <LEDHandler+0x37a0>
 8004e80:	2000031c 	.word	0x2000031c
 8004e84:	20000008 	.word	0x20000008
 8004e88:	2000000c 	.word	0x2000000c
 8004e8c:	20000010 	.word	0x20000010
 8004e90:	4bc0      	ldr	r3, [pc, #768]	; (8005194 <LEDHandler+0x3aa4>)
 8004e92:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004e94:	4bbf      	ldr	r3, [pc, #764]	; (8005194 <LEDHandler+0x3aa4>)
 8004e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	4bbe      	ldr	r3, [pc, #760]	; (8005198 <LEDHandler+0x3aa8>)
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	4bbe      	ldr	r3, [pc, #760]	; (800519c <LEDHandler+0x3aac>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4bbe      	ldr	r3, [pc, #760]	; (80051a0 <LEDHandler+0x3ab0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f002 faac 	bl	8007404 <Set_LED>
 8004eac:	4bb9      	ldr	r3, [pc, #740]	; (8005194 <LEDHandler+0x3aa4>)
 8004eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	b21a      	sxth	r2, r3
 8004eba:	4bb6      	ldr	r3, [pc, #728]	; (8005194 <LEDHandler+0x3aa4>)
 8004ebc:	801a      	strh	r2, [r3, #0]
			Set_LED(var2, Red, Green, Blue);			var2++;
 8004ebe:	4bb5      	ldr	r3, [pc, #724]	; (8005194 <LEDHandler+0x3aa4>)
 8004ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	4bb4      	ldr	r3, [pc, #720]	; (8005198 <LEDHandler+0x3aa8>)
 8004ec8:	6819      	ldr	r1, [r3, #0]
 8004eca:	4bb4      	ldr	r3, [pc, #720]	; (800519c <LEDHandler+0x3aac>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4bb4      	ldr	r3, [pc, #720]	; (80051a0 <LEDHandler+0x3ab0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f002 fa97 	bl	8007404 <Set_LED>
 8004ed6:	4baf      	ldr	r3, [pc, #700]	; (8005194 <LEDHandler+0x3aa4>)
 8004ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3301      	adds	r3, #1
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	b21a      	sxth	r2, r3
 8004ee4:	4bab      	ldr	r3, [pc, #684]	; (8005194 <LEDHandler+0x3aa4>)
 8004ee6:	801a      	strh	r2, [r3, #0]
		}
	}

	if (Value[0] == 5) {
 8004ee8:	4bae      	ldr	r3, [pc, #696]	; (80051a4 <LEDHandler+0x3ab4>)
 8004eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	f041 81d1 	bne.w	8006296 <LEDHandler+0x4ba6>

		if (Valor == 0) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d167      	bne.n	8004fca <LEDHandler+0x38da>

			Set_LED	(	0	,	0	,	0	, 	0	)	;		//LED1
 8004efa:	2300      	movs	r3, #0
 8004efc:	2200      	movs	r2, #0
 8004efe:	2100      	movs	r1, #0
 8004f00:	2000      	movs	r0, #0
 8004f02:	f002 fa7f 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	0	,	0	, 	0	)	;		//LED2
 8004f06:	2300      	movs	r3, #0
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f002 fa79 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 8004f12:	2300      	movs	r3, #0
 8004f14:	2200      	movs	r2, #0
 8004f16:	2100      	movs	r1, #0
 8004f18:	2002      	movs	r0, #2
 8004f1a:	f002 fa73 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2200      	movs	r2, #0
 8004f22:	2100      	movs	r1, #0
 8004f24:	2003      	movs	r0, #3
 8004f26:	f002 fa6d 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2100      	movs	r1, #0
 8004f30:	2004      	movs	r0, #4
 8004f32:	f002 fa67 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8004f36:	2300      	movs	r3, #0
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	2005      	movs	r0, #5
 8004f3e:	f002 fa61 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8004f42:	2300      	movs	r3, #0
 8004f44:	2200      	movs	r2, #0
 8004f46:	2100      	movs	r1, #0
 8004f48:	2006      	movs	r0, #6
 8004f4a:	f002 fa5b 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2200      	movs	r2, #0
 8004f52:	2100      	movs	r1, #0
 8004f54:	2007      	movs	r0, #7
 8004f56:	f002 fa55 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2008      	movs	r0, #8
 8004f62:	f002 fa4f 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8004f66:	2300      	movs	r3, #0
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	2009      	movs	r0, #9
 8004f6e:	f002 fa49 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8004f72:	2300      	movs	r3, #0
 8004f74:	2200      	movs	r2, #0
 8004f76:	2100      	movs	r1, #0
 8004f78:	200a      	movs	r0, #10
 8004f7a:	f002 fa43 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2200      	movs	r2, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	200b      	movs	r0, #11
 8004f86:	f002 fa3d 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2100      	movs	r1, #0
 8004f90:	200c      	movs	r0, #12
 8004f92:	f002 fa37 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8004f96:	2300      	movs	r3, #0
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	200d      	movs	r0, #13
 8004f9e:	f002 fa31 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	200e      	movs	r0, #14
 8004faa:	f002 fa2b 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8004fae:	2300      	movs	r3, #0
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	200f      	movs	r0, #15
 8004fb6:	f002 fa25 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2010      	movs	r0, #16
 8004fc2:	f002 fa1f 	bl	8007404 <Set_LED>
 8004fc6:	f002 b968 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 1 && Valor < 6) {
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dd6d      	ble.n	80050ac <LEDHandler+0x39bc>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	dc6a      	bgt.n	80050ac <LEDHandler+0x39bc>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8004fd6:	4b70      	ldr	r3, [pc, #448]	; (8005198 <LEDHandler+0x3aa8>)
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	4b70      	ldr	r3, [pc, #448]	; (800519c <LEDHandler+0x3aac>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b70      	ldr	r3, [pc, #448]	; (80051a0 <LEDHandler+0x3ab0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f002 fa0e 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	0	,	0	, 	0	)	;		//LED2
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2200      	movs	r2, #0
 8004fec:	2100      	movs	r1, #0
 8004fee:	2001      	movs	r0, #1
 8004ff0:	f002 fa08 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	2002      	movs	r0, #2
 8004ffc:	f002 fa02 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 8005000:	2300      	movs	r3, #0
 8005002:	2200      	movs	r2, #0
 8005004:	2100      	movs	r1, #0
 8005006:	2003      	movs	r0, #3
 8005008:	f002 f9fc 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 800500c:	2300      	movs	r3, #0
 800500e:	2200      	movs	r2, #0
 8005010:	2100      	movs	r1, #0
 8005012:	2004      	movs	r0, #4
 8005014:	f002 f9f6 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8005018:	2300      	movs	r3, #0
 800501a:	2200      	movs	r2, #0
 800501c:	2100      	movs	r1, #0
 800501e:	2005      	movs	r0, #5
 8005020:	f002 f9f0 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8005024:	2300      	movs	r3, #0
 8005026:	2200      	movs	r2, #0
 8005028:	2100      	movs	r1, #0
 800502a:	2006      	movs	r0, #6
 800502c:	f002 f9ea 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8005030:	2300      	movs	r3, #0
 8005032:	2200      	movs	r2, #0
 8005034:	2100      	movs	r1, #0
 8005036:	2007      	movs	r0, #7
 8005038:	f002 f9e4 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 800503c:	2300      	movs	r3, #0
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	2008      	movs	r0, #8
 8005044:	f002 f9de 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8005048:	2300      	movs	r3, #0
 800504a:	2200      	movs	r2, #0
 800504c:	2100      	movs	r1, #0
 800504e:	2009      	movs	r0, #9
 8005050:	f002 f9d8 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8005054:	2300      	movs	r3, #0
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	200a      	movs	r0, #10
 800505c:	f002 f9d2 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8005060:	2300      	movs	r3, #0
 8005062:	2200      	movs	r2, #0
 8005064:	2100      	movs	r1, #0
 8005066:	200b      	movs	r0, #11
 8005068:	f002 f9cc 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800506c:	2300      	movs	r3, #0
 800506e:	2200      	movs	r2, #0
 8005070:	2100      	movs	r1, #0
 8005072:	200c      	movs	r0, #12
 8005074:	f002 f9c6 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005078:	2300      	movs	r3, #0
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	200d      	movs	r0, #13
 8005080:	f002 f9c0 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8005084:	2300      	movs	r3, #0
 8005086:	2200      	movs	r2, #0
 8005088:	2100      	movs	r1, #0
 800508a:	200e      	movs	r0, #14
 800508c:	f002 f9ba 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005090:	2300      	movs	r3, #0
 8005092:	2200      	movs	r2, #0
 8005094:	2100      	movs	r1, #0
 8005096:	200f      	movs	r0, #15
 8005098:	f002 f9b4 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800509c:	2300      	movs	r3, #0
 800509e:	2200      	movs	r2, #0
 80050a0:	2100      	movs	r1, #0
 80050a2:	2010      	movs	r0, #16
 80050a4:	f002 f9ae 	bl	8007404 <Set_LED>
 80050a8:	f002 b8f7 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 6 && Valor < 12) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	dd7a      	ble.n	80051a8 <LEDHandler+0x3ab8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b0b      	cmp	r3, #11
 80050b6:	dc77      	bgt.n	80051a8 <LEDHandler+0x3ab8>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80050b8:	4b37      	ldr	r3, [pc, #220]	; (8005198 <LEDHandler+0x3aa8>)
 80050ba:	6819      	ldr	r1, [r3, #0]
 80050bc:	4b37      	ldr	r3, [pc, #220]	; (800519c <LEDHandler+0x3aac>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b37      	ldr	r3, [pc, #220]	; (80051a0 <LEDHandler+0x3ab0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2000      	movs	r0, #0
 80050c6:	f002 f99d 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80050ca:	4b33      	ldr	r3, [pc, #204]	; (8005198 <LEDHandler+0x3aa8>)
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	4b33      	ldr	r3, [pc, #204]	; (800519c <LEDHandler+0x3aac>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <LEDHandler+0x3ab0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2001      	movs	r0, #1
 80050d8:	f002 f994 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 80050dc:	2300      	movs	r3, #0
 80050de:	2200      	movs	r2, #0
 80050e0:	2100      	movs	r1, #0
 80050e2:	2002      	movs	r0, #2
 80050e4:	f002 f98e 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 80050e8:	2300      	movs	r3, #0
 80050ea:	2200      	movs	r2, #0
 80050ec:	2100      	movs	r1, #0
 80050ee:	2003      	movs	r0, #3
 80050f0:	f002 f988 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80050f4:	2300      	movs	r3, #0
 80050f6:	2200      	movs	r2, #0
 80050f8:	2100      	movs	r1, #0
 80050fa:	2004      	movs	r0, #4
 80050fc:	f002 f982 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8005100:	2300      	movs	r3, #0
 8005102:	2200      	movs	r2, #0
 8005104:	2100      	movs	r1, #0
 8005106:	2005      	movs	r0, #5
 8005108:	f002 f97c 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 800510c:	2300      	movs	r3, #0
 800510e:	2200      	movs	r2, #0
 8005110:	2100      	movs	r1, #0
 8005112:	2006      	movs	r0, #6
 8005114:	f002 f976 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8005118:	2300      	movs	r3, #0
 800511a:	2200      	movs	r2, #0
 800511c:	2100      	movs	r1, #0
 800511e:	2007      	movs	r0, #7
 8005120:	f002 f970 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8005124:	2300      	movs	r3, #0
 8005126:	2200      	movs	r2, #0
 8005128:	2100      	movs	r1, #0
 800512a:	2008      	movs	r0, #8
 800512c:	f002 f96a 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8005130:	2300      	movs	r3, #0
 8005132:	2200      	movs	r2, #0
 8005134:	2100      	movs	r1, #0
 8005136:	2009      	movs	r0, #9
 8005138:	f002 f964 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800513c:	2300      	movs	r3, #0
 800513e:	2200      	movs	r2, #0
 8005140:	2100      	movs	r1, #0
 8005142:	200a      	movs	r0, #10
 8005144:	f002 f95e 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8005148:	2300      	movs	r3, #0
 800514a:	2200      	movs	r2, #0
 800514c:	2100      	movs	r1, #0
 800514e:	200b      	movs	r0, #11
 8005150:	f002 f958 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8005154:	2300      	movs	r3, #0
 8005156:	2200      	movs	r2, #0
 8005158:	2100      	movs	r1, #0
 800515a:	200c      	movs	r0, #12
 800515c:	f002 f952 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005160:	2300      	movs	r3, #0
 8005162:	2200      	movs	r2, #0
 8005164:	2100      	movs	r1, #0
 8005166:	200d      	movs	r0, #13
 8005168:	f002 f94c 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800516c:	2300      	movs	r3, #0
 800516e:	2200      	movs	r2, #0
 8005170:	2100      	movs	r1, #0
 8005172:	200e      	movs	r0, #14
 8005174:	f002 f946 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005178:	2300      	movs	r3, #0
 800517a:	2200      	movs	r2, #0
 800517c:	2100      	movs	r1, #0
 800517e:	200f      	movs	r0, #15
 8005180:	f002 f940 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005184:	2300      	movs	r3, #0
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	2010      	movs	r0, #16
 800518c:	f002 f93a 	bl	8007404 <Set_LED>
 8005190:	f002 b883 	b.w	800729a <LEDHandler+0x5baa>
 8005194:	2000031c 	.word	0x2000031c
 8005198:	20000008 	.word	0x20000008
 800519c:	2000000c 	.word	0x2000000c
 80051a0:	20000010 	.word	0x20000010
 80051a4:	20000320 	.word	0x20000320

		} else if (Valor >= 12 && Valor < 18) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b0b      	cmp	r3, #11
 80051ac:	dd73      	ble.n	8005296 <LEDHandler+0x3ba6>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b11      	cmp	r3, #17
 80051b2:	dc70      	bgt.n	8005296 <LEDHandler+0x3ba6>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80051b4:	4bb3      	ldr	r3, [pc, #716]	; (8005484 <LEDHandler+0x3d94>)
 80051b6:	6819      	ldr	r1, [r3, #0]
 80051b8:	4bb3      	ldr	r3, [pc, #716]	; (8005488 <LEDHandler+0x3d98>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4bb3      	ldr	r3, [pc, #716]	; (800548c <LEDHandler+0x3d9c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2000      	movs	r0, #0
 80051c2:	f002 f91f 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80051c6:	4baf      	ldr	r3, [pc, #700]	; (8005484 <LEDHandler+0x3d94>)
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	4baf      	ldr	r3, [pc, #700]	; (8005488 <LEDHandler+0x3d98>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4baf      	ldr	r3, [pc, #700]	; (800548c <LEDHandler+0x3d9c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2001      	movs	r0, #1
 80051d4:	f002 f916 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80051d8:	4baa      	ldr	r3, [pc, #680]	; (8005484 <LEDHandler+0x3d94>)
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	4baa      	ldr	r3, [pc, #680]	; (8005488 <LEDHandler+0x3d98>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4baa      	ldr	r3, [pc, #680]	; (800548c <LEDHandler+0x3d9c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2002      	movs	r0, #2
 80051e6:	f002 f90d 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 80051ea:	2300      	movs	r3, #0
 80051ec:	2200      	movs	r2, #0
 80051ee:	2100      	movs	r1, #0
 80051f0:	2003      	movs	r0, #3
 80051f2:	f002 f907 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80051f6:	2300      	movs	r3, #0
 80051f8:	2200      	movs	r2, #0
 80051fa:	2100      	movs	r1, #0
 80051fc:	2004      	movs	r0, #4
 80051fe:	f002 f901 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8005202:	2300      	movs	r3, #0
 8005204:	2200      	movs	r2, #0
 8005206:	2100      	movs	r1, #0
 8005208:	2005      	movs	r0, #5
 800520a:	f002 f8fb 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 800520e:	2300      	movs	r3, #0
 8005210:	2200      	movs	r2, #0
 8005212:	2100      	movs	r1, #0
 8005214:	2006      	movs	r0, #6
 8005216:	f002 f8f5 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 800521a:	2300      	movs	r3, #0
 800521c:	2200      	movs	r2, #0
 800521e:	2100      	movs	r1, #0
 8005220:	2007      	movs	r0, #7
 8005222:	f002 f8ef 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8005226:	2300      	movs	r3, #0
 8005228:	2200      	movs	r2, #0
 800522a:	2100      	movs	r1, #0
 800522c:	2008      	movs	r0, #8
 800522e:	f002 f8e9 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8005232:	2300      	movs	r3, #0
 8005234:	2200      	movs	r2, #0
 8005236:	2100      	movs	r1, #0
 8005238:	2009      	movs	r0, #9
 800523a:	f002 f8e3 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800523e:	2300      	movs	r3, #0
 8005240:	2200      	movs	r2, #0
 8005242:	2100      	movs	r1, #0
 8005244:	200a      	movs	r0, #10
 8005246:	f002 f8dd 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 800524a:	2300      	movs	r3, #0
 800524c:	2200      	movs	r2, #0
 800524e:	2100      	movs	r1, #0
 8005250:	200b      	movs	r0, #11
 8005252:	f002 f8d7 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8005256:	2300      	movs	r3, #0
 8005258:	2200      	movs	r2, #0
 800525a:	2100      	movs	r1, #0
 800525c:	200c      	movs	r0, #12
 800525e:	f002 f8d1 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005262:	2300      	movs	r3, #0
 8005264:	2200      	movs	r2, #0
 8005266:	2100      	movs	r1, #0
 8005268:	200d      	movs	r0, #13
 800526a:	f002 f8cb 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800526e:	2300      	movs	r3, #0
 8005270:	2200      	movs	r2, #0
 8005272:	2100      	movs	r1, #0
 8005274:	200e      	movs	r0, #14
 8005276:	f002 f8c5 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800527a:	2300      	movs	r3, #0
 800527c:	2200      	movs	r2, #0
 800527e:	2100      	movs	r1, #0
 8005280:	200f      	movs	r0, #15
 8005282:	f002 f8bf 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005286:	2300      	movs	r3, #0
 8005288:	2200      	movs	r2, #0
 800528a:	2100      	movs	r1, #0
 800528c:	2010      	movs	r0, #16
 800528e:	f002 f8b9 	bl	8007404 <Set_LED>
 8005292:	f002 b802 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 18 && Valor < 24) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b11      	cmp	r3, #17
 800529a:	dd76      	ble.n	800538a <LEDHandler+0x3c9a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b17      	cmp	r3, #23
 80052a0:	dc73      	bgt.n	800538a <LEDHandler+0x3c9a>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80052a2:	4b78      	ldr	r3, [pc, #480]	; (8005484 <LEDHandler+0x3d94>)
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	4b78      	ldr	r3, [pc, #480]	; (8005488 <LEDHandler+0x3d98>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b78      	ldr	r3, [pc, #480]	; (800548c <LEDHandler+0x3d9c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2000      	movs	r0, #0
 80052b0:	f002 f8a8 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80052b4:	4b73      	ldr	r3, [pc, #460]	; (8005484 <LEDHandler+0x3d94>)
 80052b6:	6819      	ldr	r1, [r3, #0]
 80052b8:	4b73      	ldr	r3, [pc, #460]	; (8005488 <LEDHandler+0x3d98>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b73      	ldr	r3, [pc, #460]	; (800548c <LEDHandler+0x3d9c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2001      	movs	r0, #1
 80052c2:	f002 f89f 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80052c6:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <LEDHandler+0x3d94>)
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <LEDHandler+0x3d98>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	4b6f      	ldr	r3, [pc, #444]	; (800548c <LEDHandler+0x3d9c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2002      	movs	r0, #2
 80052d4:	f002 f896 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 80052d8:	4b6a      	ldr	r3, [pc, #424]	; (8005484 <LEDHandler+0x3d94>)
 80052da:	6819      	ldr	r1, [r3, #0]
 80052dc:	4b6a      	ldr	r3, [pc, #424]	; (8005488 <LEDHandler+0x3d98>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b6a      	ldr	r3, [pc, #424]	; (800548c <LEDHandler+0x3d9c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2003      	movs	r0, #3
 80052e6:	f002 f88d 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80052ea:	2300      	movs	r3, #0
 80052ec:	2200      	movs	r2, #0
 80052ee:	2100      	movs	r1, #0
 80052f0:	2004      	movs	r0, #4
 80052f2:	f002 f887 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 80052f6:	2300      	movs	r3, #0
 80052f8:	2200      	movs	r2, #0
 80052fa:	2100      	movs	r1, #0
 80052fc:	2005      	movs	r0, #5
 80052fe:	f002 f881 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8005302:	2300      	movs	r3, #0
 8005304:	2200      	movs	r2, #0
 8005306:	2100      	movs	r1, #0
 8005308:	2006      	movs	r0, #6
 800530a:	f002 f87b 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	2100      	movs	r1, #0
 8005314:	2007      	movs	r0, #7
 8005316:	f002 f875 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 800531a:	2300      	movs	r3, #0
 800531c:	2200      	movs	r2, #0
 800531e:	2100      	movs	r1, #0
 8005320:	2008      	movs	r0, #8
 8005322:	f002 f86f 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8005326:	2300      	movs	r3, #0
 8005328:	2200      	movs	r2, #0
 800532a:	2100      	movs	r1, #0
 800532c:	2009      	movs	r0, #9
 800532e:	f002 f869 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8005332:	2300      	movs	r3, #0
 8005334:	2200      	movs	r2, #0
 8005336:	2100      	movs	r1, #0
 8005338:	200a      	movs	r0, #10
 800533a:	f002 f863 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 800533e:	2300      	movs	r3, #0
 8005340:	2200      	movs	r2, #0
 8005342:	2100      	movs	r1, #0
 8005344:	200b      	movs	r0, #11
 8005346:	f002 f85d 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800534a:	2300      	movs	r3, #0
 800534c:	2200      	movs	r2, #0
 800534e:	2100      	movs	r1, #0
 8005350:	200c      	movs	r0, #12
 8005352:	f002 f857 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005356:	2300      	movs	r3, #0
 8005358:	2200      	movs	r2, #0
 800535a:	2100      	movs	r1, #0
 800535c:	200d      	movs	r0, #13
 800535e:	f002 f851 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8005362:	2300      	movs	r3, #0
 8005364:	2200      	movs	r2, #0
 8005366:	2100      	movs	r1, #0
 8005368:	200e      	movs	r0, #14
 800536a:	f002 f84b 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800536e:	2300      	movs	r3, #0
 8005370:	2200      	movs	r2, #0
 8005372:	2100      	movs	r1, #0
 8005374:	200f      	movs	r0, #15
 8005376:	f002 f845 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800537a:	2300      	movs	r3, #0
 800537c:	2200      	movs	r2, #0
 800537e:	2100      	movs	r1, #0
 8005380:	2010      	movs	r0, #16
 8005382:	f002 f83f 	bl	8007404 <Set_LED>
 8005386:	f001 bf88 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 24 && Valor < 30) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b17      	cmp	r3, #23
 800538e:	dd7f      	ble.n	8005490 <LEDHandler+0x3da0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b1d      	cmp	r3, #29
 8005394:	dc7c      	bgt.n	8005490 <LEDHandler+0x3da0>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8005396:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <LEDHandler+0x3d94>)
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	4b3b      	ldr	r3, [pc, #236]	; (8005488 <LEDHandler+0x3d98>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b3b      	ldr	r3, [pc, #236]	; (800548c <LEDHandler+0x3d9c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2000      	movs	r0, #0
 80053a4:	f002 f82e 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <LEDHandler+0x3d94>)
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	4b36      	ldr	r3, [pc, #216]	; (8005488 <LEDHandler+0x3d98>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b36      	ldr	r3, [pc, #216]	; (800548c <LEDHandler+0x3d9c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2001      	movs	r0, #1
 80053b6:	f002 f825 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80053ba:	4b32      	ldr	r3, [pc, #200]	; (8005484 <LEDHandler+0x3d94>)
 80053bc:	6819      	ldr	r1, [r3, #0]
 80053be:	4b32      	ldr	r3, [pc, #200]	; (8005488 <LEDHandler+0x3d98>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b32      	ldr	r3, [pc, #200]	; (800548c <LEDHandler+0x3d9c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2002      	movs	r0, #2
 80053c8:	f002 f81c 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 80053cc:	4b2d      	ldr	r3, [pc, #180]	; (8005484 <LEDHandler+0x3d94>)
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	4b2d      	ldr	r3, [pc, #180]	; (8005488 <LEDHandler+0x3d98>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b2d      	ldr	r3, [pc, #180]	; (800548c <LEDHandler+0x3d9c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2003      	movs	r0, #3
 80053da:	f002 f813 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 80053de:	4b29      	ldr	r3, [pc, #164]	; (8005484 <LEDHandler+0x3d94>)
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <LEDHandler+0x3d98>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4b29      	ldr	r3, [pc, #164]	; (800548c <LEDHandler+0x3d9c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2004      	movs	r0, #4
 80053ec:	f002 f80a 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 80053f0:	2300      	movs	r3, #0
 80053f2:	2200      	movs	r2, #0
 80053f4:	2100      	movs	r1, #0
 80053f6:	2005      	movs	r0, #5
 80053f8:	f002 f804 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 80053fc:	2300      	movs	r3, #0
 80053fe:	2200      	movs	r2, #0
 8005400:	2100      	movs	r1, #0
 8005402:	2006      	movs	r0, #6
 8005404:	f001 fffe 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8005408:	2300      	movs	r3, #0
 800540a:	2200      	movs	r2, #0
 800540c:	2100      	movs	r1, #0
 800540e:	2007      	movs	r0, #7
 8005410:	f001 fff8 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8005414:	2300      	movs	r3, #0
 8005416:	2200      	movs	r2, #0
 8005418:	2100      	movs	r1, #0
 800541a:	2008      	movs	r0, #8
 800541c:	f001 fff2 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8005420:	2300      	movs	r3, #0
 8005422:	2200      	movs	r2, #0
 8005424:	2100      	movs	r1, #0
 8005426:	2009      	movs	r0, #9
 8005428:	f001 ffec 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800542c:	2300      	movs	r3, #0
 800542e:	2200      	movs	r2, #0
 8005430:	2100      	movs	r1, #0
 8005432:	200a      	movs	r0, #10
 8005434:	f001 ffe6 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8005438:	2300      	movs	r3, #0
 800543a:	2200      	movs	r2, #0
 800543c:	2100      	movs	r1, #0
 800543e:	200b      	movs	r0, #11
 8005440:	f001 ffe0 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8005444:	2300      	movs	r3, #0
 8005446:	2200      	movs	r2, #0
 8005448:	2100      	movs	r1, #0
 800544a:	200c      	movs	r0, #12
 800544c:	f001 ffda 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005450:	2300      	movs	r3, #0
 8005452:	2200      	movs	r2, #0
 8005454:	2100      	movs	r1, #0
 8005456:	200d      	movs	r0, #13
 8005458:	f001 ffd4 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800545c:	2300      	movs	r3, #0
 800545e:	2200      	movs	r2, #0
 8005460:	2100      	movs	r1, #0
 8005462:	200e      	movs	r0, #14
 8005464:	f001 ffce 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005468:	2300      	movs	r3, #0
 800546a:	2200      	movs	r2, #0
 800546c:	2100      	movs	r1, #0
 800546e:	200f      	movs	r0, #15
 8005470:	f001 ffc8 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005474:	2300      	movs	r3, #0
 8005476:	2200      	movs	r2, #0
 8005478:	2100      	movs	r1, #0
 800547a:	2010      	movs	r0, #16
 800547c:	f001 ffc2 	bl	8007404 <Set_LED>
 8005480:	f001 bf0b 	b.w	800729a <LEDHandler+0x5baa>
 8005484:	20000008 	.word	0x20000008
 8005488:	2000000c 	.word	0x2000000c
 800548c:	20000010 	.word	0x20000010

		} else if (Valor >= 30 && Valor < 36) {
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b1d      	cmp	r3, #29
 8005494:	dd7c      	ble.n	8005590 <LEDHandler+0x3ea0>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b23      	cmp	r3, #35	; 0x23
 800549a:	dc79      	bgt.n	8005590 <LEDHandler+0x3ea0>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 800549c:	4b7f      	ldr	r3, [pc, #508]	; (800569c <LEDHandler+0x3fac>)
 800549e:	6819      	ldr	r1, [r3, #0]
 80054a0:	4b7f      	ldr	r3, [pc, #508]	; (80056a0 <LEDHandler+0x3fb0>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b7f      	ldr	r3, [pc, #508]	; (80056a4 <LEDHandler+0x3fb4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2000      	movs	r0, #0
 80054aa:	f001 ffab 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80054ae:	4b7b      	ldr	r3, [pc, #492]	; (800569c <LEDHandler+0x3fac>)
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	4b7b      	ldr	r3, [pc, #492]	; (80056a0 <LEDHandler+0x3fb0>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b7b      	ldr	r3, [pc, #492]	; (80056a4 <LEDHandler+0x3fb4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2001      	movs	r0, #1
 80054bc:	f001 ffa2 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80054c0:	4b76      	ldr	r3, [pc, #472]	; (800569c <LEDHandler+0x3fac>)
 80054c2:	6819      	ldr	r1, [r3, #0]
 80054c4:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <LEDHandler+0x3fb0>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b76      	ldr	r3, [pc, #472]	; (80056a4 <LEDHandler+0x3fb4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2002      	movs	r0, #2
 80054ce:	f001 ff99 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 80054d2:	4b72      	ldr	r3, [pc, #456]	; (800569c <LEDHandler+0x3fac>)
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	4b72      	ldr	r3, [pc, #456]	; (80056a0 <LEDHandler+0x3fb0>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b72      	ldr	r3, [pc, #456]	; (80056a4 <LEDHandler+0x3fb4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2003      	movs	r0, #3
 80054e0:	f001 ff90 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 80054e4:	4b6d      	ldr	r3, [pc, #436]	; (800569c <LEDHandler+0x3fac>)
 80054e6:	6819      	ldr	r1, [r3, #0]
 80054e8:	4b6d      	ldr	r3, [pc, #436]	; (80056a0 <LEDHandler+0x3fb0>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b6d      	ldr	r3, [pc, #436]	; (80056a4 <LEDHandler+0x3fb4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2004      	movs	r0, #4
 80054f2:	f001 ff87 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 80054f6:	4b69      	ldr	r3, [pc, #420]	; (800569c <LEDHandler+0x3fac>)
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	4b69      	ldr	r3, [pc, #420]	; (80056a0 <LEDHandler+0x3fb0>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b69      	ldr	r3, [pc, #420]	; (80056a4 <LEDHandler+0x3fb4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2005      	movs	r0, #5
 8005504:	f001 ff7e 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8005508:	2300      	movs	r3, #0
 800550a:	2200      	movs	r2, #0
 800550c:	2100      	movs	r1, #0
 800550e:	2006      	movs	r0, #6
 8005510:	f001 ff78 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8005514:	2300      	movs	r3, #0
 8005516:	2200      	movs	r2, #0
 8005518:	2100      	movs	r1, #0
 800551a:	2007      	movs	r0, #7
 800551c:	f001 ff72 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8005520:	2300      	movs	r3, #0
 8005522:	2200      	movs	r2, #0
 8005524:	2100      	movs	r1, #0
 8005526:	2008      	movs	r0, #8
 8005528:	f001 ff6c 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 800552c:	2300      	movs	r3, #0
 800552e:	2200      	movs	r2, #0
 8005530:	2100      	movs	r1, #0
 8005532:	2009      	movs	r0, #9
 8005534:	f001 ff66 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8005538:	2300      	movs	r3, #0
 800553a:	2200      	movs	r2, #0
 800553c:	2100      	movs	r1, #0
 800553e:	200a      	movs	r0, #10
 8005540:	f001 ff60 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8005544:	2300      	movs	r3, #0
 8005546:	2200      	movs	r2, #0
 8005548:	2100      	movs	r1, #0
 800554a:	200b      	movs	r0, #11
 800554c:	f001 ff5a 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8005550:	2300      	movs	r3, #0
 8005552:	2200      	movs	r2, #0
 8005554:	2100      	movs	r1, #0
 8005556:	200c      	movs	r0, #12
 8005558:	f001 ff54 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 800555c:	2300      	movs	r3, #0
 800555e:	2200      	movs	r2, #0
 8005560:	2100      	movs	r1, #0
 8005562:	200d      	movs	r0, #13
 8005564:	f001 ff4e 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8005568:	2300      	movs	r3, #0
 800556a:	2200      	movs	r2, #0
 800556c:	2100      	movs	r1, #0
 800556e:	200e      	movs	r0, #14
 8005570:	f001 ff48 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005574:	2300      	movs	r3, #0
 8005576:	2200      	movs	r2, #0
 8005578:	2100      	movs	r1, #0
 800557a:	200f      	movs	r0, #15
 800557c:	f001 ff42 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005580:	2300      	movs	r3, #0
 8005582:	2200      	movs	r2, #0
 8005584:	2100      	movs	r1, #0
 8005586:	2010      	movs	r0, #16
 8005588:	f001 ff3c 	bl	8007404 <Set_LED>
 800558c:	f001 be85 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 36 && Valor < 42) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b23      	cmp	r3, #35	; 0x23
 8005594:	f340 8088 	ble.w	80056a8 <LEDHandler+0x3fb8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b29      	cmp	r3, #41	; 0x29
 800559c:	f300 8084 	bgt.w	80056a8 <LEDHandler+0x3fb8>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80055a0:	4b3e      	ldr	r3, [pc, #248]	; (800569c <LEDHandler+0x3fac>)
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <LEDHandler+0x3fb0>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b3e      	ldr	r3, [pc, #248]	; (80056a4 <LEDHandler+0x3fb4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2000      	movs	r0, #0
 80055ae:	f001 ff29 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80055b2:	4b3a      	ldr	r3, [pc, #232]	; (800569c <LEDHandler+0x3fac>)
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	4b3a      	ldr	r3, [pc, #232]	; (80056a0 <LEDHandler+0x3fb0>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b3a      	ldr	r3, [pc, #232]	; (80056a4 <LEDHandler+0x3fb4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2001      	movs	r0, #1
 80055c0:	f001 ff20 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <LEDHandler+0x3fac>)
 80055c6:	6819      	ldr	r1, [r3, #0]
 80055c8:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <LEDHandler+0x3fb0>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4b35      	ldr	r3, [pc, #212]	; (80056a4 <LEDHandler+0x3fb4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2002      	movs	r0, #2
 80055d2:	f001 ff17 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 80055d6:	4b31      	ldr	r3, [pc, #196]	; (800569c <LEDHandler+0x3fac>)
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <LEDHandler+0x3fb0>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4b31      	ldr	r3, [pc, #196]	; (80056a4 <LEDHandler+0x3fb4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2003      	movs	r0, #3
 80055e4:	f001 ff0e 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 80055e8:	4b2c      	ldr	r3, [pc, #176]	; (800569c <LEDHandler+0x3fac>)
 80055ea:	6819      	ldr	r1, [r3, #0]
 80055ec:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <LEDHandler+0x3fb0>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <LEDHandler+0x3fb4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2004      	movs	r0, #4
 80055f6:	f001 ff05 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 80055fa:	4b28      	ldr	r3, [pc, #160]	; (800569c <LEDHandler+0x3fac>)
 80055fc:	6819      	ldr	r1, [r3, #0]
 80055fe:	4b28      	ldr	r3, [pc, #160]	; (80056a0 <LEDHandler+0x3fb0>)
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b28      	ldr	r3, [pc, #160]	; (80056a4 <LEDHandler+0x3fb4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2005      	movs	r0, #5
 8005608:	f001 fefc 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 800560c:	4b23      	ldr	r3, [pc, #140]	; (800569c <LEDHandler+0x3fac>)
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <LEDHandler+0x3fb0>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <LEDHandler+0x3fb4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2006      	movs	r0, #6
 800561a:	f001 fef3 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 800561e:	2300      	movs	r3, #0
 8005620:	2200      	movs	r2, #0
 8005622:	2100      	movs	r1, #0
 8005624:	2007      	movs	r0, #7
 8005626:	f001 feed 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 800562a:	2300      	movs	r3, #0
 800562c:	2200      	movs	r2, #0
 800562e:	2100      	movs	r1, #0
 8005630:	2008      	movs	r0, #8
 8005632:	f001 fee7 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8005636:	2300      	movs	r3, #0
 8005638:	2200      	movs	r2, #0
 800563a:	2100      	movs	r1, #0
 800563c:	2009      	movs	r0, #9
 800563e:	f001 fee1 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8005642:	2300      	movs	r3, #0
 8005644:	2200      	movs	r2, #0
 8005646:	2100      	movs	r1, #0
 8005648:	200a      	movs	r0, #10
 800564a:	f001 fedb 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 800564e:	2300      	movs	r3, #0
 8005650:	2200      	movs	r2, #0
 8005652:	2100      	movs	r1, #0
 8005654:	200b      	movs	r0, #11
 8005656:	f001 fed5 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800565a:	2300      	movs	r3, #0
 800565c:	2200      	movs	r2, #0
 800565e:	2100      	movs	r1, #0
 8005660:	200c      	movs	r0, #12
 8005662:	f001 fecf 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005666:	2300      	movs	r3, #0
 8005668:	2200      	movs	r2, #0
 800566a:	2100      	movs	r1, #0
 800566c:	200d      	movs	r0, #13
 800566e:	f001 fec9 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8005672:	2300      	movs	r3, #0
 8005674:	2200      	movs	r2, #0
 8005676:	2100      	movs	r1, #0
 8005678:	200e      	movs	r0, #14
 800567a:	f001 fec3 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800567e:	2300      	movs	r3, #0
 8005680:	2200      	movs	r2, #0
 8005682:	2100      	movs	r1, #0
 8005684:	200f      	movs	r0, #15
 8005686:	f001 febd 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800568a:	2300      	movs	r3, #0
 800568c:	2200      	movs	r2, #0
 800568e:	2100      	movs	r1, #0
 8005690:	2010      	movs	r0, #16
 8005692:	f001 feb7 	bl	8007404 <Set_LED>
 8005696:	f001 be00 	b.w	800729a <LEDHandler+0x5baa>
 800569a:	bf00      	nop
 800569c:	20000008 	.word	0x20000008
 80056a0:	2000000c 	.word	0x2000000c
 80056a4:	20000010 	.word	0x20000010

		} else if (Valor >= 42 && Valor < 48) {
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b29      	cmp	r3, #41	; 0x29
 80056ac:	f340 8083 	ble.w	80057b6 <LEDHandler+0x40c6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b2f      	cmp	r3, #47	; 0x2f
 80056b4:	dc7f      	bgt.n	80057b6 <LEDHandler+0x40c6>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80056b6:	4b85      	ldr	r3, [pc, #532]	; (80058cc <LEDHandler+0x41dc>)
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	4b85      	ldr	r3, [pc, #532]	; (80058d0 <LEDHandler+0x41e0>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b85      	ldr	r3, [pc, #532]	; (80058d4 <LEDHandler+0x41e4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2000      	movs	r0, #0
 80056c4:	f001 fe9e 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80056c8:	4b80      	ldr	r3, [pc, #512]	; (80058cc <LEDHandler+0x41dc>)
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <LEDHandler+0x41e0>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4b80      	ldr	r3, [pc, #512]	; (80058d4 <LEDHandler+0x41e4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2001      	movs	r0, #1
 80056d6:	f001 fe95 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80056da:	4b7c      	ldr	r3, [pc, #496]	; (80058cc <LEDHandler+0x41dc>)
 80056dc:	6819      	ldr	r1, [r3, #0]
 80056de:	4b7c      	ldr	r3, [pc, #496]	; (80058d0 <LEDHandler+0x41e0>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b7c      	ldr	r3, [pc, #496]	; (80058d4 <LEDHandler+0x41e4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2002      	movs	r0, #2
 80056e8:	f001 fe8c 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 80056ec:	4b77      	ldr	r3, [pc, #476]	; (80058cc <LEDHandler+0x41dc>)
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	4b77      	ldr	r3, [pc, #476]	; (80058d0 <LEDHandler+0x41e0>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b77      	ldr	r3, [pc, #476]	; (80058d4 <LEDHandler+0x41e4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2003      	movs	r0, #3
 80056fa:	f001 fe83 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 80056fe:	4b73      	ldr	r3, [pc, #460]	; (80058cc <LEDHandler+0x41dc>)
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	4b73      	ldr	r3, [pc, #460]	; (80058d0 <LEDHandler+0x41e0>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b73      	ldr	r3, [pc, #460]	; (80058d4 <LEDHandler+0x41e4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2004      	movs	r0, #4
 800570c:	f001 fe7a 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8005710:	4b6e      	ldr	r3, [pc, #440]	; (80058cc <LEDHandler+0x41dc>)
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	4b6e      	ldr	r3, [pc, #440]	; (80058d0 <LEDHandler+0x41e0>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b6e      	ldr	r3, [pc, #440]	; (80058d4 <LEDHandler+0x41e4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2005      	movs	r0, #5
 800571e:	f001 fe71 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8005722:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <LEDHandler+0x41dc>)
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	4b6a      	ldr	r3, [pc, #424]	; (80058d0 <LEDHandler+0x41e0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b6a      	ldr	r3, [pc, #424]	; (80058d4 <LEDHandler+0x41e4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2006      	movs	r0, #6
 8005730:	f001 fe68 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8005734:	4b65      	ldr	r3, [pc, #404]	; (80058cc <LEDHandler+0x41dc>)
 8005736:	6819      	ldr	r1, [r3, #0]
 8005738:	4b65      	ldr	r3, [pc, #404]	; (80058d0 <LEDHandler+0x41e0>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b65      	ldr	r3, [pc, #404]	; (80058d4 <LEDHandler+0x41e4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2007      	movs	r0, #7
 8005742:	f001 fe5f 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8005746:	2300      	movs	r3, #0
 8005748:	2200      	movs	r2, #0
 800574a:	2100      	movs	r1, #0
 800574c:	2008      	movs	r0, #8
 800574e:	f001 fe59 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8005752:	2300      	movs	r3, #0
 8005754:	2200      	movs	r2, #0
 8005756:	2100      	movs	r1, #0
 8005758:	2009      	movs	r0, #9
 800575a:	f001 fe53 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800575e:	2300      	movs	r3, #0
 8005760:	2200      	movs	r2, #0
 8005762:	2100      	movs	r1, #0
 8005764:	200a      	movs	r0, #10
 8005766:	f001 fe4d 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 800576a:	2300      	movs	r3, #0
 800576c:	2200      	movs	r2, #0
 800576e:	2100      	movs	r1, #0
 8005770:	200b      	movs	r0, #11
 8005772:	f001 fe47 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8005776:	2300      	movs	r3, #0
 8005778:	2200      	movs	r2, #0
 800577a:	2100      	movs	r1, #0
 800577c:	200c      	movs	r0, #12
 800577e:	f001 fe41 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005782:	2300      	movs	r3, #0
 8005784:	2200      	movs	r2, #0
 8005786:	2100      	movs	r1, #0
 8005788:	200d      	movs	r0, #13
 800578a:	f001 fe3b 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800578e:	2300      	movs	r3, #0
 8005790:	2200      	movs	r2, #0
 8005792:	2100      	movs	r1, #0
 8005794:	200e      	movs	r0, #14
 8005796:	f001 fe35 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800579a:	2300      	movs	r3, #0
 800579c:	2200      	movs	r2, #0
 800579e:	2100      	movs	r1, #0
 80057a0:	200f      	movs	r0, #15
 80057a2:	f001 fe2f 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80057a6:	2300      	movs	r3, #0
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	2010      	movs	r0, #16
 80057ae:	f001 fe29 	bl	8007404 <Set_LED>
 80057b2:	f001 bd72 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 48 && Valor < 54) {
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b2f      	cmp	r3, #47	; 0x2f
 80057ba:	f340 808d 	ble.w	80058d8 <LEDHandler+0x41e8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b35      	cmp	r3, #53	; 0x35
 80057c2:	f300 8089 	bgt.w	80058d8 <LEDHandler+0x41e8>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80057c6:	4b41      	ldr	r3, [pc, #260]	; (80058cc <LEDHandler+0x41dc>)
 80057c8:	6819      	ldr	r1, [r3, #0]
 80057ca:	4b41      	ldr	r3, [pc, #260]	; (80058d0 <LEDHandler+0x41e0>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <LEDHandler+0x41e4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2000      	movs	r0, #0
 80057d4:	f001 fe16 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80057d8:	4b3c      	ldr	r3, [pc, #240]	; (80058cc <LEDHandler+0x41dc>)
 80057da:	6819      	ldr	r1, [r3, #0]
 80057dc:	4b3c      	ldr	r3, [pc, #240]	; (80058d0 <LEDHandler+0x41e0>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b3c      	ldr	r3, [pc, #240]	; (80058d4 <LEDHandler+0x41e4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2001      	movs	r0, #1
 80057e6:	f001 fe0d 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 80057ea:	4b38      	ldr	r3, [pc, #224]	; (80058cc <LEDHandler+0x41dc>)
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	4b38      	ldr	r3, [pc, #224]	; (80058d0 <LEDHandler+0x41e0>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b38      	ldr	r3, [pc, #224]	; (80058d4 <LEDHandler+0x41e4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2002      	movs	r0, #2
 80057f8:	f001 fe04 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 80057fc:	4b33      	ldr	r3, [pc, #204]	; (80058cc <LEDHandler+0x41dc>)
 80057fe:	6819      	ldr	r1, [r3, #0]
 8005800:	4b33      	ldr	r3, [pc, #204]	; (80058d0 <LEDHandler+0x41e0>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b33      	ldr	r3, [pc, #204]	; (80058d4 <LEDHandler+0x41e4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2003      	movs	r0, #3
 800580a:	f001 fdfb 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 800580e:	4b2f      	ldr	r3, [pc, #188]	; (80058cc <LEDHandler+0x41dc>)
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	4b2f      	ldr	r3, [pc, #188]	; (80058d0 <LEDHandler+0x41e0>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <LEDHandler+0x41e4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2004      	movs	r0, #4
 800581c:	f001 fdf2 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8005820:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <LEDHandler+0x41dc>)
 8005822:	6819      	ldr	r1, [r3, #0]
 8005824:	4b2a      	ldr	r3, [pc, #168]	; (80058d0 <LEDHandler+0x41e0>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b2a      	ldr	r3, [pc, #168]	; (80058d4 <LEDHandler+0x41e4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2005      	movs	r0, #5
 800582e:	f001 fde9 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8005832:	4b26      	ldr	r3, [pc, #152]	; (80058cc <LEDHandler+0x41dc>)
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <LEDHandler+0x41e0>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <LEDHandler+0x41e4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2006      	movs	r0, #6
 8005840:	f001 fde0 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8005844:	4b21      	ldr	r3, [pc, #132]	; (80058cc <LEDHandler+0x41dc>)
 8005846:	6819      	ldr	r1, [r3, #0]
 8005848:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <LEDHandler+0x41e0>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <LEDHandler+0x41e4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2007      	movs	r0, #7
 8005852:	f001 fdd7 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8005856:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <LEDHandler+0x41dc>)
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <LEDHandler+0x41e0>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <LEDHandler+0x41e4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2008      	movs	r0, #8
 8005864:	f001 fdce 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8005868:	2300      	movs	r3, #0
 800586a:	2200      	movs	r2, #0
 800586c:	2100      	movs	r1, #0
 800586e:	2009      	movs	r0, #9
 8005870:	f001 fdc8 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8005874:	2300      	movs	r3, #0
 8005876:	2200      	movs	r2, #0
 8005878:	2100      	movs	r1, #0
 800587a:	200a      	movs	r0, #10
 800587c:	f001 fdc2 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8005880:	2300      	movs	r3, #0
 8005882:	2200      	movs	r2, #0
 8005884:	2100      	movs	r1, #0
 8005886:	200b      	movs	r0, #11
 8005888:	f001 fdbc 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800588c:	2300      	movs	r3, #0
 800588e:	2200      	movs	r2, #0
 8005890:	2100      	movs	r1, #0
 8005892:	200c      	movs	r0, #12
 8005894:	f001 fdb6 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005898:	2300      	movs	r3, #0
 800589a:	2200      	movs	r2, #0
 800589c:	2100      	movs	r1, #0
 800589e:	200d      	movs	r0, #13
 80058a0:	f001 fdb0 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 80058a4:	2300      	movs	r3, #0
 80058a6:	2200      	movs	r2, #0
 80058a8:	2100      	movs	r1, #0
 80058aa:	200e      	movs	r0, #14
 80058ac:	f001 fdaa 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80058b0:	2300      	movs	r3, #0
 80058b2:	2200      	movs	r2, #0
 80058b4:	2100      	movs	r1, #0
 80058b6:	200f      	movs	r0, #15
 80058b8:	f001 fda4 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80058bc:	2300      	movs	r3, #0
 80058be:	2200      	movs	r2, #0
 80058c0:	2100      	movs	r1, #0
 80058c2:	2010      	movs	r0, #16
 80058c4:	f001 fd9e 	bl	8007404 <Set_LED>
 80058c8:	f001 bce7 	b.w	800729a <LEDHandler+0x5baa>
 80058cc:	20000008 	.word	0x20000008
 80058d0:	2000000c 	.word	0x2000000c
 80058d4:	20000010 	.word	0x20000010

		} else if (Valor >= 54 && Valor < 60) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b35      	cmp	r3, #53	; 0x35
 80058dc:	f340 808a 	ble.w	80059f4 <LEDHandler+0x4304>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b3b      	cmp	r3, #59	; 0x3b
 80058e4:	f300 8086 	bgt.w	80059f4 <LEDHandler+0x4304>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 80058e8:	4b8b      	ldr	r3, [pc, #556]	; (8005b18 <LEDHandler+0x4428>)
 80058ea:	6819      	ldr	r1, [r3, #0]
 80058ec:	4b8b      	ldr	r3, [pc, #556]	; (8005b1c <LEDHandler+0x442c>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4b8b      	ldr	r3, [pc, #556]	; (8005b20 <LEDHandler+0x4430>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2000      	movs	r0, #0
 80058f6:	f001 fd85 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 80058fa:	4b87      	ldr	r3, [pc, #540]	; (8005b18 <LEDHandler+0x4428>)
 80058fc:	6819      	ldr	r1, [r3, #0]
 80058fe:	4b87      	ldr	r3, [pc, #540]	; (8005b1c <LEDHandler+0x442c>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b87      	ldr	r3, [pc, #540]	; (8005b20 <LEDHandler+0x4430>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2001      	movs	r0, #1
 8005908:	f001 fd7c 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 800590c:	4b82      	ldr	r3, [pc, #520]	; (8005b18 <LEDHandler+0x4428>)
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	4b82      	ldr	r3, [pc, #520]	; (8005b1c <LEDHandler+0x442c>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b82      	ldr	r3, [pc, #520]	; (8005b20 <LEDHandler+0x4430>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2002      	movs	r0, #2
 800591a:	f001 fd73 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 800591e:	4b7e      	ldr	r3, [pc, #504]	; (8005b18 <LEDHandler+0x4428>)
 8005920:	6819      	ldr	r1, [r3, #0]
 8005922:	4b7e      	ldr	r3, [pc, #504]	; (8005b1c <LEDHandler+0x442c>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b7e      	ldr	r3, [pc, #504]	; (8005b20 <LEDHandler+0x4430>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2003      	movs	r0, #3
 800592c:	f001 fd6a 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8005930:	4b79      	ldr	r3, [pc, #484]	; (8005b18 <LEDHandler+0x4428>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	4b79      	ldr	r3, [pc, #484]	; (8005b1c <LEDHandler+0x442c>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b79      	ldr	r3, [pc, #484]	; (8005b20 <LEDHandler+0x4430>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2004      	movs	r0, #4
 800593e:	f001 fd61 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8005942:	4b75      	ldr	r3, [pc, #468]	; (8005b18 <LEDHandler+0x4428>)
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	4b75      	ldr	r3, [pc, #468]	; (8005b1c <LEDHandler+0x442c>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b75      	ldr	r3, [pc, #468]	; (8005b20 <LEDHandler+0x4430>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2005      	movs	r0, #5
 8005950:	f001 fd58 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8005954:	4b70      	ldr	r3, [pc, #448]	; (8005b18 <LEDHandler+0x4428>)
 8005956:	6819      	ldr	r1, [r3, #0]
 8005958:	4b70      	ldr	r3, [pc, #448]	; (8005b1c <LEDHandler+0x442c>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4b70      	ldr	r3, [pc, #448]	; (8005b20 <LEDHandler+0x4430>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2006      	movs	r0, #6
 8005962:	f001 fd4f 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8005966:	4b6c      	ldr	r3, [pc, #432]	; (8005b18 <LEDHandler+0x4428>)
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	4b6c      	ldr	r3, [pc, #432]	; (8005b1c <LEDHandler+0x442c>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b6c      	ldr	r3, [pc, #432]	; (8005b20 <LEDHandler+0x4430>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2007      	movs	r0, #7
 8005974:	f001 fd46 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8005978:	4b67      	ldr	r3, [pc, #412]	; (8005b18 <LEDHandler+0x4428>)
 800597a:	6819      	ldr	r1, [r3, #0]
 800597c:	4b67      	ldr	r3, [pc, #412]	; (8005b1c <LEDHandler+0x442c>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b67      	ldr	r3, [pc, #412]	; (8005b20 <LEDHandler+0x4430>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2008      	movs	r0, #8
 8005986:	f001 fd3d 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 800598a:	4b63      	ldr	r3, [pc, #396]	; (8005b18 <LEDHandler+0x4428>)
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	4b63      	ldr	r3, [pc, #396]	; (8005b1c <LEDHandler+0x442c>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b63      	ldr	r3, [pc, #396]	; (8005b20 <LEDHandler+0x4430>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2009      	movs	r0, #9
 8005998:	f001 fd34 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800599c:	2300      	movs	r3, #0
 800599e:	2200      	movs	r2, #0
 80059a0:	2100      	movs	r1, #0
 80059a2:	200a      	movs	r0, #10
 80059a4:	f001 fd2e 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80059a8:	2300      	movs	r3, #0
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	200b      	movs	r0, #11
 80059b0:	f001 fd28 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 80059b4:	2300      	movs	r3, #0
 80059b6:	2200      	movs	r2, #0
 80059b8:	2100      	movs	r1, #0
 80059ba:	200c      	movs	r0, #12
 80059bc:	f001 fd22 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80059c0:	2300      	movs	r3, #0
 80059c2:	2200      	movs	r2, #0
 80059c4:	2100      	movs	r1, #0
 80059c6:	200d      	movs	r0, #13
 80059c8:	f001 fd1c 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 80059cc:	2300      	movs	r3, #0
 80059ce:	2200      	movs	r2, #0
 80059d0:	2100      	movs	r1, #0
 80059d2:	200e      	movs	r0, #14
 80059d4:	f001 fd16 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80059d8:	2300      	movs	r3, #0
 80059da:	2200      	movs	r2, #0
 80059dc:	2100      	movs	r1, #0
 80059de:	200f      	movs	r0, #15
 80059e0:	f001 fd10 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80059e4:	2300      	movs	r3, #0
 80059e6:	2200      	movs	r2, #0
 80059e8:	2100      	movs	r1, #0
 80059ea:	2010      	movs	r0, #16
 80059ec:	f001 fd0a 	bl	8007404 <Set_LED>
 80059f0:	f001 bc53 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 60 && Valor < 66) {
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b3b      	cmp	r3, #59	; 0x3b
 80059f8:	f340 8094 	ble.w	8005b24 <LEDHandler+0x4434>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b41      	cmp	r3, #65	; 0x41
 8005a00:	f300 8090 	bgt.w	8005b24 <LEDHandler+0x4434>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8005a04:	4b44      	ldr	r3, [pc, #272]	; (8005b18 <LEDHandler+0x4428>)
 8005a06:	6819      	ldr	r1, [r3, #0]
 8005a08:	4b44      	ldr	r3, [pc, #272]	; (8005b1c <LEDHandler+0x442c>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b44      	ldr	r3, [pc, #272]	; (8005b20 <LEDHandler+0x4430>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2000      	movs	r0, #0
 8005a12:	f001 fcf7 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8005a16:	4b40      	ldr	r3, [pc, #256]	; (8005b18 <LEDHandler+0x4428>)
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	4b40      	ldr	r3, [pc, #256]	; (8005b1c <LEDHandler+0x442c>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b40      	ldr	r3, [pc, #256]	; (8005b20 <LEDHandler+0x4430>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2001      	movs	r0, #1
 8005a24:	f001 fcee 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8005a28:	4b3b      	ldr	r3, [pc, #236]	; (8005b18 <LEDHandler+0x4428>)
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <LEDHandler+0x442c>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <LEDHandler+0x4430>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2002      	movs	r0, #2
 8005a36:	f001 fce5 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8005a3a:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <LEDHandler+0x4428>)
 8005a3c:	6819      	ldr	r1, [r3, #0]
 8005a3e:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <LEDHandler+0x442c>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <LEDHandler+0x4430>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2003      	movs	r0, #3
 8005a48:	f001 fcdc 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8005a4c:	4b32      	ldr	r3, [pc, #200]	; (8005b18 <LEDHandler+0x4428>)
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	4b32      	ldr	r3, [pc, #200]	; (8005b1c <LEDHandler+0x442c>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <LEDHandler+0x4430>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2004      	movs	r0, #4
 8005a5a:	f001 fcd3 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8005a5e:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <LEDHandler+0x4428>)
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	4b2e      	ldr	r3, [pc, #184]	; (8005b1c <LEDHandler+0x442c>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b2e      	ldr	r3, [pc, #184]	; (8005b20 <LEDHandler+0x4430>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2005      	movs	r0, #5
 8005a6c:	f001 fcca 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8005a70:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <LEDHandler+0x4428>)
 8005a72:	6819      	ldr	r1, [r3, #0]
 8005a74:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <LEDHandler+0x442c>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4b29      	ldr	r3, [pc, #164]	; (8005b20 <LEDHandler+0x4430>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2006      	movs	r0, #6
 8005a7e:	f001 fcc1 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <LEDHandler+0x4428>)
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	4b25      	ldr	r3, [pc, #148]	; (8005b1c <LEDHandler+0x442c>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b25      	ldr	r3, [pc, #148]	; (8005b20 <LEDHandler+0x4430>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2007      	movs	r0, #7
 8005a90:	f001 fcb8 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8005a94:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <LEDHandler+0x4428>)
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <LEDHandler+0x442c>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <LEDHandler+0x4430>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2008      	movs	r0, #8
 8005aa2:	f001 fcaf 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8005aa6:	4b1c      	ldr	r3, [pc, #112]	; (8005b18 <LEDHandler+0x4428>)
 8005aa8:	6819      	ldr	r1, [r3, #0]
 8005aaa:	4b1c      	ldr	r3, [pc, #112]	; (8005b1c <LEDHandler+0x442c>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b1c      	ldr	r3, [pc, #112]	; (8005b20 <LEDHandler+0x4430>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2009      	movs	r0, #9
 8005ab4:	f001 fca6 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8005ab8:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <LEDHandler+0x4428>)
 8005aba:	6819      	ldr	r1, [r3, #0]
 8005abc:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <LEDHandler+0x442c>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <LEDHandler+0x4430>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	200a      	movs	r0, #10
 8005ac6:	f001 fc9d 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8005aca:	2300      	movs	r3, #0
 8005acc:	2200      	movs	r2, #0
 8005ace:	2100      	movs	r1, #0
 8005ad0:	200b      	movs	r0, #11
 8005ad2:	f001 fc97 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2100      	movs	r1, #0
 8005adc:	200c      	movs	r0, #12
 8005ade:	f001 fc91 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	200d      	movs	r0, #13
 8005aea:	f001 fc8b 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8005aee:	2300      	movs	r3, #0
 8005af0:	2200      	movs	r2, #0
 8005af2:	2100      	movs	r1, #0
 8005af4:	200e      	movs	r0, #14
 8005af6:	f001 fc85 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005afa:	2300      	movs	r3, #0
 8005afc:	2200      	movs	r2, #0
 8005afe:	2100      	movs	r1, #0
 8005b00:	200f      	movs	r0, #15
 8005b02:	f001 fc7f 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005b06:	2300      	movs	r3, #0
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	2010      	movs	r0, #16
 8005b0e:	f001 fc79 	bl	8007404 <Set_LED>
 8005b12:	f001 bbc2 	b.w	800729a <LEDHandler+0x5baa>
 8005b16:	bf00      	nop
 8005b18:	20000008 	.word	0x20000008
 8005b1c:	2000000c 	.word	0x2000000c
 8005b20:	20000010 	.word	0x20000010

		} else if (Valor >= 66 && Valor < 72) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b41      	cmp	r3, #65	; 0x41
 8005b28:	f340 8090 	ble.w	8005c4c <LEDHandler+0x455c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b47      	cmp	r3, #71	; 0x47
 8005b30:	f300 808c 	bgt.w	8005c4c <LEDHandler+0x455c>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8005b34:	4b91      	ldr	r3, [pc, #580]	; (8005d7c <LEDHandler+0x468c>)
 8005b36:	6819      	ldr	r1, [r3, #0]
 8005b38:	4b91      	ldr	r3, [pc, #580]	; (8005d80 <LEDHandler+0x4690>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4b91      	ldr	r3, [pc, #580]	; (8005d84 <LEDHandler+0x4694>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2000      	movs	r0, #0
 8005b42:	f001 fc5f 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8005b46:	4b8d      	ldr	r3, [pc, #564]	; (8005d7c <LEDHandler+0x468c>)
 8005b48:	6819      	ldr	r1, [r3, #0]
 8005b4a:	4b8d      	ldr	r3, [pc, #564]	; (8005d80 <LEDHandler+0x4690>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b8d      	ldr	r3, [pc, #564]	; (8005d84 <LEDHandler+0x4694>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2001      	movs	r0, #1
 8005b54:	f001 fc56 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8005b58:	4b88      	ldr	r3, [pc, #544]	; (8005d7c <LEDHandler+0x468c>)
 8005b5a:	6819      	ldr	r1, [r3, #0]
 8005b5c:	4b88      	ldr	r3, [pc, #544]	; (8005d80 <LEDHandler+0x4690>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b88      	ldr	r3, [pc, #544]	; (8005d84 <LEDHandler+0x4694>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2002      	movs	r0, #2
 8005b66:	f001 fc4d 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8005b6a:	4b84      	ldr	r3, [pc, #528]	; (8005d7c <LEDHandler+0x468c>)
 8005b6c:	6819      	ldr	r1, [r3, #0]
 8005b6e:	4b84      	ldr	r3, [pc, #528]	; (8005d80 <LEDHandler+0x4690>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b84      	ldr	r3, [pc, #528]	; (8005d84 <LEDHandler+0x4694>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2003      	movs	r0, #3
 8005b78:	f001 fc44 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8005b7c:	4b7f      	ldr	r3, [pc, #508]	; (8005d7c <LEDHandler+0x468c>)
 8005b7e:	6819      	ldr	r1, [r3, #0]
 8005b80:	4b7f      	ldr	r3, [pc, #508]	; (8005d80 <LEDHandler+0x4690>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b7f      	ldr	r3, [pc, #508]	; (8005d84 <LEDHandler+0x4694>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2004      	movs	r0, #4
 8005b8a:	f001 fc3b 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8005b8e:	4b7b      	ldr	r3, [pc, #492]	; (8005d7c <LEDHandler+0x468c>)
 8005b90:	6819      	ldr	r1, [r3, #0]
 8005b92:	4b7b      	ldr	r3, [pc, #492]	; (8005d80 <LEDHandler+0x4690>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b7b      	ldr	r3, [pc, #492]	; (8005d84 <LEDHandler+0x4694>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2005      	movs	r0, #5
 8005b9c:	f001 fc32 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8005ba0:	4b76      	ldr	r3, [pc, #472]	; (8005d7c <LEDHandler+0x468c>)
 8005ba2:	6819      	ldr	r1, [r3, #0]
 8005ba4:	4b76      	ldr	r3, [pc, #472]	; (8005d80 <LEDHandler+0x4690>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	4b76      	ldr	r3, [pc, #472]	; (8005d84 <LEDHandler+0x4694>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2006      	movs	r0, #6
 8005bae:	f001 fc29 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8005bb2:	4b72      	ldr	r3, [pc, #456]	; (8005d7c <LEDHandler+0x468c>)
 8005bb4:	6819      	ldr	r1, [r3, #0]
 8005bb6:	4b72      	ldr	r3, [pc, #456]	; (8005d80 <LEDHandler+0x4690>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b72      	ldr	r3, [pc, #456]	; (8005d84 <LEDHandler+0x4694>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2007      	movs	r0, #7
 8005bc0:	f001 fc20 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8005bc4:	4b6d      	ldr	r3, [pc, #436]	; (8005d7c <LEDHandler+0x468c>)
 8005bc6:	6819      	ldr	r1, [r3, #0]
 8005bc8:	4b6d      	ldr	r3, [pc, #436]	; (8005d80 <LEDHandler+0x4690>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4b6d      	ldr	r3, [pc, #436]	; (8005d84 <LEDHandler+0x4694>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2008      	movs	r0, #8
 8005bd2:	f001 fc17 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8005bd6:	4b69      	ldr	r3, [pc, #420]	; (8005d7c <LEDHandler+0x468c>)
 8005bd8:	6819      	ldr	r1, [r3, #0]
 8005bda:	4b69      	ldr	r3, [pc, #420]	; (8005d80 <LEDHandler+0x4690>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b69      	ldr	r3, [pc, #420]	; (8005d84 <LEDHandler+0x4694>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2009      	movs	r0, #9
 8005be4:	f001 fc0e 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8005be8:	4b64      	ldr	r3, [pc, #400]	; (8005d7c <LEDHandler+0x468c>)
 8005bea:	6819      	ldr	r1, [r3, #0]
 8005bec:	4b64      	ldr	r3, [pc, #400]	; (8005d80 <LEDHandler+0x4690>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b64      	ldr	r3, [pc, #400]	; (8005d84 <LEDHandler+0x4694>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f001 fc05 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8005bfa:	4b60      	ldr	r3, [pc, #384]	; (8005d7c <LEDHandler+0x468c>)
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	4b60      	ldr	r3, [pc, #384]	; (8005d80 <LEDHandler+0x4690>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b60      	ldr	r3, [pc, #384]	; (8005d84 <LEDHandler+0x4694>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	200b      	movs	r0, #11
 8005c08:	f001 fbfc 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2100      	movs	r1, #0
 8005c12:	200c      	movs	r0, #12
 8005c14:	f001 fbf6 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	200d      	movs	r0, #13
 8005c20:	f001 fbf0 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	2100      	movs	r1, #0
 8005c2a:	200e      	movs	r0, #14
 8005c2c:	f001 fbea 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005c30:	2300      	movs	r3, #0
 8005c32:	2200      	movs	r2, #0
 8005c34:	2100      	movs	r1, #0
 8005c36:	200f      	movs	r0, #15
 8005c38:	f001 fbe4 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2100      	movs	r1, #0
 8005c42:	2010      	movs	r0, #16
 8005c44:	f001 fbde 	bl	8007404 <Set_LED>
 8005c48:	f001 bb27 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 72 && Valor < 78) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b47      	cmp	r3, #71	; 0x47
 8005c50:	f340 809a 	ble.w	8005d88 <LEDHandler+0x4698>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b4d      	cmp	r3, #77	; 0x4d
 8005c58:	f300 8096 	bgt.w	8005d88 <LEDHandler+0x4698>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8005c5c:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <LEDHandler+0x468c>)
 8005c5e:	6819      	ldr	r1, [r3, #0]
 8005c60:	4b47      	ldr	r3, [pc, #284]	; (8005d80 <LEDHandler+0x4690>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <LEDHandler+0x4694>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f001 fbcb 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8005c6e:	4b43      	ldr	r3, [pc, #268]	; (8005d7c <LEDHandler+0x468c>)
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	4b43      	ldr	r3, [pc, #268]	; (8005d80 <LEDHandler+0x4690>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b43      	ldr	r3, [pc, #268]	; (8005d84 <LEDHandler+0x4694>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	f001 fbc2 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8005c80:	4b3e      	ldr	r3, [pc, #248]	; (8005d7c <LEDHandler+0x468c>)
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	4b3e      	ldr	r3, [pc, #248]	; (8005d80 <LEDHandler+0x4690>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <LEDHandler+0x4694>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2002      	movs	r0, #2
 8005c8e:	f001 fbb9 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8005c92:	4b3a      	ldr	r3, [pc, #232]	; (8005d7c <LEDHandler+0x468c>)
 8005c94:	6819      	ldr	r1, [r3, #0]
 8005c96:	4b3a      	ldr	r3, [pc, #232]	; (8005d80 <LEDHandler+0x4690>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b3a      	ldr	r3, [pc, #232]	; (8005d84 <LEDHandler+0x4694>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2003      	movs	r0, #3
 8005ca0:	f001 fbb0 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8005ca4:	4b35      	ldr	r3, [pc, #212]	; (8005d7c <LEDHandler+0x468c>)
 8005ca6:	6819      	ldr	r1, [r3, #0]
 8005ca8:	4b35      	ldr	r3, [pc, #212]	; (8005d80 <LEDHandler+0x4690>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4b35      	ldr	r3, [pc, #212]	; (8005d84 <LEDHandler+0x4694>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2004      	movs	r0, #4
 8005cb2:	f001 fba7 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8005cb6:	4b31      	ldr	r3, [pc, #196]	; (8005d7c <LEDHandler+0x468c>)
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	4b31      	ldr	r3, [pc, #196]	; (8005d80 <LEDHandler+0x4690>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <LEDHandler+0x4694>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2005      	movs	r0, #5
 8005cc4:	f001 fb9e 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8005cc8:	4b2c      	ldr	r3, [pc, #176]	; (8005d7c <LEDHandler+0x468c>)
 8005cca:	6819      	ldr	r1, [r3, #0]
 8005ccc:	4b2c      	ldr	r3, [pc, #176]	; (8005d80 <LEDHandler+0x4690>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b2c      	ldr	r3, [pc, #176]	; (8005d84 <LEDHandler+0x4694>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2006      	movs	r0, #6
 8005cd6:	f001 fb95 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8005cda:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <LEDHandler+0x468c>)
 8005cdc:	6819      	ldr	r1, [r3, #0]
 8005cde:	4b28      	ldr	r3, [pc, #160]	; (8005d80 <LEDHandler+0x4690>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <LEDHandler+0x4694>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2007      	movs	r0, #7
 8005ce8:	f001 fb8c 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8005cec:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <LEDHandler+0x468c>)
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <LEDHandler+0x4690>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4b23      	ldr	r3, [pc, #140]	; (8005d84 <LEDHandler+0x4694>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2008      	movs	r0, #8
 8005cfa:	f001 fb83 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <LEDHandler+0x468c>)
 8005d00:	6819      	ldr	r1, [r3, #0]
 8005d02:	4b1f      	ldr	r3, [pc, #124]	; (8005d80 <LEDHandler+0x4690>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b1f      	ldr	r3, [pc, #124]	; (8005d84 <LEDHandler+0x4694>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2009      	movs	r0, #9
 8005d0c:	f001 fb7a 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <LEDHandler+0x468c>)
 8005d12:	6819      	ldr	r1, [r3, #0]
 8005d14:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <LEDHandler+0x4690>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <LEDHandler+0x4694>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	200a      	movs	r0, #10
 8005d1e:	f001 fb71 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <LEDHandler+0x468c>)
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <LEDHandler+0x4690>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <LEDHandler+0x4694>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	200b      	movs	r0, #11
 8005d30:	f001 fb68 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8005d34:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <LEDHandler+0x468c>)
 8005d36:	6819      	ldr	r1, [r3, #0]
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <LEDHandler+0x4690>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <LEDHandler+0x4694>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	200c      	movs	r0, #12
 8005d42:	f001 fb5f 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8005d46:	2300      	movs	r3, #0
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	200d      	movs	r0, #13
 8005d4e:	f001 fb59 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8005d52:	2300      	movs	r3, #0
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	200e      	movs	r0, #14
 8005d5a:	f001 fb53 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2200      	movs	r2, #0
 8005d62:	2100      	movs	r1, #0
 8005d64:	200f      	movs	r0, #15
 8005d66:	f001 fb4d 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	2010      	movs	r0, #16
 8005d72:	f001 fb47 	bl	8007404 <Set_LED>
 8005d76:	f001 ba90 	b.w	800729a <LEDHandler+0x5baa>
 8005d7a:	bf00      	nop
 8005d7c:	20000008 	.word	0x20000008
 8005d80:	2000000c 	.word	0x2000000c
 8005d84:	20000010 	.word	0x20000010

		} else if (Valor >= 78 && Valor < 84) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b4d      	cmp	r3, #77	; 0x4d
 8005d8c:	f340 8096 	ble.w	8005ebc <LEDHandler+0x47cc>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b53      	cmp	r3, #83	; 0x53
 8005d94:	f300 8092 	bgt.w	8005ebc <LEDHandler+0x47cc>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8005d98:	4b97      	ldr	r3, [pc, #604]	; (8005ff8 <LEDHandler+0x4908>)
 8005d9a:	6819      	ldr	r1, [r3, #0]
 8005d9c:	4b97      	ldr	r3, [pc, #604]	; (8005ffc <LEDHandler+0x490c>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b97      	ldr	r3, [pc, #604]	; (8006000 <LEDHandler+0x4910>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2000      	movs	r0, #0
 8005da6:	f001 fb2d 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8005daa:	4b93      	ldr	r3, [pc, #588]	; (8005ff8 <LEDHandler+0x4908>)
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	4b93      	ldr	r3, [pc, #588]	; (8005ffc <LEDHandler+0x490c>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b93      	ldr	r3, [pc, #588]	; (8006000 <LEDHandler+0x4910>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2001      	movs	r0, #1
 8005db8:	f001 fb24 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8005dbc:	4b8e      	ldr	r3, [pc, #568]	; (8005ff8 <LEDHandler+0x4908>)
 8005dbe:	6819      	ldr	r1, [r3, #0]
 8005dc0:	4b8e      	ldr	r3, [pc, #568]	; (8005ffc <LEDHandler+0x490c>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b8e      	ldr	r3, [pc, #568]	; (8006000 <LEDHandler+0x4910>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2002      	movs	r0, #2
 8005dca:	f001 fb1b 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8005dce:	4b8a      	ldr	r3, [pc, #552]	; (8005ff8 <LEDHandler+0x4908>)
 8005dd0:	6819      	ldr	r1, [r3, #0]
 8005dd2:	4b8a      	ldr	r3, [pc, #552]	; (8005ffc <LEDHandler+0x490c>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b8a      	ldr	r3, [pc, #552]	; (8006000 <LEDHandler+0x4910>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2003      	movs	r0, #3
 8005ddc:	f001 fb12 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8005de0:	4b85      	ldr	r3, [pc, #532]	; (8005ff8 <LEDHandler+0x4908>)
 8005de2:	6819      	ldr	r1, [r3, #0]
 8005de4:	4b85      	ldr	r3, [pc, #532]	; (8005ffc <LEDHandler+0x490c>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b85      	ldr	r3, [pc, #532]	; (8006000 <LEDHandler+0x4910>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2004      	movs	r0, #4
 8005dee:	f001 fb09 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8005df2:	4b81      	ldr	r3, [pc, #516]	; (8005ff8 <LEDHandler+0x4908>)
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	4b81      	ldr	r3, [pc, #516]	; (8005ffc <LEDHandler+0x490c>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b81      	ldr	r3, [pc, #516]	; (8006000 <LEDHandler+0x4910>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2005      	movs	r0, #5
 8005e00:	f001 fb00 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8005e04:	4b7c      	ldr	r3, [pc, #496]	; (8005ff8 <LEDHandler+0x4908>)
 8005e06:	6819      	ldr	r1, [r3, #0]
 8005e08:	4b7c      	ldr	r3, [pc, #496]	; (8005ffc <LEDHandler+0x490c>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b7c      	ldr	r3, [pc, #496]	; (8006000 <LEDHandler+0x4910>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2006      	movs	r0, #6
 8005e12:	f001 faf7 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8005e16:	4b78      	ldr	r3, [pc, #480]	; (8005ff8 <LEDHandler+0x4908>)
 8005e18:	6819      	ldr	r1, [r3, #0]
 8005e1a:	4b78      	ldr	r3, [pc, #480]	; (8005ffc <LEDHandler+0x490c>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b78      	ldr	r3, [pc, #480]	; (8006000 <LEDHandler+0x4910>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2007      	movs	r0, #7
 8005e24:	f001 faee 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8005e28:	4b73      	ldr	r3, [pc, #460]	; (8005ff8 <LEDHandler+0x4908>)
 8005e2a:	6819      	ldr	r1, [r3, #0]
 8005e2c:	4b73      	ldr	r3, [pc, #460]	; (8005ffc <LEDHandler+0x490c>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4b73      	ldr	r3, [pc, #460]	; (8006000 <LEDHandler+0x4910>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2008      	movs	r0, #8
 8005e36:	f001 fae5 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8005e3a:	4b6f      	ldr	r3, [pc, #444]	; (8005ff8 <LEDHandler+0x4908>)
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	4b6f      	ldr	r3, [pc, #444]	; (8005ffc <LEDHandler+0x490c>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b6f      	ldr	r3, [pc, #444]	; (8006000 <LEDHandler+0x4910>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2009      	movs	r0, #9
 8005e48:	f001 fadc 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8005e4c:	4b6a      	ldr	r3, [pc, #424]	; (8005ff8 <LEDHandler+0x4908>)
 8005e4e:	6819      	ldr	r1, [r3, #0]
 8005e50:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <LEDHandler+0x490c>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b6a      	ldr	r3, [pc, #424]	; (8006000 <LEDHandler+0x4910>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	200a      	movs	r0, #10
 8005e5a:	f001 fad3 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8005e5e:	4b66      	ldr	r3, [pc, #408]	; (8005ff8 <LEDHandler+0x4908>)
 8005e60:	6819      	ldr	r1, [r3, #0]
 8005e62:	4b66      	ldr	r3, [pc, #408]	; (8005ffc <LEDHandler+0x490c>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b66      	ldr	r3, [pc, #408]	; (8006000 <LEDHandler+0x4910>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	200b      	movs	r0, #11
 8005e6c:	f001 faca 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8005e70:	4b61      	ldr	r3, [pc, #388]	; (8005ff8 <LEDHandler+0x4908>)
 8005e72:	6819      	ldr	r1, [r3, #0]
 8005e74:	4b61      	ldr	r3, [pc, #388]	; (8005ffc <LEDHandler+0x490c>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4b61      	ldr	r3, [pc, #388]	; (8006000 <LEDHandler+0x4910>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	200c      	movs	r0, #12
 8005e7e:	f001 fac1 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 8005e82:	4b5d      	ldr	r3, [pc, #372]	; (8005ff8 <LEDHandler+0x4908>)
 8005e84:	6819      	ldr	r1, [r3, #0]
 8005e86:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <LEDHandler+0x490c>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b5d      	ldr	r3, [pc, #372]	; (8006000 <LEDHandler+0x4910>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	200d      	movs	r0, #13
 8005e90:	f001 fab8 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8005e94:	2300      	movs	r3, #0
 8005e96:	2200      	movs	r2, #0
 8005e98:	2100      	movs	r1, #0
 8005e9a:	200e      	movs	r0, #14
 8005e9c:	f001 fab2 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	200f      	movs	r0, #15
 8005ea8:	f001 faac 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005eac:	2300      	movs	r3, #0
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	2010      	movs	r0, #16
 8005eb4:	f001 faa6 	bl	8007404 <Set_LED>
 8005eb8:	f001 b9ef 	b.w	800729a <LEDHandler+0x5baa>

		} else if (Valor >= 84 && Valor < 90) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b53      	cmp	r3, #83	; 0x53
 8005ec0:	f340 80a0 	ble.w	8006004 <LEDHandler+0x4914>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b59      	cmp	r3, #89	; 0x59
 8005ec8:	f300 809c 	bgt.w	8006004 <LEDHandler+0x4914>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8005ecc:	4b4a      	ldr	r3, [pc, #296]	; (8005ff8 <LEDHandler+0x4908>)
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	4b4a      	ldr	r3, [pc, #296]	; (8005ffc <LEDHandler+0x490c>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	4b4a      	ldr	r3, [pc, #296]	; (8006000 <LEDHandler+0x4910>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2000      	movs	r0, #0
 8005eda:	f001 fa93 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8005ede:	4b46      	ldr	r3, [pc, #280]	; (8005ff8 <LEDHandler+0x4908>)
 8005ee0:	6819      	ldr	r1, [r3, #0]
 8005ee2:	4b46      	ldr	r3, [pc, #280]	; (8005ffc <LEDHandler+0x490c>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b46      	ldr	r3, [pc, #280]	; (8006000 <LEDHandler+0x4910>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2001      	movs	r0, #1
 8005eec:	f001 fa8a 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8005ef0:	4b41      	ldr	r3, [pc, #260]	; (8005ff8 <LEDHandler+0x4908>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	4b41      	ldr	r3, [pc, #260]	; (8005ffc <LEDHandler+0x490c>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b41      	ldr	r3, [pc, #260]	; (8006000 <LEDHandler+0x4910>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2002      	movs	r0, #2
 8005efe:	f001 fa81 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8005f02:	4b3d      	ldr	r3, [pc, #244]	; (8005ff8 <LEDHandler+0x4908>)
 8005f04:	6819      	ldr	r1, [r3, #0]
 8005f06:	4b3d      	ldr	r3, [pc, #244]	; (8005ffc <LEDHandler+0x490c>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b3d      	ldr	r3, [pc, #244]	; (8006000 <LEDHandler+0x4910>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2003      	movs	r0, #3
 8005f10:	f001 fa78 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 8005f14:	4b38      	ldr	r3, [pc, #224]	; (8005ff8 <LEDHandler+0x4908>)
 8005f16:	6819      	ldr	r1, [r3, #0]
 8005f18:	4b38      	ldr	r3, [pc, #224]	; (8005ffc <LEDHandler+0x490c>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b38      	ldr	r3, [pc, #224]	; (8006000 <LEDHandler+0x4910>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2004      	movs	r0, #4
 8005f22:	f001 fa6f 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <LEDHandler+0x4908>)
 8005f28:	6819      	ldr	r1, [r3, #0]
 8005f2a:	4b34      	ldr	r3, [pc, #208]	; (8005ffc <LEDHandler+0x490c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b34      	ldr	r3, [pc, #208]	; (8006000 <LEDHandler+0x4910>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2005      	movs	r0, #5
 8005f34:	f001 fa66 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8005f38:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <LEDHandler+0x4908>)
 8005f3a:	6819      	ldr	r1, [r3, #0]
 8005f3c:	4b2f      	ldr	r3, [pc, #188]	; (8005ffc <LEDHandler+0x490c>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b2f      	ldr	r3, [pc, #188]	; (8006000 <LEDHandler+0x4910>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2006      	movs	r0, #6
 8005f46:	f001 fa5d 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8005f4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <LEDHandler+0x4908>)
 8005f4c:	6819      	ldr	r1, [r3, #0]
 8005f4e:	4b2b      	ldr	r3, [pc, #172]	; (8005ffc <LEDHandler+0x490c>)
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <LEDHandler+0x4910>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2007      	movs	r0, #7
 8005f58:	f001 fa54 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 8005f5c:	4b26      	ldr	r3, [pc, #152]	; (8005ff8 <LEDHandler+0x4908>)
 8005f5e:	6819      	ldr	r1, [r3, #0]
 8005f60:	4b26      	ldr	r3, [pc, #152]	; (8005ffc <LEDHandler+0x490c>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4b26      	ldr	r3, [pc, #152]	; (8006000 <LEDHandler+0x4910>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2008      	movs	r0, #8
 8005f6a:	f001 fa4b 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8005f6e:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <LEDHandler+0x4908>)
 8005f70:	6819      	ldr	r1, [r3, #0]
 8005f72:	4b22      	ldr	r3, [pc, #136]	; (8005ffc <LEDHandler+0x490c>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b22      	ldr	r3, [pc, #136]	; (8006000 <LEDHandler+0x4910>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2009      	movs	r0, #9
 8005f7c:	f001 fa42 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <LEDHandler+0x4908>)
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <LEDHandler+0x490c>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <LEDHandler+0x4910>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	200a      	movs	r0, #10
 8005f8e:	f001 fa39 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8005f92:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <LEDHandler+0x4908>)
 8005f94:	6819      	ldr	r1, [r3, #0]
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <LEDHandler+0x490c>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b19      	ldr	r3, [pc, #100]	; (8006000 <LEDHandler+0x4910>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	200b      	movs	r0, #11
 8005fa0:	f001 fa30 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8005fa4:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <LEDHandler+0x4908>)
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <LEDHandler+0x490c>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b14      	ldr	r3, [pc, #80]	; (8006000 <LEDHandler+0x4910>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	200c      	movs	r0, #12
 8005fb2:	f001 fa27 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 8005fb6:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <LEDHandler+0x4908>)
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <LEDHandler+0x490c>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <LEDHandler+0x4910>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	200d      	movs	r0, #13
 8005fc4:	f001 fa1e 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <LEDHandler+0x4908>)
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <LEDHandler+0x490c>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <LEDHandler+0x4910>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	200e      	movs	r0, #14
 8005fd6:	f001 fa15 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2100      	movs	r1, #0
 8005fe0:	200f      	movs	r0, #15
 8005fe2:	f001 fa0f 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2100      	movs	r1, #0
 8005fec:	2010      	movs	r0, #16
 8005fee:	f001 fa09 	bl	8007404 <Set_LED>
 8005ff2:	f001 b952 	b.w	800729a <LEDHandler+0x5baa>
 8005ff6:	bf00      	nop
 8005ff8:	20000008 	.word	0x20000008
 8005ffc:	2000000c 	.word	0x2000000c
 8006000:	20000010 	.word	0x20000010

		} else if (Valor >= 90 && Valor < 96) {
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b59      	cmp	r3, #89	; 0x59
 8006008:	f340 80a2 	ble.w	8006150 <LEDHandler+0x4a60>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b5f      	cmp	r3, #95	; 0x5f
 8006010:	f300 809e 	bgt.w	8006150 <LEDHandler+0x4a60>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8006014:	4b4b      	ldr	r3, [pc, #300]	; (8006144 <LEDHandler+0x4a54>)
 8006016:	6819      	ldr	r1, [r3, #0]
 8006018:	4b4b      	ldr	r3, [pc, #300]	; (8006148 <LEDHandler+0x4a58>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b4b      	ldr	r3, [pc, #300]	; (800614c <LEDHandler+0x4a5c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2000      	movs	r0, #0
 8006022:	f001 f9ef 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8006026:	4b47      	ldr	r3, [pc, #284]	; (8006144 <LEDHandler+0x4a54>)
 8006028:	6819      	ldr	r1, [r3, #0]
 800602a:	4b47      	ldr	r3, [pc, #284]	; (8006148 <LEDHandler+0x4a58>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b47      	ldr	r3, [pc, #284]	; (800614c <LEDHandler+0x4a5c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2001      	movs	r0, #1
 8006034:	f001 f9e6 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8006038:	4b42      	ldr	r3, [pc, #264]	; (8006144 <LEDHandler+0x4a54>)
 800603a:	6819      	ldr	r1, [r3, #0]
 800603c:	4b42      	ldr	r3, [pc, #264]	; (8006148 <LEDHandler+0x4a58>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4b42      	ldr	r3, [pc, #264]	; (800614c <LEDHandler+0x4a5c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2002      	movs	r0, #2
 8006046:	f001 f9dd 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 800604a:	4b3e      	ldr	r3, [pc, #248]	; (8006144 <LEDHandler+0x4a54>)
 800604c:	6819      	ldr	r1, [r3, #0]
 800604e:	4b3e      	ldr	r3, [pc, #248]	; (8006148 <LEDHandler+0x4a58>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b3e      	ldr	r3, [pc, #248]	; (800614c <LEDHandler+0x4a5c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2003      	movs	r0, #3
 8006058:	f001 f9d4 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 800605c:	4b39      	ldr	r3, [pc, #228]	; (8006144 <LEDHandler+0x4a54>)
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	4b39      	ldr	r3, [pc, #228]	; (8006148 <LEDHandler+0x4a58>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b39      	ldr	r3, [pc, #228]	; (800614c <LEDHandler+0x4a5c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2004      	movs	r0, #4
 800606a:	f001 f9cb 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 800606e:	4b35      	ldr	r3, [pc, #212]	; (8006144 <LEDHandler+0x4a54>)
 8006070:	6819      	ldr	r1, [r3, #0]
 8006072:	4b35      	ldr	r3, [pc, #212]	; (8006148 <LEDHandler+0x4a58>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b35      	ldr	r3, [pc, #212]	; (800614c <LEDHandler+0x4a5c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2005      	movs	r0, #5
 800607c:	f001 f9c2 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 8006080:	4b30      	ldr	r3, [pc, #192]	; (8006144 <LEDHandler+0x4a54>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	4b30      	ldr	r3, [pc, #192]	; (8006148 <LEDHandler+0x4a58>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b30      	ldr	r3, [pc, #192]	; (800614c <LEDHandler+0x4a5c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2006      	movs	r0, #6
 800608e:	f001 f9b9 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 8006092:	4b2c      	ldr	r3, [pc, #176]	; (8006144 <LEDHandler+0x4a54>)
 8006094:	6819      	ldr	r1, [r3, #0]
 8006096:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <LEDHandler+0x4a58>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b2c      	ldr	r3, [pc, #176]	; (800614c <LEDHandler+0x4a5c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2007      	movs	r0, #7
 80060a0:	f001 f9b0 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 80060a4:	4b27      	ldr	r3, [pc, #156]	; (8006144 <LEDHandler+0x4a54>)
 80060a6:	6819      	ldr	r1, [r3, #0]
 80060a8:	4b27      	ldr	r3, [pc, #156]	; (8006148 <LEDHandler+0x4a58>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b27      	ldr	r3, [pc, #156]	; (800614c <LEDHandler+0x4a5c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2008      	movs	r0, #8
 80060b2:	f001 f9a7 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 80060b6:	4b23      	ldr	r3, [pc, #140]	; (8006144 <LEDHandler+0x4a54>)
 80060b8:	6819      	ldr	r1, [r3, #0]
 80060ba:	4b23      	ldr	r3, [pc, #140]	; (8006148 <LEDHandler+0x4a58>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b23      	ldr	r3, [pc, #140]	; (800614c <LEDHandler+0x4a5c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2009      	movs	r0, #9
 80060c4:	f001 f99e 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 80060c8:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <LEDHandler+0x4a54>)
 80060ca:	6819      	ldr	r1, [r3, #0]
 80060cc:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <LEDHandler+0x4a58>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b1e      	ldr	r3, [pc, #120]	; (800614c <LEDHandler+0x4a5c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	200a      	movs	r0, #10
 80060d6:	f001 f995 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 80060da:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <LEDHandler+0x4a54>)
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <LEDHandler+0x4a58>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b1a      	ldr	r3, [pc, #104]	; (800614c <LEDHandler+0x4a5c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	200b      	movs	r0, #11
 80060e8:	f001 f98c 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 80060ec:	4b15      	ldr	r3, [pc, #84]	; (8006144 <LEDHandler+0x4a54>)
 80060ee:	6819      	ldr	r1, [r3, #0]
 80060f0:	4b15      	ldr	r3, [pc, #84]	; (8006148 <LEDHandler+0x4a58>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4b15      	ldr	r3, [pc, #84]	; (800614c <LEDHandler+0x4a5c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	200c      	movs	r0, #12
 80060fa:	f001 f983 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <LEDHandler+0x4a54>)
 8006100:	6819      	ldr	r1, [r3, #0]
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <LEDHandler+0x4a58>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <LEDHandler+0x4a5c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	200d      	movs	r0, #13
 800610c:	f001 f97a 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <LEDHandler+0x4a54>)
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <LEDHandler+0x4a58>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <LEDHandler+0x4a5c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	200e      	movs	r0, #14
 800611e:	f001 f971 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	Red	,	Green	, 	Blue	)	;		//LED16
 8006122:	4b08      	ldr	r3, [pc, #32]	; (8006144 <LEDHandler+0x4a54>)
 8006124:	6819      	ldr	r1, [r3, #0]
 8006126:	4b08      	ldr	r3, [pc, #32]	; (8006148 <LEDHandler+0x4a58>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b08      	ldr	r3, [pc, #32]	; (800614c <LEDHandler+0x4a5c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	200f      	movs	r0, #15
 8006130:	f001 f968 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006134:	2300      	movs	r3, #0
 8006136:	2200      	movs	r2, #0
 8006138:	2100      	movs	r1, #0
 800613a:	2010      	movs	r0, #16
 800613c:	f001 f962 	bl	8007404 <Set_LED>
 8006140:	f001 b8ab 	b.w	800729a <LEDHandler+0x5baa>
 8006144:	20000008 	.word	0x20000008
 8006148:	2000000c 	.word	0x2000000c
 800614c:	20000010 	.word	0x20000010

		} else if (Valor >= 96 && Valor < 101) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b5f      	cmp	r3, #95	; 0x5f
 8006154:	f341 80a1 	ble.w	800729a <LEDHandler+0x5baa>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b64      	cmp	r3, #100	; 0x64
 800615c:	f301 809d 	bgt.w	800729a <LEDHandler+0x5baa>

			Set_LED	(	0	,	Red	,	Green	, 	Blue	)	;		//LED1
 8006160:	4bbc      	ldr	r3, [pc, #752]	; (8006454 <LEDHandler+0x4d64>)
 8006162:	6819      	ldr	r1, [r3, #0]
 8006164:	4bbc      	ldr	r3, [pc, #752]	; (8006458 <LEDHandler+0x4d68>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4bbc      	ldr	r3, [pc, #752]	; (800645c <LEDHandler+0x4d6c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2000      	movs	r0, #0
 800616e:	f001 f949 	bl	8007404 <Set_LED>
			Set_LED	(	1	,	Red	,	Green	, 	Blue	)	;		//LED2
 8006172:	4bb8      	ldr	r3, [pc, #736]	; (8006454 <LEDHandler+0x4d64>)
 8006174:	6819      	ldr	r1, [r3, #0]
 8006176:	4bb8      	ldr	r3, [pc, #736]	; (8006458 <LEDHandler+0x4d68>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4bb8      	ldr	r3, [pc, #736]	; (800645c <LEDHandler+0x4d6c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2001      	movs	r0, #1
 8006180:	f001 f940 	bl	8007404 <Set_LED>
			Set_LED	(	2	,	Red	,	Green	, 	Blue	)	;		//LED3
 8006184:	4bb3      	ldr	r3, [pc, #716]	; (8006454 <LEDHandler+0x4d64>)
 8006186:	6819      	ldr	r1, [r3, #0]
 8006188:	4bb3      	ldr	r3, [pc, #716]	; (8006458 <LEDHandler+0x4d68>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4bb3      	ldr	r3, [pc, #716]	; (800645c <LEDHandler+0x4d6c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2002      	movs	r0, #2
 8006192:	f001 f937 	bl	8007404 <Set_LED>
			Set_LED	(	3	,	Red	,	Green	, 	Blue	)	;		//LED4
 8006196:	4baf      	ldr	r3, [pc, #700]	; (8006454 <LEDHandler+0x4d64>)
 8006198:	6819      	ldr	r1, [r3, #0]
 800619a:	4baf      	ldr	r3, [pc, #700]	; (8006458 <LEDHandler+0x4d68>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4baf      	ldr	r3, [pc, #700]	; (800645c <LEDHandler+0x4d6c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2003      	movs	r0, #3
 80061a4:	f001 f92e 	bl	8007404 <Set_LED>
			Set_LED	(	4	,	Red	,	Green	, 	Blue	)	;		//LED5
 80061a8:	4baa      	ldr	r3, [pc, #680]	; (8006454 <LEDHandler+0x4d64>)
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	4baa      	ldr	r3, [pc, #680]	; (8006458 <LEDHandler+0x4d68>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4baa      	ldr	r3, [pc, #680]	; (800645c <LEDHandler+0x4d6c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2004      	movs	r0, #4
 80061b6:	f001 f925 	bl	8007404 <Set_LED>
			Set_LED	(	5	,	Red	,	Green	, 	Blue	)	;		//LED6
 80061ba:	4ba6      	ldr	r3, [pc, #664]	; (8006454 <LEDHandler+0x4d64>)
 80061bc:	6819      	ldr	r1, [r3, #0]
 80061be:	4ba6      	ldr	r3, [pc, #664]	; (8006458 <LEDHandler+0x4d68>)
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4ba6      	ldr	r3, [pc, #664]	; (800645c <LEDHandler+0x4d6c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2005      	movs	r0, #5
 80061c8:	f001 f91c 	bl	8007404 <Set_LED>
			Set_LED	(	6	,	Red	,	Green	, 	Blue	)	;		//LED7
 80061cc:	4ba1      	ldr	r3, [pc, #644]	; (8006454 <LEDHandler+0x4d64>)
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	4ba1      	ldr	r3, [pc, #644]	; (8006458 <LEDHandler+0x4d68>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4ba1      	ldr	r3, [pc, #644]	; (800645c <LEDHandler+0x4d6c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2006      	movs	r0, #6
 80061da:	f001 f913 	bl	8007404 <Set_LED>
			Set_LED	(	7	,	Red	,	Green	, 	Blue	)	;		//LED8
 80061de:	4b9d      	ldr	r3, [pc, #628]	; (8006454 <LEDHandler+0x4d64>)
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	4b9d      	ldr	r3, [pc, #628]	; (8006458 <LEDHandler+0x4d68>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b9d      	ldr	r3, [pc, #628]	; (800645c <LEDHandler+0x4d6c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2007      	movs	r0, #7
 80061ec:	f001 f90a 	bl	8007404 <Set_LED>
			Set_LED	(	8	,	Red	,	Green	, 	Blue	)	;		//LED9
 80061f0:	4b98      	ldr	r3, [pc, #608]	; (8006454 <LEDHandler+0x4d64>)
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	4b98      	ldr	r3, [pc, #608]	; (8006458 <LEDHandler+0x4d68>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b98      	ldr	r3, [pc, #608]	; (800645c <LEDHandler+0x4d6c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2008      	movs	r0, #8
 80061fe:	f001 f901 	bl	8007404 <Set_LED>
			Set_LED	(	9	,	Red	,	Green	, 	Blue	)	;		//LED10
 8006202:	4b94      	ldr	r3, [pc, #592]	; (8006454 <LEDHandler+0x4d64>)
 8006204:	6819      	ldr	r1, [r3, #0]
 8006206:	4b94      	ldr	r3, [pc, #592]	; (8006458 <LEDHandler+0x4d68>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b94      	ldr	r3, [pc, #592]	; (800645c <LEDHandler+0x4d6c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2009      	movs	r0, #9
 8006210:	f001 f8f8 	bl	8007404 <Set_LED>
			Set_LED	(	10	,	Red	,	Green	, 	Blue	)	;		//LED11
 8006214:	4b8f      	ldr	r3, [pc, #572]	; (8006454 <LEDHandler+0x4d64>)
 8006216:	6819      	ldr	r1, [r3, #0]
 8006218:	4b8f      	ldr	r3, [pc, #572]	; (8006458 <LEDHandler+0x4d68>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4b8f      	ldr	r3, [pc, #572]	; (800645c <LEDHandler+0x4d6c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	200a      	movs	r0, #10
 8006222:	f001 f8ef 	bl	8007404 <Set_LED>
			Set_LED	(	11	,	Red	,	Green	, 	Blue	)	;		//LED12
 8006226:	4b8b      	ldr	r3, [pc, #556]	; (8006454 <LEDHandler+0x4d64>)
 8006228:	6819      	ldr	r1, [r3, #0]
 800622a:	4b8b      	ldr	r3, [pc, #556]	; (8006458 <LEDHandler+0x4d68>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b8b      	ldr	r3, [pc, #556]	; (800645c <LEDHandler+0x4d6c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	200b      	movs	r0, #11
 8006234:	f001 f8e6 	bl	8007404 <Set_LED>
			Set_LED	(	12	,	Red	,	Green	, 	Blue	)	;		//LED13
 8006238:	4b86      	ldr	r3, [pc, #536]	; (8006454 <LEDHandler+0x4d64>)
 800623a:	6819      	ldr	r1, [r3, #0]
 800623c:	4b86      	ldr	r3, [pc, #536]	; (8006458 <LEDHandler+0x4d68>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b86      	ldr	r3, [pc, #536]	; (800645c <LEDHandler+0x4d6c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	200c      	movs	r0, #12
 8006246:	f001 f8dd 	bl	8007404 <Set_LED>
			Set_LED	(	13	,	Red	,	Green	, 	Blue	)	;		//LED14
 800624a:	4b82      	ldr	r3, [pc, #520]	; (8006454 <LEDHandler+0x4d64>)
 800624c:	6819      	ldr	r1, [r3, #0]
 800624e:	4b82      	ldr	r3, [pc, #520]	; (8006458 <LEDHandler+0x4d68>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b82      	ldr	r3, [pc, #520]	; (800645c <LEDHandler+0x4d6c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	200d      	movs	r0, #13
 8006258:	f001 f8d4 	bl	8007404 <Set_LED>
			Set_LED	(	14	,	Red	,	Green	, 	Blue	)	;		//LED15
 800625c:	4b7d      	ldr	r3, [pc, #500]	; (8006454 <LEDHandler+0x4d64>)
 800625e:	6819      	ldr	r1, [r3, #0]
 8006260:	4b7d      	ldr	r3, [pc, #500]	; (8006458 <LEDHandler+0x4d68>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b7d      	ldr	r3, [pc, #500]	; (800645c <LEDHandler+0x4d6c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	200e      	movs	r0, #14
 800626a:	f001 f8cb 	bl	8007404 <Set_LED>
			Set_LED	(	15	,	Red	,	Green	, 	Blue	)	;		//LED16
 800626e:	4b79      	ldr	r3, [pc, #484]	; (8006454 <LEDHandler+0x4d64>)
 8006270:	6819      	ldr	r1, [r3, #0]
 8006272:	4b79      	ldr	r3, [pc, #484]	; (8006458 <LEDHandler+0x4d68>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	4b79      	ldr	r3, [pc, #484]	; (800645c <LEDHandler+0x4d6c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	200f      	movs	r0, #15
 800627c:	f001 f8c2 	bl	8007404 <Set_LED>
			Set_LED	(	16	,	Red	,	Green	, 	Blue	)	;		//LED17
 8006280:	4b74      	ldr	r3, [pc, #464]	; (8006454 <LEDHandler+0x4d64>)
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	4b74      	ldr	r3, [pc, #464]	; (8006458 <LEDHandler+0x4d68>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4b74      	ldr	r3, [pc, #464]	; (800645c <LEDHandler+0x4d6c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2010      	movs	r0, #16
 800628e:	f001 f8b9 	bl	8007404 <Set_LED>
 8006292:	f001 b802 	b.w	800729a <LEDHandler+0x5baa>
		}


	}else {

	if (var1 == 0) {
 8006296:	4b72      	ldr	r3, [pc, #456]	; (8006460 <LEDHandler+0x4d70>)
 8006298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d167      	bne.n	8006370 <LEDHandler+0x4c80>

		Set_LED	(	0	,	0	,	0	, 	0	)	;		//LED1
 80062a0:	2300      	movs	r3, #0
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	2000      	movs	r0, #0
 80062a8:	f001 f8ac 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	0	,	0	, 	0	)	;		//LED2
 80062ac:	2300      	movs	r3, #0
 80062ae:	2200      	movs	r2, #0
 80062b0:	2100      	movs	r1, #0
 80062b2:	2001      	movs	r0, #1
 80062b4:	f001 f8a6 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 80062b8:	2300      	movs	r3, #0
 80062ba:	2200      	movs	r2, #0
 80062bc:	2100      	movs	r1, #0
 80062be:	2002      	movs	r0, #2
 80062c0:	f001 f8a0 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 80062c4:	2300      	movs	r3, #0
 80062c6:	2200      	movs	r2, #0
 80062c8:	2100      	movs	r1, #0
 80062ca:	2003      	movs	r0, #3
 80062cc:	f001 f89a 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80062d0:	2300      	movs	r3, #0
 80062d2:	2200      	movs	r2, #0
 80062d4:	2100      	movs	r1, #0
 80062d6:	2004      	movs	r0, #4
 80062d8:	f001 f894 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 80062dc:	2300      	movs	r3, #0
 80062de:	2200      	movs	r2, #0
 80062e0:	2100      	movs	r1, #0
 80062e2:	2005      	movs	r0, #5
 80062e4:	f001 f88e 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 80062e8:	2300      	movs	r3, #0
 80062ea:	2200      	movs	r2, #0
 80062ec:	2100      	movs	r1, #0
 80062ee:	2006      	movs	r0, #6
 80062f0:	f001 f888 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 80062f4:	2300      	movs	r3, #0
 80062f6:	2200      	movs	r2, #0
 80062f8:	2100      	movs	r1, #0
 80062fa:	2007      	movs	r0, #7
 80062fc:	f001 f882 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006300:	2300      	movs	r3, #0
 8006302:	2200      	movs	r2, #0
 8006304:	2100      	movs	r1, #0
 8006306:	2008      	movs	r0, #8
 8006308:	f001 f87c 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 800630c:	2300      	movs	r3, #0
 800630e:	2200      	movs	r2, #0
 8006310:	2100      	movs	r1, #0
 8006312:	2009      	movs	r0, #9
 8006314:	f001 f876 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006318:	2300      	movs	r3, #0
 800631a:	2200      	movs	r2, #0
 800631c:	2100      	movs	r1, #0
 800631e:	200a      	movs	r0, #10
 8006320:	f001 f870 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006324:	2300      	movs	r3, #0
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	200b      	movs	r0, #11
 800632c:	f001 f86a 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006330:	2300      	movs	r3, #0
 8006332:	2200      	movs	r2, #0
 8006334:	2100      	movs	r1, #0
 8006336:	200c      	movs	r0, #12
 8006338:	f001 f864 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 800633c:	2300      	movs	r3, #0
 800633e:	2200      	movs	r2, #0
 8006340:	2100      	movs	r1, #0
 8006342:	200d      	movs	r0, #13
 8006344:	f001 f85e 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006348:	2300      	movs	r3, #0
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	200e      	movs	r0, #14
 8006350:	f001 f858 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006354:	2300      	movs	r3, #0
 8006356:	2200      	movs	r2, #0
 8006358:	2100      	movs	r1, #0
 800635a:	200f      	movs	r0, #15
 800635c:	f001 f852 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006360:	2300      	movs	r3, #0
 8006362:	2200      	movs	r2, #0
 8006364:	2100      	movs	r1, #0
 8006366:	2010      	movs	r0, #16
 8006368:	f001 f84c 	bl	8007404 <Set_LED>
 800636c:	f000 bf95 	b.w	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 1 && var1 < 6) {
 8006370:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <LEDHandler+0x4d70>)
 8006372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd74      	ble.n	8006464 <LEDHandler+0x4d74>
 800637a:	4b39      	ldr	r3, [pc, #228]	; (8006460 <LEDHandler+0x4d70>)
 800637c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006380:	2b05      	cmp	r3, #5
 8006382:	dc6f      	bgt.n	8006464 <LEDHandler+0x4d74>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006384:	23ff      	movs	r3, #255	; 0xff
 8006386:	22ff      	movs	r2, #255	; 0xff
 8006388:	21ff      	movs	r1, #255	; 0xff
 800638a:	2000      	movs	r0, #0
 800638c:	f001 f83a 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	0	,	0	, 	0	)	;		//LED2
 8006390:	2300      	movs	r3, #0
 8006392:	2200      	movs	r2, #0
 8006394:	2100      	movs	r1, #0
 8006396:	2001      	movs	r0, #1
 8006398:	f001 f834 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 800639c:	2300      	movs	r3, #0
 800639e:	2200      	movs	r2, #0
 80063a0:	2100      	movs	r1, #0
 80063a2:	2002      	movs	r0, #2
 80063a4:	f001 f82e 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 80063a8:	2300      	movs	r3, #0
 80063aa:	2200      	movs	r2, #0
 80063ac:	2100      	movs	r1, #0
 80063ae:	2003      	movs	r0, #3
 80063b0:	f001 f828 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80063b4:	2300      	movs	r3, #0
 80063b6:	2200      	movs	r2, #0
 80063b8:	2100      	movs	r1, #0
 80063ba:	2004      	movs	r0, #4
 80063bc:	f001 f822 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 80063c0:	2300      	movs	r3, #0
 80063c2:	2200      	movs	r2, #0
 80063c4:	2100      	movs	r1, #0
 80063c6:	2005      	movs	r0, #5
 80063c8:	f001 f81c 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 80063cc:	2300      	movs	r3, #0
 80063ce:	2200      	movs	r2, #0
 80063d0:	2100      	movs	r1, #0
 80063d2:	2006      	movs	r0, #6
 80063d4:	f001 f816 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 80063d8:	2300      	movs	r3, #0
 80063da:	2200      	movs	r2, #0
 80063dc:	2100      	movs	r1, #0
 80063de:	2007      	movs	r0, #7
 80063e0:	f001 f810 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 80063e4:	2300      	movs	r3, #0
 80063e6:	2200      	movs	r2, #0
 80063e8:	2100      	movs	r1, #0
 80063ea:	2008      	movs	r0, #8
 80063ec:	f001 f80a 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 80063f0:	2300      	movs	r3, #0
 80063f2:	2200      	movs	r2, #0
 80063f4:	2100      	movs	r1, #0
 80063f6:	2009      	movs	r0, #9
 80063f8:	f001 f804 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80063fc:	2300      	movs	r3, #0
 80063fe:	2200      	movs	r2, #0
 8006400:	2100      	movs	r1, #0
 8006402:	200a      	movs	r0, #10
 8006404:	f000 fffe 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006408:	2300      	movs	r3, #0
 800640a:	2200      	movs	r2, #0
 800640c:	2100      	movs	r1, #0
 800640e:	200b      	movs	r0, #11
 8006410:	f000 fff8 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006414:	2300      	movs	r3, #0
 8006416:	2200      	movs	r2, #0
 8006418:	2100      	movs	r1, #0
 800641a:	200c      	movs	r0, #12
 800641c:	f000 fff2 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	2100      	movs	r1, #0
 8006426:	200d      	movs	r0, #13
 8006428:	f000 ffec 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 800642c:	2300      	movs	r3, #0
 800642e:	2200      	movs	r2, #0
 8006430:	2100      	movs	r1, #0
 8006432:	200e      	movs	r0, #14
 8006434:	f000 ffe6 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006438:	2300      	movs	r3, #0
 800643a:	2200      	movs	r2, #0
 800643c:	2100      	movs	r1, #0
 800643e:	200f      	movs	r0, #15
 8006440:	f000 ffe0 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006444:	2300      	movs	r3, #0
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	2010      	movs	r0, #16
 800644c:	f000 ffda 	bl	8007404 <Set_LED>
 8006450:	f000 bf23 	b.w	800729a <LEDHandler+0x5baa>
 8006454:	20000008 	.word	0x20000008
 8006458:	2000000c 	.word	0x2000000c
 800645c:	20000010 	.word	0x20000010
 8006460:	2000031a 	.word	0x2000031a

	} else if (var1 >= 6 && var1 < 12) {
 8006464:	4be3      	ldr	r3, [pc, #908]	; (80067f4 <LEDHandler+0x5104>)
 8006466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646a:	2b05      	cmp	r3, #5
 800646c:	dd6c      	ble.n	8006548 <LEDHandler+0x4e58>
 800646e:	4be1      	ldr	r3, [pc, #900]	; (80067f4 <LEDHandler+0x5104>)
 8006470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006474:	2b0b      	cmp	r3, #11
 8006476:	dc67      	bgt.n	8006548 <LEDHandler+0x4e58>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006478:	23ff      	movs	r3, #255	; 0xff
 800647a:	22ff      	movs	r2, #255	; 0xff
 800647c:	21ff      	movs	r1, #255	; 0xff
 800647e:	2000      	movs	r0, #0
 8006480:	f000 ffc0 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006484:	23ff      	movs	r3, #255	; 0xff
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	21ff      	movs	r1, #255	; 0xff
 800648a:	2001      	movs	r0, #1
 800648c:	f000 ffba 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	0	,	0	, 	0	)	;		//LED3
 8006490:	2300      	movs	r3, #0
 8006492:	2200      	movs	r2, #0
 8006494:	2100      	movs	r1, #0
 8006496:	2002      	movs	r0, #2
 8006498:	f000 ffb4 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 800649c:	2300      	movs	r3, #0
 800649e:	2200      	movs	r2, #0
 80064a0:	2100      	movs	r1, #0
 80064a2:	2003      	movs	r0, #3
 80064a4:	f000 ffae 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 80064a8:	2300      	movs	r3, #0
 80064aa:	2200      	movs	r2, #0
 80064ac:	2100      	movs	r1, #0
 80064ae:	2004      	movs	r0, #4
 80064b0:	f000 ffa8 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 80064b4:	2300      	movs	r3, #0
 80064b6:	2200      	movs	r2, #0
 80064b8:	2100      	movs	r1, #0
 80064ba:	2005      	movs	r0, #5
 80064bc:	f000 ffa2 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 80064c0:	2300      	movs	r3, #0
 80064c2:	2200      	movs	r2, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	2006      	movs	r0, #6
 80064c8:	f000 ff9c 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 80064cc:	2300      	movs	r3, #0
 80064ce:	2200      	movs	r2, #0
 80064d0:	2100      	movs	r1, #0
 80064d2:	2007      	movs	r0, #7
 80064d4:	f000 ff96 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 80064d8:	2300      	movs	r3, #0
 80064da:	2200      	movs	r2, #0
 80064dc:	2100      	movs	r1, #0
 80064de:	2008      	movs	r0, #8
 80064e0:	f000 ff90 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 80064e4:	2300      	movs	r3, #0
 80064e6:	2200      	movs	r2, #0
 80064e8:	2100      	movs	r1, #0
 80064ea:	2009      	movs	r0, #9
 80064ec:	f000 ff8a 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80064f0:	2300      	movs	r3, #0
 80064f2:	2200      	movs	r2, #0
 80064f4:	2100      	movs	r1, #0
 80064f6:	200a      	movs	r0, #10
 80064f8:	f000 ff84 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80064fc:	2300      	movs	r3, #0
 80064fe:	2200      	movs	r2, #0
 8006500:	2100      	movs	r1, #0
 8006502:	200b      	movs	r0, #11
 8006504:	f000 ff7e 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006508:	2300      	movs	r3, #0
 800650a:	2200      	movs	r2, #0
 800650c:	2100      	movs	r1, #0
 800650e:	200c      	movs	r0, #12
 8006510:	f000 ff78 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006514:	2300      	movs	r3, #0
 8006516:	2200      	movs	r2, #0
 8006518:	2100      	movs	r1, #0
 800651a:	200d      	movs	r0, #13
 800651c:	f000 ff72 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006520:	2300      	movs	r3, #0
 8006522:	2200      	movs	r2, #0
 8006524:	2100      	movs	r1, #0
 8006526:	200e      	movs	r0, #14
 8006528:	f000 ff6c 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 800652c:	2300      	movs	r3, #0
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	200f      	movs	r0, #15
 8006534:	f000 ff66 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006538:	2300      	movs	r3, #0
 800653a:	2200      	movs	r2, #0
 800653c:	2100      	movs	r1, #0
 800653e:	2010      	movs	r0, #16
 8006540:	f000 ff60 	bl	8007404 <Set_LED>
 8006544:	f000 bea9 	b.w	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 12 && var1 < 18) {
 8006548:	4baa      	ldr	r3, [pc, #680]	; (80067f4 <LEDHandler+0x5104>)
 800654a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800654e:	2b0b      	cmp	r3, #11
 8006550:	dd6c      	ble.n	800662c <LEDHandler+0x4f3c>
 8006552:	4ba8      	ldr	r3, [pc, #672]	; (80067f4 <LEDHandler+0x5104>)
 8006554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006558:	2b11      	cmp	r3, #17
 800655a:	dc67      	bgt.n	800662c <LEDHandler+0x4f3c>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 800655c:	23ff      	movs	r3, #255	; 0xff
 800655e:	22ff      	movs	r2, #255	; 0xff
 8006560:	21ff      	movs	r1, #255	; 0xff
 8006562:	2000      	movs	r0, #0
 8006564:	f000 ff4e 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006568:	23ff      	movs	r3, #255	; 0xff
 800656a:	22ff      	movs	r2, #255	; 0xff
 800656c:	21ff      	movs	r1, #255	; 0xff
 800656e:	2001      	movs	r0, #1
 8006570:	f000 ff48 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006574:	23ff      	movs	r3, #255	; 0xff
 8006576:	22ff      	movs	r2, #255	; 0xff
 8006578:	21ff      	movs	r1, #255	; 0xff
 800657a:	2002      	movs	r0, #2
 800657c:	f000 ff42 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	0	,	0	, 	0	)	;		//LED4
 8006580:	2300      	movs	r3, #0
 8006582:	2200      	movs	r2, #0
 8006584:	2100      	movs	r1, #0
 8006586:	2003      	movs	r0, #3
 8006588:	f000 ff3c 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 800658c:	2300      	movs	r3, #0
 800658e:	2200      	movs	r2, #0
 8006590:	2100      	movs	r1, #0
 8006592:	2004      	movs	r0, #4
 8006594:	f000 ff36 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8006598:	2300      	movs	r3, #0
 800659a:	2200      	movs	r2, #0
 800659c:	2100      	movs	r1, #0
 800659e:	2005      	movs	r0, #5
 80065a0:	f000 ff30 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 80065a4:	2300      	movs	r3, #0
 80065a6:	2200      	movs	r2, #0
 80065a8:	2100      	movs	r1, #0
 80065aa:	2006      	movs	r0, #6
 80065ac:	f000 ff2a 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 80065b0:	2300      	movs	r3, #0
 80065b2:	2200      	movs	r2, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	2007      	movs	r0, #7
 80065b8:	f000 ff24 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 80065bc:	2300      	movs	r3, #0
 80065be:	2200      	movs	r2, #0
 80065c0:	2100      	movs	r1, #0
 80065c2:	2008      	movs	r0, #8
 80065c4:	f000 ff1e 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 80065c8:	2300      	movs	r3, #0
 80065ca:	2200      	movs	r2, #0
 80065cc:	2100      	movs	r1, #0
 80065ce:	2009      	movs	r0, #9
 80065d0:	f000 ff18 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80065d4:	2300      	movs	r3, #0
 80065d6:	2200      	movs	r2, #0
 80065d8:	2100      	movs	r1, #0
 80065da:	200a      	movs	r0, #10
 80065dc:	f000 ff12 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80065e0:	2300      	movs	r3, #0
 80065e2:	2200      	movs	r2, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	200b      	movs	r0, #11
 80065e8:	f000 ff0c 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 80065ec:	2300      	movs	r3, #0
 80065ee:	2200      	movs	r2, #0
 80065f0:	2100      	movs	r1, #0
 80065f2:	200c      	movs	r0, #12
 80065f4:	f000 ff06 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80065f8:	2300      	movs	r3, #0
 80065fa:	2200      	movs	r2, #0
 80065fc:	2100      	movs	r1, #0
 80065fe:	200d      	movs	r0, #13
 8006600:	f000 ff00 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006604:	2300      	movs	r3, #0
 8006606:	2200      	movs	r2, #0
 8006608:	2100      	movs	r1, #0
 800660a:	200e      	movs	r0, #14
 800660c:	f000 fefa 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006610:	2300      	movs	r3, #0
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	200f      	movs	r0, #15
 8006618:	f000 fef4 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 800661c:	2300      	movs	r3, #0
 800661e:	2200      	movs	r2, #0
 8006620:	2100      	movs	r1, #0
 8006622:	2010      	movs	r0, #16
 8006624:	f000 feee 	bl	8007404 <Set_LED>
 8006628:	f000 be37 	b.w	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 18 && var1 < 24) {
 800662c:	4b71      	ldr	r3, [pc, #452]	; (80067f4 <LEDHandler+0x5104>)
 800662e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006632:	2b11      	cmp	r3, #17
 8006634:	dd6c      	ble.n	8006710 <LEDHandler+0x5020>
 8006636:	4b6f      	ldr	r3, [pc, #444]	; (80067f4 <LEDHandler+0x5104>)
 8006638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800663c:	2b17      	cmp	r3, #23
 800663e:	dc67      	bgt.n	8006710 <LEDHandler+0x5020>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006640:	23ff      	movs	r3, #255	; 0xff
 8006642:	22ff      	movs	r2, #255	; 0xff
 8006644:	21ff      	movs	r1, #255	; 0xff
 8006646:	2000      	movs	r0, #0
 8006648:	f000 fedc 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 800664c:	23ff      	movs	r3, #255	; 0xff
 800664e:	22ff      	movs	r2, #255	; 0xff
 8006650:	21ff      	movs	r1, #255	; 0xff
 8006652:	2001      	movs	r0, #1
 8006654:	f000 fed6 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006658:	23ff      	movs	r3, #255	; 0xff
 800665a:	22ff      	movs	r2, #255	; 0xff
 800665c:	21ff      	movs	r1, #255	; 0xff
 800665e:	2002      	movs	r0, #2
 8006660:	f000 fed0 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006664:	23ff      	movs	r3, #255	; 0xff
 8006666:	22ff      	movs	r2, #255	; 0xff
 8006668:	21ff      	movs	r1, #255	; 0xff
 800666a:	2003      	movs	r0, #3
 800666c:	f000 feca 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	0	,	0	, 	0	)	;		//LED5
 8006670:	2300      	movs	r3, #0
 8006672:	2200      	movs	r2, #0
 8006674:	2100      	movs	r1, #0
 8006676:	2004      	movs	r0, #4
 8006678:	f000 fec4 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 800667c:	2300      	movs	r3, #0
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	2005      	movs	r0, #5
 8006684:	f000 febe 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8006688:	2300      	movs	r3, #0
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	2006      	movs	r0, #6
 8006690:	f000 feb8 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006694:	2300      	movs	r3, #0
 8006696:	2200      	movs	r2, #0
 8006698:	2100      	movs	r1, #0
 800669a:	2007      	movs	r0, #7
 800669c:	f000 feb2 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 80066a0:	2300      	movs	r3, #0
 80066a2:	2200      	movs	r2, #0
 80066a4:	2100      	movs	r1, #0
 80066a6:	2008      	movs	r0, #8
 80066a8:	f000 feac 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 80066ac:	2300      	movs	r3, #0
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	2009      	movs	r0, #9
 80066b4:	f000 fea6 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 80066b8:	2300      	movs	r3, #0
 80066ba:	2200      	movs	r2, #0
 80066bc:	2100      	movs	r1, #0
 80066be:	200a      	movs	r0, #10
 80066c0:	f000 fea0 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80066c4:	2300      	movs	r3, #0
 80066c6:	2200      	movs	r2, #0
 80066c8:	2100      	movs	r1, #0
 80066ca:	200b      	movs	r0, #11
 80066cc:	f000 fe9a 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 80066d0:	2300      	movs	r3, #0
 80066d2:	2200      	movs	r2, #0
 80066d4:	2100      	movs	r1, #0
 80066d6:	200c      	movs	r0, #12
 80066d8:	f000 fe94 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80066dc:	2300      	movs	r3, #0
 80066de:	2200      	movs	r2, #0
 80066e0:	2100      	movs	r1, #0
 80066e2:	200d      	movs	r0, #13
 80066e4:	f000 fe8e 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 80066e8:	2300      	movs	r3, #0
 80066ea:	2200      	movs	r2, #0
 80066ec:	2100      	movs	r1, #0
 80066ee:	200e      	movs	r0, #14
 80066f0:	f000 fe88 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80066f4:	2300      	movs	r3, #0
 80066f6:	2200      	movs	r2, #0
 80066f8:	2100      	movs	r1, #0
 80066fa:	200f      	movs	r0, #15
 80066fc:	f000 fe82 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006700:	2300      	movs	r3, #0
 8006702:	2200      	movs	r2, #0
 8006704:	2100      	movs	r1, #0
 8006706:	2010      	movs	r0, #16
 8006708:	f000 fe7c 	bl	8007404 <Set_LED>
 800670c:	f000 bdc5 	b.w	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 24 && var1 < 30) {
 8006710:	4b38      	ldr	r3, [pc, #224]	; (80067f4 <LEDHandler+0x5104>)
 8006712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006716:	2b17      	cmp	r3, #23
 8006718:	dd6e      	ble.n	80067f8 <LEDHandler+0x5108>
 800671a:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <LEDHandler+0x5104>)
 800671c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006720:	2b1d      	cmp	r3, #29
 8006722:	dc69      	bgt.n	80067f8 <LEDHandler+0x5108>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006724:	23ff      	movs	r3, #255	; 0xff
 8006726:	22ff      	movs	r2, #255	; 0xff
 8006728:	21ff      	movs	r1, #255	; 0xff
 800672a:	2000      	movs	r0, #0
 800672c:	f000 fe6a 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006730:	23ff      	movs	r3, #255	; 0xff
 8006732:	22ff      	movs	r2, #255	; 0xff
 8006734:	21ff      	movs	r1, #255	; 0xff
 8006736:	2001      	movs	r0, #1
 8006738:	f000 fe64 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 800673c:	23ff      	movs	r3, #255	; 0xff
 800673e:	22ff      	movs	r2, #255	; 0xff
 8006740:	21ff      	movs	r1, #255	; 0xff
 8006742:	2002      	movs	r0, #2
 8006744:	f000 fe5e 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006748:	23ff      	movs	r3, #255	; 0xff
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	21ff      	movs	r1, #255	; 0xff
 800674e:	2003      	movs	r0, #3
 8006750:	f000 fe58 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006754:	23ff      	movs	r3, #255	; 0xff
 8006756:	22ff      	movs	r2, #255	; 0xff
 8006758:	21ff      	movs	r1, #255	; 0xff
 800675a:	2004      	movs	r0, #4
 800675c:	f000 fe52 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	0	,	0	, 	0	)	;		//LED6
 8006760:	2300      	movs	r3, #0
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	2005      	movs	r0, #5
 8006768:	f000 fe4c 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 800676c:	2300      	movs	r3, #0
 800676e:	2200      	movs	r2, #0
 8006770:	2100      	movs	r1, #0
 8006772:	2006      	movs	r0, #6
 8006774:	f000 fe46 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006778:	2300      	movs	r3, #0
 800677a:	2200      	movs	r2, #0
 800677c:	2100      	movs	r1, #0
 800677e:	2007      	movs	r0, #7
 8006780:	f000 fe40 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006784:	2300      	movs	r3, #0
 8006786:	2200      	movs	r2, #0
 8006788:	2100      	movs	r1, #0
 800678a:	2008      	movs	r0, #8
 800678c:	f000 fe3a 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006790:	2300      	movs	r3, #0
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	2009      	movs	r0, #9
 8006798:	f000 fe34 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 800679c:	2300      	movs	r3, #0
 800679e:	2200      	movs	r2, #0
 80067a0:	2100      	movs	r1, #0
 80067a2:	200a      	movs	r0, #10
 80067a4:	f000 fe2e 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 80067a8:	2300      	movs	r3, #0
 80067aa:	2200      	movs	r2, #0
 80067ac:	2100      	movs	r1, #0
 80067ae:	200b      	movs	r0, #11
 80067b0:	f000 fe28 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 80067b4:	2300      	movs	r3, #0
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	200c      	movs	r0, #12
 80067bc:	f000 fe22 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80067c0:	2300      	movs	r3, #0
 80067c2:	2200      	movs	r2, #0
 80067c4:	2100      	movs	r1, #0
 80067c6:	200d      	movs	r0, #13
 80067c8:	f000 fe1c 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 80067cc:	2300      	movs	r3, #0
 80067ce:	2200      	movs	r2, #0
 80067d0:	2100      	movs	r1, #0
 80067d2:	200e      	movs	r0, #14
 80067d4:	f000 fe16 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80067d8:	2300      	movs	r3, #0
 80067da:	2200      	movs	r2, #0
 80067dc:	2100      	movs	r1, #0
 80067de:	200f      	movs	r0, #15
 80067e0:	f000 fe10 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80067e4:	2300      	movs	r3, #0
 80067e6:	2200      	movs	r2, #0
 80067e8:	2100      	movs	r1, #0
 80067ea:	2010      	movs	r0, #16
 80067ec:	f000 fe0a 	bl	8007404 <Set_LED>
 80067f0:	f000 bd53 	b.w	800729a <LEDHandler+0x5baa>
 80067f4:	2000031a 	.word	0x2000031a

	} else if (var1 >= 30 && var1 < 36) {
 80067f8:	4be2      	ldr	r3, [pc, #904]	; (8006b84 <LEDHandler+0x5494>)
 80067fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067fe:	2b1d      	cmp	r3, #29
 8006800:	dd6c      	ble.n	80068dc <LEDHandler+0x51ec>
 8006802:	4be0      	ldr	r3, [pc, #896]	; (8006b84 <LEDHandler+0x5494>)
 8006804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006808:	2b23      	cmp	r3, #35	; 0x23
 800680a:	dc67      	bgt.n	80068dc <LEDHandler+0x51ec>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 800680c:	23ff      	movs	r3, #255	; 0xff
 800680e:	22ff      	movs	r2, #255	; 0xff
 8006810:	21ff      	movs	r1, #255	; 0xff
 8006812:	2000      	movs	r0, #0
 8006814:	f000 fdf6 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006818:	23ff      	movs	r3, #255	; 0xff
 800681a:	22ff      	movs	r2, #255	; 0xff
 800681c:	21ff      	movs	r1, #255	; 0xff
 800681e:	2001      	movs	r0, #1
 8006820:	f000 fdf0 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006824:	23ff      	movs	r3, #255	; 0xff
 8006826:	22ff      	movs	r2, #255	; 0xff
 8006828:	21ff      	movs	r1, #255	; 0xff
 800682a:	2002      	movs	r0, #2
 800682c:	f000 fdea 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006830:	23ff      	movs	r3, #255	; 0xff
 8006832:	22ff      	movs	r2, #255	; 0xff
 8006834:	21ff      	movs	r1, #255	; 0xff
 8006836:	2003      	movs	r0, #3
 8006838:	f000 fde4 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 800683c:	23ff      	movs	r3, #255	; 0xff
 800683e:	22ff      	movs	r2, #255	; 0xff
 8006840:	21ff      	movs	r1, #255	; 0xff
 8006842:	2004      	movs	r0, #4
 8006844:	f000 fdde 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8006848:	23ff      	movs	r3, #255	; 0xff
 800684a:	22ff      	movs	r2, #255	; 0xff
 800684c:	21ff      	movs	r1, #255	; 0xff
 800684e:	2005      	movs	r0, #5
 8006850:	f000 fdd8 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	0	,	0	, 	0	)	;		//LED7
 8006854:	2300      	movs	r3, #0
 8006856:	2200      	movs	r2, #0
 8006858:	2100      	movs	r1, #0
 800685a:	2006      	movs	r0, #6
 800685c:	f000 fdd2 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006860:	2300      	movs	r3, #0
 8006862:	2200      	movs	r2, #0
 8006864:	2100      	movs	r1, #0
 8006866:	2007      	movs	r0, #7
 8006868:	f000 fdcc 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 800686c:	2300      	movs	r3, #0
 800686e:	2200      	movs	r2, #0
 8006870:	2100      	movs	r1, #0
 8006872:	2008      	movs	r0, #8
 8006874:	f000 fdc6 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006878:	2300      	movs	r3, #0
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	2009      	movs	r0, #9
 8006880:	f000 fdc0 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006884:	2300      	movs	r3, #0
 8006886:	2200      	movs	r2, #0
 8006888:	2100      	movs	r1, #0
 800688a:	200a      	movs	r0, #10
 800688c:	f000 fdba 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006890:	2300      	movs	r3, #0
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	200b      	movs	r0, #11
 8006898:	f000 fdb4 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 800689c:	2300      	movs	r3, #0
 800689e:	2200      	movs	r2, #0
 80068a0:	2100      	movs	r1, #0
 80068a2:	200c      	movs	r0, #12
 80068a4:	f000 fdae 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 80068a8:	2300      	movs	r3, #0
 80068aa:	2200      	movs	r2, #0
 80068ac:	2100      	movs	r1, #0
 80068ae:	200d      	movs	r0, #13
 80068b0:	f000 fda8 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 80068b4:	2300      	movs	r3, #0
 80068b6:	2200      	movs	r2, #0
 80068b8:	2100      	movs	r1, #0
 80068ba:	200e      	movs	r0, #14
 80068bc:	f000 fda2 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80068c0:	2300      	movs	r3, #0
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	200f      	movs	r0, #15
 80068c8:	f000 fd9c 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80068cc:	2300      	movs	r3, #0
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	2010      	movs	r0, #16
 80068d4:	f000 fd96 	bl	8007404 <Set_LED>
 80068d8:	f000 bcdf 	b.w	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 36 && var1 < 42) {
 80068dc:	4ba9      	ldr	r3, [pc, #676]	; (8006b84 <LEDHandler+0x5494>)
 80068de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068e2:	2b23      	cmp	r3, #35	; 0x23
 80068e4:	dd6c      	ble.n	80069c0 <LEDHandler+0x52d0>
 80068e6:	4ba7      	ldr	r3, [pc, #668]	; (8006b84 <LEDHandler+0x5494>)
 80068e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068ec:	2b29      	cmp	r3, #41	; 0x29
 80068ee:	dc67      	bgt.n	80069c0 <LEDHandler+0x52d0>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80068f0:	23ff      	movs	r3, #255	; 0xff
 80068f2:	22ff      	movs	r2, #255	; 0xff
 80068f4:	21ff      	movs	r1, #255	; 0xff
 80068f6:	2000      	movs	r0, #0
 80068f8:	f000 fd84 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80068fc:	23ff      	movs	r3, #255	; 0xff
 80068fe:	22ff      	movs	r2, #255	; 0xff
 8006900:	21ff      	movs	r1, #255	; 0xff
 8006902:	2001      	movs	r0, #1
 8006904:	f000 fd7e 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006908:	23ff      	movs	r3, #255	; 0xff
 800690a:	22ff      	movs	r2, #255	; 0xff
 800690c:	21ff      	movs	r1, #255	; 0xff
 800690e:	2002      	movs	r0, #2
 8006910:	f000 fd78 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006914:	23ff      	movs	r3, #255	; 0xff
 8006916:	22ff      	movs	r2, #255	; 0xff
 8006918:	21ff      	movs	r1, #255	; 0xff
 800691a:	2003      	movs	r0, #3
 800691c:	f000 fd72 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006920:	23ff      	movs	r3, #255	; 0xff
 8006922:	22ff      	movs	r2, #255	; 0xff
 8006924:	21ff      	movs	r1, #255	; 0xff
 8006926:	2004      	movs	r0, #4
 8006928:	f000 fd6c 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 800692c:	23ff      	movs	r3, #255	; 0xff
 800692e:	22ff      	movs	r2, #255	; 0xff
 8006930:	21ff      	movs	r1, #255	; 0xff
 8006932:	2005      	movs	r0, #5
 8006934:	f000 fd66 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8006938:	23ff      	movs	r3, #255	; 0xff
 800693a:	22ff      	movs	r2, #255	; 0xff
 800693c:	21ff      	movs	r1, #255	; 0xff
 800693e:	2006      	movs	r0, #6
 8006940:	f000 fd60 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	0	,	0	, 	0	)	;		//LED8
 8006944:	2300      	movs	r3, #0
 8006946:	2200      	movs	r2, #0
 8006948:	2100      	movs	r1, #0
 800694a:	2007      	movs	r0, #7
 800694c:	f000 fd5a 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006950:	2300      	movs	r3, #0
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	2008      	movs	r0, #8
 8006958:	f000 fd54 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 800695c:	2300      	movs	r3, #0
 800695e:	2200      	movs	r2, #0
 8006960:	2100      	movs	r1, #0
 8006962:	2009      	movs	r0, #9
 8006964:	f000 fd4e 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006968:	2300      	movs	r3, #0
 800696a:	2200      	movs	r2, #0
 800696c:	2100      	movs	r1, #0
 800696e:	200a      	movs	r0, #10
 8006970:	f000 fd48 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006974:	2300      	movs	r3, #0
 8006976:	2200      	movs	r2, #0
 8006978:	2100      	movs	r1, #0
 800697a:	200b      	movs	r0, #11
 800697c:	f000 fd42 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006980:	2300      	movs	r3, #0
 8006982:	2200      	movs	r2, #0
 8006984:	2100      	movs	r1, #0
 8006986:	200c      	movs	r0, #12
 8006988:	f000 fd3c 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 800698c:	2300      	movs	r3, #0
 800698e:	2200      	movs	r2, #0
 8006990:	2100      	movs	r1, #0
 8006992:	200d      	movs	r0, #13
 8006994:	f000 fd36 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006998:	2300      	movs	r3, #0
 800699a:	2200      	movs	r2, #0
 800699c:	2100      	movs	r1, #0
 800699e:	200e      	movs	r0, #14
 80069a0:	f000 fd30 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80069a4:	2300      	movs	r3, #0
 80069a6:	2200      	movs	r2, #0
 80069a8:	2100      	movs	r1, #0
 80069aa:	200f      	movs	r0, #15
 80069ac:	f000 fd2a 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80069b0:	2300      	movs	r3, #0
 80069b2:	2200      	movs	r2, #0
 80069b4:	2100      	movs	r1, #0
 80069b6:	2010      	movs	r0, #16
 80069b8:	f000 fd24 	bl	8007404 <Set_LED>
 80069bc:	f000 bc6d 	b.w	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 42 && var1 < 48) {
 80069c0:	4b70      	ldr	r3, [pc, #448]	; (8006b84 <LEDHandler+0x5494>)
 80069c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069c6:	2b29      	cmp	r3, #41	; 0x29
 80069c8:	dd6b      	ble.n	8006aa2 <LEDHandler+0x53b2>
 80069ca:	4b6e      	ldr	r3, [pc, #440]	; (8006b84 <LEDHandler+0x5494>)
 80069cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069d0:	2b2f      	cmp	r3, #47	; 0x2f
 80069d2:	dc66      	bgt.n	8006aa2 <LEDHandler+0x53b2>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80069d4:	23ff      	movs	r3, #255	; 0xff
 80069d6:	22ff      	movs	r2, #255	; 0xff
 80069d8:	21ff      	movs	r1, #255	; 0xff
 80069da:	2000      	movs	r0, #0
 80069dc:	f000 fd12 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80069e0:	23ff      	movs	r3, #255	; 0xff
 80069e2:	22ff      	movs	r2, #255	; 0xff
 80069e4:	21ff      	movs	r1, #255	; 0xff
 80069e6:	2001      	movs	r0, #1
 80069e8:	f000 fd0c 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 80069ec:	23ff      	movs	r3, #255	; 0xff
 80069ee:	22ff      	movs	r2, #255	; 0xff
 80069f0:	21ff      	movs	r1, #255	; 0xff
 80069f2:	2002      	movs	r0, #2
 80069f4:	f000 fd06 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 80069f8:	23ff      	movs	r3, #255	; 0xff
 80069fa:	22ff      	movs	r2, #255	; 0xff
 80069fc:	21ff      	movs	r1, #255	; 0xff
 80069fe:	2003      	movs	r0, #3
 8006a00:	f000 fd00 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006a04:	23ff      	movs	r3, #255	; 0xff
 8006a06:	22ff      	movs	r2, #255	; 0xff
 8006a08:	21ff      	movs	r1, #255	; 0xff
 8006a0a:	2004      	movs	r0, #4
 8006a0c:	f000 fcfa 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8006a10:	23ff      	movs	r3, #255	; 0xff
 8006a12:	22ff      	movs	r2, #255	; 0xff
 8006a14:	21ff      	movs	r1, #255	; 0xff
 8006a16:	2005      	movs	r0, #5
 8006a18:	f000 fcf4 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8006a1c:	23ff      	movs	r3, #255	; 0xff
 8006a1e:	22ff      	movs	r2, #255	; 0xff
 8006a20:	21ff      	movs	r1, #255	; 0xff
 8006a22:	2006      	movs	r0, #6
 8006a24:	f000 fcee 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8006a28:	23ff      	movs	r3, #255	; 0xff
 8006a2a:	22ff      	movs	r2, #255	; 0xff
 8006a2c:	21ff      	movs	r1, #255	; 0xff
 8006a2e:	2007      	movs	r0, #7
 8006a30:	f000 fce8 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	0	,	0	, 	0	)	;		//LED9
 8006a34:	2300      	movs	r3, #0
 8006a36:	2200      	movs	r2, #0
 8006a38:	2100      	movs	r1, #0
 8006a3a:	2008      	movs	r0, #8
 8006a3c:	f000 fce2 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006a40:	2300      	movs	r3, #0
 8006a42:	2200      	movs	r2, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	2009      	movs	r0, #9
 8006a48:	f000 fcdc 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2100      	movs	r1, #0
 8006a52:	200a      	movs	r0, #10
 8006a54:	f000 fcd6 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	200b      	movs	r0, #11
 8006a60:	f000 fcd0 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006a64:	2300      	movs	r3, #0
 8006a66:	2200      	movs	r2, #0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	200c      	movs	r0, #12
 8006a6c:	f000 fcca 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006a70:	2300      	movs	r3, #0
 8006a72:	2200      	movs	r2, #0
 8006a74:	2100      	movs	r1, #0
 8006a76:	200d      	movs	r0, #13
 8006a78:	f000 fcc4 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2100      	movs	r1, #0
 8006a82:	200e      	movs	r0, #14
 8006a84:	f000 fcbe 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	200f      	movs	r0, #15
 8006a90:	f000 fcb8 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006a94:	2300      	movs	r3, #0
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	2010      	movs	r0, #16
 8006a9c:	f000 fcb2 	bl	8007404 <Set_LED>
 8006aa0:	e3fb      	b.n	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 48 && var1 < 54) {
 8006aa2:	4b38      	ldr	r3, [pc, #224]	; (8006b84 <LEDHandler+0x5494>)
 8006aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aa8:	2b2f      	cmp	r3, #47	; 0x2f
 8006aaa:	dd6d      	ble.n	8006b88 <LEDHandler+0x5498>
 8006aac:	4b35      	ldr	r3, [pc, #212]	; (8006b84 <LEDHandler+0x5494>)
 8006aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ab2:	2b35      	cmp	r3, #53	; 0x35
 8006ab4:	dc68      	bgt.n	8006b88 <LEDHandler+0x5498>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006ab6:	23ff      	movs	r3, #255	; 0xff
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	21ff      	movs	r1, #255	; 0xff
 8006abc:	2000      	movs	r0, #0
 8006abe:	f000 fca1 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006ac2:	23ff      	movs	r3, #255	; 0xff
 8006ac4:	22ff      	movs	r2, #255	; 0xff
 8006ac6:	21ff      	movs	r1, #255	; 0xff
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f000 fc9b 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006ace:	23ff      	movs	r3, #255	; 0xff
 8006ad0:	22ff      	movs	r2, #255	; 0xff
 8006ad2:	21ff      	movs	r1, #255	; 0xff
 8006ad4:	2002      	movs	r0, #2
 8006ad6:	f000 fc95 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006ada:	23ff      	movs	r3, #255	; 0xff
 8006adc:	22ff      	movs	r2, #255	; 0xff
 8006ade:	21ff      	movs	r1, #255	; 0xff
 8006ae0:	2003      	movs	r0, #3
 8006ae2:	f000 fc8f 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006ae6:	23ff      	movs	r3, #255	; 0xff
 8006ae8:	22ff      	movs	r2, #255	; 0xff
 8006aea:	21ff      	movs	r1, #255	; 0xff
 8006aec:	2004      	movs	r0, #4
 8006aee:	f000 fc89 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8006af2:	23ff      	movs	r3, #255	; 0xff
 8006af4:	22ff      	movs	r2, #255	; 0xff
 8006af6:	21ff      	movs	r1, #255	; 0xff
 8006af8:	2005      	movs	r0, #5
 8006afa:	f000 fc83 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8006afe:	23ff      	movs	r3, #255	; 0xff
 8006b00:	22ff      	movs	r2, #255	; 0xff
 8006b02:	21ff      	movs	r1, #255	; 0xff
 8006b04:	2006      	movs	r0, #6
 8006b06:	f000 fc7d 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8006b0a:	23ff      	movs	r3, #255	; 0xff
 8006b0c:	22ff      	movs	r2, #255	; 0xff
 8006b0e:	21ff      	movs	r1, #255	; 0xff
 8006b10:	2007      	movs	r0, #7
 8006b12:	f000 fc77 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8006b16:	23ff      	movs	r3, #255	; 0xff
 8006b18:	22ff      	movs	r2, #255	; 0xff
 8006b1a:	21ff      	movs	r1, #255	; 0xff
 8006b1c:	2008      	movs	r0, #8
 8006b1e:	f000 fc71 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	0	,	0	, 	0	)	;		//LED10
 8006b22:	2300      	movs	r3, #0
 8006b24:	2200      	movs	r2, #0
 8006b26:	2100      	movs	r1, #0
 8006b28:	2009      	movs	r0, #9
 8006b2a:	f000 fc6b 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2200      	movs	r2, #0
 8006b32:	2100      	movs	r1, #0
 8006b34:	200a      	movs	r0, #10
 8006b36:	f000 fc65 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2100      	movs	r1, #0
 8006b40:	200b      	movs	r0, #11
 8006b42:	f000 fc5f 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006b46:	2300      	movs	r3, #0
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	200c      	movs	r0, #12
 8006b4e:	f000 fc59 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006b52:	2300      	movs	r3, #0
 8006b54:	2200      	movs	r2, #0
 8006b56:	2100      	movs	r1, #0
 8006b58:	200d      	movs	r0, #13
 8006b5a:	f000 fc53 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2200      	movs	r2, #0
 8006b62:	2100      	movs	r1, #0
 8006b64:	200e      	movs	r0, #14
 8006b66:	f000 fc4d 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	200f      	movs	r0, #15
 8006b72:	f000 fc47 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006b76:	2300      	movs	r3, #0
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	2010      	movs	r0, #16
 8006b7e:	f000 fc41 	bl	8007404 <Set_LED>
 8006b82:	e38a      	b.n	800729a <LEDHandler+0x5baa>
 8006b84:	2000031a 	.word	0x2000031a

	} else if (var1 >= 54 && var1 < 60) {
 8006b88:	4be1      	ldr	r3, [pc, #900]	; (8006f10 <LEDHandler+0x5820>)
 8006b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b8e:	2b35      	cmp	r3, #53	; 0x35
 8006b90:	dd6b      	ble.n	8006c6a <LEDHandler+0x557a>
 8006b92:	4bdf      	ldr	r3, [pc, #892]	; (8006f10 <LEDHandler+0x5820>)
 8006b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b98:	2b3b      	cmp	r3, #59	; 0x3b
 8006b9a:	dc66      	bgt.n	8006c6a <LEDHandler+0x557a>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006b9c:	23ff      	movs	r3, #255	; 0xff
 8006b9e:	22ff      	movs	r2, #255	; 0xff
 8006ba0:	21ff      	movs	r1, #255	; 0xff
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	f000 fc2e 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006ba8:	23ff      	movs	r3, #255	; 0xff
 8006baa:	22ff      	movs	r2, #255	; 0xff
 8006bac:	21ff      	movs	r1, #255	; 0xff
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f000 fc28 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006bb4:	23ff      	movs	r3, #255	; 0xff
 8006bb6:	22ff      	movs	r2, #255	; 0xff
 8006bb8:	21ff      	movs	r1, #255	; 0xff
 8006bba:	2002      	movs	r0, #2
 8006bbc:	f000 fc22 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006bc0:	23ff      	movs	r3, #255	; 0xff
 8006bc2:	22ff      	movs	r2, #255	; 0xff
 8006bc4:	21ff      	movs	r1, #255	; 0xff
 8006bc6:	2003      	movs	r0, #3
 8006bc8:	f000 fc1c 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006bcc:	23ff      	movs	r3, #255	; 0xff
 8006bce:	22ff      	movs	r2, #255	; 0xff
 8006bd0:	21ff      	movs	r1, #255	; 0xff
 8006bd2:	2004      	movs	r0, #4
 8006bd4:	f000 fc16 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8006bd8:	23ff      	movs	r3, #255	; 0xff
 8006bda:	22ff      	movs	r2, #255	; 0xff
 8006bdc:	21ff      	movs	r1, #255	; 0xff
 8006bde:	2005      	movs	r0, #5
 8006be0:	f000 fc10 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8006be4:	23ff      	movs	r3, #255	; 0xff
 8006be6:	22ff      	movs	r2, #255	; 0xff
 8006be8:	21ff      	movs	r1, #255	; 0xff
 8006bea:	2006      	movs	r0, #6
 8006bec:	f000 fc0a 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8006bf0:	23ff      	movs	r3, #255	; 0xff
 8006bf2:	22ff      	movs	r2, #255	; 0xff
 8006bf4:	21ff      	movs	r1, #255	; 0xff
 8006bf6:	2007      	movs	r0, #7
 8006bf8:	f000 fc04 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8006bfc:	23ff      	movs	r3, #255	; 0xff
 8006bfe:	22ff      	movs	r2, #255	; 0xff
 8006c00:	21ff      	movs	r1, #255	; 0xff
 8006c02:	2008      	movs	r0, #8
 8006c04:	f000 fbfe 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8006c08:	23ff      	movs	r3, #255	; 0xff
 8006c0a:	22ff      	movs	r2, #255	; 0xff
 8006c0c:	21ff      	movs	r1, #255	; 0xff
 8006c0e:	2009      	movs	r0, #9
 8006c10:	f000 fbf8 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	0	,	0	, 	0	)	;		//LED11
 8006c14:	2300      	movs	r3, #0
 8006c16:	2200      	movs	r2, #0
 8006c18:	2100      	movs	r1, #0
 8006c1a:	200a      	movs	r0, #10
 8006c1c:	f000 fbf2 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006c20:	2300      	movs	r3, #0
 8006c22:	2200      	movs	r2, #0
 8006c24:	2100      	movs	r1, #0
 8006c26:	200b      	movs	r0, #11
 8006c28:	f000 fbec 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	200c      	movs	r0, #12
 8006c34:	f000 fbe6 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006c38:	2300      	movs	r3, #0
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	200d      	movs	r0, #13
 8006c40:	f000 fbe0 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006c44:	2300      	movs	r3, #0
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	200e      	movs	r0, #14
 8006c4c:	f000 fbda 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006c50:	2300      	movs	r3, #0
 8006c52:	2200      	movs	r2, #0
 8006c54:	2100      	movs	r1, #0
 8006c56:	200f      	movs	r0, #15
 8006c58:	f000 fbd4 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	2010      	movs	r0, #16
 8006c64:	f000 fbce 	bl	8007404 <Set_LED>
 8006c68:	e317      	b.n	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 60 && var1 < 66) {
 8006c6a:	4ba9      	ldr	r3, [pc, #676]	; (8006f10 <LEDHandler+0x5820>)
 8006c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c70:	2b3b      	cmp	r3, #59	; 0x3b
 8006c72:	dd6b      	ble.n	8006d4c <LEDHandler+0x565c>
 8006c74:	4ba6      	ldr	r3, [pc, #664]	; (8006f10 <LEDHandler+0x5820>)
 8006c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c7a:	2b41      	cmp	r3, #65	; 0x41
 8006c7c:	dc66      	bgt.n	8006d4c <LEDHandler+0x565c>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006c7e:	23ff      	movs	r3, #255	; 0xff
 8006c80:	22ff      	movs	r2, #255	; 0xff
 8006c82:	21ff      	movs	r1, #255	; 0xff
 8006c84:	2000      	movs	r0, #0
 8006c86:	f000 fbbd 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006c8a:	23ff      	movs	r3, #255	; 0xff
 8006c8c:	22ff      	movs	r2, #255	; 0xff
 8006c8e:	21ff      	movs	r1, #255	; 0xff
 8006c90:	2001      	movs	r0, #1
 8006c92:	f000 fbb7 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006c96:	23ff      	movs	r3, #255	; 0xff
 8006c98:	22ff      	movs	r2, #255	; 0xff
 8006c9a:	21ff      	movs	r1, #255	; 0xff
 8006c9c:	2002      	movs	r0, #2
 8006c9e:	f000 fbb1 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006ca2:	23ff      	movs	r3, #255	; 0xff
 8006ca4:	22ff      	movs	r2, #255	; 0xff
 8006ca6:	21ff      	movs	r1, #255	; 0xff
 8006ca8:	2003      	movs	r0, #3
 8006caa:	f000 fbab 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006cae:	23ff      	movs	r3, #255	; 0xff
 8006cb0:	22ff      	movs	r2, #255	; 0xff
 8006cb2:	21ff      	movs	r1, #255	; 0xff
 8006cb4:	2004      	movs	r0, #4
 8006cb6:	f000 fba5 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8006cba:	23ff      	movs	r3, #255	; 0xff
 8006cbc:	22ff      	movs	r2, #255	; 0xff
 8006cbe:	21ff      	movs	r1, #255	; 0xff
 8006cc0:	2005      	movs	r0, #5
 8006cc2:	f000 fb9f 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8006cc6:	23ff      	movs	r3, #255	; 0xff
 8006cc8:	22ff      	movs	r2, #255	; 0xff
 8006cca:	21ff      	movs	r1, #255	; 0xff
 8006ccc:	2006      	movs	r0, #6
 8006cce:	f000 fb99 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8006cd2:	23ff      	movs	r3, #255	; 0xff
 8006cd4:	22ff      	movs	r2, #255	; 0xff
 8006cd6:	21ff      	movs	r1, #255	; 0xff
 8006cd8:	2007      	movs	r0, #7
 8006cda:	f000 fb93 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8006cde:	23ff      	movs	r3, #255	; 0xff
 8006ce0:	22ff      	movs	r2, #255	; 0xff
 8006ce2:	21ff      	movs	r1, #255	; 0xff
 8006ce4:	2008      	movs	r0, #8
 8006ce6:	f000 fb8d 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8006cea:	23ff      	movs	r3, #255	; 0xff
 8006cec:	22ff      	movs	r2, #255	; 0xff
 8006cee:	21ff      	movs	r1, #255	; 0xff
 8006cf0:	2009      	movs	r0, #9
 8006cf2:	f000 fb87 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8006cf6:	23ff      	movs	r3, #255	; 0xff
 8006cf8:	22ff      	movs	r2, #255	; 0xff
 8006cfa:	21ff      	movs	r1, #255	; 0xff
 8006cfc:	200a      	movs	r0, #10
 8006cfe:	f000 fb81 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	0	,	0	, 	0	)	;		//LED12
 8006d02:	2300      	movs	r3, #0
 8006d04:	2200      	movs	r2, #0
 8006d06:	2100      	movs	r1, #0
 8006d08:	200b      	movs	r0, #11
 8006d0a:	f000 fb7b 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2200      	movs	r2, #0
 8006d12:	2100      	movs	r1, #0
 8006d14:	200c      	movs	r0, #12
 8006d16:	f000 fb75 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	200d      	movs	r0, #13
 8006d22:	f000 fb6f 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006d26:	2300      	movs	r3, #0
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	200e      	movs	r0, #14
 8006d2e:	f000 fb69 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006d32:	2300      	movs	r3, #0
 8006d34:	2200      	movs	r2, #0
 8006d36:	2100      	movs	r1, #0
 8006d38:	200f      	movs	r0, #15
 8006d3a:	f000 fb63 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2200      	movs	r2, #0
 8006d42:	2100      	movs	r1, #0
 8006d44:	2010      	movs	r0, #16
 8006d46:	f000 fb5d 	bl	8007404 <Set_LED>
 8006d4a:	e2a6      	b.n	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 66 && var1 < 72) {
 8006d4c:	4b70      	ldr	r3, [pc, #448]	; (8006f10 <LEDHandler+0x5820>)
 8006d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d52:	2b41      	cmp	r3, #65	; 0x41
 8006d54:	dd6b      	ble.n	8006e2e <LEDHandler+0x573e>
 8006d56:	4b6e      	ldr	r3, [pc, #440]	; (8006f10 <LEDHandler+0x5820>)
 8006d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d5c:	2b47      	cmp	r3, #71	; 0x47
 8006d5e:	dc66      	bgt.n	8006e2e <LEDHandler+0x573e>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006d60:	23ff      	movs	r3, #255	; 0xff
 8006d62:	22ff      	movs	r2, #255	; 0xff
 8006d64:	21ff      	movs	r1, #255	; 0xff
 8006d66:	2000      	movs	r0, #0
 8006d68:	f000 fb4c 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006d6c:	23ff      	movs	r3, #255	; 0xff
 8006d6e:	22ff      	movs	r2, #255	; 0xff
 8006d70:	21ff      	movs	r1, #255	; 0xff
 8006d72:	2001      	movs	r0, #1
 8006d74:	f000 fb46 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006d78:	23ff      	movs	r3, #255	; 0xff
 8006d7a:	22ff      	movs	r2, #255	; 0xff
 8006d7c:	21ff      	movs	r1, #255	; 0xff
 8006d7e:	2002      	movs	r0, #2
 8006d80:	f000 fb40 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006d84:	23ff      	movs	r3, #255	; 0xff
 8006d86:	22ff      	movs	r2, #255	; 0xff
 8006d88:	21ff      	movs	r1, #255	; 0xff
 8006d8a:	2003      	movs	r0, #3
 8006d8c:	f000 fb3a 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006d90:	23ff      	movs	r3, #255	; 0xff
 8006d92:	22ff      	movs	r2, #255	; 0xff
 8006d94:	21ff      	movs	r1, #255	; 0xff
 8006d96:	2004      	movs	r0, #4
 8006d98:	f000 fb34 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8006d9c:	23ff      	movs	r3, #255	; 0xff
 8006d9e:	22ff      	movs	r2, #255	; 0xff
 8006da0:	21ff      	movs	r1, #255	; 0xff
 8006da2:	2005      	movs	r0, #5
 8006da4:	f000 fb2e 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8006da8:	23ff      	movs	r3, #255	; 0xff
 8006daa:	22ff      	movs	r2, #255	; 0xff
 8006dac:	21ff      	movs	r1, #255	; 0xff
 8006dae:	2006      	movs	r0, #6
 8006db0:	f000 fb28 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8006db4:	23ff      	movs	r3, #255	; 0xff
 8006db6:	22ff      	movs	r2, #255	; 0xff
 8006db8:	21ff      	movs	r1, #255	; 0xff
 8006dba:	2007      	movs	r0, #7
 8006dbc:	f000 fb22 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8006dc0:	23ff      	movs	r3, #255	; 0xff
 8006dc2:	22ff      	movs	r2, #255	; 0xff
 8006dc4:	21ff      	movs	r1, #255	; 0xff
 8006dc6:	2008      	movs	r0, #8
 8006dc8:	f000 fb1c 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8006dcc:	23ff      	movs	r3, #255	; 0xff
 8006dce:	22ff      	movs	r2, #255	; 0xff
 8006dd0:	21ff      	movs	r1, #255	; 0xff
 8006dd2:	2009      	movs	r0, #9
 8006dd4:	f000 fb16 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8006dd8:	23ff      	movs	r3, #255	; 0xff
 8006dda:	22ff      	movs	r2, #255	; 0xff
 8006ddc:	21ff      	movs	r1, #255	; 0xff
 8006dde:	200a      	movs	r0, #10
 8006de0:	f000 fb10 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8006de4:	23ff      	movs	r3, #255	; 0xff
 8006de6:	22ff      	movs	r2, #255	; 0xff
 8006de8:	21ff      	movs	r1, #255	; 0xff
 8006dea:	200b      	movs	r0, #11
 8006dec:	f000 fb0a 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	0	,	0	, 	0	)	;		//LED13
 8006df0:	2300      	movs	r3, #0
 8006df2:	2200      	movs	r2, #0
 8006df4:	2100      	movs	r1, #0
 8006df6:	200c      	movs	r0, #12
 8006df8:	f000 fb04 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2100      	movs	r1, #0
 8006e02:	200d      	movs	r0, #13
 8006e04:	f000 fafe 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	200e      	movs	r0, #14
 8006e10:	f000 faf8 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006e14:	2300      	movs	r3, #0
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	200f      	movs	r0, #15
 8006e1c:	f000 faf2 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006e20:	2300      	movs	r3, #0
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	2010      	movs	r0, #16
 8006e28:	f000 faec 	bl	8007404 <Set_LED>
 8006e2c:	e235      	b.n	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 72 && var1 < 78) {
 8006e2e:	4b38      	ldr	r3, [pc, #224]	; (8006f10 <LEDHandler+0x5820>)
 8006e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e34:	2b47      	cmp	r3, #71	; 0x47
 8006e36:	dd6d      	ble.n	8006f14 <LEDHandler+0x5824>
 8006e38:	4b35      	ldr	r3, [pc, #212]	; (8006f10 <LEDHandler+0x5820>)
 8006e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e3e:	2b4d      	cmp	r3, #77	; 0x4d
 8006e40:	dc68      	bgt.n	8006f14 <LEDHandler+0x5824>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006e42:	23ff      	movs	r3, #255	; 0xff
 8006e44:	22ff      	movs	r2, #255	; 0xff
 8006e46:	21ff      	movs	r1, #255	; 0xff
 8006e48:	2000      	movs	r0, #0
 8006e4a:	f000 fadb 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006e4e:	23ff      	movs	r3, #255	; 0xff
 8006e50:	22ff      	movs	r2, #255	; 0xff
 8006e52:	21ff      	movs	r1, #255	; 0xff
 8006e54:	2001      	movs	r0, #1
 8006e56:	f000 fad5 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006e5a:	23ff      	movs	r3, #255	; 0xff
 8006e5c:	22ff      	movs	r2, #255	; 0xff
 8006e5e:	21ff      	movs	r1, #255	; 0xff
 8006e60:	2002      	movs	r0, #2
 8006e62:	f000 facf 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006e66:	23ff      	movs	r3, #255	; 0xff
 8006e68:	22ff      	movs	r2, #255	; 0xff
 8006e6a:	21ff      	movs	r1, #255	; 0xff
 8006e6c:	2003      	movs	r0, #3
 8006e6e:	f000 fac9 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006e72:	23ff      	movs	r3, #255	; 0xff
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	21ff      	movs	r1, #255	; 0xff
 8006e78:	2004      	movs	r0, #4
 8006e7a:	f000 fac3 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8006e7e:	23ff      	movs	r3, #255	; 0xff
 8006e80:	22ff      	movs	r2, #255	; 0xff
 8006e82:	21ff      	movs	r1, #255	; 0xff
 8006e84:	2005      	movs	r0, #5
 8006e86:	f000 fabd 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8006e8a:	23ff      	movs	r3, #255	; 0xff
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	21ff      	movs	r1, #255	; 0xff
 8006e90:	2006      	movs	r0, #6
 8006e92:	f000 fab7 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8006e96:	23ff      	movs	r3, #255	; 0xff
 8006e98:	22ff      	movs	r2, #255	; 0xff
 8006e9a:	21ff      	movs	r1, #255	; 0xff
 8006e9c:	2007      	movs	r0, #7
 8006e9e:	f000 fab1 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8006ea2:	23ff      	movs	r3, #255	; 0xff
 8006ea4:	22ff      	movs	r2, #255	; 0xff
 8006ea6:	21ff      	movs	r1, #255	; 0xff
 8006ea8:	2008      	movs	r0, #8
 8006eaa:	f000 faab 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8006eae:	23ff      	movs	r3, #255	; 0xff
 8006eb0:	22ff      	movs	r2, #255	; 0xff
 8006eb2:	21ff      	movs	r1, #255	; 0xff
 8006eb4:	2009      	movs	r0, #9
 8006eb6:	f000 faa5 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8006eba:	23ff      	movs	r3, #255	; 0xff
 8006ebc:	22ff      	movs	r2, #255	; 0xff
 8006ebe:	21ff      	movs	r1, #255	; 0xff
 8006ec0:	200a      	movs	r0, #10
 8006ec2:	f000 fa9f 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8006ec6:	23ff      	movs	r3, #255	; 0xff
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	21ff      	movs	r1, #255	; 0xff
 8006ecc:	200b      	movs	r0, #11
 8006ece:	f000 fa99 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 8006ed2:	23ff      	movs	r3, #255	; 0xff
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	21ff      	movs	r1, #255	; 0xff
 8006ed8:	200c      	movs	r0, #12
 8006eda:	f000 fa93 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	0	,	0	, 	0	)	;		//LED14
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	200d      	movs	r0, #13
 8006ee6:	f000 fa8d 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006eea:	2300      	movs	r3, #0
 8006eec:	2200      	movs	r2, #0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	200e      	movs	r0, #14
 8006ef2:	f000 fa87 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2100      	movs	r1, #0
 8006efc:	200f      	movs	r0, #15
 8006efe:	f000 fa81 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006f02:	2300      	movs	r3, #0
 8006f04:	2200      	movs	r2, #0
 8006f06:	2100      	movs	r1, #0
 8006f08:	2010      	movs	r0, #16
 8006f0a:	f000 fa7b 	bl	8007404 <Set_LED>
 8006f0e:	e1c4      	b.n	800729a <LEDHandler+0x5baa>
 8006f10:	2000031a 	.word	0x2000031a

	} else if (var1 >= 78 && var1 < 84) {
 8006f14:	4be6      	ldr	r3, [pc, #920]	; (80072b0 <LEDHandler+0x5bc0>)
 8006f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f1a:	2b4d      	cmp	r3, #77	; 0x4d
 8006f1c:	dd6b      	ble.n	8006ff6 <LEDHandler+0x5906>
 8006f1e:	4be4      	ldr	r3, [pc, #912]	; (80072b0 <LEDHandler+0x5bc0>)
 8006f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f24:	2b53      	cmp	r3, #83	; 0x53
 8006f26:	dc66      	bgt.n	8006ff6 <LEDHandler+0x5906>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 8006f28:	23ff      	movs	r3, #255	; 0xff
 8006f2a:	22ff      	movs	r2, #255	; 0xff
 8006f2c:	21ff      	movs	r1, #255	; 0xff
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f000 fa68 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8006f34:	23ff      	movs	r3, #255	; 0xff
 8006f36:	22ff      	movs	r2, #255	; 0xff
 8006f38:	21ff      	movs	r1, #255	; 0xff
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	f000 fa62 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8006f40:	23ff      	movs	r3, #255	; 0xff
 8006f42:	22ff      	movs	r2, #255	; 0xff
 8006f44:	21ff      	movs	r1, #255	; 0xff
 8006f46:	2002      	movs	r0, #2
 8006f48:	f000 fa5c 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8006f4c:	23ff      	movs	r3, #255	; 0xff
 8006f4e:	22ff      	movs	r2, #255	; 0xff
 8006f50:	21ff      	movs	r1, #255	; 0xff
 8006f52:	2003      	movs	r0, #3
 8006f54:	f000 fa56 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 8006f58:	23ff      	movs	r3, #255	; 0xff
 8006f5a:	22ff      	movs	r2, #255	; 0xff
 8006f5c:	21ff      	movs	r1, #255	; 0xff
 8006f5e:	2004      	movs	r0, #4
 8006f60:	f000 fa50 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8006f64:	23ff      	movs	r3, #255	; 0xff
 8006f66:	22ff      	movs	r2, #255	; 0xff
 8006f68:	21ff      	movs	r1, #255	; 0xff
 8006f6a:	2005      	movs	r0, #5
 8006f6c:	f000 fa4a 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8006f70:	23ff      	movs	r3, #255	; 0xff
 8006f72:	22ff      	movs	r2, #255	; 0xff
 8006f74:	21ff      	movs	r1, #255	; 0xff
 8006f76:	2006      	movs	r0, #6
 8006f78:	f000 fa44 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8006f7c:	23ff      	movs	r3, #255	; 0xff
 8006f7e:	22ff      	movs	r2, #255	; 0xff
 8006f80:	21ff      	movs	r1, #255	; 0xff
 8006f82:	2007      	movs	r0, #7
 8006f84:	f000 fa3e 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 8006f88:	23ff      	movs	r3, #255	; 0xff
 8006f8a:	22ff      	movs	r2, #255	; 0xff
 8006f8c:	21ff      	movs	r1, #255	; 0xff
 8006f8e:	2008      	movs	r0, #8
 8006f90:	f000 fa38 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8006f94:	23ff      	movs	r3, #255	; 0xff
 8006f96:	22ff      	movs	r2, #255	; 0xff
 8006f98:	21ff      	movs	r1, #255	; 0xff
 8006f9a:	2009      	movs	r0, #9
 8006f9c:	f000 fa32 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8006fa0:	23ff      	movs	r3, #255	; 0xff
 8006fa2:	22ff      	movs	r2, #255	; 0xff
 8006fa4:	21ff      	movs	r1, #255	; 0xff
 8006fa6:	200a      	movs	r0, #10
 8006fa8:	f000 fa2c 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8006fac:	23ff      	movs	r3, #255	; 0xff
 8006fae:	22ff      	movs	r2, #255	; 0xff
 8006fb0:	21ff      	movs	r1, #255	; 0xff
 8006fb2:	200b      	movs	r0, #11
 8006fb4:	f000 fa26 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 8006fb8:	23ff      	movs	r3, #255	; 0xff
 8006fba:	22ff      	movs	r2, #255	; 0xff
 8006fbc:	21ff      	movs	r1, #255	; 0xff
 8006fbe:	200c      	movs	r0, #12
 8006fc0:	f000 fa20 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 8006fc4:	23ff      	movs	r3, #255	; 0xff
 8006fc6:	22ff      	movs	r2, #255	; 0xff
 8006fc8:	21ff      	movs	r1, #255	; 0xff
 8006fca:	200d      	movs	r0, #13
 8006fcc:	f000 fa1a 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	0	,	0	, 	0	)	;		//LED15
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	200e      	movs	r0, #14
 8006fd8:	f000 fa14 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 8006fdc:	2300      	movs	r3, #0
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	200f      	movs	r0, #15
 8006fe4:	f000 fa0e 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2200      	movs	r2, #0
 8006fec:	2100      	movs	r1, #0
 8006fee:	2010      	movs	r0, #16
 8006ff0:	f000 fa08 	bl	8007404 <Set_LED>
 8006ff4:	e151      	b.n	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 84 && var1 < 90) {
 8006ff6:	4bae      	ldr	r3, [pc, #696]	; (80072b0 <LEDHandler+0x5bc0>)
 8006ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ffc:	2b53      	cmp	r3, #83	; 0x53
 8006ffe:	dd6b      	ble.n	80070d8 <LEDHandler+0x59e8>
 8007000:	4bab      	ldr	r3, [pc, #684]	; (80072b0 <LEDHandler+0x5bc0>)
 8007002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007006:	2b59      	cmp	r3, #89	; 0x59
 8007008:	dc66      	bgt.n	80070d8 <LEDHandler+0x59e8>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 800700a:	23ff      	movs	r3, #255	; 0xff
 800700c:	22ff      	movs	r2, #255	; 0xff
 800700e:	21ff      	movs	r1, #255	; 0xff
 8007010:	2000      	movs	r0, #0
 8007012:	f000 f9f7 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 8007016:	23ff      	movs	r3, #255	; 0xff
 8007018:	22ff      	movs	r2, #255	; 0xff
 800701a:	21ff      	movs	r1, #255	; 0xff
 800701c:	2001      	movs	r0, #1
 800701e:	f000 f9f1 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8007022:	23ff      	movs	r3, #255	; 0xff
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	21ff      	movs	r1, #255	; 0xff
 8007028:	2002      	movs	r0, #2
 800702a:	f000 f9eb 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 800702e:	23ff      	movs	r3, #255	; 0xff
 8007030:	22ff      	movs	r2, #255	; 0xff
 8007032:	21ff      	movs	r1, #255	; 0xff
 8007034:	2003      	movs	r0, #3
 8007036:	f000 f9e5 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 800703a:	23ff      	movs	r3, #255	; 0xff
 800703c:	22ff      	movs	r2, #255	; 0xff
 800703e:	21ff      	movs	r1, #255	; 0xff
 8007040:	2004      	movs	r0, #4
 8007042:	f000 f9df 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8007046:	23ff      	movs	r3, #255	; 0xff
 8007048:	22ff      	movs	r2, #255	; 0xff
 800704a:	21ff      	movs	r1, #255	; 0xff
 800704c:	2005      	movs	r0, #5
 800704e:	f000 f9d9 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8007052:	23ff      	movs	r3, #255	; 0xff
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	21ff      	movs	r1, #255	; 0xff
 8007058:	2006      	movs	r0, #6
 800705a:	f000 f9d3 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 800705e:	23ff      	movs	r3, #255	; 0xff
 8007060:	22ff      	movs	r2, #255	; 0xff
 8007062:	21ff      	movs	r1, #255	; 0xff
 8007064:	2007      	movs	r0, #7
 8007066:	f000 f9cd 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 800706a:	23ff      	movs	r3, #255	; 0xff
 800706c:	22ff      	movs	r2, #255	; 0xff
 800706e:	21ff      	movs	r1, #255	; 0xff
 8007070:	2008      	movs	r0, #8
 8007072:	f000 f9c7 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8007076:	23ff      	movs	r3, #255	; 0xff
 8007078:	22ff      	movs	r2, #255	; 0xff
 800707a:	21ff      	movs	r1, #255	; 0xff
 800707c:	2009      	movs	r0, #9
 800707e:	f000 f9c1 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8007082:	23ff      	movs	r3, #255	; 0xff
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	21ff      	movs	r1, #255	; 0xff
 8007088:	200a      	movs	r0, #10
 800708a:	f000 f9bb 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 800708e:	23ff      	movs	r3, #255	; 0xff
 8007090:	22ff      	movs	r2, #255	; 0xff
 8007092:	21ff      	movs	r1, #255	; 0xff
 8007094:	200b      	movs	r0, #11
 8007096:	f000 f9b5 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 800709a:	23ff      	movs	r3, #255	; 0xff
 800709c:	22ff      	movs	r2, #255	; 0xff
 800709e:	21ff      	movs	r1, #255	; 0xff
 80070a0:	200c      	movs	r0, #12
 80070a2:	f000 f9af 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 80070a6:	23ff      	movs	r3, #255	; 0xff
 80070a8:	22ff      	movs	r2, #255	; 0xff
 80070aa:	21ff      	movs	r1, #255	; 0xff
 80070ac:	200d      	movs	r0, #13
 80070ae:	f000 f9a9 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 80070b2:	23ff      	movs	r3, #255	; 0xff
 80070b4:	22ff      	movs	r2, #255	; 0xff
 80070b6:	21ff      	movs	r1, #255	; 0xff
 80070b8:	200e      	movs	r0, #14
 80070ba:	f000 f9a3 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	0	,	0	, 	0	)	;		//LED16
 80070be:	2300      	movs	r3, #0
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	200f      	movs	r0, #15
 80070c6:	f000 f99d 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80070ca:	2300      	movs	r3, #0
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	2010      	movs	r0, #16
 80070d2:	f000 f997 	bl	8007404 <Set_LED>
 80070d6:	e0e0      	b.n	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 90 && var1 < 96) {
 80070d8:	4b75      	ldr	r3, [pc, #468]	; (80072b0 <LEDHandler+0x5bc0>)
 80070da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070de:	2b59      	cmp	r3, #89	; 0x59
 80070e0:	dd6b      	ble.n	80071ba <LEDHandler+0x5aca>
 80070e2:	4b73      	ldr	r3, [pc, #460]	; (80072b0 <LEDHandler+0x5bc0>)
 80070e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070e8:	2b5f      	cmp	r3, #95	; 0x5f
 80070ea:	dc66      	bgt.n	80071ba <LEDHandler+0x5aca>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80070ec:	23ff      	movs	r3, #255	; 0xff
 80070ee:	22ff      	movs	r2, #255	; 0xff
 80070f0:	21ff      	movs	r1, #255	; 0xff
 80070f2:	2000      	movs	r0, #0
 80070f4:	f000 f986 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80070f8:	23ff      	movs	r3, #255	; 0xff
 80070fa:	22ff      	movs	r2, #255	; 0xff
 80070fc:	21ff      	movs	r1, #255	; 0xff
 80070fe:	2001      	movs	r0, #1
 8007100:	f000 f980 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 8007104:	23ff      	movs	r3, #255	; 0xff
 8007106:	22ff      	movs	r2, #255	; 0xff
 8007108:	21ff      	movs	r1, #255	; 0xff
 800710a:	2002      	movs	r0, #2
 800710c:	f000 f97a 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 8007110:	23ff      	movs	r3, #255	; 0xff
 8007112:	22ff      	movs	r2, #255	; 0xff
 8007114:	21ff      	movs	r1, #255	; 0xff
 8007116:	2003      	movs	r0, #3
 8007118:	f000 f974 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 800711c:	23ff      	movs	r3, #255	; 0xff
 800711e:	22ff      	movs	r2, #255	; 0xff
 8007120:	21ff      	movs	r1, #255	; 0xff
 8007122:	2004      	movs	r0, #4
 8007124:	f000 f96e 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 8007128:	23ff      	movs	r3, #255	; 0xff
 800712a:	22ff      	movs	r2, #255	; 0xff
 800712c:	21ff      	movs	r1, #255	; 0xff
 800712e:	2005      	movs	r0, #5
 8007130:	f000 f968 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8007134:	23ff      	movs	r3, #255	; 0xff
 8007136:	22ff      	movs	r2, #255	; 0xff
 8007138:	21ff      	movs	r1, #255	; 0xff
 800713a:	2006      	movs	r0, #6
 800713c:	f000 f962 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8007140:	23ff      	movs	r3, #255	; 0xff
 8007142:	22ff      	movs	r2, #255	; 0xff
 8007144:	21ff      	movs	r1, #255	; 0xff
 8007146:	2007      	movs	r0, #7
 8007148:	f000 f95c 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 800714c:	23ff      	movs	r3, #255	; 0xff
 800714e:	22ff      	movs	r2, #255	; 0xff
 8007150:	21ff      	movs	r1, #255	; 0xff
 8007152:	2008      	movs	r0, #8
 8007154:	f000 f956 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 8007158:	23ff      	movs	r3, #255	; 0xff
 800715a:	22ff      	movs	r2, #255	; 0xff
 800715c:	21ff      	movs	r1, #255	; 0xff
 800715e:	2009      	movs	r0, #9
 8007160:	f000 f950 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8007164:	23ff      	movs	r3, #255	; 0xff
 8007166:	22ff      	movs	r2, #255	; 0xff
 8007168:	21ff      	movs	r1, #255	; 0xff
 800716a:	200a      	movs	r0, #10
 800716c:	f000 f94a 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8007170:	23ff      	movs	r3, #255	; 0xff
 8007172:	22ff      	movs	r2, #255	; 0xff
 8007174:	21ff      	movs	r1, #255	; 0xff
 8007176:	200b      	movs	r0, #11
 8007178:	f000 f944 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 800717c:	23ff      	movs	r3, #255	; 0xff
 800717e:	22ff      	movs	r2, #255	; 0xff
 8007180:	21ff      	movs	r1, #255	; 0xff
 8007182:	200c      	movs	r0, #12
 8007184:	f000 f93e 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 8007188:	23ff      	movs	r3, #255	; 0xff
 800718a:	22ff      	movs	r2, #255	; 0xff
 800718c:	21ff      	movs	r1, #255	; 0xff
 800718e:	200d      	movs	r0, #13
 8007190:	f000 f938 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 8007194:	23ff      	movs	r3, #255	; 0xff
 8007196:	22ff      	movs	r2, #255	; 0xff
 8007198:	21ff      	movs	r1, #255	; 0xff
 800719a:	200e      	movs	r0, #14
 800719c:	f000 f932 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	255	,	255	, 	255	)	;		//LED16
 80071a0:	23ff      	movs	r3, #255	; 0xff
 80071a2:	22ff      	movs	r2, #255	; 0xff
 80071a4:	21ff      	movs	r1, #255	; 0xff
 80071a6:	200f      	movs	r0, #15
 80071a8:	f000 f92c 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	0	,	0	, 	0	)	;		//LED17
 80071ac:	2300      	movs	r3, #0
 80071ae:	2200      	movs	r2, #0
 80071b0:	2100      	movs	r1, #0
 80071b2:	2010      	movs	r0, #16
 80071b4:	f000 f926 	bl	8007404 <Set_LED>
 80071b8:	e06f      	b.n	800729a <LEDHandler+0x5baa>

	} else if (var1 >= 96 && var1 < 101) {
 80071ba:	4b3d      	ldr	r3, [pc, #244]	; (80072b0 <LEDHandler+0x5bc0>)
 80071bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071c0:	2b5f      	cmp	r3, #95	; 0x5f
 80071c2:	dd6a      	ble.n	800729a <LEDHandler+0x5baa>
 80071c4:	4b3a      	ldr	r3, [pc, #232]	; (80072b0 <LEDHandler+0x5bc0>)
 80071c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071ca:	2b64      	cmp	r3, #100	; 0x64
 80071cc:	dc65      	bgt.n	800729a <LEDHandler+0x5baa>

		Set_LED	(	0	,	255	,	255	, 	255	)	;		//LED1
 80071ce:	23ff      	movs	r3, #255	; 0xff
 80071d0:	22ff      	movs	r2, #255	; 0xff
 80071d2:	21ff      	movs	r1, #255	; 0xff
 80071d4:	2000      	movs	r0, #0
 80071d6:	f000 f915 	bl	8007404 <Set_LED>
		Set_LED	(	1	,	255	,	255	, 	255	)	;		//LED2
 80071da:	23ff      	movs	r3, #255	; 0xff
 80071dc:	22ff      	movs	r2, #255	; 0xff
 80071de:	21ff      	movs	r1, #255	; 0xff
 80071e0:	2001      	movs	r0, #1
 80071e2:	f000 f90f 	bl	8007404 <Set_LED>
		Set_LED	(	2	,	255	,	255	, 	255	)	;		//LED3
 80071e6:	23ff      	movs	r3, #255	; 0xff
 80071e8:	22ff      	movs	r2, #255	; 0xff
 80071ea:	21ff      	movs	r1, #255	; 0xff
 80071ec:	2002      	movs	r0, #2
 80071ee:	f000 f909 	bl	8007404 <Set_LED>
		Set_LED	(	3	,	255	,	255	, 	255	)	;		//LED4
 80071f2:	23ff      	movs	r3, #255	; 0xff
 80071f4:	22ff      	movs	r2, #255	; 0xff
 80071f6:	21ff      	movs	r1, #255	; 0xff
 80071f8:	2003      	movs	r0, #3
 80071fa:	f000 f903 	bl	8007404 <Set_LED>
		Set_LED	(	4	,	255	,	255	, 	255	)	;		//LED5
 80071fe:	23ff      	movs	r3, #255	; 0xff
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	21ff      	movs	r1, #255	; 0xff
 8007204:	2004      	movs	r0, #4
 8007206:	f000 f8fd 	bl	8007404 <Set_LED>
		Set_LED	(	5	,	255	,	255	, 	255	)	;		//LED6
 800720a:	23ff      	movs	r3, #255	; 0xff
 800720c:	22ff      	movs	r2, #255	; 0xff
 800720e:	21ff      	movs	r1, #255	; 0xff
 8007210:	2005      	movs	r0, #5
 8007212:	f000 f8f7 	bl	8007404 <Set_LED>
		Set_LED	(	6	,	255	,	255	, 	255	)	;		//LED7
 8007216:	23ff      	movs	r3, #255	; 0xff
 8007218:	22ff      	movs	r2, #255	; 0xff
 800721a:	21ff      	movs	r1, #255	; 0xff
 800721c:	2006      	movs	r0, #6
 800721e:	f000 f8f1 	bl	8007404 <Set_LED>
		Set_LED	(	7	,	255	,	255	, 	255	)	;		//LED8
 8007222:	23ff      	movs	r3, #255	; 0xff
 8007224:	22ff      	movs	r2, #255	; 0xff
 8007226:	21ff      	movs	r1, #255	; 0xff
 8007228:	2007      	movs	r0, #7
 800722a:	f000 f8eb 	bl	8007404 <Set_LED>
		Set_LED	(	8	,	255	,	255	, 	255	)	;		//LED9
 800722e:	23ff      	movs	r3, #255	; 0xff
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	21ff      	movs	r1, #255	; 0xff
 8007234:	2008      	movs	r0, #8
 8007236:	f000 f8e5 	bl	8007404 <Set_LED>
		Set_LED	(	9	,	255	,	255	, 	255	)	;		//LED10
 800723a:	23ff      	movs	r3, #255	; 0xff
 800723c:	22ff      	movs	r2, #255	; 0xff
 800723e:	21ff      	movs	r1, #255	; 0xff
 8007240:	2009      	movs	r0, #9
 8007242:	f000 f8df 	bl	8007404 <Set_LED>
		Set_LED	(	10	,	255	,	255	, 	255	)	;		//LED11
 8007246:	23ff      	movs	r3, #255	; 0xff
 8007248:	22ff      	movs	r2, #255	; 0xff
 800724a:	21ff      	movs	r1, #255	; 0xff
 800724c:	200a      	movs	r0, #10
 800724e:	f000 f8d9 	bl	8007404 <Set_LED>
		Set_LED	(	11	,	255	,	255	, 	255	)	;		//LED12
 8007252:	23ff      	movs	r3, #255	; 0xff
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	21ff      	movs	r1, #255	; 0xff
 8007258:	200b      	movs	r0, #11
 800725a:	f000 f8d3 	bl	8007404 <Set_LED>
		Set_LED	(	12	,	255	,	255	, 	255	)	;		//LED13
 800725e:	23ff      	movs	r3, #255	; 0xff
 8007260:	22ff      	movs	r2, #255	; 0xff
 8007262:	21ff      	movs	r1, #255	; 0xff
 8007264:	200c      	movs	r0, #12
 8007266:	f000 f8cd 	bl	8007404 <Set_LED>
		Set_LED	(	13	,	255	,	255	, 	255	)	;		//LED14
 800726a:	23ff      	movs	r3, #255	; 0xff
 800726c:	22ff      	movs	r2, #255	; 0xff
 800726e:	21ff      	movs	r1, #255	; 0xff
 8007270:	200d      	movs	r0, #13
 8007272:	f000 f8c7 	bl	8007404 <Set_LED>
		Set_LED	(	14	,	255	,	255	, 	255	)	;		//LED15
 8007276:	23ff      	movs	r3, #255	; 0xff
 8007278:	22ff      	movs	r2, #255	; 0xff
 800727a:	21ff      	movs	r1, #255	; 0xff
 800727c:	200e      	movs	r0, #14
 800727e:	f000 f8c1 	bl	8007404 <Set_LED>
		Set_LED	(	15	,	255	,	255	, 	255	)	;		//LED16
 8007282:	23ff      	movs	r3, #255	; 0xff
 8007284:	22ff      	movs	r2, #255	; 0xff
 8007286:	21ff      	movs	r1, #255	; 0xff
 8007288:	200f      	movs	r0, #15
 800728a:	f000 f8bb 	bl	8007404 <Set_LED>
		Set_LED	(	16	,	255	,	255	, 	255	)	;		//LED17
 800728e:	23ff      	movs	r3, #255	; 0xff
 8007290:	22ff      	movs	r2, #255	; 0xff
 8007292:	21ff      	movs	r1, #255	; 0xff
 8007294:	2010      	movs	r0, #16
 8007296:	f000 f8b5 	bl	8007404 <Set_LED>

	}
	}

	Set_Brightness(brilho);
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <LEDHandler+0x5bc4>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fb06 	bl	80078b0 <Set_Brightness>
	WS2512_Send();
 80072a4:	f000 fb82 	bl	80079ac <WS2512_Send>
	//HAL_Delay(50);
}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	2000031a 	.word	0x2000031a
 80072b4:	20000004 	.word	0x20000004

080072b8 <Analog_Buffer>:

//TODO Documentar método
void Analog_Buffer(){
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0

	/* Processa as novas amostras */
	int32_t accumulator[BSP_ADC_CHANNEL_SIZE] = { 0 };
 80072be:	463b      	mov	r3, r7
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	605a      	str	r2, [r3, #4]
 80072c6:	609a      	str	r2, [r3, #8]
	static int16_t filter_sample_index = 0;

	//guarda a amostra atual
	Buffer_ADC_Filter[0][filter_sample_index] = readValue[0];
 80072c8:	4b3d      	ldr	r3, [pc, #244]	; (80073c0 <Analog_Buffer+0x108>)
 80072ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072ce:	461a      	mov	r2, r3
 80072d0:	4b3c      	ldr	r3, [pc, #240]	; (80073c4 <Analog_Buffer+0x10c>)
 80072d2:	8819      	ldrh	r1, [r3, #0]
 80072d4:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <Analog_Buffer+0x110>)
 80072d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	Buffer_ADC_Filter[1][filter_sample_index] = readValue[1];
 80072da:	4b39      	ldr	r3, [pc, #228]	; (80073c0 <Analog_Buffer+0x108>)
 80072dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e0:	4618      	mov	r0, r3
 80072e2:	4b38      	ldr	r3, [pc, #224]	; (80073c4 <Analog_Buffer+0x10c>)
 80072e4:	8859      	ldrh	r1, [r3, #2]
 80072e6:	4a38      	ldr	r2, [pc, #224]	; (80073c8 <Analog_Buffer+0x110>)
 80072e8:	1d83      	adds	r3, r0, #6
 80072ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	Buffer_ADC_Filter[2][filter_sample_index] = readValue[2];
 80072ee:	4b34      	ldr	r3, [pc, #208]	; (80073c0 <Analog_Buffer+0x108>)
 80072f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072f4:	4618      	mov	r0, r3
 80072f6:	4b33      	ldr	r3, [pc, #204]	; (80073c4 <Analog_Buffer+0x10c>)
 80072f8:	8899      	ldrh	r1, [r3, #4]
 80072fa:	4a33      	ldr	r2, [pc, #204]	; (80073c8 <Analog_Buffer+0x110>)
 80072fc:	f100 030c 	add.w	r3, r0, #12
 8007300:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Processa o novo valor filtrado considerando as ultimas x amostras
	for (int sample_idx = 0; sample_idx < BSP_ADC_FILTER_SAMPLES_SIZE;++sample_idx)
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e01c      	b.n	8007344 <Analog_Buffer+0x8c>
	{
		accumulator[0] += Buffer_ADC_Filter[0][sample_idx];
 800730a:	4a2f      	ldr	r2, [pc, #188]	; (80073c8 <Analog_Buffer+0x110>)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007312:	b29a      	uxth	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	4413      	add	r3, r2
 8007318:	603b      	str	r3, [r7, #0]
		accumulator[1] += Buffer_ADC_Filter[1][sample_idx];
 800731a:	4a2b      	ldr	r2, [pc, #172]	; (80073c8 <Analog_Buffer+0x110>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3306      	adds	r3, #6
 8007320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007324:	b29a      	uxth	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4413      	add	r3, r2
 800732a:	607b      	str	r3, [r7, #4]
		accumulator[2] += Buffer_ADC_Filter[2][sample_idx];
 800732c:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <Analog_Buffer+0x110>)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	330c      	adds	r3, #12
 8007332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007336:	b29a      	uxth	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4413      	add	r3, r2
 800733c:	60bb      	str	r3, [r7, #8]
	for (int sample_idx = 0; sample_idx < BSP_ADC_FILTER_SAMPLES_SIZE;++sample_idx)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b05      	cmp	r3, #5
 8007348:	dddf      	ble.n	800730a <Analog_Buffer+0x52>
	}

	//wrap around no buffer
	filter_sample_index++;
 800734a:	4b1d      	ldr	r3, [pc, #116]	; (80073c0 <Analog_Buffer+0x108>)
 800734c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007350:	b29b      	uxth	r3, r3
 8007352:	3301      	adds	r3, #1
 8007354:	b29b      	uxth	r3, r3
 8007356:	b21a      	sxth	r2, r3
 8007358:	4b19      	ldr	r3, [pc, #100]	; (80073c0 <Analog_Buffer+0x108>)
 800735a:	801a      	strh	r2, [r3, #0]
	if (filter_sample_index >= BSP_ADC_FILTER_SAMPLES_SIZE)
 800735c:	4b18      	ldr	r3, [pc, #96]	; (80073c0 <Analog_Buffer+0x108>)
 800735e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007362:	2b05      	cmp	r3, #5
 8007364:	dd02      	ble.n	800736c <Analog_Buffer+0xb4>
	{
		filter_sample_index = 0;
 8007366:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <Analog_Buffer+0x108>)
 8007368:	2200      	movs	r2, #0
 800736a:	801a      	strh	r2, [r3, #0]
	}


	//calcula a média dos valores
	SpeedMode = accumulator[0];
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	4a17      	ldr	r2, [pc, #92]	; (80073cc <Analog_Buffer+0x114>)
 8007370:	6013      	str	r3, [r2, #0]
	SpeedMode = (SpeedMode / BSP_ADC_FILTER_SAMPLES_SIZE);
 8007372:	4b16      	ldr	r3, [pc, #88]	; (80073cc <Analog_Buffer+0x114>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a16      	ldr	r2, [pc, #88]	; (80073d0 <Analog_Buffer+0x118>)
 8007378:	fb82 1203 	smull	r1, r2, r2, r3
 800737c:	17db      	asrs	r3, r3, #31
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	4a12      	ldr	r2, [pc, #72]	; (80073cc <Analog_Buffer+0x114>)
 8007382:	6013      	str	r3, [r2, #0]

	Sensor_in = accumulator[1];
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a13      	ldr	r2, [pc, #76]	; (80073d4 <Analog_Buffer+0x11c>)
 8007388:	6013      	str	r3, [r2, #0]
	Sensor_in = (Sensor_in / BSP_ADC_FILTER_SAMPLES_SIZE);
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <Analog_Buffer+0x11c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a10      	ldr	r2, [pc, #64]	; (80073d0 <Analog_Buffer+0x118>)
 8007390:	fb82 1203 	smull	r1, r2, r2, r3
 8007394:	17db      	asrs	r3, r3, #31
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <Analog_Buffer+0x11c>)
 800739a:	6013      	str	r3, [r2, #0]

	Sensor_Out= accumulator[2];
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4a0e      	ldr	r2, [pc, #56]	; (80073d8 <Analog_Buffer+0x120>)
 80073a0:	6013      	str	r3, [r2, #0]
	Sensor_Out = (Sensor_Out / BSP_ADC_FILTER_SAMPLES_SIZE);
 80073a2:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <Analog_Buffer+0x120>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a0a      	ldr	r2, [pc, #40]	; (80073d0 <Analog_Buffer+0x118>)
 80073a8:	fb82 1203 	smull	r1, r2, r2, r3
 80073ac:	17db      	asrs	r3, r3, #31
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <Analog_Buffer+0x120>)
 80073b2:	6013      	str	r3, [r2, #0]

}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	2000199c 	.word	0x2000199c
 80073c4:	20000660 	.word	0x20000660
 80073c8:	200002f4 	.word	0x200002f4
 80073cc:	20000668 	.word	0x20000668
 80073d0:	2aaaaaab 	.word	0x2aaaaaab
 80073d4:	2000066c 	.word	0x2000066c
 80073d8:	20000670 	.word	0x20000670

080073dc <HAL_TIM_PWM_PulseFinishedCallback>:

//TODO Documentar método
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80073e4:	2100      	movs	r1, #0
 80073e6:	4805      	ldr	r0, [pc, #20]	; (80073fc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80073e8:	f002 fefc 	bl	800a1e4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	200001d8 	.word	0x200001d8
 8007400:	20000674 	.word	0x20000674

08007404 <Set_LED>:

//TODO Documentar método
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	b2d9      	uxtb	r1, r3
 8007416:	4a10      	ldr	r2, [pc, #64]	; (8007458 <Set_LED+0x54>)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	b2d9      	uxtb	r1, r3
 8007422:	4a0d      	ldr	r2, [pc, #52]	; (8007458 <Set_LED+0x54>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	460a      	mov	r2, r1
 800742c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	b2d9      	uxtb	r1, r3
 8007432:	4a09      	ldr	r2, [pc, #36]	; (8007458 <Set_LED+0x54>)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	460a      	mov	r2, r1
 800743c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	b2d9      	uxtb	r1, r3
 8007442:	4a05      	ldr	r2, [pc, #20]	; (8007458 <Set_LED+0x54>)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	460a      	mov	r2, r1
 800744c:	70da      	strb	r2, [r3, #3]
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr
 8007458:	20000340 	.word	0x20000340

0800745c <DigitExtract>:
//	HAL_GPIO_WritePin(GPIOB, TRACK_Pin, GPIO_PIN_SET);

}

//TODO Documentar método
void DigitExtract(int num) {
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]

//	int unid, dez, cent;
	unid = num % 10;
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <DigitExtract+0x6c>)
 8007468:	fb83 2301 	smull	r2, r3, r3, r1
 800746c:	109a      	asrs	r2, r3, #2
 800746e:	17cb      	asrs	r3, r1, #31
 8007470:	1ad2      	subs	r2, r2, r3
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	1aca      	subs	r2, r1, r3
 800747c:	4b13      	ldr	r3, [pc, #76]	; (80074cc <DigitExtract+0x70>)
 800747e:	601a      	str	r2, [r3, #0]
	num = num / 10;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a11      	ldr	r2, [pc, #68]	; (80074c8 <DigitExtract+0x6c>)
 8007484:	fb82 1203 	smull	r1, r2, r2, r3
 8007488:	1092      	asrs	r2, r2, #2
 800748a:	17db      	asrs	r3, r3, #31
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	607b      	str	r3, [r7, #4]
	dez = num % 10;
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <DigitExtract+0x6c>)
 8007494:	fb83 2301 	smull	r2, r3, r3, r1
 8007498:	109a      	asrs	r2, r3, #2
 800749a:	17cb      	asrs	r3, r1, #31
 800749c:	1ad2      	subs	r2, r2, r3
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	1aca      	subs	r2, r1, r3
 80074a8:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <DigitExtract+0x74>)
 80074aa:	601a      	str	r2, [r3, #0]
	cent = num / 10;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a06      	ldr	r2, [pc, #24]	; (80074c8 <DigitExtract+0x6c>)
 80074b0:	fb82 1203 	smull	r1, r2, r2, r3
 80074b4:	1092      	asrs	r2, r2, #2
 80074b6:	17db      	asrs	r3, r3, #31
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	4a06      	ldr	r2, [pc, #24]	; (80074d4 <DigitExtract+0x78>)
 80074bc:	6013      	str	r3, [r2, #0]
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr
 80074c8:	66666667 	.word	0x66666667
 80074cc:	2000032c 	.word	0x2000032c
 80074d0:	20000330 	.word	0x20000330
 80074d4:	20000334 	.word	0x20000334

080074d8 <HAL_TIM_PeriodElapsedCallback>:

//TODO Documentar método
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]

	//************************************ TIMER 4 ************************************

	if (htim->Instance == TIM4) //frequencia do timer4 é de 5 kHz, sample time = 200us
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4aa9      	ldr	r2, [pc, #676]	; (800778c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d10c      	bne.n	8007504 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{


		//atualização do valor do sinal analógico a cada 500 ms

		if (idx < 200) {
 80074ea:	4ba9      	ldr	r3, [pc, #676]	; (8007790 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2bc7      	cmp	r3, #199	; 0xc7
 80074f0:	dc05      	bgt.n	80074fe <HAL_TIM_PeriodElapsedCallback+0x26>

			idx++;
 80074f2:	4ba7      	ldr	r3, [pc, #668]	; (8007790 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	4aa5      	ldr	r2, [pc, #660]	; (8007790 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	e002      	b.n	8007504 <HAL_TIM_PeriodElapsedCallback+0x2c>

		} else {

			idx = 1;
 80074fe:	4ba4      	ldr	r3, [pc, #656]	; (8007790 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8007500:	2201      	movs	r2, #1
 8007502:	601a      	str	r2, [r3, #0]
	}


	//************************************ TIMER 3 ************************************

	if (htim->Instance == TIM3) { //frequencia do timer3 é de 50 kHz, time=20us
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4aa2      	ldr	r2, [pc, #648]	; (8007794 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800750a:	4293      	cmp	r3, r2
 800750c:	f040 81bb 	bne.w	8007886 <HAL_TIM_PeriodElapsedCallback+0x3ae>

		if (downcounter > 0) {
 8007510:	4ba1      	ldr	r3, [pc, #644]	; (8007798 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd05      	ble.n	8007524 <HAL_TIM_PeriodElapsedCallback+0x4c>
			downcounter--;
 8007518:	4b9f      	ldr	r3, [pc, #636]	; (8007798 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3b01      	subs	r3, #1
 800751e:	4a9e      	ldr	r2, [pc, #632]	; (8007798 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007520:	6013      	str	r3, [r2, #0]
			fsm++;

		}
	}

}
 8007522:	e1b0      	b.n	8007886 <HAL_TIM_PeriodElapsedCallback+0x3ae>
			switch (fsm) {			//fsm é o index da mensagem entregue ao CI HC595 para multiplexação
 8007524:	4b9d      	ldr	r3, [pc, #628]	; (800779c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f240 2255 	movw	r2, #597	; 0x255
 800752c:	4293      	cmp	r3, r2
 800752e:	f000 818f 	beq.w	8007850 <HAL_TIM_PeriodElapsedCallback+0x378>
 8007532:	f240 2255 	movw	r2, #597	; 0x255
 8007536:	4293      	cmp	r3, r2
 8007538:	f300 819a 	bgt.w	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 800753c:	f240 2253 	movw	r2, #595	; 0x253
 8007540:	4293      	cmp	r3, r2
 8007542:	f000 8179 	beq.w	8007838 <HAL_TIM_PeriodElapsedCallback+0x360>
 8007546:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 800754a:	f280 8191 	bge.w	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 800754e:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 8007552:	f300 818d 	bgt.w	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 8007556:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 800755a:	da11      	bge.n	8007580 <HAL_TIM_PeriodElapsedCallback+0xa8>
 800755c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8007560:	f000 8108 	beq.w	8007774 <HAL_TIM_PeriodElapsedCallback+0x29c>
 8007564:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8007568:	f300 8182 	bgt.w	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 800756c:	2be7      	cmp	r3, #231	; 0xe7
 800756e:	f300 817f 	bgt.w	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 8007572:	2bd7      	cmp	r3, #215	; 0xd7
 8007574:	da2a      	bge.n	80075cc <HAL_TIM_PeriodElapsedCallback+0xf4>
 8007576:	2b10      	cmp	r3, #16
 8007578:	dc6d      	bgt.n	8007656 <HAL_TIM_PeriodElapsedCallback+0x17e>
 800757a:	2b00      	cmp	r3, #0
 800757c:	da4a      	bge.n	8007614 <HAL_TIM_PeriodElapsedCallback+0x13c>
 800757e:	e177      	b.n	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 8007580:	f5a3 73d7 	sub.w	r3, r3, #430	; 0x1ae
 8007584:	2201      	movs	r2, #1
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800758e:	401a      	ands	r2, r3
 8007590:	2a00      	cmp	r2, #0
 8007592:	bf14      	ite	ne
 8007594:	2201      	movne	r2, #1
 8007596:	2200      	moveq	r2, #0
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	2a00      	cmp	r2, #0
 800759c:	f040 812d 	bne.w	80077fa <HAL_TIM_PeriodElapsedCallback+0x322>
 80075a0:	f245 5255 	movw	r2, #21845	; 0x5555
 80075a4:	401a      	ands	r2, r3
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	bf14      	ite	ne
 80075aa:	2201      	movne	r2, #1
 80075ac:	2200      	moveq	r2, #0
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	f040 8101 	bne.w	80077b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80075b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bf14      	ite	ne
 80075be:	2301      	movne	r3, #1
 80075c0:	2300      	moveq	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 8123 	bne.w	8007810 <HAL_TIM_PeriodElapsedCallback+0x338>
 80075ca:	e151      	b.n	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 80075cc:	3bd7      	subs	r3, #215	; 0xd7
 80075ce:	2201      	movs	r2, #1
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80075d8:	401a      	ands	r2, r3
 80075da:	2a00      	cmp	r2, #0
 80075dc:	bf14      	ite	ne
 80075de:	2201      	movne	r2, #1
 80075e0:	2200      	moveq	r2, #0
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	f040 80a6 	bne.w	8007736 <HAL_TIM_PeriodElapsedCallback+0x25e>
 80075ea:	f245 5255 	movw	r2, #21845	; 0x5555
 80075ee:	401a      	ands	r2, r3
 80075f0:	2a00      	cmp	r2, #0
 80075f2:	bf14      	ite	ne
 80075f4:	2201      	movne	r2, #1
 80075f6:	2200      	moveq	r2, #0
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d17a      	bne.n	80076f4 <HAL_TIM_PeriodElapsedCallback+0x21c>
 80075fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf14      	ite	ne
 8007606:	2301      	movne	r3, #1
 8007608:	2300      	moveq	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 809d 	bne.w	800774c <HAL_TIM_PeriodElapsedCallback+0x274>
 8007612:	e12d      	b.n	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 8007614:	461a      	mov	r2, r3
 8007616:	2301      	movs	r3, #1
 8007618:	4093      	lsls	r3, r2
 800761a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800761e:	401a      	ands	r2, r3
 8007620:	2a00      	cmp	r2, #0
 8007622:	bf14      	ite	ne
 8007624:	2201      	movne	r2, #1
 8007626:	2200      	moveq	r2, #0
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	2a00      	cmp	r2, #0
 800762c:	d137      	bne.n	800769e <HAL_TIM_PeriodElapsedCallback+0x1c6>
 800762e:	f245 5255 	movw	r2, #21845	; 0x5555
 8007632:	401a      	ands	r2, r3
 8007634:	2a00      	cmp	r2, #0
 8007636:	bf14      	ite	ne
 8007638:	2201      	movne	r2, #1
 800763a:	2200      	moveq	r2, #0
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	2a00      	cmp	r2, #0
 8007640:	d10c      	bne.n	800765c <HAL_TIM_PeriodElapsedCallback+0x184>
 8007642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf14      	ite	ne
 800764a:	2301      	movne	r3, #1
 800764c:	2300      	moveq	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d12f      	bne.n	80076b4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8007654:	e10c      	b.n	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
 8007656:	2ba5      	cmp	r3, #165	; 0xa5
 8007658:	d040      	beq.n	80076dc <HAL_TIM_PeriodElapsedCallback+0x204>
 800765a:	e109      	b.n	8007870 <HAL_TIM_PeriodElapsedCallback+0x398>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 800765c:	2200      	movs	r2, #0
 800765e:	2140      	movs	r1, #64	; 0x40
 8007660:	484f      	ldr	r0, [pc, #316]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007662:	f001 fd71 	bl	8009148 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8007666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800766a:	484d      	ldr	r0, [pc, #308]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800766c:	f001 fd84 	bl	8009178 <HAL_GPIO_TogglePin>
				if (digits[cent][myIndex] == 1) {
 8007670:	4b4c      	ldr	r3, [pc, #304]	; (80077a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	4b4c      	ldr	r3, [pc, #304]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	494c      	ldr	r1, [pc, #304]	; (80077ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800767a:	00d2      	lsls	r2, r2, #3
 800767c:	4413      	add	r3, r2
 800767e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d105      	bne.n	8007692 <HAL_TIM_PeriodElapsedCallback+0x1ba>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8007686:	2201      	movs	r2, #1
 8007688:	2180      	movs	r1, #128	; 0x80
 800768a:	4845      	ldr	r0, [pc, #276]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800768c:	f001 fd5c 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 8007690:	e0f4      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8007692:	2200      	movs	r2, #0
 8007694:	2180      	movs	r1, #128	; 0x80
 8007696:	4842      	ldr	r0, [pc, #264]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007698:	f001 fd56 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 800769c:	e0ee      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				myIndex--;
 800769e:	4b42      	ldr	r3, [pc, #264]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	4a40      	ldr	r2, [pc, #256]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80076a6:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 80076a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80076ac:	483c      	ldr	r0, [pc, #240]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80076ae:	f001 fd63 	bl	8009178 <HAL_GPIO_TogglePin>
				break;
 80076b2:	e0e3      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 80076b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80076b8:	4839      	ldr	r0, [pc, #228]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80076ba:	f001 fd5d 	bl	8009178 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 80076be:	2201      	movs	r2, #1
 80076c0:	2140      	movs	r1, #64	; 0x40
 80076c2:	4837      	ldr	r0, [pc, #220]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80076c4:	f001 fd40 	bl	8009148 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 80076c8:	2201      	movs	r2, #1
 80076ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80076ce:	4838      	ldr	r0, [pc, #224]	; (80077b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80076d0:	f001 fd3a 	bl	8009148 <HAL_GPIO_WritePin>
				myIndex = 7;
 80076d4:	4b34      	ldr	r3, [pc, #208]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80076d6:	2207      	movs	r2, #7
 80076d8:	601a      	str	r2, [r3, #0]
				break;
 80076da:	e0cf      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 80076dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80076e0:	482f      	ldr	r0, [pc, #188]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80076e2:	f001 fd49 	bl	8009178 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 0);
 80076e6:	2200      	movs	r2, #0
 80076e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80076ec:	4830      	ldr	r0, [pc, #192]	; (80077b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80076ee:	f001 fd2b 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 80076f2:	e0c3      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 80076f4:	2200      	movs	r2, #0
 80076f6:	2140      	movs	r1, #64	; 0x40
 80076f8:	4829      	ldr	r0, [pc, #164]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80076fa:	f001 fd25 	bl	8009148 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 80076fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007702:	4827      	ldr	r0, [pc, #156]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007704:	f001 fd38 	bl	8009178 <HAL_GPIO_TogglePin>
				if (digits[dez][myIndex] == 1) {
 8007708:	4b2a      	ldr	r3, [pc, #168]	; (80077b4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4926      	ldr	r1, [pc, #152]	; (80077ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8007712:	00d2      	lsls	r2, r2, #3
 8007714:	4413      	add	r3, r2
 8007716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d105      	bne.n	800772a <HAL_TIM_PeriodElapsedCallback+0x252>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 800771e:	2201      	movs	r2, #1
 8007720:	2180      	movs	r1, #128	; 0x80
 8007722:	481f      	ldr	r0, [pc, #124]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007724:	f001 fd10 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 8007728:	e0a8      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 800772a:	2200      	movs	r2, #0
 800772c:	2180      	movs	r1, #128	; 0x80
 800772e:	481c      	ldr	r0, [pc, #112]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007730:	f001 fd0a 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 8007734:	e0a2      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				myIndex--;
 8007736:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3b01      	subs	r3, #1
 800773c:	4a1a      	ldr	r2, [pc, #104]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800773e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8007740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007744:	4816      	ldr	r0, [pc, #88]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007746:	f001 fd17 	bl	8009178 <HAL_GPIO_TogglePin>
				break;
 800774a:	e097      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				myIndex = 7;
 800774c:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800774e:	2207      	movs	r2, #7
 8007750:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8007752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007756:	4812      	ldr	r0, [pc, #72]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007758:	f001 fd0e 	bl	8009178 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 800775c:	2201      	movs	r2, #1
 800775e:	2140      	movs	r1, #64	; 0x40
 8007760:	480f      	ldr	r0, [pc, #60]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007762:	f001 fcf1 	bl	8009148 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 1);
 8007766:	2201      	movs	r2, #1
 8007768:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800776c:	4810      	ldr	r0, [pc, #64]	; (80077b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800776e:	f001 fceb 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 8007772:	e083      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8007774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007778:	4809      	ldr	r0, [pc, #36]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800777a:	f001 fcfd 	bl	8009178 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 0);
 800777e:	2200      	movs	r2, #0
 8007780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007784:	480a      	ldr	r0, [pc, #40]	; (80077b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8007786:	f001 fcdf 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 800778a:	e077      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 800778c:	40000800 	.word	0x40000800
 8007790:	20000328 	.word	0x20000328
 8007794:	40000400 	.word	0x40000400
 8007798:	2000033c 	.word	0x2000033c
 800779c:	20000338 	.word	0x20000338
 80077a0:	40010c00 	.word	0x40010c00
 80077a4:	20000334 	.word	0x20000334
 80077a8:	20000000 	.word	0x20000000
 80077ac:	20000014 	.word	0x20000014
 80077b0:	40011000 	.word	0x40011000
 80077b4:	20000330 	.word	0x20000330
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 80077b8:	2200      	movs	r2, #0
 80077ba:	2140      	movs	r1, #64	; 0x40
 80077bc:	4834      	ldr	r0, [pc, #208]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80077be:	f001 fcc3 	bl	8009148 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 80077c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80077c6:	4832      	ldr	r0, [pc, #200]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80077c8:	f001 fcd6 	bl	8009178 <HAL_GPIO_TogglePin>
				if (digits[unid][myIndex] == 1) {
 80077cc:	4b31      	ldr	r3, [pc, #196]	; (8007894 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b31      	ldr	r3, [pc, #196]	; (8007898 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4931      	ldr	r1, [pc, #196]	; (800789c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80077d6:	00d2      	lsls	r2, r2, #3
 80077d8:	4413      	add	r3, r2
 80077da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d105      	bne.n	80077ee <HAL_TIM_PeriodElapsedCallback+0x316>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 80077e2:	2201      	movs	r2, #1
 80077e4:	2180      	movs	r1, #128	; 0x80
 80077e6:	482a      	ldr	r0, [pc, #168]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80077e8:	f001 fcae 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 80077ec:	e046      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 80077ee:	2200      	movs	r2, #0
 80077f0:	2180      	movs	r1, #128	; 0x80
 80077f2:	4827      	ldr	r0, [pc, #156]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80077f4:	f001 fca8 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 80077f8:	e040      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				myIndex--;
 80077fa:	4b27      	ldr	r3, [pc, #156]	; (8007898 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3b01      	subs	r3, #1
 8007800:	4a25      	ldr	r2, [pc, #148]	; (8007898 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8007802:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8007804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007808:	4821      	ldr	r0, [pc, #132]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800780a:	f001 fcb5 	bl	8009178 <HAL_GPIO_TogglePin>
				break;
 800780e:	e035      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8007810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007814:	481e      	ldr	r0, [pc, #120]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8007816:	f001 fcaf 	bl	8009178 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 800781a:	2201      	movs	r2, #1
 800781c:	2140      	movs	r1, #64	; 0x40
 800781e:	481c      	ldr	r0, [pc, #112]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8007820:	f001 fc92 	bl	8009148 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 1);
 8007824:	2201      	movs	r2, #1
 8007826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800782a:	481d      	ldr	r0, [pc, #116]	; (80078a0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800782c:	f001 fc8c 	bl	8009148 <HAL_GPIO_WritePin>
				myIndex = 7;
 8007830:	4b19      	ldr	r3, [pc, #100]	; (8007898 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8007832:	2207      	movs	r2, #7
 8007834:	601a      	str	r2, [r3, #0]
				break;
 8007836:	e021      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8007838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800783c:	4814      	ldr	r0, [pc, #80]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800783e:	f001 fc9b 	bl	8009178 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 0);
 8007842:	2200      	movs	r2, #0
 8007844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007848:	4815      	ldr	r0, [pc, #84]	; (80078a0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800784a:	f001 fc7d 	bl	8009148 <HAL_GPIO_WritePin>
				break;
 800784e:	e015      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8007850:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007854:	480e      	ldr	r0, [pc, #56]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8007856:	f001 fc8f 	bl	8009178 <HAL_GPIO_TogglePin>
				downcounter = 50;		//tempo morto de 1ms
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 800785c:	2232      	movs	r2, #50	; 0x32
 800785e:	601a      	str	r2, [r3, #0]
				fsm = -1;
 8007860:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8007862:	f04f 32ff 	mov.w	r2, #4294967295
 8007866:	601a      	str	r2, [r3, #0]
				myIndex = 7;
 8007868:	4b0b      	ldr	r3, [pc, #44]	; (8007898 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800786a:	2207      	movs	r2, #7
 800786c:	601a      	str	r2, [r3, #0]
				break;
 800786e:	e005      	b.n	800787c <HAL_TIM_PeriodElapsedCallback+0x3a4>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);	//CLOCK
 8007870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007874:	4806      	ldr	r0, [pc, #24]	; (8007890 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8007876:	f001 fc7f 	bl	8009178 <HAL_GPIO_TogglePin>
				break;
 800787a:	bf00      	nop
			fsm++;
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	4a09      	ldr	r2, [pc, #36]	; (80078a8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8007884:	6013      	str	r3, [r2, #0]
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40010c00 	.word	0x40010c00
 8007894:	2000032c 	.word	0x2000032c
 8007898:	20000000 	.word	0x20000000
 800789c:	20000014 	.word	0x20000014
 80078a0:	40011000 	.word	0x40011000
 80078a4:	2000033c 	.word	0x2000033c
 80078a8:	20000338 	.word	0x20000338
 80078ac:	00000000 	.word	0x00000000

080078b0 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness) // 0~45 linearização do brilho
{
 80078b0:	b5b0      	push	{r4, r5, r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b2d      	cmp	r3, #45	; 0x2d
 80078bc:	dd01      	ble.n	80078c2 <Set_Brightness+0x12>
		brightness = 45;
 80078be:	232d      	movs	r3, #45	; 0x2d
 80078c0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	e05f      	b.n	8007988 <Set_Brightness+0xd8>
		LED_Mod[i][0] = LED_Data[i][0];
 80078c8:	4a35      	ldr	r2, [pc, #212]	; (80079a0 <Set_Brightness+0xf0>)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80078d0:	4a34      	ldr	r2, [pc, #208]	; (80079a4 <Set_Brightness+0xf4>)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 80078d8:	2301      	movs	r3, #1
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	e04e      	b.n	800797c <Set_Brightness+0xcc>
			float angle = 90 - brightness; // em graus
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7f9 f9db 	bl	8000ca0 <__aeabi_i2f>
 80078ea:	4603      	mov	r3, r0
 80078ec:	60fb      	str	r3, [r7, #12]
			angle = angle * PI / 180; //em radianos
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7f8 fd92 	bl	8000418 <__aeabi_f2d>
 80078f4:	a328      	add	r3, pc, #160	; (adr r3, 8007998 <Set_Brightness+0xe8>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f7f8 fde5 	bl	80004c8 <__aeabi_dmul>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4610      	mov	r0, r2
 8007904:	4619      	mov	r1, r3
 8007906:	f04f 0200 	mov.w	r2, #0
 800790a:	4b27      	ldr	r3, [pc, #156]	; (80079a8 <Set_Brightness+0xf8>)
 800790c:	f7f8 ff06 	bl	800071c <__aeabi_ddiv>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4610      	mov	r0, r2
 8007916:	4619      	mov	r1, r3
 8007918:	f7f9 f8b8 	bl	8000a8c <__aeabi_d2f>
 800791c:	4603      	mov	r3, r0
 800791e:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8007920:	4a1f      	ldr	r2, [pc, #124]	; (80079a0 <Set_Brightness+0xf0>)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	4413      	add	r3, r2
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f7f8 fd60 	bl	80003f4 <__aeabi_i2d>
 8007934:	4604      	mov	r4, r0
 8007936:	460d      	mov	r5, r1
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7f8 fd6d 	bl	8000418 <__aeabi_f2d>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4610      	mov	r0, r2
 8007944:	4619      	mov	r1, r3
 8007946:	f003 fc35 	bl	800b1b4 <tan>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4620      	mov	r0, r4
 8007950:	4629      	mov	r1, r5
 8007952:	f7f8 fee3 	bl	800071c <__aeabi_ddiv>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4610      	mov	r0, r2
 800795c:	4619      	mov	r1, r3
 800795e:	f7f9 f875 	bl	8000a4c <__aeabi_d2uiz>
 8007962:	4603      	mov	r3, r0
 8007964:	b2d9      	uxtb	r1, r3
 8007966:	4a0f      	ldr	r2, [pc, #60]	; (80079a4 <Set_Brightness+0xf4>)
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	441a      	add	r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	4413      	add	r3, r2
 8007972:	460a      	mov	r2, r1
 8007974:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	3301      	adds	r3, #1
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b03      	cmp	r3, #3
 8007980:	ddad      	ble.n	80078de <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	3301      	adds	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2b63      	cmp	r3, #99	; 0x63
 800798c:	dd9c      	ble.n	80078c8 <Set_Brightness+0x18>
		}
	}
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bdb0      	pop	{r4, r5, r7, pc}
 8007998:	53c8d4f1 	.word	0x53c8d4f1
 800799c:	400921fb 	.word	0x400921fb
 80079a0:	20000340 	.word	0x20000340
 80079a4:	200004d0 	.word	0x200004d0
 80079a8:	40668000 	.word	0x40668000

080079ac <WS2512_Send>:

#endif

uint16_t pwmData[(24*MAX_LED+50)];

void WS2512_Send(void) {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	e036      	b.n	8007a2a <WS2512_Send+0x7e>
	{
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 80079bc:	4a2e      	ldr	r2, [pc, #184]	; (8007a78 <WS2512_Send+0xcc>)
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	041a      	lsls	r2, r3, #16
 80079c8:	492b      	ldr	r1, [pc, #172]	; (8007a78 <WS2512_Send+0xcc>)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	789b      	ldrb	r3, [r3, #2]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	431a      	orrs	r2, r3
 80079d6:	4928      	ldr	r1, [pc, #160]	; (8007a78 <WS2512_Send+0xcc>)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	440b      	add	r3, r1
 80079de:	78db      	ldrb	r3, [r3, #3]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	607b      	str	r3, [r7, #4]

		for (int i = 23; i >= 0; i--) {
 80079e4:	2317      	movs	r3, #23
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e019      	b.n	8007a1e <WS2512_Send+0x72>
			if (color & (1 << i)) {
 80079ea:	2201      	movs	r2, #1
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4013      	ands	r3, r2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <WS2512_Send+0x5c>
				pwmData[indx] = 60;		// pulso alto, 2/3 de 90, aprox 68%
 80079fc:	4a1f      	ldr	r2, [pc, #124]	; (8007a7c <WS2512_Send+0xd0>)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	213c      	movs	r1, #60	; 0x3c
 8007a02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007a06:	e004      	b.n	8007a12 <WS2512_Send+0x66>
			}

			else
				pwmData[indx] = 30;	// pulso baixo, 1/3 de 90, aprox 32%
 8007a08:	4a1c      	ldr	r2, [pc, #112]	; (8007a7c <WS2512_Send+0xd0>)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	211e      	movs	r1, #30
 8007a0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	3301      	adds	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	dae2      	bge.n	80079ea <WS2512_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	3301      	adds	r3, #1
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b63      	cmp	r3, #99	; 0x63
 8007a2e:	ddc5      	ble.n	80079bc <WS2512_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++)//intervalo de tempo de 50us antes da próxima msg
 8007a30:	2300      	movs	r3, #0
 8007a32:	60bb      	str	r3, [r7, #8]
 8007a34:	e00a      	b.n	8007a4c <WS2512_Send+0xa0>
			{
		pwmData[indx] = 0;
 8007a36:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <WS2512_Send+0xd0>)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	3301      	adds	r3, #1
 8007a44:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++)//intervalo de tempo de 50us antes da próxima msg
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	60bb      	str	r3, [r7, #8]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b31      	cmp	r3, #49	; 0x31
 8007a50:	ddf1      	ble.n	8007a36 <WS2512_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <WS2512_Send+0xd0>)
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4809      	ldr	r0, [pc, #36]	; (8007a80 <WS2512_Send+0xd4>)
 8007a5c:	f002 fa20 	bl	8009ea0 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8007a60:	bf00      	nop
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <WS2512_Send+0xd8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0fb      	beq.n	8007a62 <WS2512_Send+0xb6>
	};
	datasentflag = 0;
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <WS2512_Send+0xd8>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
}
 8007a70:	bf00      	nop
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	200004d0 	.word	0x200004d0
 8007a7c:	20000678 	.word	0x20000678
 8007a80:	200001d8 	.word	0x200001d8
 8007a84:	20000674 	.word	0x20000674

08007a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007a8c:	bf00      	nop
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007a9a:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <HAL_MspInit+0x40>)
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	4a0d      	ldr	r2, [pc, #52]	; (8007ad4 <HAL_MspInit+0x40>)
 8007aa0:	f043 0301 	orr.w	r3, r3, #1
 8007aa4:	6193      	str	r3, [r2, #24]
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <HAL_MspInit+0x40>)
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	607b      	str	r3, [r7, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ab2:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <HAL_MspInit+0x40>)
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	4a07      	ldr	r2, [pc, #28]	; (8007ad4 <HAL_MspInit+0x40>)
 8007ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007abc:	61d3      	str	r3, [r2, #28]
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <HAL_MspInit+0x40>)
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bc80      	pop	{r7}
 8007ad2:	4770      	bx	lr
 8007ad4:	40021000 	.word	0x40021000

08007ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ae0:	f107 0318 	add.w	r3, r7, #24
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	605a      	str	r2, [r3, #4]
 8007aea:	609a      	str	r2, [r3, #8]
 8007aec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1f      	ldr	r2, [pc, #124]	; (8007b70 <HAL_ADC_MspInit+0x98>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d137      	bne.n	8007b68 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007af8:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b02:	6193      	str	r3, [r2, #24]
 8007b04:	4b1b      	ldr	r3, [pc, #108]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b10:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	4a17      	ldr	r2, [pc, #92]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007b16:	f043 0304 	orr.w	r3, r3, #4
 8007b1a:	6193      	str	r3, [r2, #24]
 8007b1c:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b28:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	4a11      	ldr	r2, [pc, #68]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007b2e:	f043 0308 	orr.w	r3, r3, #8
 8007b32:	6193      	str	r3, [r2, #24]
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <HAL_ADC_MspInit+0x9c>)
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007b40:	2303      	movs	r3, #3
 8007b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b44:	2303      	movs	r3, #3
 8007b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b48:	f107 0318 	add.w	r3, r7, #24
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	480a      	ldr	r0, [pc, #40]	; (8007b78 <HAL_ADC_MspInit+0xa0>)
 8007b50:	f001 f976 	bl	8008e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007b54:	2302      	movs	r3, #2
 8007b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b5c:	f107 0318 	add.w	r3, r7, #24
 8007b60:	4619      	mov	r1, r3
 8007b62:	4806      	ldr	r0, [pc, #24]	; (8007b7c <HAL_ADC_MspInit+0xa4>)
 8007b64:	f001 f96c 	bl	8008e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007b68:	bf00      	nop
 8007b6a:	3728      	adds	r7, #40	; 0x28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40012400 	.word	0x40012400
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40010800 	.word	0x40010800
 8007b7c:	40010c00 	.word	0x40010c00

08007b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a37      	ldr	r2, [pc, #220]	; (8007c6c <HAL_TIM_Base_MspInit+0xec>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d134      	bne.n	8007bfc <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b92:	4b37      	ldr	r3, [pc, #220]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	4a36      	ldr	r2, [pc, #216]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b9c:	6193      	str	r3, [r2, #24]
 8007b9e:	4b34      	ldr	r3, [pc, #208]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8007baa:	4b32      	ldr	r3, [pc, #200]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bac:	4a32      	ldr	r2, [pc, #200]	; (8007c78 <HAL_TIM_Base_MspInit+0xf8>)
 8007bae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bb0:	4b30      	ldr	r3, [pc, #192]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bb2:	2210      	movs	r2, #16
 8007bb4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bb6:	4b2f      	ldr	r3, [pc, #188]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007bbc:	4b2d      	ldr	r3, [pc, #180]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bbe:	2280      	movs	r2, #128	; 0x80
 8007bc0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007bc2:	4b2c      	ldr	r3, [pc, #176]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bc8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007bca:	4b2a      	ldr	r3, [pc, #168]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bd0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8007bd2:	4b28      	ldr	r3, [pc, #160]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007bd8:	4b26      	ldr	r3, [pc, #152]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8007bde:	4825      	ldr	r0, [pc, #148]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007be0:	f000 fec8 	bl	8008974 <HAL_DMA_Init>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8007bea:	f7ff ff4d 	bl	8007a88 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a20      	ldr	r2, [pc, #128]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24
 8007bf4:	4a1f      	ldr	r2, [pc, #124]	; (8007c74 <HAL_TIM_Base_MspInit+0xf4>)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007bfa:	e032      	b.n	8007c62 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1e      	ldr	r2, [pc, #120]	; (8007c7c <HAL_TIM_Base_MspInit+0xfc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d114      	bne.n	8007c30 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c06:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	4a19      	ldr	r2, [pc, #100]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007c0c:	f043 0302 	orr.w	r3, r3, #2
 8007c10:	61d3      	str	r3, [r2, #28]
 8007c12:	4b17      	ldr	r3, [pc, #92]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2100      	movs	r1, #0
 8007c22:	201d      	movs	r0, #29
 8007c24:	f000 fe6f 	bl	8008906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007c28:	201d      	movs	r0, #29
 8007c2a:	f000 fe88 	bl	800893e <HAL_NVIC_EnableIRQ>
}
 8007c2e:	e018      	b.n	8007c62 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM4)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a12      	ldr	r2, [pc, #72]	; (8007c80 <HAL_TIM_Base_MspInit+0x100>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d113      	bne.n	8007c62 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	4a0c      	ldr	r2, [pc, #48]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007c40:	f043 0304 	orr.w	r3, r3, #4
 8007c44:	61d3      	str	r3, [r2, #28]
 8007c46:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <HAL_TIM_Base_MspInit+0xf0>)
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007c52:	2200      	movs	r2, #0
 8007c54:	2100      	movs	r1, #0
 8007c56:	201e      	movs	r0, #30
 8007c58:	f000 fe55 	bl	8008906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007c5c:	201e      	movs	r0, #30
 8007c5e:	f000 fe6e 	bl	800893e <HAL_NVIC_EnableIRQ>
}
 8007c62:	bf00      	nop
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40021000 	.word	0x40021000
 8007c74:	200002b0 	.word	0x200002b0
 8007c78:	4002001c 	.word	0x4002001c
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40000800 	.word	0x40000800

08007c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c8c:	f107 0310 	add.w	r3, r7, #16
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	605a      	str	r2, [r3, #4]
 8007c96:	609a      	str	r2, [r3, #8]
 8007c98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a10      	ldr	r2, [pc, #64]	; (8007ce0 <HAL_TIM_MspPostInit+0x5c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d118      	bne.n	8007cd6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca4:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <HAL_TIM_MspPostInit+0x60>)
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	4a0e      	ldr	r2, [pc, #56]	; (8007ce4 <HAL_TIM_MspPostInit+0x60>)
 8007caa:	f043 0304 	orr.w	r3, r3, #4
 8007cae:	6193      	str	r3, [r2, #24]
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <HAL_TIM_MspPostInit+0x60>)
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cca:	f107 0310 	add.w	r3, r7, #16
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4805      	ldr	r0, [pc, #20]	; (8007ce8 <HAL_TIM_MspPostInit+0x64>)
 8007cd2:	f001 f8b5 	bl	8008e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007cd6:	bf00      	nop
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	40010800 	.word	0x40010800

08007cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007cf0:	bf00      	nop
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cfc:	e7fe      	b.n	8007cfc <HardFault_Handler+0x4>

08007cfe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d02:	e7fe      	b.n	8007d02 <MemManage_Handler+0x4>

08007d04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d08:	e7fe      	b.n	8007d08 <BusFault_Handler+0x4>

08007d0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d0e:	e7fe      	b.n	8007d0e <UsageFault_Handler+0x4>

08007d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d14:	bf00      	nop
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d20:	bf00      	nop
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d2c:	bf00      	nop
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr

08007d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d38:	f000 f89a 	bl	8007e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d3c:	bf00      	nop
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTAO_Pin);
 8007d44:	2001      	movs	r0, #1
 8007d46:	f001 fa31 	bl	80091ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8007d54:	4802      	ldr	r0, [pc, #8]	; (8007d60 <DMA1_Channel2_IRQHandler+0x10>)
 8007d56:	f000 ff3f 	bl	8008bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007d5a:	bf00      	nop
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	200002b0 	.word	0x200002b0

08007d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007d68:	4802      	ldr	r0, [pc, #8]	; (8007d74 <TIM3_IRQHandler+0x10>)
 8007d6a:	f002 fb01 	bl	800a370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007d6e:	bf00      	nop
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000220 	.word	0x20000220

08007d78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007d7c:	4802      	ldr	r0, [pc, #8]	; (8007d88 <TIM4_IRQHandler+0x10>)
 8007d7e:	f002 faf7 	bl	800a370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007d82:	bf00      	nop
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000268 	.word	0x20000268

08007d8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d90:	bf00      	nop
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr

08007d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007d98:	f7ff fff8 	bl	8007d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d9c:	480b      	ldr	r0, [pc, #44]	; (8007dcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007d9e:	490c      	ldr	r1, [pc, #48]	; (8007dd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007da0:	4a0c      	ldr	r2, [pc, #48]	; (8007dd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007da4:	e002      	b.n	8007dac <LoopCopyDataInit>

08007da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007daa:	3304      	adds	r3, #4

08007dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007db0:	d3f9      	bcc.n	8007da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007db2:	4a09      	ldr	r2, [pc, #36]	; (8007dd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007db4:	4c09      	ldr	r4, [pc, #36]	; (8007ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007db8:	e001      	b.n	8007dbe <LoopFillZerobss>

08007dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007dbc:	3204      	adds	r2, #4

08007dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007dc0:	d3fb      	bcc.n	8007dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007dc2:	f003 f9d3 	bl	800b16c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007dc6:	f7f9 f80d 	bl	8000de4 <main>
  bx lr
 8007dca:	4770      	bx	lr
  ldr r0, =_sdata
 8007dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007dd0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8007dd4:	0800c4a0 	.word	0x0800c4a0
  ldr r2, =_sbss
 8007dd8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8007ddc:	200019a4 	.word	0x200019a4

08007de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007de0:	e7fe      	b.n	8007de0 <ADC1_2_IRQHandler>
	...

08007de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007de8:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <HAL_Init+0x28>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a07      	ldr	r2, [pc, #28]	; (8007e0c <HAL_Init+0x28>)
 8007dee:	f043 0310 	orr.w	r3, r3, #16
 8007df2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007df4:	2003      	movs	r0, #3
 8007df6:	f000 fd7b 	bl	80088f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007dfa:	200f      	movs	r0, #15
 8007dfc:	f000 f808 	bl	8007e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e00:	f7ff fe48 	bl	8007a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40022000 	.word	0x40022000

08007e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e18:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <HAL_InitTick+0x54>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4b12      	ldr	r3, [pc, #72]	; (8007e68 <HAL_InitTick+0x58>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	4619      	mov	r1, r3
 8007e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fd93 	bl	800895a <HAL_SYSTICK_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e00e      	b.n	8007e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b0f      	cmp	r3, #15
 8007e42:	d80a      	bhi.n	8007e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e44:	2200      	movs	r2, #0
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	f000 fd5b 	bl	8008906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e50:	4a06      	ldr	r2, [pc, #24]	; (8007e6c <HAL_InitTick+0x5c>)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e000      	b.n	8007e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000174 	.word	0x20000174
 8007e68:	2000017c 	.word	0x2000017c
 8007e6c:	20000178 	.word	0x20000178

08007e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <HAL_IncTick+0x1c>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <HAL_IncTick+0x20>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4413      	add	r3, r2
 8007e80:	4a03      	ldr	r2, [pc, #12]	; (8007e90 <HAL_IncTick+0x20>)
 8007e82:	6013      	str	r3, [r2, #0]
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr
 8007e8c:	2000017c 	.word	0x2000017c
 8007e90:	200019a0 	.word	0x200019a0

08007e94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  return uwTick;
 8007e98:	4b02      	ldr	r3, [pc, #8]	; (8007ea4 <HAL_GetTick+0x10>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr
 8007ea4:	200019a0 	.word	0x200019a0

08007ea8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e0be      	b.n	8008048 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff fdf6 	bl	8007ad8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fbf1 	bl	80086d4 <ADC_ConversionStop_Disable>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efa:	f003 0310 	and.w	r3, r3, #16
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f040 8099 	bne.w	8008036 <HAL_ADC_Init+0x18e>
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 8095 	bne.w	8008036 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007f14:	f023 0302 	bic.w	r3, r3, #2
 8007f18:	f043 0202 	orr.w	r2, r3, #2
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007f28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7b1b      	ldrb	r3, [r3, #12]
 8007f2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007f30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f40:	d003      	beq.n	8007f4a <HAL_ADC_Init+0xa2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d102      	bne.n	8007f50 <HAL_ADC_Init+0xa8>
 8007f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f4e:	e000      	b.n	8007f52 <HAL_ADC_Init+0xaa>
 8007f50:	2300      	movs	r3, #0
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	7d1b      	ldrb	r3, [r3, #20]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d119      	bne.n	8007f94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7b1b      	ldrb	r3, [r3, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	035a      	lsls	r2, r3, #13
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	e00b      	b.n	8007f94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f043 0220 	orr.w	r2, r3, #32
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	f043 0201 	orr.w	r2, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	4b28      	ldr	r3, [pc, #160]	; (8008050 <HAL_ADC_Init+0x1a8>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc4:	d003      	beq.n	8007fce <HAL_ADC_Init+0x126>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d104      	bne.n	8007fd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	051b      	lsls	r3, r3, #20
 8007fd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	4b18      	ldr	r3, [pc, #96]	; (8008054 <HAL_ADC_Init+0x1ac>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d10b      	bne.n	8008014 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	f043 0201 	orr.w	r2, r3, #1
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008012:	e018      	b.n	8008046 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	f023 0312 	bic.w	r3, r3, #18
 800801c:	f043 0210 	orr.w	r2, r3, #16
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	f043 0201 	orr.w	r2, r3, #1
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008034:	e007      	b.n	8008046 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803a:	f043 0210 	orr.w	r2, r3, #16
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	ffe1f7fd 	.word	0xffe1f7fd
 8008054:	ff1f0efe 	.word	0xff1f0efe

08008058 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_ADC_Start+0x1a>
 800806e:	2302      	movs	r3, #2
 8008070:	e098      	b.n	80081a4 <HAL_ADC_Start+0x14c>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fad0 	bl	8008620 <ADC_Enable>
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f040 8087 	bne.w	800819a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008094:	f023 0301 	bic.w	r3, r3, #1
 8008098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a41      	ldr	r2, [pc, #260]	; (80081ac <HAL_ADC_Start+0x154>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d105      	bne.n	80080b6 <HAL_ADC_Start+0x5e>
 80080aa:	4b41      	ldr	r3, [pc, #260]	; (80081b0 <HAL_ADC_Start+0x158>)
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d115      	bne.n	80080e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d026      	beq.n	800811e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80080e0:	e01d      	b.n	800811e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a2f      	ldr	r2, [pc, #188]	; (80081b0 <HAL_ADC_Start+0x158>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d004      	beq.n	8008102 <HAL_ADC_Start+0xaa>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a2b      	ldr	r2, [pc, #172]	; (80081ac <HAL_ADC_Start+0x154>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10d      	bne.n	800811e <HAL_ADC_Start+0xc6>
 8008102:	4b2b      	ldr	r3, [pc, #172]	; (80081b0 <HAL_ADC_Start+0x158>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008112:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008116:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	f023 0206 	bic.w	r2, r3, #6
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	62da      	str	r2, [r3, #44]	; 0x2c
 8008136:	e002      	b.n	800813e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f06f 0202 	mvn.w	r2, #2
 800814e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800815a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800815e:	d113      	bne.n	8008188 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008164:	4a11      	ldr	r2, [pc, #68]	; (80081ac <HAL_ADC_Start+0x154>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d105      	bne.n	8008176 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800816a:	4b11      	ldr	r3, [pc, #68]	; (80081b0 <HAL_ADC_Start+0x158>)
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008172:	2b00      	cmp	r3, #0
 8008174:	d108      	bne.n	8008188 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8008184:	609a      	str	r2, [r3, #8]
 8008186:	e00c      	b.n	80081a2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689a      	ldr	r2, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	e003      	b.n	80081a2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40012800 	.word	0x40012800
 80081b0:	40012400 	.word	0x40012400

080081b4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_ADC_Stop+0x1a>
 80081ca:	2302      	movs	r3, #2
 80081cc:	e01a      	b.n	8008204 <HAL_ADC_Stop+0x50>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa7c 	bl	80086d4 <ADC_ConversionStop_Disable>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d109      	bne.n	80081fa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80081ee:	f023 0301 	bic.w	r3, r3, #1
 80081f2:	f043 0201 	orr.w	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8008222:	f7ff fe37 	bl	8007e94 <HAL_GetTick>
 8008226:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00b      	beq.n	800824e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	f043 0220 	orr.w	r2, r3, #32
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e0d3      	b.n	80083f6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008258:	2b00      	cmp	r3, #0
 800825a:	d131      	bne.n	80082c0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8008266:	2b00      	cmp	r3, #0
 8008268:	d12a      	bne.n	80082c0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800826a:	e021      	b.n	80082b0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008272:	d01d      	beq.n	80082b0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <HAL_ADC_PollForConversion+0x7e>
 800827a:	f7ff fe0b 	bl	8007e94 <HAL_GetTick>
 800827e:	4602      	mov	r2, r0
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	429a      	cmp	r2, r3
 8008288:	d212      	bcs.n	80082b0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10b      	bne.n	80082b0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	f043 0204 	orr.w	r2, r3, #4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e0a2      	b.n	80083f6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0d6      	beq.n	800826c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80082be:	e070      	b.n	80083a2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80082c0:	4b4f      	ldr	r3, [pc, #316]	; (8008400 <HAL_ADC_PollForConversion+0x1f4>)
 80082c2:	681c      	ldr	r4, [r3, #0]
 80082c4:	2002      	movs	r0, #2
 80082c6:	f001 fc3b 	bl	8009b40 <HAL_RCCEx_GetPeriphCLKFreq>
 80082ca:	4603      	mov	r3, r0
 80082cc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6919      	ldr	r1, [r3, #16]
 80082d6:	4b4b      	ldr	r3, [pc, #300]	; (8008404 <HAL_ADC_PollForConversion+0x1f8>)
 80082d8:	400b      	ands	r3, r1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d118      	bne.n	8008310 <HAL_ADC_PollForConversion+0x104>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68d9      	ldr	r1, [r3, #12]
 80082e4:	4b48      	ldr	r3, [pc, #288]	; (8008408 <HAL_ADC_PollForConversion+0x1fc>)
 80082e6:	400b      	ands	r3, r1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d111      	bne.n	8008310 <HAL_ADC_PollForConversion+0x104>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6919      	ldr	r1, [r3, #16]
 80082f2:	4b46      	ldr	r3, [pc, #280]	; (800840c <HAL_ADC_PollForConversion+0x200>)
 80082f4:	400b      	ands	r3, r1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d108      	bne.n	800830c <HAL_ADC_PollForConversion+0x100>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68d9      	ldr	r1, [r3, #12]
 8008300:	4b43      	ldr	r3, [pc, #268]	; (8008410 <HAL_ADC_PollForConversion+0x204>)
 8008302:	400b      	ands	r3, r1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_ADC_PollForConversion+0x100>
 8008308:	2314      	movs	r3, #20
 800830a:	e020      	b.n	800834e <HAL_ADC_PollForConversion+0x142>
 800830c:	2329      	movs	r3, #41	; 0x29
 800830e:	e01e      	b.n	800834e <HAL_ADC_PollForConversion+0x142>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6919      	ldr	r1, [r3, #16]
 8008316:	4b3d      	ldr	r3, [pc, #244]	; (800840c <HAL_ADC_PollForConversion+0x200>)
 8008318:	400b      	ands	r3, r1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_ADC_PollForConversion+0x120>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68d9      	ldr	r1, [r3, #12]
 8008324:	4b3a      	ldr	r3, [pc, #232]	; (8008410 <HAL_ADC_PollForConversion+0x204>)
 8008326:	400b      	ands	r3, r1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00d      	beq.n	8008348 <HAL_ADC_PollForConversion+0x13c>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6919      	ldr	r1, [r3, #16]
 8008332:	4b38      	ldr	r3, [pc, #224]	; (8008414 <HAL_ADC_PollForConversion+0x208>)
 8008334:	400b      	ands	r3, r1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d108      	bne.n	800834c <HAL_ADC_PollForConversion+0x140>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68d9      	ldr	r1, [r3, #12]
 8008340:	4b34      	ldr	r3, [pc, #208]	; (8008414 <HAL_ADC_PollForConversion+0x208>)
 8008342:	400b      	ands	r3, r1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <HAL_ADC_PollForConversion+0x140>
 8008348:	2354      	movs	r3, #84	; 0x54
 800834a:	e000      	b.n	800834e <HAL_ADC_PollForConversion+0x142>
 800834c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800834e:	fb02 f303 	mul.w	r3, r2, r3
 8008352:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8008354:	e021      	b.n	800839a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835c:	d01a      	beq.n	8008394 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <HAL_ADC_PollForConversion+0x168>
 8008364:	f7ff fd96 	bl	8007e94 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d20f      	bcs.n	8008394 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	d90b      	bls.n	8008394 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	f043 0204 	orr.w	r2, r3, #4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e030      	b.n	80083f6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d8d9      	bhi.n	8008356 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f06f 0212 	mvn.w	r2, #18
 80083aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80083c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80083c6:	d115      	bne.n	80083f4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d111      	bne.n	80083f4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d105      	bne.n	80083f4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	f043 0201 	orr.w	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd90      	pop	{r4, r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000174 	.word	0x20000174
 8008404:	24924924 	.word	0x24924924
 8008408:	00924924 	.word	0x00924924
 800840c:	12492492 	.word	0x12492492
 8008410:	00492492 	.word	0x00492492
 8008414:	00249249 	.word	0x00249249

08008418 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008426:	4618      	mov	r0, r3
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	bc80      	pop	{r7}
 800842e:	4770      	bx	lr

08008430 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_ADC_ConfigChannel+0x20>
 800844c:	2302      	movs	r3, #2
 800844e:	e0dc      	b.n	800860a <HAL_ADC_ConfigChannel+0x1da>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2b06      	cmp	r3, #6
 800845e:	d81c      	bhi.n	800849a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	3b05      	subs	r3, #5
 8008472:	221f      	movs	r2, #31
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	43db      	mvns	r3, r3
 800847a:	4019      	ands	r1, r3
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	3b05      	subs	r3, #5
 800848c:	fa00 f203 	lsl.w	r2, r0, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	635a      	str	r2, [r3, #52]	; 0x34
 8008498:	e03c      	b.n	8008514 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b0c      	cmp	r3, #12
 80084a0:	d81c      	bhi.n	80084dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	3b23      	subs	r3, #35	; 0x23
 80084b4:	221f      	movs	r2, #31
 80084b6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ba:	43db      	mvns	r3, r3
 80084bc:	4019      	ands	r1, r3
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	3b23      	subs	r3, #35	; 0x23
 80084ce:	fa00 f203 	lsl.w	r2, r0, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	631a      	str	r2, [r3, #48]	; 0x30
 80084da:	e01b      	b.n	8008514 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	3b41      	subs	r3, #65	; 0x41
 80084ee:	221f      	movs	r2, #31
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	43db      	mvns	r3, r3
 80084f6:	4019      	ands	r1, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	3b41      	subs	r3, #65	; 0x41
 8008508:	fa00 f203 	lsl.w	r2, r0, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b09      	cmp	r3, #9
 800851a:	d91c      	bls.n	8008556 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68d9      	ldr	r1, [r3, #12]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4613      	mov	r3, r2
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	4413      	add	r3, r2
 800852c:	3b1e      	subs	r3, #30
 800852e:	2207      	movs	r2, #7
 8008530:	fa02 f303 	lsl.w	r3, r2, r3
 8008534:	43db      	mvns	r3, r3
 8008536:	4019      	ands	r1, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	6898      	ldr	r0, [r3, #8]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	4413      	add	r3, r2
 8008546:	3b1e      	subs	r3, #30
 8008548:	fa00 f203 	lsl.w	r2, r0, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	60da      	str	r2, [r3, #12]
 8008554:	e019      	b.n	800858a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6919      	ldr	r1, [r3, #16]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	2207      	movs	r2, #7
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	43db      	mvns	r3, r3
 800856e:	4019      	ands	r1, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	6898      	ldr	r0, [r3, #8]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	4613      	mov	r3, r2
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	4413      	add	r3, r2
 800857e:	fa00 f203 	lsl.w	r2, r0, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b10      	cmp	r3, #16
 8008590:	d003      	beq.n	800859a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008596:	2b11      	cmp	r3, #17
 8008598:	d132      	bne.n	8008600 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <HAL_ADC_ConfigChannel+0x1e4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d125      	bne.n	80085f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d126      	bne.n	8008600 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80085c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b10      	cmp	r3, #16
 80085c8:	d11a      	bne.n	8008600 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80085ca:	4b13      	ldr	r3, [pc, #76]	; (8008618 <HAL_ADC_ConfigChannel+0x1e8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a13      	ldr	r2, [pc, #76]	; (800861c <HAL_ADC_ConfigChannel+0x1ec>)
 80085d0:	fba2 2303 	umull	r2, r3, r2, r3
 80085d4:	0c9a      	lsrs	r2, r3, #18
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80085e0:	e002      	b.n	80085e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1f9      	bne.n	80085e2 <HAL_ADC_ConfigChannel+0x1b2>
 80085ee:	e007      	b.n	8008600 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	f043 0220 	orr.w	r2, r3, #32
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	bc80      	pop	{r7}
 8008612:	4770      	bx	lr
 8008614:	40012400 	.word	0x40012400
 8008618:	20000174 	.word	0x20000174
 800861c:	431bde83 	.word	0x431bde83

08008620 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b01      	cmp	r3, #1
 800863c:	d040      	beq.n	80086c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 0201 	orr.w	r2, r2, #1
 800864c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800864e:	4b1f      	ldr	r3, [pc, #124]	; (80086cc <ADC_Enable+0xac>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1f      	ldr	r2, [pc, #124]	; (80086d0 <ADC_Enable+0xb0>)
 8008654:	fba2 2303 	umull	r2, r3, r2, r3
 8008658:	0c9b      	lsrs	r3, r3, #18
 800865a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800865c:	e002      	b.n	8008664 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	3b01      	subs	r3, #1
 8008662:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f9      	bne.n	800865e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800866a:	f7ff fc13 	bl	8007e94 <HAL_GetTick>
 800866e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008670:	e01f      	b.n	80086b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008672:	f7ff fc0f 	bl	8007e94 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d918      	bls.n	80086b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b01      	cmp	r3, #1
 800868c:	d011      	beq.n	80086b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	f043 0210 	orr.w	r2, r3, #16
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	f043 0201 	orr.w	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e007      	b.n	80086c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d1d8      	bne.n	8008672 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000174 	.word	0x20000174
 80086d0:	431bde83 	.word	0x431bde83

080086d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d12e      	bne.n	800874c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0201 	bic.w	r2, r2, #1
 80086fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80086fe:	f7ff fbc9 	bl	8007e94 <HAL_GetTick>
 8008702:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008704:	e01b      	b.n	800873e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008706:	f7ff fbc5 	bl	8007e94 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d914      	bls.n	800873e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b01      	cmp	r3, #1
 8008720:	d10d      	bne.n	800873e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	f043 0210 	orr.w	r2, r3, #16
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	f043 0201 	orr.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e007      	b.n	800874e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b01      	cmp	r3, #1
 800874a:	d0dc      	beq.n	8008706 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008768:	4b0c      	ldr	r3, [pc, #48]	; (800879c <__NVIC_SetPriorityGrouping+0x44>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008774:	4013      	ands	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800878a:	4a04      	ldr	r2, [pc, #16]	; (800879c <__NVIC_SetPriorityGrouping+0x44>)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	60d3      	str	r3, [r2, #12]
}
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	e000ed00 	.word	0xe000ed00

080087a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087a4:	4b04      	ldr	r3, [pc, #16]	; (80087b8 <__NVIC_GetPriorityGrouping+0x18>)
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	0a1b      	lsrs	r3, r3, #8
 80087aa:	f003 0307 	and.w	r3, r3, #7
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	e000ed00 	.word	0xe000ed00

080087bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	db0b      	blt.n	80087e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ce:	79fb      	ldrb	r3, [r7, #7]
 80087d0:	f003 021f 	and.w	r2, r3, #31
 80087d4:	4906      	ldr	r1, [pc, #24]	; (80087f0 <__NVIC_EnableIRQ+0x34>)
 80087d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087da:	095b      	lsrs	r3, r3, #5
 80087dc:	2001      	movs	r0, #1
 80087de:	fa00 f202 	lsl.w	r2, r0, r2
 80087e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr
 80087f0:	e000e100 	.word	0xe000e100

080087f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008804:	2b00      	cmp	r3, #0
 8008806:	db0a      	blt.n	800881e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	490c      	ldr	r1, [pc, #48]	; (8008840 <__NVIC_SetPriority+0x4c>)
 800880e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008812:	0112      	lsls	r2, r2, #4
 8008814:	b2d2      	uxtb	r2, r2
 8008816:	440b      	add	r3, r1
 8008818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800881c:	e00a      	b.n	8008834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	b2da      	uxtb	r2, r3
 8008822:	4908      	ldr	r1, [pc, #32]	; (8008844 <__NVIC_SetPriority+0x50>)
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	3b04      	subs	r3, #4
 800882c:	0112      	lsls	r2, r2, #4
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	440b      	add	r3, r1
 8008832:	761a      	strb	r2, [r3, #24]
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	bc80      	pop	{r7}
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	e000e100 	.word	0xe000e100
 8008844:	e000ed00 	.word	0xe000ed00

08008848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008848:	b480      	push	{r7}
 800884a:	b089      	sub	sp, #36	; 0x24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f1c3 0307 	rsb	r3, r3, #7
 8008862:	2b04      	cmp	r3, #4
 8008864:	bf28      	it	cs
 8008866:	2304      	movcs	r3, #4
 8008868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	3304      	adds	r3, #4
 800886e:	2b06      	cmp	r3, #6
 8008870:	d902      	bls.n	8008878 <NVIC_EncodePriority+0x30>
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	3b03      	subs	r3, #3
 8008876:	e000      	b.n	800887a <NVIC_EncodePriority+0x32>
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800887c:	f04f 32ff 	mov.w	r2, #4294967295
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	43da      	mvns	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	401a      	ands	r2, r3
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008890:	f04f 31ff 	mov.w	r1, #4294967295
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	fa01 f303 	lsl.w	r3, r1, r3
 800889a:	43d9      	mvns	r1, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088a0:	4313      	orrs	r3, r2
         );
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3724      	adds	r7, #36	; 0x24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc80      	pop	{r7}
 80088aa:	4770      	bx	lr

080088ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088bc:	d301      	bcc.n	80088c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088be:	2301      	movs	r3, #1
 80088c0:	e00f      	b.n	80088e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088c2:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <SysTick_Config+0x40>)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088ca:	210f      	movs	r1, #15
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	f7ff ff90 	bl	80087f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <SysTick_Config+0x40>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088da:	4b04      	ldr	r3, [pc, #16]	; (80088ec <SysTick_Config+0x40>)
 80088dc:	2207      	movs	r2, #7
 80088de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	e000e010 	.word	0xe000e010

080088f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff ff2d 	bl	8008758 <__NVIC_SetPriorityGrouping>
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008906:	b580      	push	{r7, lr}
 8008908:	b086      	sub	sp, #24
 800890a:	af00      	add	r7, sp, #0
 800890c:	4603      	mov	r3, r0
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008914:	2300      	movs	r3, #0
 8008916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008918:	f7ff ff42 	bl	80087a0 <__NVIC_GetPriorityGrouping>
 800891c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	68b9      	ldr	r1, [r7, #8]
 8008922:	6978      	ldr	r0, [r7, #20]
 8008924:	f7ff ff90 	bl	8008848 <NVIC_EncodePriority>
 8008928:	4602      	mov	r2, r0
 800892a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800892e:	4611      	mov	r1, r2
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff ff5f 	bl	80087f4 <__NVIC_SetPriority>
}
 8008936:	bf00      	nop
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	4603      	mov	r3, r0
 8008946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff ff35 	bl	80087bc <__NVIC_EnableIRQ>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff ffa2 	bl	80088ac <SysTick_Config>
 8008968:	4603      	mov	r3, r0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e043      	b.n	8008a12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <HAL_DMA_Init+0xa8>)
 8008992:	4413      	add	r3, r2
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <HAL_DMA_Init+0xac>)
 8008996:	fba2 2303 	umull	r2, r3, r2, r3
 800899a:	091b      	lsrs	r3, r3, #4
 800899c:	009a      	lsls	r2, r3, #2
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a1f      	ldr	r2, [pc, #124]	; (8008a24 <HAL_DMA_Init+0xb0>)
 80089a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80089be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80089c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80089cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr
 8008a1c:	bffdfff8 	.word	0xbffdfff8
 8008a20:	cccccccd 	.word	0xcccccccd
 8008a24:	40020000 	.word	0x40020000

08008a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d101      	bne.n	8008a48 <HAL_DMA_Start_IT+0x20>
 8008a44:	2302      	movs	r3, #2
 8008a46:	e04b      	b.n	8008ae0 <HAL_DMA_Start_IT+0xb8>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d13a      	bne.n	8008ad2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0201 	bic.w	r2, r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 f9af 	bl	8008de4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d008      	beq.n	8008aa0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f042 020e 	orr.w	r2, r2, #14
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	e00f      	b.n	8008ac0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0204 	bic.w	r2, r2, #4
 8008aae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 020a 	orr.w	r2, r2, #10
 8008abe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0201 	orr.w	r2, r2, #1
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	e005      	b.n	8008ade <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008ada:	2302      	movs	r3, #2
 8008adc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d005      	beq.n	8008b0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2204      	movs	r2, #4
 8008b04:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	73fb      	strb	r3, [r7, #15]
 8008b0a:	e051      	b.n	8008bb0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 020e 	bic.w	r2, r2, #14
 8008b1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a22      	ldr	r2, [pc, #136]	; (8008bbc <HAL_DMA_Abort_IT+0xd4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d029      	beq.n	8008b8a <HAL_DMA_Abort_IT+0xa2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a21      	ldr	r2, [pc, #132]	; (8008bc0 <HAL_DMA_Abort_IT+0xd8>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d022      	beq.n	8008b86 <HAL_DMA_Abort_IT+0x9e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a1f      	ldr	r2, [pc, #124]	; (8008bc4 <HAL_DMA_Abort_IT+0xdc>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d01a      	beq.n	8008b80 <HAL_DMA_Abort_IT+0x98>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <HAL_DMA_Abort_IT+0xe0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d012      	beq.n	8008b7a <HAL_DMA_Abort_IT+0x92>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1c      	ldr	r2, [pc, #112]	; (8008bcc <HAL_DMA_Abort_IT+0xe4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00a      	beq.n	8008b74 <HAL_DMA_Abort_IT+0x8c>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1b      	ldr	r2, [pc, #108]	; (8008bd0 <HAL_DMA_Abort_IT+0xe8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d102      	bne.n	8008b6e <HAL_DMA_Abort_IT+0x86>
 8008b68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b6c:	e00e      	b.n	8008b8c <HAL_DMA_Abort_IT+0xa4>
 8008b6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b72:	e00b      	b.n	8008b8c <HAL_DMA_Abort_IT+0xa4>
 8008b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b78:	e008      	b.n	8008b8c <HAL_DMA_Abort_IT+0xa4>
 8008b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b7e:	e005      	b.n	8008b8c <HAL_DMA_Abort_IT+0xa4>
 8008b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b84:	e002      	b.n	8008b8c <HAL_DMA_Abort_IT+0xa4>
 8008b86:	2310      	movs	r3, #16
 8008b88:	e000      	b.n	8008b8c <HAL_DMA_Abort_IT+0xa4>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4a11      	ldr	r2, [pc, #68]	; (8008bd4 <HAL_DMA_Abort_IT+0xec>)
 8008b8e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	4798      	blx	r3
    } 
  }
  return status;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	40020008 	.word	0x40020008
 8008bc0:	4002001c 	.word	0x4002001c
 8008bc4:	40020030 	.word	0x40020030
 8008bc8:	40020044 	.word	0x40020044
 8008bcc:	40020058 	.word	0x40020058
 8008bd0:	4002006c 	.word	0x4002006c
 8008bd4:	40020000 	.word	0x40020000

08008bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf4:	2204      	movs	r2, #4
 8008bf6:	409a      	lsls	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d04f      	beq.n	8008ca0 <HAL_DMA_IRQHandler+0xc8>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d04a      	beq.n	8008ca0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d107      	bne.n	8008c28 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0204 	bic.w	r2, r2, #4
 8008c26:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a66      	ldr	r2, [pc, #408]	; (8008dc8 <HAL_DMA_IRQHandler+0x1f0>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d029      	beq.n	8008c86 <HAL_DMA_IRQHandler+0xae>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a65      	ldr	r2, [pc, #404]	; (8008dcc <HAL_DMA_IRQHandler+0x1f4>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d022      	beq.n	8008c82 <HAL_DMA_IRQHandler+0xaa>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a63      	ldr	r2, [pc, #396]	; (8008dd0 <HAL_DMA_IRQHandler+0x1f8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d01a      	beq.n	8008c7c <HAL_DMA_IRQHandler+0xa4>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a62      	ldr	r2, [pc, #392]	; (8008dd4 <HAL_DMA_IRQHandler+0x1fc>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d012      	beq.n	8008c76 <HAL_DMA_IRQHandler+0x9e>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a60      	ldr	r2, [pc, #384]	; (8008dd8 <HAL_DMA_IRQHandler+0x200>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00a      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x98>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a5f      	ldr	r2, [pc, #380]	; (8008ddc <HAL_DMA_IRQHandler+0x204>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d102      	bne.n	8008c6a <HAL_DMA_IRQHandler+0x92>
 8008c64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c68:	e00e      	b.n	8008c88 <HAL_DMA_IRQHandler+0xb0>
 8008c6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c6e:	e00b      	b.n	8008c88 <HAL_DMA_IRQHandler+0xb0>
 8008c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c74:	e008      	b.n	8008c88 <HAL_DMA_IRQHandler+0xb0>
 8008c76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c7a:	e005      	b.n	8008c88 <HAL_DMA_IRQHandler+0xb0>
 8008c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c80:	e002      	b.n	8008c88 <HAL_DMA_IRQHandler+0xb0>
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	e000      	b.n	8008c88 <HAL_DMA_IRQHandler+0xb0>
 8008c86:	2304      	movs	r3, #4
 8008c88:	4a55      	ldr	r2, [pc, #340]	; (8008de0 <HAL_DMA_IRQHandler+0x208>)
 8008c8a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 8094 	beq.w	8008dbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008c9e:	e08e      	b.n	8008dbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	409a      	lsls	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4013      	ands	r3, r2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d056      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x186>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d051      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10b      	bne.n	8008ce0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 020a 	bic.w	r2, r2, #10
 8008cd6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a38      	ldr	r2, [pc, #224]	; (8008dc8 <HAL_DMA_IRQHandler+0x1f0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d029      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x166>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a37      	ldr	r2, [pc, #220]	; (8008dcc <HAL_DMA_IRQHandler+0x1f4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d022      	beq.n	8008d3a <HAL_DMA_IRQHandler+0x162>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a35      	ldr	r2, [pc, #212]	; (8008dd0 <HAL_DMA_IRQHandler+0x1f8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d01a      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x15c>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a34      	ldr	r2, [pc, #208]	; (8008dd4 <HAL_DMA_IRQHandler+0x1fc>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d012      	beq.n	8008d2e <HAL_DMA_IRQHandler+0x156>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a32      	ldr	r2, [pc, #200]	; (8008dd8 <HAL_DMA_IRQHandler+0x200>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00a      	beq.n	8008d28 <HAL_DMA_IRQHandler+0x150>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a31      	ldr	r2, [pc, #196]	; (8008ddc <HAL_DMA_IRQHandler+0x204>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d102      	bne.n	8008d22 <HAL_DMA_IRQHandler+0x14a>
 8008d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d20:	e00e      	b.n	8008d40 <HAL_DMA_IRQHandler+0x168>
 8008d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d26:	e00b      	b.n	8008d40 <HAL_DMA_IRQHandler+0x168>
 8008d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d2c:	e008      	b.n	8008d40 <HAL_DMA_IRQHandler+0x168>
 8008d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d32:	e005      	b.n	8008d40 <HAL_DMA_IRQHandler+0x168>
 8008d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d38:	e002      	b.n	8008d40 <HAL_DMA_IRQHandler+0x168>
 8008d3a:	2320      	movs	r3, #32
 8008d3c:	e000      	b.n	8008d40 <HAL_DMA_IRQHandler+0x168>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	4a27      	ldr	r2, [pc, #156]	; (8008de0 <HAL_DMA_IRQHandler+0x208>)
 8008d42:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d034      	beq.n	8008dbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008d5c:	e02f      	b.n	8008dbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	2208      	movs	r2, #8
 8008d64:	409a      	lsls	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d028      	beq.n	8008dc0 <HAL_DMA_IRQHandler+0x1e8>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f003 0308 	and.w	r3, r3, #8
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d023      	beq.n	8008dc0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 020e 	bic.w	r2, r2, #14
 8008d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d90:	2101      	movs	r1, #1
 8008d92:	fa01 f202 	lsl.w	r2, r1, r2
 8008d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d004      	beq.n	8008dc0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
    }
  }
  return;
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
}
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40020008 	.word	0x40020008
 8008dcc:	4002001c 	.word	0x4002001c
 8008dd0:	40020030 	.word	0x40020030
 8008dd4:	40020044 	.word	0x40020044
 8008dd8:	40020058 	.word	0x40020058
 8008ddc:	4002006c 	.word	0x4002006c
 8008de0:	40020000 	.word	0x40020000

08008de4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8008e00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b10      	cmp	r3, #16
 8008e10:	d108      	bne.n	8008e24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008e22:	e007      	b.n	8008e34 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	60da      	str	r2, [r3, #12]
}
 8008e34:	bf00      	nop
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bc80      	pop	{r7}
 8008e3c:	4770      	bx	lr
	...

08008e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b08b      	sub	sp, #44	; 0x2c
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e52:	e169      	b.n	8009128 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e54:	2201      	movs	r2, #1
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	4013      	ands	r3, r2
 8008e66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	f040 8158 	bne.w	8009122 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4a9a      	ldr	r2, [pc, #616]	; (80090e0 <HAL_GPIO_Init+0x2a0>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d05e      	beq.n	8008f3a <HAL_GPIO_Init+0xfa>
 8008e7c:	4a98      	ldr	r2, [pc, #608]	; (80090e0 <HAL_GPIO_Init+0x2a0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d875      	bhi.n	8008f6e <HAL_GPIO_Init+0x12e>
 8008e82:	4a98      	ldr	r2, [pc, #608]	; (80090e4 <HAL_GPIO_Init+0x2a4>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d058      	beq.n	8008f3a <HAL_GPIO_Init+0xfa>
 8008e88:	4a96      	ldr	r2, [pc, #600]	; (80090e4 <HAL_GPIO_Init+0x2a4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d86f      	bhi.n	8008f6e <HAL_GPIO_Init+0x12e>
 8008e8e:	4a96      	ldr	r2, [pc, #600]	; (80090e8 <HAL_GPIO_Init+0x2a8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d052      	beq.n	8008f3a <HAL_GPIO_Init+0xfa>
 8008e94:	4a94      	ldr	r2, [pc, #592]	; (80090e8 <HAL_GPIO_Init+0x2a8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d869      	bhi.n	8008f6e <HAL_GPIO_Init+0x12e>
 8008e9a:	4a94      	ldr	r2, [pc, #592]	; (80090ec <HAL_GPIO_Init+0x2ac>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d04c      	beq.n	8008f3a <HAL_GPIO_Init+0xfa>
 8008ea0:	4a92      	ldr	r2, [pc, #584]	; (80090ec <HAL_GPIO_Init+0x2ac>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d863      	bhi.n	8008f6e <HAL_GPIO_Init+0x12e>
 8008ea6:	4a92      	ldr	r2, [pc, #584]	; (80090f0 <HAL_GPIO_Init+0x2b0>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d046      	beq.n	8008f3a <HAL_GPIO_Init+0xfa>
 8008eac:	4a90      	ldr	r2, [pc, #576]	; (80090f0 <HAL_GPIO_Init+0x2b0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d85d      	bhi.n	8008f6e <HAL_GPIO_Init+0x12e>
 8008eb2:	2b12      	cmp	r3, #18
 8008eb4:	d82a      	bhi.n	8008f0c <HAL_GPIO_Init+0xcc>
 8008eb6:	2b12      	cmp	r3, #18
 8008eb8:	d859      	bhi.n	8008f6e <HAL_GPIO_Init+0x12e>
 8008eba:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <HAL_GPIO_Init+0x80>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008f3b 	.word	0x08008f3b
 8008ec4:	08008f15 	.word	0x08008f15
 8008ec8:	08008f27 	.word	0x08008f27
 8008ecc:	08008f69 	.word	0x08008f69
 8008ed0:	08008f6f 	.word	0x08008f6f
 8008ed4:	08008f6f 	.word	0x08008f6f
 8008ed8:	08008f6f 	.word	0x08008f6f
 8008edc:	08008f6f 	.word	0x08008f6f
 8008ee0:	08008f6f 	.word	0x08008f6f
 8008ee4:	08008f6f 	.word	0x08008f6f
 8008ee8:	08008f6f 	.word	0x08008f6f
 8008eec:	08008f6f 	.word	0x08008f6f
 8008ef0:	08008f6f 	.word	0x08008f6f
 8008ef4:	08008f6f 	.word	0x08008f6f
 8008ef8:	08008f6f 	.word	0x08008f6f
 8008efc:	08008f6f 	.word	0x08008f6f
 8008f00:	08008f6f 	.word	0x08008f6f
 8008f04:	08008f1d 	.word	0x08008f1d
 8008f08:	08008f31 	.word	0x08008f31
 8008f0c:	4a79      	ldr	r2, [pc, #484]	; (80090f4 <HAL_GPIO_Init+0x2b4>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d013      	beq.n	8008f3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f12:	e02c      	b.n	8008f6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	623b      	str	r3, [r7, #32]
          break;
 8008f1a:	e029      	b.n	8008f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	3304      	adds	r3, #4
 8008f22:	623b      	str	r3, [r7, #32]
          break;
 8008f24:	e024      	b.n	8008f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	623b      	str	r3, [r7, #32]
          break;
 8008f2e:	e01f      	b.n	8008f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	330c      	adds	r3, #12
 8008f36:	623b      	str	r3, [r7, #32]
          break;
 8008f38:	e01a      	b.n	8008f70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f42:	2304      	movs	r3, #4
 8008f44:	623b      	str	r3, [r7, #32]
          break;
 8008f46:	e013      	b.n	8008f70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d105      	bne.n	8008f5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f50:	2308      	movs	r3, #8
 8008f52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	611a      	str	r2, [r3, #16]
          break;
 8008f5a:	e009      	b.n	8008f70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	615a      	str	r2, [r3, #20]
          break;
 8008f66:	e003      	b.n	8008f70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	623b      	str	r3, [r7, #32]
          break;
 8008f6c:	e000      	b.n	8008f70 <HAL_GPIO_Init+0x130>
          break;
 8008f6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2bff      	cmp	r3, #255	; 0xff
 8008f74:	d801      	bhi.n	8008f7a <HAL_GPIO_Init+0x13a>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	e001      	b.n	8008f7e <HAL_GPIO_Init+0x13e>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	2bff      	cmp	r3, #255	; 0xff
 8008f84:	d802      	bhi.n	8008f8c <HAL_GPIO_Init+0x14c>
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	e002      	b.n	8008f92 <HAL_GPIO_Init+0x152>
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	3b08      	subs	r3, #8
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	210f      	movs	r1, #15
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	401a      	ands	r2, r3
 8008fa4:	6a39      	ldr	r1, [r7, #32]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fac:	431a      	orrs	r2, r3
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f000 80b1 	beq.w	8009122 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <HAL_GPIO_Init+0x2b8>)
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	4a4c      	ldr	r2, [pc, #304]	; (80090f8 <HAL_GPIO_Init+0x2b8>)
 8008fc6:	f043 0301 	orr.w	r3, r3, #1
 8008fca:	6193      	str	r3, [r2, #24]
 8008fcc:	4b4a      	ldr	r3, [pc, #296]	; (80090f8 <HAL_GPIO_Init+0x2b8>)
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008fd8:	4a48      	ldr	r2, [pc, #288]	; (80090fc <HAL_GPIO_Init+0x2bc>)
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	089b      	lsrs	r3, r3, #2
 8008fde:	3302      	adds	r3, #2
 8008fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	f003 0303 	and.w	r3, r3, #3
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	220f      	movs	r2, #15
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	43db      	mvns	r3, r3
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a40      	ldr	r2, [pc, #256]	; (8009100 <HAL_GPIO_Init+0x2c0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d013      	beq.n	800902c <HAL_GPIO_Init+0x1ec>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a3f      	ldr	r2, [pc, #252]	; (8009104 <HAL_GPIO_Init+0x2c4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00d      	beq.n	8009028 <HAL_GPIO_Init+0x1e8>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a3e      	ldr	r2, [pc, #248]	; (8009108 <HAL_GPIO_Init+0x2c8>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d007      	beq.n	8009024 <HAL_GPIO_Init+0x1e4>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a3d      	ldr	r2, [pc, #244]	; (800910c <HAL_GPIO_Init+0x2cc>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d101      	bne.n	8009020 <HAL_GPIO_Init+0x1e0>
 800901c:	2303      	movs	r3, #3
 800901e:	e006      	b.n	800902e <HAL_GPIO_Init+0x1ee>
 8009020:	2304      	movs	r3, #4
 8009022:	e004      	b.n	800902e <HAL_GPIO_Init+0x1ee>
 8009024:	2302      	movs	r3, #2
 8009026:	e002      	b.n	800902e <HAL_GPIO_Init+0x1ee>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <HAL_GPIO_Init+0x1ee>
 800902c:	2300      	movs	r3, #0
 800902e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009030:	f002 0203 	and.w	r2, r2, #3
 8009034:	0092      	lsls	r2, r2, #2
 8009036:	4093      	lsls	r3, r2
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800903e:	492f      	ldr	r1, [pc, #188]	; (80090fc <HAL_GPIO_Init+0x2bc>)
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	089b      	lsrs	r3, r3, #2
 8009044:	3302      	adds	r3, #2
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009058:	4b2d      	ldr	r3, [pc, #180]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	492c      	ldr	r1, [pc, #176]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	4313      	orrs	r3, r2
 8009062:	608b      	str	r3, [r1, #8]
 8009064:	e006      	b.n	8009074 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009066:	4b2a      	ldr	r3, [pc, #168]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 8009068:	689a      	ldr	r2, [r3, #8]
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	43db      	mvns	r3, r3
 800906e:	4928      	ldr	r1, [pc, #160]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 8009070:	4013      	ands	r3, r2
 8009072:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d006      	beq.n	800908e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009080:	4b23      	ldr	r3, [pc, #140]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	4922      	ldr	r1, [pc, #136]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	4313      	orrs	r3, r2
 800908a:	60cb      	str	r3, [r1, #12]
 800908c:	e006      	b.n	800909c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800908e:	4b20      	ldr	r3, [pc, #128]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	43db      	mvns	r3, r3
 8009096:	491e      	ldr	r1, [pc, #120]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 8009098:	4013      	ands	r3, r2
 800909a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d006      	beq.n	80090b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80090a8:	4b19      	ldr	r3, [pc, #100]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	4918      	ldr	r1, [pc, #96]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	604b      	str	r3, [r1, #4]
 80090b4:	e006      	b.n	80090c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80090b6:	4b16      	ldr	r3, [pc, #88]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	43db      	mvns	r3, r3
 80090be:	4914      	ldr	r1, [pc, #80]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d021      	beq.n	8009114 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80090d0:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	490e      	ldr	r1, [pc, #56]	; (8009110 <HAL_GPIO_Init+0x2d0>)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	4313      	orrs	r3, r2
 80090da:	600b      	str	r3, [r1, #0]
 80090dc:	e021      	b.n	8009122 <HAL_GPIO_Init+0x2e2>
 80090de:	bf00      	nop
 80090e0:	10320000 	.word	0x10320000
 80090e4:	10310000 	.word	0x10310000
 80090e8:	10220000 	.word	0x10220000
 80090ec:	10210000 	.word	0x10210000
 80090f0:	10120000 	.word	0x10120000
 80090f4:	10110000 	.word	0x10110000
 80090f8:	40021000 	.word	0x40021000
 80090fc:	40010000 	.word	0x40010000
 8009100:	40010800 	.word	0x40010800
 8009104:	40010c00 	.word	0x40010c00
 8009108:	40011000 	.word	0x40011000
 800910c:	40011400 	.word	0x40011400
 8009110:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009114:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <HAL_GPIO_Init+0x304>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	43db      	mvns	r3, r3
 800911c:	4909      	ldr	r1, [pc, #36]	; (8009144 <HAL_GPIO_Init+0x304>)
 800911e:	4013      	ands	r3, r2
 8009120:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	3301      	adds	r3, #1
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	fa22 f303 	lsr.w	r3, r2, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	f47f ae8e 	bne.w	8008e54 <HAL_GPIO_Init+0x14>
  }
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	372c      	adds	r7, #44	; 0x2c
 800913e:	46bd      	mov	sp, r7
 8009140:	bc80      	pop	{r7}
 8009142:	4770      	bx	lr
 8009144:	40010400 	.word	0x40010400

08009148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	807b      	strh	r3, [r7, #2]
 8009154:	4613      	mov	r3, r2
 8009156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009158:	787b      	ldrb	r3, [r7, #1]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800915e:	887a      	ldrh	r2, [r7, #2]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009164:	e003      	b.n	800916e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009166:	887b      	ldrh	r3, [r7, #2]
 8009168:	041a      	lsls	r2, r3, #16
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	611a      	str	r2, [r3, #16]
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	bc80      	pop	{r7}
 8009176:	4770      	bx	lr

08009178 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800918a:	887a      	ldrh	r2, [r7, #2]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4013      	ands	r3, r2
 8009190:	041a      	lsls	r2, r3, #16
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	43d9      	mvns	r1, r3
 8009196:	887b      	ldrh	r3, [r7, #2]
 8009198:	400b      	ands	r3, r1
 800919a:	431a      	orrs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	611a      	str	r2, [r3, #16]
}
 80091a0:	bf00      	nop
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bc80      	pop	{r7}
 80091a8:	4770      	bx	lr
	...

080091ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80091b6:	4b08      	ldr	r3, [pc, #32]	; (80091d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80091b8:	695a      	ldr	r2, [r3, #20]
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	4013      	ands	r3, r2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80091c2:	4a05      	ldr	r2, [pc, #20]	; (80091d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7f8 f97a 	bl	80014c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	40010400 	.word	0x40010400

080091dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e272      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8087 	beq.w	800930a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80091fc:	4b92      	ldr	r3, [pc, #584]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f003 030c 	and.w	r3, r3, #12
 8009204:	2b04      	cmp	r3, #4
 8009206:	d00c      	beq.n	8009222 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009208:	4b8f      	ldr	r3, [pc, #572]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f003 030c 	and.w	r3, r3, #12
 8009210:	2b08      	cmp	r3, #8
 8009212:	d112      	bne.n	800923a <HAL_RCC_OscConfig+0x5e>
 8009214:	4b8c      	ldr	r3, [pc, #560]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800921c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009220:	d10b      	bne.n	800923a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009222:	4b89      	ldr	r3, [pc, #548]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d06c      	beq.n	8009308 <HAL_RCC_OscConfig+0x12c>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d168      	bne.n	8009308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e24c      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009242:	d106      	bne.n	8009252 <HAL_RCC_OscConfig+0x76>
 8009244:	4b80      	ldr	r3, [pc, #512]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a7f      	ldr	r2, [pc, #508]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800924a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	e02e      	b.n	80092b0 <HAL_RCC_OscConfig+0xd4>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10c      	bne.n	8009274 <HAL_RCC_OscConfig+0x98>
 800925a:	4b7b      	ldr	r3, [pc, #492]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a7a      	ldr	r2, [pc, #488]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	4b78      	ldr	r3, [pc, #480]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a77      	ldr	r2, [pc, #476]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800926c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	e01d      	b.n	80092b0 <HAL_RCC_OscConfig+0xd4>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800927c:	d10c      	bne.n	8009298 <HAL_RCC_OscConfig+0xbc>
 800927e:	4b72      	ldr	r3, [pc, #456]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a71      	ldr	r2, [pc, #452]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	4b6f      	ldr	r3, [pc, #444]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a6e      	ldr	r2, [pc, #440]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	e00b      	b.n	80092b0 <HAL_RCC_OscConfig+0xd4>
 8009298:	4b6b      	ldr	r3, [pc, #428]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a6a      	ldr	r2, [pc, #424]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800929e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	4b68      	ldr	r3, [pc, #416]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a67      	ldr	r2, [pc, #412]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 80092aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d013      	beq.n	80092e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b8:	f7fe fdec 	bl	8007e94 <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092be:	e008      	b.n	80092d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092c0:	f7fe fde8 	bl	8007e94 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b64      	cmp	r3, #100	; 0x64
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e200      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092d2:	4b5d      	ldr	r3, [pc, #372]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0f0      	beq.n	80092c0 <HAL_RCC_OscConfig+0xe4>
 80092de:	e014      	b.n	800930a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092e0:	f7fe fdd8 	bl	8007e94 <HAL_GetTick>
 80092e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092e6:	e008      	b.n	80092fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092e8:	f7fe fdd4 	bl	8007e94 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b64      	cmp	r3, #100	; 0x64
 80092f4:	d901      	bls.n	80092fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e1ec      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092fa:	4b53      	ldr	r3, [pc, #332]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1f0      	bne.n	80092e8 <HAL_RCC_OscConfig+0x10c>
 8009306:	e000      	b.n	800930a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d063      	beq.n	80093de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009316:	4b4c      	ldr	r3, [pc, #304]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f003 030c 	and.w	r3, r3, #12
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00b      	beq.n	800933a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009322:	4b49      	ldr	r3, [pc, #292]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f003 030c 	and.w	r3, r3, #12
 800932a:	2b08      	cmp	r3, #8
 800932c:	d11c      	bne.n	8009368 <HAL_RCC_OscConfig+0x18c>
 800932e:	4b46      	ldr	r3, [pc, #280]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d116      	bne.n	8009368 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800933a:	4b43      	ldr	r3, [pc, #268]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d005      	beq.n	8009352 <HAL_RCC_OscConfig+0x176>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d001      	beq.n	8009352 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e1c0      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009352:	4b3d      	ldr	r3, [pc, #244]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4939      	ldr	r1, [pc, #228]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009362:	4313      	orrs	r3, r2
 8009364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009366:	e03a      	b.n	80093de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d020      	beq.n	80093b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009370:	4b36      	ldr	r3, [pc, #216]	; (800944c <HAL_RCC_OscConfig+0x270>)
 8009372:	2201      	movs	r2, #1
 8009374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009376:	f7fe fd8d 	bl	8007e94 <HAL_GetTick>
 800937a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800937c:	e008      	b.n	8009390 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800937e:	f7fe fd89 	bl	8007e94 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	2b02      	cmp	r3, #2
 800938a:	d901      	bls.n	8009390 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e1a1      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009390:	4b2d      	ldr	r3, [pc, #180]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0f0      	beq.n	800937e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800939c:	4b2a      	ldr	r3, [pc, #168]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	4927      	ldr	r1, [pc, #156]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	600b      	str	r3, [r1, #0]
 80093b0:	e015      	b.n	80093de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093b2:	4b26      	ldr	r3, [pc, #152]	; (800944c <HAL_RCC_OscConfig+0x270>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b8:	f7fe fd6c 	bl	8007e94 <HAL_GetTick>
 80093bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093be:	e008      	b.n	80093d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093c0:	f7fe fd68 	bl	8007e94 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e180      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093d2:	4b1d      	ldr	r3, [pc, #116]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1f0      	bne.n	80093c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0308 	and.w	r3, r3, #8
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d03a      	beq.n	8009460 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d019      	beq.n	8009426 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093f2:	4b17      	ldr	r3, [pc, #92]	; (8009450 <HAL_RCC_OscConfig+0x274>)
 80093f4:	2201      	movs	r2, #1
 80093f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093f8:	f7fe fd4c 	bl	8007e94 <HAL_GetTick>
 80093fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093fe:	e008      	b.n	8009412 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009400:	f7fe fd48 	bl	8007e94 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b02      	cmp	r3, #2
 800940c:	d901      	bls.n	8009412 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e160      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009412:	4b0d      	ldr	r3, [pc, #52]	; (8009448 <HAL_RCC_OscConfig+0x26c>)
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0f0      	beq.n	8009400 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800941e:	2001      	movs	r0, #1
 8009420:	f000 faba 	bl	8009998 <RCC_Delay>
 8009424:	e01c      	b.n	8009460 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009426:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <HAL_RCC_OscConfig+0x274>)
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800942c:	f7fe fd32 	bl	8007e94 <HAL_GetTick>
 8009430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009432:	e00f      	b.n	8009454 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009434:	f7fe fd2e 	bl	8007e94 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	2b02      	cmp	r3, #2
 8009440:	d908      	bls.n	8009454 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e146      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
 8009446:	bf00      	nop
 8009448:	40021000 	.word	0x40021000
 800944c:	42420000 	.word	0x42420000
 8009450:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009454:	4b92      	ldr	r3, [pc, #584]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e9      	bne.n	8009434 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 80a6 	beq.w	80095ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009472:	4b8b      	ldr	r3, [pc, #556]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10d      	bne.n	800949a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800947e:	4b88      	ldr	r3, [pc, #544]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	4a87      	ldr	r2, [pc, #540]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009488:	61d3      	str	r3, [r2, #28]
 800948a:	4b85      	ldr	r3, [pc, #532]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009492:	60bb      	str	r3, [r7, #8]
 8009494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009496:	2301      	movs	r3, #1
 8009498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800949a:	4b82      	ldr	r3, [pc, #520]	; (80096a4 <HAL_RCC_OscConfig+0x4c8>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d118      	bne.n	80094d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094a6:	4b7f      	ldr	r3, [pc, #508]	; (80096a4 <HAL_RCC_OscConfig+0x4c8>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a7e      	ldr	r2, [pc, #504]	; (80096a4 <HAL_RCC_OscConfig+0x4c8>)
 80094ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094b2:	f7fe fcef 	bl	8007e94 <HAL_GetTick>
 80094b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094b8:	e008      	b.n	80094cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ba:	f7fe fceb 	bl	8007e94 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	2b64      	cmp	r3, #100	; 0x64
 80094c6:	d901      	bls.n	80094cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e103      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094cc:	4b75      	ldr	r3, [pc, #468]	; (80096a4 <HAL_RCC_OscConfig+0x4c8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0f0      	beq.n	80094ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d106      	bne.n	80094ee <HAL_RCC_OscConfig+0x312>
 80094e0:	4b6f      	ldr	r3, [pc, #444]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	4a6e      	ldr	r2, [pc, #440]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 80094e6:	f043 0301 	orr.w	r3, r3, #1
 80094ea:	6213      	str	r3, [r2, #32]
 80094ec:	e02d      	b.n	800954a <HAL_RCC_OscConfig+0x36e>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10c      	bne.n	8009510 <HAL_RCC_OscConfig+0x334>
 80094f6:	4b6a      	ldr	r3, [pc, #424]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	4a69      	ldr	r2, [pc, #420]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 80094fc:	f023 0301 	bic.w	r3, r3, #1
 8009500:	6213      	str	r3, [r2, #32]
 8009502:	4b67      	ldr	r3, [pc, #412]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	4a66      	ldr	r2, [pc, #408]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009508:	f023 0304 	bic.w	r3, r3, #4
 800950c:	6213      	str	r3, [r2, #32]
 800950e:	e01c      	b.n	800954a <HAL_RCC_OscConfig+0x36e>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	2b05      	cmp	r3, #5
 8009516:	d10c      	bne.n	8009532 <HAL_RCC_OscConfig+0x356>
 8009518:	4b61      	ldr	r3, [pc, #388]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	4a60      	ldr	r2, [pc, #384]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 800951e:	f043 0304 	orr.w	r3, r3, #4
 8009522:	6213      	str	r3, [r2, #32]
 8009524:	4b5e      	ldr	r3, [pc, #376]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	4a5d      	ldr	r2, [pc, #372]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 800952a:	f043 0301 	orr.w	r3, r3, #1
 800952e:	6213      	str	r3, [r2, #32]
 8009530:	e00b      	b.n	800954a <HAL_RCC_OscConfig+0x36e>
 8009532:	4b5b      	ldr	r3, [pc, #364]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	4a5a      	ldr	r2, [pc, #360]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009538:	f023 0301 	bic.w	r3, r3, #1
 800953c:	6213      	str	r3, [r2, #32]
 800953e:	4b58      	ldr	r3, [pc, #352]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	4a57      	ldr	r2, [pc, #348]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009544:	f023 0304 	bic.w	r3, r3, #4
 8009548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d015      	beq.n	800957e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009552:	f7fe fc9f 	bl	8007e94 <HAL_GetTick>
 8009556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009558:	e00a      	b.n	8009570 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800955a:	f7fe fc9b 	bl	8007e94 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	f241 3288 	movw	r2, #5000	; 0x1388
 8009568:	4293      	cmp	r3, r2
 800956a:	d901      	bls.n	8009570 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e0b1      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009570:	4b4b      	ldr	r3, [pc, #300]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	f003 0302 	and.w	r3, r3, #2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0ee      	beq.n	800955a <HAL_RCC_OscConfig+0x37e>
 800957c:	e014      	b.n	80095a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800957e:	f7fe fc89 	bl	8007e94 <HAL_GetTick>
 8009582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009584:	e00a      	b.n	800959c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009586:	f7fe fc85 	bl	8007e94 <HAL_GetTick>
 800958a:	4602      	mov	r2, r0
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	f241 3288 	movw	r2, #5000	; 0x1388
 8009594:	4293      	cmp	r3, r2
 8009596:	d901      	bls.n	800959c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e09b      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800959c:	4b40      	ldr	r3, [pc, #256]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 800959e:	6a1b      	ldr	r3, [r3, #32]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1ee      	bne.n	8009586 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d105      	bne.n	80095ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095ae:	4b3c      	ldr	r3, [pc, #240]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	4a3b      	ldr	r2, [pc, #236]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 80095b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 8087 	beq.w	80096d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095c4:	4b36      	ldr	r3, [pc, #216]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f003 030c 	and.w	r3, r3, #12
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	d061      	beq.n	8009694 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d146      	bne.n	8009666 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095d8:	4b33      	ldr	r3, [pc, #204]	; (80096a8 <HAL_RCC_OscConfig+0x4cc>)
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095de:	f7fe fc59 	bl	8007e94 <HAL_GetTick>
 80095e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095e4:	e008      	b.n	80095f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095e6:	f7fe fc55 	bl	8007e94 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d901      	bls.n	80095f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e06d      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095f8:	4b29      	ldr	r3, [pc, #164]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1f0      	bne.n	80095e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800960c:	d108      	bne.n	8009620 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800960e:	4b24      	ldr	r3, [pc, #144]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	4921      	ldr	r1, [pc, #132]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 800961c:	4313      	orrs	r3, r2
 800961e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009620:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a19      	ldr	r1, [r3, #32]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	430b      	orrs	r3, r1
 8009632:	491b      	ldr	r1, [pc, #108]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009634:	4313      	orrs	r3, r2
 8009636:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009638:	4b1b      	ldr	r3, [pc, #108]	; (80096a8 <HAL_RCC_OscConfig+0x4cc>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800963e:	f7fe fc29 	bl	8007e94 <HAL_GetTick>
 8009642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009644:	e008      	b.n	8009658 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009646:	f7fe fc25 	bl	8007e94 <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b02      	cmp	r3, #2
 8009652:	d901      	bls.n	8009658 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e03d      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0f0      	beq.n	8009646 <HAL_RCC_OscConfig+0x46a>
 8009664:	e035      	b.n	80096d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009666:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <HAL_RCC_OscConfig+0x4cc>)
 8009668:	2200      	movs	r2, #0
 800966a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800966c:	f7fe fc12 	bl	8007e94 <HAL_GetTick>
 8009670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009672:	e008      	b.n	8009686 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009674:	f7fe fc0e 	bl	8007e94 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b02      	cmp	r3, #2
 8009680:	d901      	bls.n	8009686 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e026      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009686:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <HAL_RCC_OscConfig+0x4c4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1f0      	bne.n	8009674 <HAL_RCC_OscConfig+0x498>
 8009692:	e01e      	b.n	80096d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d107      	bne.n	80096ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e019      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
 80096a0:	40021000 	.word	0x40021000
 80096a4:	40007000 	.word	0x40007000
 80096a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80096ac:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <HAL_RCC_OscConfig+0x500>)
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d106      	bne.n	80096ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d001      	beq.n	80096d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e000      	b.n	80096d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	40021000 	.word	0x40021000

080096e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0d0      	b.n	8009896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096f4:	4b6a      	ldr	r3, [pc, #424]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d910      	bls.n	8009724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009702:	4b67      	ldr	r3, [pc, #412]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f023 0207 	bic.w	r2, r3, #7
 800970a:	4965      	ldr	r1, [pc, #404]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	4313      	orrs	r3, r2
 8009710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009712:	4b63      	ldr	r3, [pc, #396]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0307 	and.w	r3, r3, #7
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	429a      	cmp	r2, r3
 800971e:	d001      	beq.n	8009724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e0b8      	b.n	8009896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b00      	cmp	r3, #0
 800972e:	d020      	beq.n	8009772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800973c:	4b59      	ldr	r3, [pc, #356]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4a58      	ldr	r2, [pc, #352]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009754:	4b53      	ldr	r3, [pc, #332]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	4a52      	ldr	r2, [pc, #328]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 800975a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800975e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009760:	4b50      	ldr	r3, [pc, #320]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	494d      	ldr	r1, [pc, #308]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 800976e:	4313      	orrs	r3, r2
 8009770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d040      	beq.n	8009800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d107      	bne.n	8009796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009786:	4b47      	ldr	r3, [pc, #284]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d115      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e07f      	b.n	8009896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d107      	bne.n	80097ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800979e:	4b41      	ldr	r3, [pc, #260]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d109      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e073      	b.n	8009896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ae:	4b3d      	ldr	r3, [pc, #244]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e06b      	b.n	8009896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097be:	4b39      	ldr	r3, [pc, #228]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f023 0203 	bic.w	r2, r3, #3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4936      	ldr	r1, [pc, #216]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097d0:	f7fe fb60 	bl	8007e94 <HAL_GetTick>
 80097d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d6:	e00a      	b.n	80097ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d8:	f7fe fb5c 	bl	8007e94 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d901      	bls.n	80097ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e053      	b.n	8009896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097ee:	4b2d      	ldr	r3, [pc, #180]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f003 020c 	and.w	r2, r3, #12
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d1eb      	bne.n	80097d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009800:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0307 	and.w	r3, r3, #7
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d210      	bcs.n	8009830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800980e:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f023 0207 	bic.w	r2, r3, #7
 8009816:	4922      	ldr	r1, [pc, #136]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	4313      	orrs	r3, r2
 800981c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800981e:	4b20      	ldr	r3, [pc, #128]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d001      	beq.n	8009830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e032      	b.n	8009896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d008      	beq.n	800984e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800983c:	4b19      	ldr	r3, [pc, #100]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	4916      	ldr	r1, [pc, #88]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 800984a:	4313      	orrs	r3, r2
 800984c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0308 	and.w	r3, r3, #8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800985a:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	490e      	ldr	r1, [pc, #56]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 800986a:	4313      	orrs	r3, r2
 800986c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800986e:	f000 f821 	bl	80098b4 <HAL_RCC_GetSysClockFreq>
 8009872:	4602      	mov	r2, r0
 8009874:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	091b      	lsrs	r3, r3, #4
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	490a      	ldr	r1, [pc, #40]	; (80098a8 <HAL_RCC_ClockConfig+0x1c8>)
 8009880:	5ccb      	ldrb	r3, [r1, r3]
 8009882:	fa22 f303 	lsr.w	r3, r2, r3
 8009886:	4a09      	ldr	r2, [pc, #36]	; (80098ac <HAL_RCC_ClockConfig+0x1cc>)
 8009888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <HAL_RCC_ClockConfig+0x1d0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fabe 	bl	8007e10 <HAL_InitTick>

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	40022000 	.word	0x40022000
 80098a4:	40021000 	.word	0x40021000
 80098a8:	0800c280 	.word	0x0800c280
 80098ac:	20000174 	.word	0x20000174
 80098b0:	20000178 	.word	0x20000178

080098b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	2300      	movs	r3, #0
 80098c0:	60bb      	str	r3, [r7, #8]
 80098c2:	2300      	movs	r3, #0
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	2300      	movs	r3, #0
 80098c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80098ce:	4b1e      	ldr	r3, [pc, #120]	; (8009948 <HAL_RCC_GetSysClockFreq+0x94>)
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f003 030c 	and.w	r3, r3, #12
 80098da:	2b04      	cmp	r3, #4
 80098dc:	d002      	beq.n	80098e4 <HAL_RCC_GetSysClockFreq+0x30>
 80098de:	2b08      	cmp	r3, #8
 80098e0:	d003      	beq.n	80098ea <HAL_RCC_GetSysClockFreq+0x36>
 80098e2:	e027      	b.n	8009934 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80098e4:	4b19      	ldr	r3, [pc, #100]	; (800994c <HAL_RCC_GetSysClockFreq+0x98>)
 80098e6:	613b      	str	r3, [r7, #16]
      break;
 80098e8:	e027      	b.n	800993a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	0c9b      	lsrs	r3, r3, #18
 80098ee:	f003 030f 	and.w	r3, r3, #15
 80098f2:	4a17      	ldr	r2, [pc, #92]	; (8009950 <HAL_RCC_GetSysClockFreq+0x9c>)
 80098f4:	5cd3      	ldrb	r3, [r2, r3]
 80098f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d010      	beq.n	8009924 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009902:	4b11      	ldr	r3, [pc, #68]	; (8009948 <HAL_RCC_GetSysClockFreq+0x94>)
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	0c5b      	lsrs	r3, r3, #17
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	4a11      	ldr	r2, [pc, #68]	; (8009954 <HAL_RCC_GetSysClockFreq+0xa0>)
 800990e:	5cd3      	ldrb	r3, [r2, r3]
 8009910:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a0d      	ldr	r2, [pc, #52]	; (800994c <HAL_RCC_GetSysClockFreq+0x98>)
 8009916:	fb03 f202 	mul.w	r2, r3, r2
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	e004      	b.n	800992e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a0c      	ldr	r2, [pc, #48]	; (8009958 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009928:	fb02 f303 	mul.w	r3, r2, r3
 800992c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	613b      	str	r3, [r7, #16]
      break;
 8009932:	e002      	b.n	800993a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009934:	4b05      	ldr	r3, [pc, #20]	; (800994c <HAL_RCC_GetSysClockFreq+0x98>)
 8009936:	613b      	str	r3, [r7, #16]
      break;
 8009938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800993a:	693b      	ldr	r3, [r7, #16]
}
 800993c:	4618      	mov	r0, r3
 800993e:	371c      	adds	r7, #28
 8009940:	46bd      	mov	sp, r7
 8009942:	bc80      	pop	{r7}
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	40021000 	.word	0x40021000
 800994c:	007a1200 	.word	0x007a1200
 8009950:	0800c298 	.word	0x0800c298
 8009954:	0800c2a8 	.word	0x0800c2a8
 8009958:	003d0900 	.word	0x003d0900

0800995c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009960:	4b02      	ldr	r3, [pc, #8]	; (800996c <HAL_RCC_GetHCLKFreq+0x10>)
 8009962:	681b      	ldr	r3, [r3, #0]
}
 8009964:	4618      	mov	r0, r3
 8009966:	46bd      	mov	sp, r7
 8009968:	bc80      	pop	{r7}
 800996a:	4770      	bx	lr
 800996c:	20000174 	.word	0x20000174

08009970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009974:	f7ff fff2 	bl	800995c <HAL_RCC_GetHCLKFreq>
 8009978:	4602      	mov	r2, r0
 800997a:	4b05      	ldr	r3, [pc, #20]	; (8009990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	0adb      	lsrs	r3, r3, #11
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	4903      	ldr	r1, [pc, #12]	; (8009994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009986:	5ccb      	ldrb	r3, [r1, r3]
 8009988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800998c:	4618      	mov	r0, r3
 800998e:	bd80      	pop	{r7, pc}
 8009990:	40021000 	.word	0x40021000
 8009994:	0800c290 	.word	0x0800c290

08009998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <RCC_Delay+0x34>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a0a      	ldr	r2, [pc, #40]	; (80099d0 <RCC_Delay+0x38>)
 80099a6:	fba2 2303 	umull	r2, r3, r2, r3
 80099aa:	0a5b      	lsrs	r3, r3, #9
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	fb02 f303 	mul.w	r3, r2, r3
 80099b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80099b4:	bf00      	nop
  }
  while (Delay --);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	1e5a      	subs	r2, r3, #1
 80099ba:	60fa      	str	r2, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1f9      	bne.n	80099b4 <RCC_Delay+0x1c>
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bc80      	pop	{r7}
 80099ca:	4770      	bx	lr
 80099cc:	20000174 	.word	0x20000174
 80099d0:	10624dd3 	.word	0x10624dd3

080099d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	613b      	str	r3, [r7, #16]
 80099e0:	2300      	movs	r3, #0
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d07d      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80099f0:	2300      	movs	r3, #0
 80099f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099f4:	4b4f      	ldr	r3, [pc, #316]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10d      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a00:	4b4c      	ldr	r3, [pc, #304]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	4a4b      	ldr	r2, [pc, #300]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a0a:	61d3      	str	r3, [r2, #28]
 8009a0c:	4b49      	ldr	r3, [pc, #292]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a14:	60bb      	str	r3, [r7, #8]
 8009a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a1c:	4b46      	ldr	r3, [pc, #280]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d118      	bne.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a28:	4b43      	ldr	r3, [pc, #268]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a42      	ldr	r2, [pc, #264]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a34:	f7fe fa2e 	bl	8007e94 <HAL_GetTick>
 8009a38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a3a:	e008      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a3c:	f7fe fa2a 	bl	8007e94 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b64      	cmp	r3, #100	; 0x64
 8009a48:	d901      	bls.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e06d      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a4e:	4b3a      	ldr	r3, [pc, #232]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0f0      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009a5a:	4b36      	ldr	r3, [pc, #216]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d02e      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d027      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a78:	4b2e      	ldr	r3, [pc, #184]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009a82:	4b2e      	ldr	r3, [pc, #184]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009a88:	4b2c      	ldr	r3, [pc, #176]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009a8e:	4a29      	ldr	r2, [pc, #164]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d014      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a9e:	f7fe f9f9 	bl	8007e94 <HAL_GetTick>
 8009aa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009aa4:	e00a      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aa6:	f7fe f9f5 	bl	8007e94 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d901      	bls.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e036      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009abc:	4b1d      	ldr	r3, [pc, #116]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d0ee      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ac8:	4b1a      	ldr	r3, [pc, #104]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4917      	ldr	r1, [pc, #92]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d105      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ae0:	4b14      	ldr	r3, [pc, #80]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	4a13      	ldr	r2, [pc, #76]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d008      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009af8:	4b0e      	ldr	r3, [pc, #56]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	490b      	ldr	r1, [pc, #44]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0310 	and.w	r3, r3, #16
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d008      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b16:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	4904      	ldr	r1, [pc, #16]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40021000 	.word	0x40021000
 8009b38:	40007000 	.word	0x40007000
 8009b3c:	42420440 	.word	0x42420440

08009b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61fb      	str	r3, [r7, #28]
 8009b50:	2300      	movs	r3, #0
 8009b52:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	d00a      	beq.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b10      	cmp	r3, #16
 8009b66:	f200 808a 	bhi.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d045      	beq.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d075      	beq.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8009b76:	e082      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8009b78:	4b46      	ldr	r3, [pc, #280]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009b7e:	4b45      	ldr	r3, [pc, #276]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d07b      	beq.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	0c9b      	lsrs	r3, r3, #18
 8009b8e:	f003 030f 	and.w	r3, r3, #15
 8009b92:	4a41      	ldr	r2, [pc, #260]	; (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8009b94:	5cd3      	ldrb	r3, [r2, r3]
 8009b96:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d015      	beq.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009ba2:	4b3c      	ldr	r3, [pc, #240]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	0c5b      	lsrs	r3, r3, #17
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	4a3b      	ldr	r2, [pc, #236]	; (8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8009bae:	5cd3      	ldrb	r3, [r2, r3]
 8009bb0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00d      	beq.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009bbc:	4a38      	ldr	r2, [pc, #224]	; (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	fb02 f303 	mul.w	r3, r2, r3
 8009bca:	61fb      	str	r3, [r7, #28]
 8009bcc:	e004      	b.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	4a34      	ldr	r2, [pc, #208]	; (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8009bd2:	fb02 f303 	mul.w	r3, r2, r3
 8009bd6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009bd8:	4b2e      	ldr	r3, [pc, #184]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009be4:	d102      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	61bb      	str	r3, [r7, #24]
      break;
 8009bea:	e04a      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	4a2d      	ldr	r2, [pc, #180]	; (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	085b      	lsrs	r3, r3, #1
 8009bf8:	61bb      	str	r3, [r7, #24]
      break;
 8009bfa:	e042      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8009bfc:	4b25      	ldr	r3, [pc, #148]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0c:	d108      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8009c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c1c:	61bb      	str	r3, [r7, #24]
 8009c1e:	e01f      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c2a:	d109      	bne.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8009c2c:	4b19      	ldr	r3, [pc, #100]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d003      	beq.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8009c38:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009c3c:	61bb      	str	r3, [r7, #24]
 8009c3e:	e00f      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c4a:	d11c      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009c4c:	4b11      	ldr	r3, [pc, #68]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d016      	beq.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8009c58:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009c5c:	61bb      	str	r3, [r7, #24]
      break;
 8009c5e:	e012      	b.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009c60:	e011      	b.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009c62:	f7ff fe85 	bl	8009970 <HAL_RCC_GetPCLK2Freq>
 8009c66:	4602      	mov	r2, r0
 8009c68:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	0b9b      	lsrs	r3, r3, #14
 8009c6e:	f003 0303 	and.w	r3, r3, #3
 8009c72:	3301      	adds	r3, #1
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7a:	61bb      	str	r3, [r7, #24]
      break;
 8009c7c:	e004      	b.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8009c7e:	bf00      	nop
 8009c80:	e002      	b.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8009c82:	bf00      	nop
 8009c84:	e000      	b.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8009c86:	bf00      	nop
    }
  }
  return (frequency);
 8009c88:	69bb      	ldr	r3, [r7, #24]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3720      	adds	r7, #32
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	40021000 	.word	0x40021000
 8009c98:	0800c2ac 	.word	0x0800c2ac
 8009c9c:	0800c2bc 	.word	0x0800c2bc
 8009ca0:	007a1200 	.word	0x007a1200
 8009ca4:	003d0900 	.word	0x003d0900
 8009ca8:	aaaaaaab 	.word	0xaaaaaaab

08009cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e041      	b.n	8009d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fd ff54 	bl	8007b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f000 fed0 	bl	800aa90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d001      	beq.n	8009d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e03a      	b.n	8009dda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f042 0201 	orr.w	r2, r2, #1
 8009d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a18      	ldr	r2, [pc, #96]	; (8009de4 <HAL_TIM_Base_Start_IT+0x98>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00e      	beq.n	8009da4 <HAL_TIM_Base_Start_IT+0x58>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8e:	d009      	beq.n	8009da4 <HAL_TIM_Base_Start_IT+0x58>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a14      	ldr	r2, [pc, #80]	; (8009de8 <HAL_TIM_Base_Start_IT+0x9c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d004      	beq.n	8009da4 <HAL_TIM_Base_Start_IT+0x58>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a13      	ldr	r2, [pc, #76]	; (8009dec <HAL_TIM_Base_Start_IT+0xa0>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d111      	bne.n	8009dc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b06      	cmp	r3, #6
 8009db4:	d010      	beq.n	8009dd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f042 0201 	orr.w	r2, r2, #1
 8009dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc6:	e007      	b.n	8009dd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0201 	orr.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bc80      	pop	{r7}
 8009de2:	4770      	bx	lr
 8009de4:	40012c00 	.word	0x40012c00
 8009de8:	40000400 	.word	0x40000400
 8009dec:	40000800 	.word	0x40000800

08009df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e041      	b.n	8009e86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f839 	bl	8009e8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4610      	mov	r0, r2
 8009e30:	f000 fe2e 	bl	800aa90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bc80      	pop	{r7}
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d109      	bne.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x2c>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	bf0c      	ite	eq
 8009ec4:	2301      	moveq	r3, #1
 8009ec6:	2300      	movne	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	e022      	b.n	8009f12 <HAL_TIM_PWM_Start_DMA+0x72>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d109      	bne.n	8009ee6 <HAL_TIM_PWM_Start_DMA+0x46>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	bf0c      	ite	eq
 8009ede:	2301      	moveq	r3, #1
 8009ee0:	2300      	movne	r3, #0
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	e015      	b.n	8009f12 <HAL_TIM_PWM_Start_DMA+0x72>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b08      	cmp	r3, #8
 8009eea:	d109      	bne.n	8009f00 <HAL_TIM_PWM_Start_DMA+0x60>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	bf0c      	ite	eq
 8009ef8:	2301      	moveq	r3, #1
 8009efa:	2300      	movne	r3, #0
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	e008      	b.n	8009f12 <HAL_TIM_PWM_Start_DMA+0x72>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	bf0c      	ite	eq
 8009f0c:	2301      	moveq	r3, #1
 8009f0e:	2300      	movne	r3, #0
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8009f16:	2302      	movs	r3, #2
 8009f18:	e153      	b.n	800a1c2 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d109      	bne.n	8009f34 <HAL_TIM_PWM_Start_DMA+0x94>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	e022      	b.n	8009f7a <HAL_TIM_PWM_Start_DMA+0xda>
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d109      	bne.n	8009f4e <HAL_TIM_PWM_Start_DMA+0xae>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	bf0c      	ite	eq
 8009f46:	2301      	moveq	r3, #1
 8009f48:	2300      	movne	r3, #0
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	e015      	b.n	8009f7a <HAL_TIM_PWM_Start_DMA+0xda>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d109      	bne.n	8009f68 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	bf0c      	ite	eq
 8009f60:	2301      	moveq	r3, #1
 8009f62:	2300      	movne	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	e008      	b.n	8009f7a <HAL_TIM_PWM_Start_DMA+0xda>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	bf0c      	ite	eq
 8009f74:	2301      	moveq	r3, #1
 8009f76:	2300      	movne	r3, #0
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d024      	beq.n	8009fc8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <HAL_TIM_PWM_Start_DMA+0xea>
 8009f84:	887b      	ldrh	r3, [r7, #2]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e119      	b.n	800a1c2 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <HAL_TIM_PWM_Start_DMA+0xfe>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f9c:	e016      	b.n	8009fcc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d104      	bne.n	8009fae <HAL_TIM_PWM_Start_DMA+0x10e>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fac:	e00e      	b.n	8009fcc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d104      	bne.n	8009fbe <HAL_TIM_PWM_Start_DMA+0x11e>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fbc:	e006      	b.n	8009fcc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fc6:	e001      	b.n	8009fcc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e0fa      	b.n	800a1c2 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b0c      	cmp	r3, #12
 8009fd0:	f200 80ae 	bhi.w	800a130 <HAL_TIM_PWM_Start_DMA+0x290>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <HAL_TIM_PWM_Start_DMA+0x13c>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	0800a011 	.word	0x0800a011
 8009fe0:	0800a131 	.word	0x0800a131
 8009fe4:	0800a131 	.word	0x0800a131
 8009fe8:	0800a131 	.word	0x0800a131
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a131 	.word	0x0800a131
 8009ff4:	0800a131 	.word	0x0800a131
 8009ff8:	0800a131 	.word	0x0800a131
 8009ffc:	0800a0a1 	.word	0x0800a0a1
 800a000:	0800a131 	.word	0x0800a131
 800a004:	0800a131 	.word	0x0800a131
 800a008:	0800a131 	.word	0x0800a131
 800a00c:	0800a0e9 	.word	0x0800a0e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	4a6d      	ldr	r2, [pc, #436]	; (800a1cc <HAL_TIM_PWM_Start_DMA+0x32c>)
 800a016:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	4a6c      	ldr	r2, [pc, #432]	; (800a1d0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800a01e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	4a6b      	ldr	r2, [pc, #428]	; (800a1d4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800a026:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3334      	adds	r3, #52	; 0x34
 800a034:	461a      	mov	r2, r3
 800a036:	887b      	ldrh	r3, [r7, #2]
 800a038:	f7fe fcf6 	bl	8008a28 <HAL_DMA_Start_IT>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e0bd      	b.n	800a1c2 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a054:	60da      	str	r2, [r3, #12]
      break;
 800a056:	e06e      	b.n	800a136 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05c:	4a5b      	ldr	r2, [pc, #364]	; (800a1cc <HAL_TIM_PWM_Start_DMA+0x32c>)
 800a05e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	4a5a      	ldr	r2, [pc, #360]	; (800a1d0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800a066:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	4a59      	ldr	r2, [pc, #356]	; (800a1d4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800a06e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3338      	adds	r3, #56	; 0x38
 800a07c:	461a      	mov	r2, r3
 800a07e:	887b      	ldrh	r3, [r7, #2]
 800a080:	f7fe fcd2 	bl	8008a28 <HAL_DMA_Start_IT>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e099      	b.n	800a1c2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a09c:	60da      	str	r2, [r3, #12]
      break;
 800a09e:	e04a      	b.n	800a136 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	4a49      	ldr	r2, [pc, #292]	; (800a1cc <HAL_TIM_PWM_Start_DMA+0x32c>)
 800a0a6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	4a48      	ldr	r2, [pc, #288]	; (800a1d0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800a0ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	4a47      	ldr	r2, [pc, #284]	; (800a1d4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800a0b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	333c      	adds	r3, #60	; 0x3c
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	887b      	ldrh	r3, [r7, #2]
 800a0c8:	f7fe fcae 	bl	8008a28 <HAL_DMA_Start_IT>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e075      	b.n	800a1c2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0e4:	60da      	str	r2, [r3, #12]
      break;
 800a0e6:	e026      	b.n	800a136 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ec:	4a37      	ldr	r2, [pc, #220]	; (800a1cc <HAL_TIM_PWM_Start_DMA+0x32c>)
 800a0ee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f4:	4a36      	ldr	r2, [pc, #216]	; (800a1d0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800a0f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fc:	4a35      	ldr	r2, [pc, #212]	; (800a1d4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3340      	adds	r3, #64	; 0x40
 800a10c:	461a      	mov	r2, r3
 800a10e:	887b      	ldrh	r3, [r7, #2]
 800a110:	f7fe fc8a 	bl	8008a28 <HAL_DMA_Start_IT>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e051      	b.n	800a1c2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a12c:	60da      	str	r2, [r3, #12]
      break;
 800a12e:	e002      	b.n	800a136 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	75fb      	strb	r3, [r7, #23]
      break;
 800a134:	bf00      	nop
  }

  if (status == HAL_OK)
 800a136:	7dfb      	ldrb	r3, [r7, #23]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d141      	bne.n	800a1c0 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2201      	movs	r2, #1
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 ff23 	bl	800af90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a22      	ldr	r2, [pc, #136]	; (800a1d8 <HAL_TIM_PWM_Start_DMA+0x338>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d107      	bne.n	800a164 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a162:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1b      	ldr	r2, [pc, #108]	; (800a1d8 <HAL_TIM_PWM_Start_DMA+0x338>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d00e      	beq.n	800a18c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a176:	d009      	beq.n	800a18c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a17      	ldr	r2, [pc, #92]	; (800a1dc <HAL_TIM_PWM_Start_DMA+0x33c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d004      	beq.n	800a18c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a16      	ldr	r2, [pc, #88]	; (800a1e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d111      	bne.n	800a1b0 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	2b06      	cmp	r3, #6
 800a19c:	d010      	beq.n	800a1c0 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f042 0201 	orr.w	r2, r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ae:	e007      	b.n	800a1c0 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0201 	orr.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	0800a97f 	.word	0x0800a97f
 800a1d0:	0800aa27 	.word	0x0800aa27
 800a1d4:	0800a8ed 	.word	0x0800a8ed
 800a1d8:	40012c00 	.word	0x40012c00
 800a1dc:	40000400 	.word	0x40000400
 800a1e0:	40000800 	.word	0x40000800

0800a1e4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b0c      	cmp	r3, #12
 800a1f6:	d855      	bhi.n	800a2a4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800a1f8:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a235 	.word	0x0800a235
 800a204:	0800a2a5 	.word	0x0800a2a5
 800a208:	0800a2a5 	.word	0x0800a2a5
 800a20c:	0800a2a5 	.word	0x0800a2a5
 800a210:	0800a251 	.word	0x0800a251
 800a214:	0800a2a5 	.word	0x0800a2a5
 800a218:	0800a2a5 	.word	0x0800a2a5
 800a21c:	0800a2a5 	.word	0x0800a2a5
 800a220:	0800a26d 	.word	0x0800a26d
 800a224:	0800a2a5 	.word	0x0800a2a5
 800a228:	0800a2a5 	.word	0x0800a2a5
 800a22c:	0800a2a5 	.word	0x0800a2a5
 800a230:	0800a289 	.word	0x0800a289
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a242:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe fc4d 	bl	8008ae8 <HAL_DMA_Abort_IT>
      break;
 800a24e:	e02c      	b.n	800a2aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a25e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a264:	4618      	mov	r0, r3
 800a266:	f7fe fc3f 	bl	8008ae8 <HAL_DMA_Abort_IT>
      break;
 800a26a:	e01e      	b.n	800a2aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a27a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe fc31 	bl	8008ae8 <HAL_DMA_Abort_IT>
      break;
 800a286:	e010      	b.n	800a2aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a296:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fe fc23 	bl	8008ae8 <HAL_DMA_Abort_IT>
      break;
 800a2a2:	e002      	b.n	800a2aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a2a8:	bf00      	nop
  }

  if (status == HAL_OK)
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d157      	bne.n	800a360 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 fe69 	bl	800af90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a2a      	ldr	r2, [pc, #168]	; (800a36c <HAL_TIM_PWM_Stop_DMA+0x188>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d117      	bne.n	800a2f8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6a1a      	ldr	r2, [r3, #32]
 800a2ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10f      	bne.n	800a2f8 <HAL_TIM_PWM_Stop_DMA+0x114>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6a1a      	ldr	r2, [r3, #32]
 800a2de:	f240 4344 	movw	r3, #1092	; 0x444
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d107      	bne.n	800a2f8 <HAL_TIM_PWM_Stop_DMA+0x114>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6a1a      	ldr	r2, [r3, #32]
 800a2fe:	f241 1311 	movw	r3, #4369	; 0x1111
 800a302:	4013      	ands	r3, r2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10f      	bne.n	800a328 <HAL_TIM_PWM_Stop_DMA+0x144>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6a1a      	ldr	r2, [r3, #32]
 800a30e:	f240 4344 	movw	r3, #1092	; 0x444
 800a312:	4013      	ands	r3, r2
 800a314:	2b00      	cmp	r3, #0
 800a316:	d107      	bne.n	800a328 <HAL_TIM_PWM_Stop_DMA+0x144>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0201 	bic.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d104      	bne.n	800a338 <HAL_TIM_PWM_Stop_DMA+0x154>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a336:	e013      	b.n	800a360 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d104      	bne.n	800a348 <HAL_TIM_PWM_Stop_DMA+0x164>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a346:	e00b      	b.n	800a360 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b08      	cmp	r3, #8
 800a34c:	d104      	bne.n	800a358 <HAL_TIM_PWM_Stop_DMA+0x174>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a356:	e003      	b.n	800a360 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800a360:	7bfb      	ldrb	r3, [r7, #15]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	40012c00 	.word	0x40012c00

0800a370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	f003 0302 	and.w	r3, r3, #2
 800a382:	2b02      	cmp	r3, #2
 800a384:	d122      	bne.n	800a3cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	2b02      	cmp	r3, #2
 800a392:	d11b      	bne.n	800a3cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f06f 0202 	mvn.w	r2, #2
 800a39c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fa76 	bl	800a8a4 <HAL_TIM_IC_CaptureCallback>
 800a3b8:	e005      	b.n	800a3c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fa69 	bl	800a892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7fd f80b 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	f003 0304 	and.w	r3, r3, #4
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d122      	bne.n	800a420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d11b      	bne.n	800a420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f06f 0204 	mvn.w	r2, #4
 800a3f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fa4c 	bl	800a8a4 <HAL_TIM_IC_CaptureCallback>
 800a40c:	e005      	b.n	800a41a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa3f 	bl	800a892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7fc ffe1 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f003 0308 	and.w	r3, r3, #8
 800a42a:	2b08      	cmp	r3, #8
 800a42c:	d122      	bne.n	800a474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f003 0308 	and.w	r3, r3, #8
 800a438:	2b08      	cmp	r3, #8
 800a43a:	d11b      	bne.n	800a474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f06f 0208 	mvn.w	r2, #8
 800a444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2204      	movs	r2, #4
 800a44a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	f003 0303 	and.w	r3, r3, #3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa22 	bl	800a8a4 <HAL_TIM_IC_CaptureCallback>
 800a460:	e005      	b.n	800a46e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa15 	bl	800a892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7fc ffb7 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0310 	and.w	r3, r3, #16
 800a47e:	2b10      	cmp	r3, #16
 800a480:	d122      	bne.n	800a4c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b10      	cmp	r3, #16
 800a48e:	d11b      	bne.n	800a4c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f06f 0210 	mvn.w	r2, #16
 800a498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2208      	movs	r2, #8
 800a49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f9f8 	bl	800a8a4 <HAL_TIM_IC_CaptureCallback>
 800a4b4:	e005      	b.n	800a4c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f9eb 	bl	800a892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7fc ff8d 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d10e      	bne.n	800a4f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d107      	bne.n	800a4f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f06f 0201 	mvn.w	r2, #1
 800a4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7fc fff2 	bl	80074d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fe:	2b80      	cmp	r3, #128	; 0x80
 800a500:	d10e      	bne.n	800a520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50c:	2b80      	cmp	r3, #128	; 0x80
 800a50e:	d107      	bne.n	800a520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fe14 	bl	800b148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52a:	2b40      	cmp	r3, #64	; 0x40
 800a52c:	d10e      	bne.n	800a54c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a538:	2b40      	cmp	r3, #64	; 0x40
 800a53a:	d107      	bne.n	800a54c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f9be 	bl	800a8c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b20      	cmp	r3, #32
 800a558:	d10e      	bne.n	800a578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f003 0320 	and.w	r3, r3, #32
 800a564:	2b20      	cmp	r3, #32
 800a566:	d107      	bne.n	800a578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0220 	mvn.w	r2, #32
 800a570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fddf 	bl	800b136 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a596:	2b01      	cmp	r3, #1
 800a598:	d101      	bne.n	800a59e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a59a:	2302      	movs	r3, #2
 800a59c:	e0ae      	b.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b0c      	cmp	r3, #12
 800a5aa:	f200 809f 	bhi.w	800a6ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a5ae:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a5e9 	.word	0x0800a5e9
 800a5b8:	0800a6ed 	.word	0x0800a6ed
 800a5bc:	0800a6ed 	.word	0x0800a6ed
 800a5c0:	0800a6ed 	.word	0x0800a6ed
 800a5c4:	0800a629 	.word	0x0800a629
 800a5c8:	0800a6ed 	.word	0x0800a6ed
 800a5cc:	0800a6ed 	.word	0x0800a6ed
 800a5d0:	0800a6ed 	.word	0x0800a6ed
 800a5d4:	0800a66b 	.word	0x0800a66b
 800a5d8:	0800a6ed 	.word	0x0800a6ed
 800a5dc:	0800a6ed 	.word	0x0800a6ed
 800a5e0:	0800a6ed 	.word	0x0800a6ed
 800a5e4:	0800a6ab 	.word	0x0800a6ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68b9      	ldr	r1, [r7, #8]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 fab0 	bl	800ab54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	699a      	ldr	r2, [r3, #24]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f042 0208 	orr.w	r2, r2, #8
 800a602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	699a      	ldr	r2, [r3, #24]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0204 	bic.w	r2, r2, #4
 800a612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6999      	ldr	r1, [r3, #24]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	691a      	ldr	r2, [r3, #16]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	619a      	str	r2, [r3, #24]
      break;
 800a626:	e064      	b.n	800a6f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68b9      	ldr	r1, [r7, #8]
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 faf6 	bl	800ac20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	699a      	ldr	r2, [r3, #24]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6999      	ldr	r1, [r3, #24]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	021a      	lsls	r2, r3, #8
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	619a      	str	r2, [r3, #24]
      break;
 800a668:	e043      	b.n	800a6f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68b9      	ldr	r1, [r7, #8]
 800a670:	4618      	mov	r0, r3
 800a672:	f000 fb3f 	bl	800acf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	69da      	ldr	r2, [r3, #28]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f042 0208 	orr.w	r2, r2, #8
 800a684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69da      	ldr	r2, [r3, #28]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 0204 	bic.w	r2, r2, #4
 800a694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69d9      	ldr	r1, [r3, #28]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	691a      	ldr	r2, [r3, #16]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	61da      	str	r2, [r3, #28]
      break;
 800a6a8:	e023      	b.n	800a6f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 fb89 	bl	800adc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	69da      	ldr	r2, [r3, #28]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	69da      	ldr	r2, [r3, #28]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	69d9      	ldr	r1, [r3, #28]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	021a      	lsls	r2, r3, #8
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	61da      	str	r2, [r3, #28]
      break;
 800a6ea:	e002      	b.n	800a6f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d101      	bne.n	800a720 <HAL_TIM_ConfigClockSource+0x1c>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e0b4      	b.n	800a88a <HAL_TIM_ConfigClockSource+0x186>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2202      	movs	r2, #2
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a73e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a758:	d03e      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0xd4>
 800a75a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a75e:	f200 8087 	bhi.w	800a870 <HAL_TIM_ConfigClockSource+0x16c>
 800a762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a766:	f000 8086 	beq.w	800a876 <HAL_TIM_ConfigClockSource+0x172>
 800a76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76e:	d87f      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x16c>
 800a770:	2b70      	cmp	r3, #112	; 0x70
 800a772:	d01a      	beq.n	800a7aa <HAL_TIM_ConfigClockSource+0xa6>
 800a774:	2b70      	cmp	r3, #112	; 0x70
 800a776:	d87b      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x16c>
 800a778:	2b60      	cmp	r3, #96	; 0x60
 800a77a:	d050      	beq.n	800a81e <HAL_TIM_ConfigClockSource+0x11a>
 800a77c:	2b60      	cmp	r3, #96	; 0x60
 800a77e:	d877      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x16c>
 800a780:	2b50      	cmp	r3, #80	; 0x50
 800a782:	d03c      	beq.n	800a7fe <HAL_TIM_ConfigClockSource+0xfa>
 800a784:	2b50      	cmp	r3, #80	; 0x50
 800a786:	d873      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x16c>
 800a788:	2b40      	cmp	r3, #64	; 0x40
 800a78a:	d058      	beq.n	800a83e <HAL_TIM_ConfigClockSource+0x13a>
 800a78c:	2b40      	cmp	r3, #64	; 0x40
 800a78e:	d86f      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x16c>
 800a790:	2b30      	cmp	r3, #48	; 0x30
 800a792:	d064      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x15a>
 800a794:	2b30      	cmp	r3, #48	; 0x30
 800a796:	d86b      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x16c>
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d060      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x15a>
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d867      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d05c      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x15a>
 800a7a4:	2b10      	cmp	r3, #16
 800a7a6:	d05a      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x15a>
 800a7a8:	e062      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7ba:	f000 fbca 	bl	800af52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	609a      	str	r2, [r3, #8]
      break;
 800a7d6:	e04f      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7e8:	f000 fbb3 	bl	800af52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7fa:	609a      	str	r2, [r3, #8]
      break;
 800a7fc:	e03c      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a80a:	461a      	mov	r2, r3
 800a80c:	f000 fb2a 	bl	800ae64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2150      	movs	r1, #80	; 0x50
 800a816:	4618      	mov	r0, r3
 800a818:	f000 fb81 	bl	800af1e <TIM_ITRx_SetConfig>
      break;
 800a81c:	e02c      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a82a:	461a      	mov	r2, r3
 800a82c:	f000 fb48 	bl	800aec0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2160      	movs	r1, #96	; 0x60
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fb71 	bl	800af1e <TIM_ITRx_SetConfig>
      break;
 800a83c:	e01c      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a84a:	461a      	mov	r2, r3
 800a84c:	f000 fb0a 	bl	800ae64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2140      	movs	r1, #64	; 0x40
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fb61 	bl	800af1e <TIM_ITRx_SetConfig>
      break;
 800a85c:	e00c      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4619      	mov	r1, r3
 800a868:	4610      	mov	r0, r2
 800a86a:	f000 fb58 	bl	800af1e <TIM_ITRx_SetConfig>
      break;
 800a86e:	e003      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	73fb      	strb	r3, [r7, #15]
      break;
 800a874:	e000      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a892:	b480      	push	{r7}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a89a:	bf00      	nop
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr

0800a8b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b083      	sub	sp, #12
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a8be:	bf00      	nop
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bc80      	pop	{r7}
 800a8d8:	4770      	bx	lr

0800a8da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr

0800a8ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	429a      	cmp	r2, r3
 800a902:	d107      	bne.n	800a914 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2201      	movs	r2, #1
 800a908:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a912:	e02a      	b.n	800a96a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d107      	bne.n	800a92e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2202      	movs	r2, #2
 800a922:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a92c:	e01d      	b.n	800a96a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	429a      	cmp	r2, r3
 800a936:	d107      	bne.n	800a948 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2204      	movs	r2, #4
 800a93c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a946:	e010      	b.n	800a96a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d107      	bne.n	800a962 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2208      	movs	r2, #8
 800a956:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a960:	e003      	b.n	800a96a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7ff ffb5 	bl	800a8da <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	771a      	strb	r2, [r3, #28]
}
 800a976:	bf00      	nop
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	429a      	cmp	r2, r3
 800a994:	d10b      	bne.n	800a9ae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2201      	movs	r2, #1
 800a99a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d136      	bne.n	800aa12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9ac:	e031      	b.n	800aa12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d10b      	bne.n	800a9d0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d125      	bne.n	800aa12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9ce:	e020      	b.n	800aa12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d10b      	bne.n	800a9f2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2204      	movs	r2, #4
 800a9de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d114      	bne.n	800aa12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9f0:	e00f      	b.n	800aa12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d10a      	bne.n	800aa12 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2208      	movs	r2, #8
 800aa00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d103      	bne.n	800aa12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7fc fce2 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	771a      	strb	r2, [r3, #28]
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d103      	bne.n	800aa46 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2201      	movs	r2, #1
 800aa42:	771a      	strb	r2, [r3, #28]
 800aa44:	e019      	b.n	800aa7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d103      	bne.n	800aa58 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2202      	movs	r2, #2
 800aa54:	771a      	strb	r2, [r3, #28]
 800aa56:	e010      	b.n	800aa7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d103      	bne.n	800aa6a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2204      	movs	r2, #4
 800aa66:	771a      	strb	r2, [r3, #28]
 800aa68:	e007      	b.n	800aa7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d102      	bne.n	800aa7a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2208      	movs	r2, #8
 800aa78:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f7ff ff1b 	bl	800a8b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	771a      	strb	r2, [r3, #28]
}
 800aa86:	bf00      	nop
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a29      	ldr	r2, [pc, #164]	; (800ab48 <TIM_Base_SetConfig+0xb8>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d00b      	beq.n	800aac0 <TIM_Base_SetConfig+0x30>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaae:	d007      	beq.n	800aac0 <TIM_Base_SetConfig+0x30>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a26      	ldr	r2, [pc, #152]	; (800ab4c <TIM_Base_SetConfig+0xbc>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d003      	beq.n	800aac0 <TIM_Base_SetConfig+0x30>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a25      	ldr	r2, [pc, #148]	; (800ab50 <TIM_Base_SetConfig+0xc0>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d108      	bne.n	800aad2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a1c      	ldr	r2, [pc, #112]	; (800ab48 <TIM_Base_SetConfig+0xb8>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d00b      	beq.n	800aaf2 <TIM_Base_SetConfig+0x62>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae0:	d007      	beq.n	800aaf2 <TIM_Base_SetConfig+0x62>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a19      	ldr	r2, [pc, #100]	; (800ab4c <TIM_Base_SetConfig+0xbc>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d003      	beq.n	800aaf2 <TIM_Base_SetConfig+0x62>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a18      	ldr	r2, [pc, #96]	; (800ab50 <TIM_Base_SetConfig+0xc0>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d108      	bne.n	800ab04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a07      	ldr	r2, [pc, #28]	; (800ab48 <TIM_Base_SetConfig+0xb8>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d103      	bne.n	800ab38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	615a      	str	r2, [r3, #20]
}
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bc80      	pop	{r7}
 800ab46:	4770      	bx	lr
 800ab48:	40012c00 	.word	0x40012c00
 800ab4c:	40000400 	.word	0x40000400
 800ab50:	40000800 	.word	0x40000800

0800ab54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	f023 0201 	bic.w	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 0303 	bic.w	r3, r3, #3
 800ab8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f023 0302 	bic.w	r3, r3, #2
 800ab9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a1c      	ldr	r2, [pc, #112]	; (800ac1c <TIM_OC1_SetConfig+0xc8>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d10c      	bne.n	800abca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	f023 0308 	bic.w	r3, r3, #8
 800abb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f023 0304 	bic.w	r3, r3, #4
 800abc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a13      	ldr	r2, [pc, #76]	; (800ac1c <TIM_OC1_SetConfig+0xc8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d111      	bne.n	800abf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	4313      	orrs	r3, r2
 800abea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	621a      	str	r2, [r3, #32]
}
 800ac10:	bf00      	nop
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	40012c00 	.word	0x40012c00

0800ac20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	f023 0210 	bic.w	r2, r3, #16
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f023 0320 	bic.w	r3, r3, #32
 800ac6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a1d      	ldr	r2, [pc, #116]	; (800acf0 <TIM_OC2_SetConfig+0xd0>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d10d      	bne.n	800ac9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a14      	ldr	r2, [pc, #80]	; (800acf0 <TIM_OC2_SetConfig+0xd0>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d113      	bne.n	800accc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	4313      	orrs	r3, r2
 800acca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	621a      	str	r2, [r3, #32]
}
 800ace6:	bf00      	nop
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	bc80      	pop	{r7}
 800acee:	4770      	bx	lr
 800acf0:	40012c00 	.word	0x40012c00

0800acf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f023 0303 	bic.w	r3, r3, #3
 800ad2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a1d      	ldr	r2, [pc, #116]	; (800adc4 <TIM_OC3_SetConfig+0xd0>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d10d      	bne.n	800ad6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <TIM_OC3_SetConfig+0xd0>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d113      	bne.n	800ad9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	011b      	lsls	r3, r3, #4
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	621a      	str	r2, [r3, #32]
}
 800adb8:	bf00      	nop
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bc80      	pop	{r7}
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	40012c00 	.word	0x40012c00

0800adc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	031b      	lsls	r3, r3, #12
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a0f      	ldr	r2, [pc, #60]	; (800ae60 <TIM_OC4_SetConfig+0x98>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d109      	bne.n	800ae3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	019b      	lsls	r3, r3, #6
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	621a      	str	r2, [r3, #32]
}
 800ae56:	bf00      	nop
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bc80      	pop	{r7}
 800ae5e:	4770      	bx	lr
 800ae60:	40012c00 	.word	0x40012c00

0800ae64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
 800ae74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	f023 0201 	bic.w	r2, r3, #1
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f023 030a 	bic.w	r3, r3, #10
 800aea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	621a      	str	r2, [r3, #32]
}
 800aeb6:	bf00      	nop
 800aeb8:	371c      	adds	r7, #28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr

0800aec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b087      	sub	sp, #28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	f023 0210 	bic.w	r2, r3, #16
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	699b      	ldr	r3, [r3, #24]
 800aee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aeea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	031b      	lsls	r3, r3, #12
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aefc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	011b      	lsls	r3, r3, #4
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	4313      	orrs	r3, r2
 800af06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	621a      	str	r2, [r3, #32]
}
 800af14:	bf00      	nop
 800af16:	371c      	adds	r7, #28
 800af18:	46bd      	mov	sp, r7
 800af1a:	bc80      	pop	{r7}
 800af1c:	4770      	bx	lr

0800af1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af1e:	b480      	push	{r7}
 800af20:	b085      	sub	sp, #20
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f043 0307 	orr.w	r3, r3, #7
 800af40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	609a      	str	r2, [r3, #8]
}
 800af48:	bf00      	nop
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bc80      	pop	{r7}
 800af50:	4770      	bx	lr

0800af52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af52:	b480      	push	{r7}
 800af54:	b087      	sub	sp, #28
 800af56:	af00      	add	r7, sp, #0
 800af58:	60f8      	str	r0, [r7, #12]
 800af5a:	60b9      	str	r1, [r7, #8]
 800af5c:	607a      	str	r2, [r7, #4]
 800af5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	021a      	lsls	r2, r3, #8
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	431a      	orrs	r2, r3
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	4313      	orrs	r3, r2
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	609a      	str	r2, [r3, #8]
}
 800af86:	bf00      	nop
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bc80      	pop	{r7}
 800af8e:	4770      	bx	lr

0800af90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f003 031f 	and.w	r3, r3, #31
 800afa2:	2201      	movs	r2, #1
 800afa4:	fa02 f303 	lsl.w	r3, r2, r3
 800afa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6a1a      	ldr	r2, [r3, #32]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	43db      	mvns	r3, r3
 800afb2:	401a      	ands	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a1a      	ldr	r2, [r3, #32]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f003 031f 	and.w	r3, r3, #31
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	fa01 f303 	lsl.w	r3, r1, r3
 800afc8:	431a      	orrs	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	621a      	str	r2, [r3, #32]
}
 800afce:	bf00      	nop
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bc80      	pop	{r7}
 800afd6:	4770      	bx	lr

0800afd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d101      	bne.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afec:	2302      	movs	r3, #2
 800afee:	e046      	b.n	800b07e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a16      	ldr	r2, [pc, #88]	; (800b088 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d00e      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b03c:	d009      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a12      	ldr	r2, [pc, #72]	; (800b08c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d004      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a10      	ldr	r2, [pc, #64]	; (800b090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d10c      	bne.n	800b06c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	4313      	orrs	r3, r2
 800b062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	bc80      	pop	{r7}
 800b086:	4770      	bx	lr
 800b088:	40012c00 	.word	0x40012c00
 800b08c:	40000400 	.word	0x40000400
 800b090:	40000800 	.word	0x40000800

0800b094 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e03d      	b.n	800b12c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	4313      	orrs	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	4313      	orrs	r3, r2
 800b118:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	bc80      	pop	{r7}
 800b134:	4770      	bx	lr

0800b136 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b136:	b480      	push	{r7}
 800b138:	b083      	sub	sp, #12
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b13e:	bf00      	nop
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	bc80      	pop	{r7}
 800b146:	4770      	bx	lr

0800b148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr

0800b15a <memset>:
 800b15a:	4603      	mov	r3, r0
 800b15c:	4402      	add	r2, r0
 800b15e:	4293      	cmp	r3, r2
 800b160:	d100      	bne.n	800b164 <memset+0xa>
 800b162:	4770      	bx	lr
 800b164:	f803 1b01 	strb.w	r1, [r3], #1
 800b168:	e7f9      	b.n	800b15e <memset+0x4>
	...

0800b16c <__libc_init_array>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	2600      	movs	r6, #0
 800b170:	4d0c      	ldr	r5, [pc, #48]	; (800b1a4 <__libc_init_array+0x38>)
 800b172:	4c0d      	ldr	r4, [pc, #52]	; (800b1a8 <__libc_init_array+0x3c>)
 800b174:	1b64      	subs	r4, r4, r5
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	42a6      	cmp	r6, r4
 800b17a:	d109      	bne.n	800b190 <__libc_init_array+0x24>
 800b17c:	f001 f874 	bl	800c268 <_init>
 800b180:	2600      	movs	r6, #0
 800b182:	4d0a      	ldr	r5, [pc, #40]	; (800b1ac <__libc_init_array+0x40>)
 800b184:	4c0a      	ldr	r4, [pc, #40]	; (800b1b0 <__libc_init_array+0x44>)
 800b186:	1b64      	subs	r4, r4, r5
 800b188:	10a4      	asrs	r4, r4, #2
 800b18a:	42a6      	cmp	r6, r4
 800b18c:	d105      	bne.n	800b19a <__libc_init_array+0x2e>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	f855 3b04 	ldr.w	r3, [r5], #4
 800b194:	4798      	blx	r3
 800b196:	3601      	adds	r6, #1
 800b198:	e7ee      	b.n	800b178 <__libc_init_array+0xc>
 800b19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19e:	4798      	blx	r3
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7f2      	b.n	800b18a <__libc_init_array+0x1e>
 800b1a4:	0800c498 	.word	0x0800c498
 800b1a8:	0800c498 	.word	0x0800c498
 800b1ac:	0800c498 	.word	0x0800c498
 800b1b0:	0800c49c 	.word	0x0800c49c

0800b1b4 <tan>:
 800b1b4:	b530      	push	{r4, r5, lr}
 800b1b6:	4a12      	ldr	r2, [pc, #72]	; (800b200 <tan+0x4c>)
 800b1b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	b087      	sub	sp, #28
 800b1c0:	dc06      	bgt.n	800b1d0 <tan+0x1c>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f000 f81d 	bl	800b208 <__kernel_tan>
 800b1ce:	e006      	b.n	800b1de <tan+0x2a>
 800b1d0:	4a0c      	ldr	r2, [pc, #48]	; (800b204 <tan+0x50>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	dd05      	ble.n	800b1e2 <tan+0x2e>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	f7f4 ffbd 	bl	8000158 <__aeabi_dsub>
 800b1de:	b007      	add	sp, #28
 800b1e0:	bd30      	pop	{r4, r5, pc}
 800b1e2:	aa02      	add	r2, sp, #8
 800b1e4:	f000 fa0c 	bl	800b600 <__ieee754_rem_pio2>
 800b1e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ec:	0040      	lsls	r0, r0, #1
 800b1ee:	f000 0002 	and.w	r0, r0, #2
 800b1f2:	f1c0 0001 	rsb	r0, r0, #1
 800b1f6:	9000      	str	r0, [sp, #0]
 800b1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1fc:	e7e5      	b.n	800b1ca <tan+0x16>
 800b1fe:	bf00      	nop
 800b200:	3fe921fb 	.word	0x3fe921fb
 800b204:	7fefffff 	.word	0x7fefffff

0800b208 <__kernel_tan>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	b08b      	sub	sp, #44	; 0x2c
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	4bd9      	ldr	r3, [pc, #868]	; (800b578 <__kernel_tan+0x370>)
 800b212:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b216:	429e      	cmp	r6, r3
 800b218:	4604      	mov	r4, r0
 800b21a:	460d      	mov	r5, r1
 800b21c:	4682      	mov	sl, r0
 800b21e:	468b      	mov	fp, r1
 800b220:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b222:	9202      	str	r2, [sp, #8]
 800b224:	9107      	str	r1, [sp, #28]
 800b226:	dc58      	bgt.n	800b2da <__kernel_tan+0xd2>
 800b228:	f7f5 fbe8 	bl	80009fc <__aeabi_d2iz>
 800b22c:	4605      	mov	r5, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	d178      	bne.n	800b324 <__kernel_tan+0x11c>
 800b232:	1c7b      	adds	r3, r7, #1
 800b234:	4323      	orrs	r3, r4
 800b236:	4333      	orrs	r3, r6
 800b238:	d110      	bne.n	800b25c <__kernel_tan+0x54>
 800b23a:	4620      	mov	r0, r4
 800b23c:	4659      	mov	r1, fp
 800b23e:	f000 fbd3 	bl	800b9e8 <fabs>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	2000      	movs	r0, #0
 800b248:	49cc      	ldr	r1, [pc, #816]	; (800b57c <__kernel_tan+0x374>)
 800b24a:	f7f5 fa67 	bl	800071c <__aeabi_ddiv>
 800b24e:	4682      	mov	sl, r0
 800b250:	468b      	mov	fp, r1
 800b252:	4650      	mov	r0, sl
 800b254:	4659      	mov	r1, fp
 800b256:	b00b      	add	sp, #44	; 0x2c
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25c:	2f01      	cmp	r7, #1
 800b25e:	d0f8      	beq.n	800b252 <__kernel_tan+0x4a>
 800b260:	4620      	mov	r0, r4
 800b262:	4659      	mov	r1, fp
 800b264:	9a02      	ldr	r2, [sp, #8]
 800b266:	9b00      	ldr	r3, [sp, #0]
 800b268:	f7f4 ff78 	bl	800015c <__adddf3>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	460f      	mov	r7, r1
 800b272:	2000      	movs	r0, #0
 800b274:	49c2      	ldr	r1, [pc, #776]	; (800b580 <__kernel_tan+0x378>)
 800b276:	f7f5 fa51 	bl	800071c <__aeabi_ddiv>
 800b27a:	462e      	mov	r6, r5
 800b27c:	4689      	mov	r9, r1
 800b27e:	4652      	mov	r2, sl
 800b280:	465b      	mov	r3, fp
 800b282:	4680      	mov	r8, r0
 800b284:	462c      	mov	r4, r5
 800b286:	4630      	mov	r0, r6
 800b288:	460d      	mov	r5, r1
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f4 ff64 	bl	8000158 <__aeabi_dsub>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	9802      	ldr	r0, [sp, #8]
 800b296:	9900      	ldr	r1, [sp, #0]
 800b298:	f7f4 ff5e 	bl	8000158 <__aeabi_dsub>
 800b29c:	4632      	mov	r2, r6
 800b29e:	464b      	mov	r3, r9
 800b2a0:	f7f5 f912 	bl	80004c8 <__aeabi_dmul>
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	4682      	mov	sl, r0
 800b2a8:	468b      	mov	fp, r1
 800b2aa:	464b      	mov	r3, r9
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	4639      	mov	r1, r7
 800b2b0:	f7f5 f90a 	bl	80004c8 <__aeabi_dmul>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4bb1      	ldr	r3, [pc, #708]	; (800b57c <__kernel_tan+0x374>)
 800b2b8:	f7f4 ff50 	bl	800015c <__adddf3>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	4659      	mov	r1, fp
 800b2c4:	f7f4 ff4a 	bl	800015c <__adddf3>
 800b2c8:	4642      	mov	r2, r8
 800b2ca:	464b      	mov	r3, r9
 800b2cc:	f7f5 f8fc 	bl	80004c8 <__aeabi_dmul>
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	f7f4 ff42 	bl	800015c <__adddf3>
 800b2d8:	e7b9      	b.n	800b24e <__kernel_tan+0x46>
 800b2da:	4baa      	ldr	r3, [pc, #680]	; (800b584 <__kernel_tan+0x37c>)
 800b2dc:	429e      	cmp	r6, r3
 800b2de:	dd21      	ble.n	800b324 <__kernel_tan+0x11c>
 800b2e0:	2900      	cmp	r1, #0
 800b2e2:	da06      	bge.n	800b2f2 <__kernel_tan+0xea>
 800b2e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b2e8:	469b      	mov	fp, r3
 800b2ea:	9b00      	ldr	r3, [sp, #0]
 800b2ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	a182      	add	r1, pc, #520	; (adr r1, 800b500 <__kernel_tan+0x2f8>)
 800b2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2fa:	465b      	mov	r3, fp
 800b2fc:	f7f4 ff2c 	bl	8000158 <__aeabi_dsub>
 800b300:	4604      	mov	r4, r0
 800b302:	460d      	mov	r5, r1
 800b304:	a180      	add	r1, pc, #512	; (adr r1, 800b508 <__kernel_tan+0x300>)
 800b306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b30a:	9a02      	ldr	r2, [sp, #8]
 800b30c:	9b00      	ldr	r3, [sp, #0]
 800b30e:	f7f4 ff23 	bl	8000158 <__aeabi_dsub>
 800b312:	462b      	mov	r3, r5
 800b314:	4622      	mov	r2, r4
 800b316:	f7f4 ff21 	bl	800015c <__adddf3>
 800b31a:	2300      	movs	r3, #0
 800b31c:	4682      	mov	sl, r0
 800b31e:	468b      	mov	fp, r1
 800b320:	9302      	str	r3, [sp, #8]
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	4652      	mov	r2, sl
 800b326:	465b      	mov	r3, fp
 800b328:	4650      	mov	r0, sl
 800b32a:	4659      	mov	r1, fp
 800b32c:	f7f5 f8cc 	bl	80004c8 <__aeabi_dmul>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4680      	mov	r8, r0
 800b336:	4689      	mov	r9, r1
 800b338:	f7f5 f8c6 	bl	80004c8 <__aeabi_dmul>
 800b33c:	4642      	mov	r2, r8
 800b33e:	4604      	mov	r4, r0
 800b340:	460d      	mov	r5, r1
 800b342:	464b      	mov	r3, r9
 800b344:	4650      	mov	r0, sl
 800b346:	4659      	mov	r1, fp
 800b348:	f7f5 f8be 	bl	80004c8 <__aeabi_dmul>
 800b34c:	a370      	add	r3, pc, #448	; (adr r3, 800b510 <__kernel_tan+0x308>)
 800b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b352:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b356:	4620      	mov	r0, r4
 800b358:	4629      	mov	r1, r5
 800b35a:	f7f5 f8b5 	bl	80004c8 <__aeabi_dmul>
 800b35e:	a36e      	add	r3, pc, #440	; (adr r3, 800b518 <__kernel_tan+0x310>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	f7f4 fefa 	bl	800015c <__adddf3>
 800b368:	4622      	mov	r2, r4
 800b36a:	462b      	mov	r3, r5
 800b36c:	f7f5 f8ac 	bl	80004c8 <__aeabi_dmul>
 800b370:	a36b      	add	r3, pc, #428	; (adr r3, 800b520 <__kernel_tan+0x318>)
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	f7f4 fef1 	bl	800015c <__adddf3>
 800b37a:	4622      	mov	r2, r4
 800b37c:	462b      	mov	r3, r5
 800b37e:	f7f5 f8a3 	bl	80004c8 <__aeabi_dmul>
 800b382:	a369      	add	r3, pc, #420	; (adr r3, 800b528 <__kernel_tan+0x320>)
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	f7f4 fee8 	bl	800015c <__adddf3>
 800b38c:	4622      	mov	r2, r4
 800b38e:	462b      	mov	r3, r5
 800b390:	f7f5 f89a 	bl	80004c8 <__aeabi_dmul>
 800b394:	a366      	add	r3, pc, #408	; (adr r3, 800b530 <__kernel_tan+0x328>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	f7f4 fedf 	bl	800015c <__adddf3>
 800b39e:	4622      	mov	r2, r4
 800b3a0:	462b      	mov	r3, r5
 800b3a2:	f7f5 f891 	bl	80004c8 <__aeabi_dmul>
 800b3a6:	a364      	add	r3, pc, #400	; (adr r3, 800b538 <__kernel_tan+0x330>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f4 fed6 	bl	800015c <__adddf3>
 800b3b0:	4642      	mov	r2, r8
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	f7f5 f888 	bl	80004c8 <__aeabi_dmul>
 800b3b8:	a361      	add	r3, pc, #388	; (adr r3, 800b540 <__kernel_tan+0x338>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f7f5 f87f 	bl	80004c8 <__aeabi_dmul>
 800b3ca:	a35f      	add	r3, pc, #380	; (adr r3, 800b548 <__kernel_tan+0x340>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f7f4 fec4 	bl	800015c <__adddf3>
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	462b      	mov	r3, r5
 800b3d8:	f7f5 f876 	bl	80004c8 <__aeabi_dmul>
 800b3dc:	a35c      	add	r3, pc, #368	; (adr r3, 800b550 <__kernel_tan+0x348>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	f7f4 febb 	bl	800015c <__adddf3>
 800b3e6:	4622      	mov	r2, r4
 800b3e8:	462b      	mov	r3, r5
 800b3ea:	f7f5 f86d 	bl	80004c8 <__aeabi_dmul>
 800b3ee:	a35a      	add	r3, pc, #360	; (adr r3, 800b558 <__kernel_tan+0x350>)
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	f7f4 feb2 	bl	800015c <__adddf3>
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	462b      	mov	r3, r5
 800b3fc:	f7f5 f864 	bl	80004c8 <__aeabi_dmul>
 800b400:	a357      	add	r3, pc, #348	; (adr r3, 800b560 <__kernel_tan+0x358>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	f7f4 fea9 	bl	800015c <__adddf3>
 800b40a:	4622      	mov	r2, r4
 800b40c:	462b      	mov	r3, r5
 800b40e:	f7f5 f85b 	bl	80004c8 <__aeabi_dmul>
 800b412:	a355      	add	r3, pc, #340	; (adr r3, 800b568 <__kernel_tan+0x360>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f7f4 fea0 	bl	800015c <__adddf3>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b424:	f7f4 fe9a 	bl	800015c <__adddf3>
 800b428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b42c:	f7f5 f84c 	bl	80004c8 <__aeabi_dmul>
 800b430:	9a02      	ldr	r2, [sp, #8]
 800b432:	9b00      	ldr	r3, [sp, #0]
 800b434:	f7f4 fe92 	bl	800015c <__adddf3>
 800b438:	4642      	mov	r2, r8
 800b43a:	464b      	mov	r3, r9
 800b43c:	f7f5 f844 	bl	80004c8 <__aeabi_dmul>
 800b440:	9a02      	ldr	r2, [sp, #8]
 800b442:	9b00      	ldr	r3, [sp, #0]
 800b444:	f7f4 fe8a 	bl	800015c <__adddf3>
 800b448:	a349      	add	r3, pc, #292	; (adr r3, 800b570 <__kernel_tan+0x368>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b456:	f7f5 f837 	bl	80004c8 <__aeabi_dmul>
 800b45a:	4622      	mov	r2, r4
 800b45c:	462b      	mov	r3, r5
 800b45e:	f7f4 fe7d 	bl	800015c <__adddf3>
 800b462:	460b      	mov	r3, r1
 800b464:	e9cd 0100 	strd	r0, r1, [sp]
 800b468:	4602      	mov	r2, r0
 800b46a:	4659      	mov	r1, fp
 800b46c:	4650      	mov	r0, sl
 800b46e:	f7f4 fe75 	bl	800015c <__adddf3>
 800b472:	4b44      	ldr	r3, [pc, #272]	; (800b584 <__kernel_tan+0x37c>)
 800b474:	4604      	mov	r4, r0
 800b476:	429e      	cmp	r6, r3
 800b478:	460d      	mov	r5, r1
 800b47a:	f340 8085 	ble.w	800b588 <__kernel_tan+0x380>
 800b47e:	4638      	mov	r0, r7
 800b480:	f7f4 ffb8 	bl	80003f4 <__aeabi_i2d>
 800b484:	4622      	mov	r2, r4
 800b486:	4680      	mov	r8, r0
 800b488:	4689      	mov	r9, r1
 800b48a:	462b      	mov	r3, r5
 800b48c:	4620      	mov	r0, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	f7f5 f81a 	bl	80004c8 <__aeabi_dmul>
 800b494:	4642      	mov	r2, r8
 800b496:	4606      	mov	r6, r0
 800b498:	460f      	mov	r7, r1
 800b49a:	464b      	mov	r3, r9
 800b49c:	4620      	mov	r0, r4
 800b49e:	4629      	mov	r1, r5
 800b4a0:	f7f4 fe5c 	bl	800015c <__adddf3>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	f7f5 f936 	bl	800071c <__aeabi_ddiv>
 800b4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4b4:	f7f4 fe50 	bl	8000158 <__aeabi_dsub>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4650      	mov	r0, sl
 800b4be:	4659      	mov	r1, fp
 800b4c0:	f7f4 fe4a 	bl	8000158 <__aeabi_dsub>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	f7f4 fe48 	bl	800015c <__adddf3>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4640      	mov	r0, r8
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	f7f4 fe40 	bl	8000158 <__aeabi_dsub>
 800b4d8:	9b07      	ldr	r3, [sp, #28]
 800b4da:	4604      	mov	r4, r0
 800b4dc:	179b      	asrs	r3, r3, #30
 800b4de:	f003 0302 	and.w	r3, r3, #2
 800b4e2:	f1c3 0001 	rsb	r0, r3, #1
 800b4e6:	460d      	mov	r5, r1
 800b4e8:	f7f4 ff84 	bl	80003f4 <__aeabi_i2d>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	f7f4 ffe8 	bl	80004c8 <__aeabi_dmul>
 800b4f8:	e6a9      	b.n	800b24e <__kernel_tan+0x46>
 800b4fa:	bf00      	nop
 800b4fc:	f3af 8000 	nop.w
 800b500:	54442d18 	.word	0x54442d18
 800b504:	3fe921fb 	.word	0x3fe921fb
 800b508:	33145c07 	.word	0x33145c07
 800b50c:	3c81a626 	.word	0x3c81a626
 800b510:	74bf7ad4 	.word	0x74bf7ad4
 800b514:	3efb2a70 	.word	0x3efb2a70
 800b518:	32f0a7e9 	.word	0x32f0a7e9
 800b51c:	3f12b80f 	.word	0x3f12b80f
 800b520:	1a8d1068 	.word	0x1a8d1068
 800b524:	3f3026f7 	.word	0x3f3026f7
 800b528:	fee08315 	.word	0xfee08315
 800b52c:	3f57dbc8 	.word	0x3f57dbc8
 800b530:	e96e8493 	.word	0xe96e8493
 800b534:	3f8226e3 	.word	0x3f8226e3
 800b538:	1bb341fe 	.word	0x1bb341fe
 800b53c:	3faba1ba 	.word	0x3faba1ba
 800b540:	db605373 	.word	0xdb605373
 800b544:	bef375cb 	.word	0xbef375cb
 800b548:	a03792a6 	.word	0xa03792a6
 800b54c:	3f147e88 	.word	0x3f147e88
 800b550:	f2f26501 	.word	0xf2f26501
 800b554:	3f4344d8 	.word	0x3f4344d8
 800b558:	c9560328 	.word	0xc9560328
 800b55c:	3f6d6d22 	.word	0x3f6d6d22
 800b560:	8406d637 	.word	0x8406d637
 800b564:	3f9664f4 	.word	0x3f9664f4
 800b568:	1110fe7a 	.word	0x1110fe7a
 800b56c:	3fc11111 	.word	0x3fc11111
 800b570:	55555563 	.word	0x55555563
 800b574:	3fd55555 	.word	0x3fd55555
 800b578:	3e2fffff 	.word	0x3e2fffff
 800b57c:	3ff00000 	.word	0x3ff00000
 800b580:	bff00000 	.word	0xbff00000
 800b584:	3fe59427 	.word	0x3fe59427
 800b588:	2f01      	cmp	r7, #1
 800b58a:	d031      	beq.n	800b5f0 <__kernel_tan+0x3e8>
 800b58c:	460f      	mov	r7, r1
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	2000      	movs	r0, #0
 800b594:	4918      	ldr	r1, [pc, #96]	; (800b5f8 <__kernel_tan+0x3f0>)
 800b596:	f7f5 f8c1 	bl	800071c <__aeabi_ddiv>
 800b59a:	2600      	movs	r6, #0
 800b59c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	465b      	mov	r3, fp
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f4 fdd4 	bl	8000158 <__aeabi_dsub>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5b8:	f7f4 fdce 	bl	8000158 <__aeabi_dsub>
 800b5bc:	4632      	mov	r2, r6
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f7f4 ff82 	bl	80004c8 <__aeabi_dmul>
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	4682      	mov	sl, r0
 800b5c8:	468b      	mov	fp, r1
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	f7f4 ff7a 	bl	80004c8 <__aeabi_dmul>
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4b09      	ldr	r3, [pc, #36]	; (800b5fc <__kernel_tan+0x3f4>)
 800b5d8:	f7f4 fdc0 	bl	800015c <__adddf3>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4650      	mov	r0, sl
 800b5e2:	4659      	mov	r1, fp
 800b5e4:	f7f4 fdba 	bl	800015c <__adddf3>
 800b5e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5ec:	4634      	mov	r4, r6
 800b5ee:	e66d      	b.n	800b2cc <__kernel_tan+0xc4>
 800b5f0:	4682      	mov	sl, r0
 800b5f2:	468b      	mov	fp, r1
 800b5f4:	e62d      	b.n	800b252 <__kernel_tan+0x4a>
 800b5f6:	bf00      	nop
 800b5f8:	bff00000 	.word	0xbff00000
 800b5fc:	3ff00000 	.word	0x3ff00000

0800b600 <__ieee754_rem_pio2>:
 800b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	4614      	mov	r4, r2
 800b606:	4ac2      	ldr	r2, [pc, #776]	; (800b910 <__ieee754_rem_pio2+0x310>)
 800b608:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b60c:	b08d      	sub	sp, #52	; 0x34
 800b60e:	4592      	cmp	sl, r2
 800b610:	9104      	str	r1, [sp, #16]
 800b612:	dc07      	bgt.n	800b624 <__ieee754_rem_pio2+0x24>
 800b614:	2200      	movs	r2, #0
 800b616:	2300      	movs	r3, #0
 800b618:	e9c4 0100 	strd	r0, r1, [r4]
 800b61c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b620:	2500      	movs	r5, #0
 800b622:	e024      	b.n	800b66e <__ieee754_rem_pio2+0x6e>
 800b624:	4abb      	ldr	r2, [pc, #748]	; (800b914 <__ieee754_rem_pio2+0x314>)
 800b626:	4592      	cmp	sl, r2
 800b628:	dc72      	bgt.n	800b710 <__ieee754_rem_pio2+0x110>
 800b62a:	9b04      	ldr	r3, [sp, #16]
 800b62c:	4dba      	ldr	r5, [pc, #744]	; (800b918 <__ieee754_rem_pio2+0x318>)
 800b62e:	2b00      	cmp	r3, #0
 800b630:	a3a9      	add	r3, pc, #676	; (adr r3, 800b8d8 <__ieee754_rem_pio2+0x2d8>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	dd36      	ble.n	800b6a6 <__ieee754_rem_pio2+0xa6>
 800b638:	f7f4 fd8e 	bl	8000158 <__aeabi_dsub>
 800b63c:	45aa      	cmp	sl, r5
 800b63e:	4606      	mov	r6, r0
 800b640:	460f      	mov	r7, r1
 800b642:	d018      	beq.n	800b676 <__ieee754_rem_pio2+0x76>
 800b644:	a3a6      	add	r3, pc, #664	; (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2e0>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	f7f4 fd85 	bl	8000158 <__aeabi_dsub>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4630      	mov	r0, r6
 800b654:	e9c4 2300 	strd	r2, r3, [r4]
 800b658:	4639      	mov	r1, r7
 800b65a:	f7f4 fd7d 	bl	8000158 <__aeabi_dsub>
 800b65e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2e0>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f7f4 fd78 	bl	8000158 <__aeabi_dsub>
 800b668:	2501      	movs	r5, #1
 800b66a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b66e:	4628      	mov	r0, r5
 800b670:	b00d      	add	sp, #52	; 0x34
 800b672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b676:	a39c      	add	r3, pc, #624	; (adr r3, 800b8e8 <__ieee754_rem_pio2+0x2e8>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f7f4 fd6c 	bl	8000158 <__aeabi_dsub>
 800b680:	a39b      	add	r3, pc, #620	; (adr r3, 800b8f0 <__ieee754_rem_pio2+0x2f0>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	4606      	mov	r6, r0
 800b688:	460f      	mov	r7, r1
 800b68a:	f7f4 fd65 	bl	8000158 <__aeabi_dsub>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	4630      	mov	r0, r6
 800b694:	e9c4 2300 	strd	r2, r3, [r4]
 800b698:	4639      	mov	r1, r7
 800b69a:	f7f4 fd5d 	bl	8000158 <__aeabi_dsub>
 800b69e:	a394      	add	r3, pc, #592	; (adr r3, 800b8f0 <__ieee754_rem_pio2+0x2f0>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	e7de      	b.n	800b664 <__ieee754_rem_pio2+0x64>
 800b6a6:	f7f4 fd59 	bl	800015c <__adddf3>
 800b6aa:	45aa      	cmp	sl, r5
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	d016      	beq.n	800b6e0 <__ieee754_rem_pio2+0xe0>
 800b6b2:	a38b      	add	r3, pc, #556	; (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2e0>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 fd50 	bl	800015c <__adddf3>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	e9c4 2300 	strd	r2, r3, [r4]
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	f7f4 fd46 	bl	8000158 <__aeabi_dsub>
 800b6cc:	a384      	add	r3, pc, #528	; (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2e0>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f7f4 fd43 	bl	800015c <__adddf3>
 800b6d6:	f04f 35ff 	mov.w	r5, #4294967295
 800b6da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6de:	e7c6      	b.n	800b66e <__ieee754_rem_pio2+0x6e>
 800b6e0:	a381      	add	r3, pc, #516	; (adr r3, 800b8e8 <__ieee754_rem_pio2+0x2e8>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fd39 	bl	800015c <__adddf3>
 800b6ea:	a381      	add	r3, pc, #516	; (adr r3, 800b8f0 <__ieee754_rem_pio2+0x2f0>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	460f      	mov	r7, r1
 800b6f4:	f7f4 fd32 	bl	800015c <__adddf3>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	e9c4 2300 	strd	r2, r3, [r4]
 800b702:	4639      	mov	r1, r7
 800b704:	f7f4 fd28 	bl	8000158 <__aeabi_dsub>
 800b708:	a379      	add	r3, pc, #484	; (adr r3, 800b8f0 <__ieee754_rem_pio2+0x2f0>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	e7e0      	b.n	800b6d2 <__ieee754_rem_pio2+0xd2>
 800b710:	4a82      	ldr	r2, [pc, #520]	; (800b91c <__ieee754_rem_pio2+0x31c>)
 800b712:	4592      	cmp	sl, r2
 800b714:	f300 80d4 	bgt.w	800b8c0 <__ieee754_rem_pio2+0x2c0>
 800b718:	f000 f966 	bl	800b9e8 <fabs>
 800b71c:	a376      	add	r3, pc, #472	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x2f8>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	f7f4 fecf 	bl	80004c8 <__aeabi_dmul>
 800b72a:	2200      	movs	r2, #0
 800b72c:	4b7c      	ldr	r3, [pc, #496]	; (800b920 <__ieee754_rem_pio2+0x320>)
 800b72e:	f7f4 fd15 	bl	800015c <__adddf3>
 800b732:	f7f5 f963 	bl	80009fc <__aeabi_d2iz>
 800b736:	4605      	mov	r5, r0
 800b738:	f7f4 fe5c 	bl	80003f4 <__aeabi_i2d>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b744:	a364      	add	r3, pc, #400	; (adr r3, 800b8d8 <__ieee754_rem_pio2+0x2d8>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 febd 	bl	80004c8 <__aeabi_dmul>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	4630      	mov	r0, r6
 800b754:	4639      	mov	r1, r7
 800b756:	f7f4 fcff 	bl	8000158 <__aeabi_dsub>
 800b75a:	a361      	add	r3, pc, #388	; (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2e0>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	4680      	mov	r8, r0
 800b762:	4689      	mov	r9, r1
 800b764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b768:	f7f4 feae 	bl	80004c8 <__aeabi_dmul>
 800b76c:	2d1f      	cmp	r5, #31
 800b76e:	4606      	mov	r6, r0
 800b770:	460f      	mov	r7, r1
 800b772:	dc0e      	bgt.n	800b792 <__ieee754_rem_pio2+0x192>
 800b774:	4b6b      	ldr	r3, [pc, #428]	; (800b924 <__ieee754_rem_pio2+0x324>)
 800b776:	1e6a      	subs	r2, r5, #1
 800b778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77c:	4553      	cmp	r3, sl
 800b77e:	d008      	beq.n	800b792 <__ieee754_rem_pio2+0x192>
 800b780:	4632      	mov	r2, r6
 800b782:	463b      	mov	r3, r7
 800b784:	4640      	mov	r0, r8
 800b786:	4649      	mov	r1, r9
 800b788:	f7f4 fce6 	bl	8000158 <__aeabi_dsub>
 800b78c:	e9c4 0100 	strd	r0, r1, [r4]
 800b790:	e012      	b.n	800b7b8 <__ieee754_rem_pio2+0x1b8>
 800b792:	463b      	mov	r3, r7
 800b794:	4632      	mov	r2, r6
 800b796:	4640      	mov	r0, r8
 800b798:	4649      	mov	r1, r9
 800b79a:	f7f4 fcdd 	bl	8000158 <__aeabi_dsub>
 800b79e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7a8:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800b7ac:	2b10      	cmp	r3, #16
 800b7ae:	dc1f      	bgt.n	800b7f0 <__ieee754_rem_pio2+0x1f0>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	e9c4 2300 	strd	r2, r3, [r4]
 800b7b8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b7bc:	4640      	mov	r0, r8
 800b7be:	4653      	mov	r3, sl
 800b7c0:	4649      	mov	r1, r9
 800b7c2:	f7f4 fcc9 	bl	8000158 <__aeabi_dsub>
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	463b      	mov	r3, r7
 800b7ca:	f7f4 fcc5 	bl	8000158 <__aeabi_dsub>
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b7d4:	9904      	ldr	r1, [sp, #16]
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	f6bf af48 	bge.w	800b66e <__ieee754_rem_pio2+0x6e>
 800b7de:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800b7e2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b7e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b7ea:	60e3      	str	r3, [r4, #12]
 800b7ec:	426d      	negs	r5, r5
 800b7ee:	e73e      	b.n	800b66e <__ieee754_rem_pio2+0x6e>
 800b7f0:	a33d      	add	r3, pc, #244	; (adr r3, 800b8e8 <__ieee754_rem_pio2+0x2e8>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fa:	f7f4 fe65 	bl	80004c8 <__aeabi_dmul>
 800b7fe:	4606      	mov	r6, r0
 800b800:	460f      	mov	r7, r1
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	f7f4 fca5 	bl	8000158 <__aeabi_dsub>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4682      	mov	sl, r0
 800b814:	468b      	mov	fp, r1
 800b816:	4640      	mov	r0, r8
 800b818:	4649      	mov	r1, r9
 800b81a:	f7f4 fc9d 	bl	8000158 <__aeabi_dsub>
 800b81e:	4632      	mov	r2, r6
 800b820:	463b      	mov	r3, r7
 800b822:	f7f4 fc99 	bl	8000158 <__aeabi_dsub>
 800b826:	a332      	add	r3, pc, #200	; (adr r3, 800b8f0 <__ieee754_rem_pio2+0x2f0>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	4606      	mov	r6, r0
 800b82e:	460f      	mov	r7, r1
 800b830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b834:	f7f4 fe48 	bl	80004c8 <__aeabi_dmul>
 800b838:	4632      	mov	r2, r6
 800b83a:	463b      	mov	r3, r7
 800b83c:	f7f4 fc8c 	bl	8000158 <__aeabi_dsub>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	4606      	mov	r6, r0
 800b846:	460f      	mov	r7, r1
 800b848:	4650      	mov	r0, sl
 800b84a:	4659      	mov	r1, fp
 800b84c:	f7f4 fc84 	bl	8000158 <__aeabi_dsub>
 800b850:	9a05      	ldr	r2, [sp, #20]
 800b852:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	2b31      	cmp	r3, #49	; 0x31
 800b85a:	dc06      	bgt.n	800b86a <__ieee754_rem_pio2+0x26a>
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	46d0      	mov	r8, sl
 800b862:	46d9      	mov	r9, fp
 800b864:	e9c4 2300 	strd	r2, r3, [r4]
 800b868:	e7a6      	b.n	800b7b8 <__ieee754_rem_pio2+0x1b8>
 800b86a:	a325      	add	r3, pc, #148	; (adr r3, 800b900 <__ieee754_rem_pio2+0x300>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b874:	f7f4 fe28 	bl	80004c8 <__aeabi_dmul>
 800b878:	4606      	mov	r6, r0
 800b87a:	460f      	mov	r7, r1
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4650      	mov	r0, sl
 800b882:	4659      	mov	r1, fp
 800b884:	f7f4 fc68 	bl	8000158 <__aeabi_dsub>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4680      	mov	r8, r0
 800b88e:	4689      	mov	r9, r1
 800b890:	4650      	mov	r0, sl
 800b892:	4659      	mov	r1, fp
 800b894:	f7f4 fc60 	bl	8000158 <__aeabi_dsub>
 800b898:	4632      	mov	r2, r6
 800b89a:	463b      	mov	r3, r7
 800b89c:	f7f4 fc5c 	bl	8000158 <__aeabi_dsub>
 800b8a0:	a319      	add	r3, pc, #100	; (adr r3, 800b908 <__ieee754_rem_pio2+0x308>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	460f      	mov	r7, r1
 800b8aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ae:	f7f4 fe0b 	bl	80004c8 <__aeabi_dmul>
 800b8b2:	4632      	mov	r2, r6
 800b8b4:	463b      	mov	r3, r7
 800b8b6:	f7f4 fc4f 	bl	8000158 <__aeabi_dsub>
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	460f      	mov	r7, r1
 800b8be:	e75f      	b.n	800b780 <__ieee754_rem_pio2+0x180>
 800b8c0:	4a19      	ldr	r2, [pc, #100]	; (800b928 <__ieee754_rem_pio2+0x328>)
 800b8c2:	4592      	cmp	sl, r2
 800b8c4:	dd32      	ble.n	800b92c <__ieee754_rem_pio2+0x32c>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	f7f4 fc45 	bl	8000158 <__aeabi_dsub>
 800b8ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b8d2:	e9c4 0100 	strd	r0, r1, [r4]
 800b8d6:	e6a3      	b.n	800b620 <__ieee754_rem_pio2+0x20>
 800b8d8:	54400000 	.word	0x54400000
 800b8dc:	3ff921fb 	.word	0x3ff921fb
 800b8e0:	1a626331 	.word	0x1a626331
 800b8e4:	3dd0b461 	.word	0x3dd0b461
 800b8e8:	1a600000 	.word	0x1a600000
 800b8ec:	3dd0b461 	.word	0x3dd0b461
 800b8f0:	2e037073 	.word	0x2e037073
 800b8f4:	3ba3198a 	.word	0x3ba3198a
 800b8f8:	6dc9c883 	.word	0x6dc9c883
 800b8fc:	3fe45f30 	.word	0x3fe45f30
 800b900:	2e000000 	.word	0x2e000000
 800b904:	3ba3198a 	.word	0x3ba3198a
 800b908:	252049c1 	.word	0x252049c1
 800b90c:	397b839a 	.word	0x397b839a
 800b910:	3fe921fb 	.word	0x3fe921fb
 800b914:	4002d97b 	.word	0x4002d97b
 800b918:	3ff921fb 	.word	0x3ff921fb
 800b91c:	413921fb 	.word	0x413921fb
 800b920:	3fe00000 	.word	0x3fe00000
 800b924:	0800c2c0 	.word	0x0800c2c0
 800b928:	7fefffff 	.word	0x7fefffff
 800b92c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b930:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b934:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b938:	460f      	mov	r7, r1
 800b93a:	4606      	mov	r6, r0
 800b93c:	f7f5 f85e 	bl	80009fc <__aeabi_d2iz>
 800b940:	f7f4 fd58 	bl	80003f4 <__aeabi_i2d>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4630      	mov	r0, r6
 800b94a:	4639      	mov	r1, r7
 800b94c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b950:	f7f4 fc02 	bl	8000158 <__aeabi_dsub>
 800b954:	2200      	movs	r2, #0
 800b956:	4b22      	ldr	r3, [pc, #136]	; (800b9e0 <__ieee754_rem_pio2+0x3e0>)
 800b958:	f7f4 fdb6 	bl	80004c8 <__aeabi_dmul>
 800b95c:	460f      	mov	r7, r1
 800b95e:	4606      	mov	r6, r0
 800b960:	f7f5 f84c 	bl	80009fc <__aeabi_d2iz>
 800b964:	f7f4 fd46 	bl	80003f4 <__aeabi_i2d>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	4630      	mov	r0, r6
 800b96e:	4639      	mov	r1, r7
 800b970:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b974:	f7f4 fbf0 	bl	8000158 <__aeabi_dsub>
 800b978:	2200      	movs	r2, #0
 800b97a:	4b19      	ldr	r3, [pc, #100]	; (800b9e0 <__ieee754_rem_pio2+0x3e0>)
 800b97c:	f7f4 fda4 	bl	80004c8 <__aeabi_dmul>
 800b980:	f04f 0803 	mov.w	r8, #3
 800b984:	2600      	movs	r6, #0
 800b986:	2700      	movs	r7, #0
 800b988:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b98c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b990:	4632      	mov	r2, r6
 800b992:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b996:	463b      	mov	r3, r7
 800b998:	46c2      	mov	sl, r8
 800b99a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b99e:	f7f4 fffb 	bl	8000998 <__aeabi_dcmpeq>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d1f4      	bne.n	800b990 <__ieee754_rem_pio2+0x390>
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <__ieee754_rem_pio2+0x3e4>)
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	a806      	add	r0, sp, #24
 800b9b4:	4653      	mov	r3, sl
 800b9b6:	f000 f81b 	bl	800b9f0 <__kernel_rem_pio2>
 800b9ba:	9b04      	ldr	r3, [sp, #16]
 800b9bc:	4605      	mov	r5, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f6bf ae55 	bge.w	800b66e <__ieee754_rem_pio2+0x6e>
 800b9c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9cc:	e9c4 2300 	strd	r2, r3, [r4]
 800b9d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b9dc:	e706      	b.n	800b7ec <__ieee754_rem_pio2+0x1ec>
 800b9de:	bf00      	nop
 800b9e0:	41700000 	.word	0x41700000
 800b9e4:	0800c340 	.word	0x0800c340

0800b9e8 <fabs>:
 800b9e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4770      	bx	lr

0800b9f0 <__kernel_rem_pio2>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b9f8:	9308      	str	r3, [sp, #32]
 800b9fa:	9106      	str	r1, [sp, #24]
 800b9fc:	4bb6      	ldr	r3, [pc, #728]	; (800bcd8 <__kernel_rem_pio2+0x2e8>)
 800b9fe:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ba00:	f112 0f14 	cmn.w	r2, #20
 800ba04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba08:	bfa8      	it	ge
 800ba0a:	1ed4      	subge	r4, r2, #3
 800ba0c:	9302      	str	r3, [sp, #8]
 800ba0e:	9b08      	ldr	r3, [sp, #32]
 800ba10:	bfb8      	it	lt
 800ba12:	2400      	movlt	r4, #0
 800ba14:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba18:	9307      	str	r3, [sp, #28]
 800ba1a:	bfa4      	itt	ge
 800ba1c:	2318      	movge	r3, #24
 800ba1e:	fb94 f4f3 	sdivge	r4, r4, r3
 800ba22:	f06f 0317 	mvn.w	r3, #23
 800ba26:	fb04 3303 	mla	r3, r4, r3, r3
 800ba2a:	eb03 0b02 	add.w	fp, r3, r2
 800ba2e:	9a07      	ldr	r2, [sp, #28]
 800ba30:	9b02      	ldr	r3, [sp, #8]
 800ba32:	1aa7      	subs	r7, r4, r2
 800ba34:	eb03 0802 	add.w	r8, r3, r2
 800ba38:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ba3a:	2500      	movs	r5, #0
 800ba3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ba40:	2200      	movs	r2, #0
 800ba42:	2300      	movs	r3, #0
 800ba44:	9009      	str	r0, [sp, #36]	; 0x24
 800ba46:	ae20      	add	r6, sp, #128	; 0x80
 800ba48:	4545      	cmp	r5, r8
 800ba4a:	dd14      	ble.n	800ba76 <__kernel_rem_pio2+0x86>
 800ba4c:	f04f 0800 	mov.w	r8, #0
 800ba50:	9a08      	ldr	r2, [sp, #32]
 800ba52:	ab20      	add	r3, sp, #128	; 0x80
 800ba54:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800ba58:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800ba5c:	9b02      	ldr	r3, [sp, #8]
 800ba5e:	4598      	cmp	r8, r3
 800ba60:	dc35      	bgt.n	800bace <__kernel_rem_pio2+0xde>
 800ba62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba64:	2200      	movs	r2, #0
 800ba66:	f1a3 0908 	sub.w	r9, r3, #8
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	462f      	mov	r7, r5
 800ba6e:	2600      	movs	r6, #0
 800ba70:	e9cd 2300 	strd	r2, r3, [sp]
 800ba74:	e01f      	b.n	800bab6 <__kernel_rem_pio2+0xc6>
 800ba76:	42ef      	cmn	r7, r5
 800ba78:	d40b      	bmi.n	800ba92 <__kernel_rem_pio2+0xa2>
 800ba7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ba7e:	e9cd 2300 	strd	r2, r3, [sp]
 800ba82:	f7f4 fcb7 	bl	80003f4 <__aeabi_i2d>
 800ba86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ba8e:	3501      	adds	r5, #1
 800ba90:	e7da      	b.n	800ba48 <__kernel_rem_pio2+0x58>
 800ba92:	4610      	mov	r0, r2
 800ba94:	4619      	mov	r1, r3
 800ba96:	e7f8      	b.n	800ba8a <__kernel_rem_pio2+0x9a>
 800ba98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba9c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800baa0:	f7f4 fd12 	bl	80004c8 <__aeabi_dmul>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baac:	f7f4 fb56 	bl	800015c <__adddf3>
 800bab0:	e9cd 0100 	strd	r0, r1, [sp]
 800bab4:	3601      	adds	r6, #1
 800bab6:	9b07      	ldr	r3, [sp, #28]
 800bab8:	3f08      	subs	r7, #8
 800baba:	429e      	cmp	r6, r3
 800babc:	ddec      	ble.n	800ba98 <__kernel_rem_pio2+0xa8>
 800babe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bac2:	f108 0801 	add.w	r8, r8, #1
 800bac6:	e8ea 2302 	strd	r2, r3, [sl], #8
 800baca:	3508      	adds	r5, #8
 800bacc:	e7c6      	b.n	800ba5c <__kernel_rem_pio2+0x6c>
 800bace:	9b02      	ldr	r3, [sp, #8]
 800bad0:	aa0c      	add	r2, sp, #48	; 0x30
 800bad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bad6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bad8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bada:	9e02      	ldr	r6, [sp, #8]
 800badc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bae0:	930a      	str	r3, [sp, #40]	; 0x28
 800bae2:	ab98      	add	r3, sp, #608	; 0x260
 800bae4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bae8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800baec:	ab70      	add	r3, sp, #448	; 0x1c0
 800baee:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800baf2:	46d0      	mov	r8, sl
 800baf4:	46b1      	mov	r9, r6
 800baf6:	af0c      	add	r7, sp, #48	; 0x30
 800baf8:	9700      	str	r7, [sp, #0]
 800bafa:	f1b9 0f00 	cmp.w	r9, #0
 800bafe:	f1a8 0808 	sub.w	r8, r8, #8
 800bb02:	dc70      	bgt.n	800bbe6 <__kernel_rem_pio2+0x1f6>
 800bb04:	465a      	mov	r2, fp
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f000 fab1 	bl	800c070 <scalbn>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bb14:	4604      	mov	r4, r0
 800bb16:	460d      	mov	r5, r1
 800bb18:	f7f4 fcd6 	bl	80004c8 <__aeabi_dmul>
 800bb1c:	f000 fb24 	bl	800c168 <floor>
 800bb20:	2200      	movs	r2, #0
 800bb22:	4b6e      	ldr	r3, [pc, #440]	; (800bcdc <__kernel_rem_pio2+0x2ec>)
 800bb24:	f7f4 fcd0 	bl	80004c8 <__aeabi_dmul>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	4629      	mov	r1, r5
 800bb30:	f7f4 fb12 	bl	8000158 <__aeabi_dsub>
 800bb34:	460d      	mov	r5, r1
 800bb36:	4604      	mov	r4, r0
 800bb38:	f7f4 ff60 	bl	80009fc <__aeabi_d2iz>
 800bb3c:	9004      	str	r0, [sp, #16]
 800bb3e:	f7f4 fc59 	bl	80003f4 <__aeabi_i2d>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4620      	mov	r0, r4
 800bb48:	4629      	mov	r1, r5
 800bb4a:	f7f4 fb05 	bl	8000158 <__aeabi_dsub>
 800bb4e:	f1bb 0f00 	cmp.w	fp, #0
 800bb52:	4680      	mov	r8, r0
 800bb54:	4689      	mov	r9, r1
 800bb56:	dd6f      	ble.n	800bc38 <__kernel_rem_pio2+0x248>
 800bb58:	1e71      	subs	r1, r6, #1
 800bb5a:	ab0c      	add	r3, sp, #48	; 0x30
 800bb5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb60:	9c04      	ldr	r4, [sp, #16]
 800bb62:	f1cb 0018 	rsb	r0, fp, #24
 800bb66:	fa43 f200 	asr.w	r2, r3, r0
 800bb6a:	4414      	add	r4, r2
 800bb6c:	4082      	lsls	r2, r0
 800bb6e:	1a9b      	subs	r3, r3, r2
 800bb70:	aa0c      	add	r2, sp, #48	; 0x30
 800bb72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bb76:	f1cb 0217 	rsb	r2, fp, #23
 800bb7a:	9404      	str	r4, [sp, #16]
 800bb7c:	4113      	asrs	r3, r2
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	9b00      	ldr	r3, [sp, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	dd66      	ble.n	800bc54 <__kernel_rem_pio2+0x264>
 800bb86:	2200      	movs	r2, #0
 800bb88:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	9b04      	ldr	r3, [sp, #16]
 800bb90:	3301      	adds	r3, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	4296      	cmp	r6, r2
 800bb96:	f300 80ad 	bgt.w	800bcf4 <__kernel_rem_pio2+0x304>
 800bb9a:	f1bb 0f00 	cmp.w	fp, #0
 800bb9e:	dd07      	ble.n	800bbb0 <__kernel_rem_pio2+0x1c0>
 800bba0:	f1bb 0f01 	cmp.w	fp, #1
 800bba4:	f000 80b5 	beq.w	800bd12 <__kernel_rem_pio2+0x322>
 800bba8:	f1bb 0f02 	cmp.w	fp, #2
 800bbac:	f000 80bb 	beq.w	800bd26 <__kernel_rem_pio2+0x336>
 800bbb0:	9b00      	ldr	r3, [sp, #0]
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d14e      	bne.n	800bc54 <__kernel_rem_pio2+0x264>
 800bbb6:	4642      	mov	r2, r8
 800bbb8:	464b      	mov	r3, r9
 800bbba:	2000      	movs	r0, #0
 800bbbc:	4948      	ldr	r1, [pc, #288]	; (800bce0 <__kernel_rem_pio2+0x2f0>)
 800bbbe:	f7f4 facb 	bl	8000158 <__aeabi_dsub>
 800bbc2:	4680      	mov	r8, r0
 800bbc4:	4689      	mov	r9, r1
 800bbc6:	2c00      	cmp	r4, #0
 800bbc8:	d044      	beq.n	800bc54 <__kernel_rem_pio2+0x264>
 800bbca:	465a      	mov	r2, fp
 800bbcc:	2000      	movs	r0, #0
 800bbce:	4944      	ldr	r1, [pc, #272]	; (800bce0 <__kernel_rem_pio2+0x2f0>)
 800bbd0:	f000 fa4e 	bl	800c070 <scalbn>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4640      	mov	r0, r8
 800bbda:	4649      	mov	r1, r9
 800bbdc:	f7f4 fabc 	bl	8000158 <__aeabi_dsub>
 800bbe0:	4680      	mov	r8, r0
 800bbe2:	4689      	mov	r9, r1
 800bbe4:	e036      	b.n	800bc54 <__kernel_rem_pio2+0x264>
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	4b3e      	ldr	r3, [pc, #248]	; (800bce4 <__kernel_rem_pio2+0x2f4>)
 800bbea:	4620      	mov	r0, r4
 800bbec:	4629      	mov	r1, r5
 800bbee:	f7f4 fc6b 	bl	80004c8 <__aeabi_dmul>
 800bbf2:	f7f4 ff03 	bl	80009fc <__aeabi_d2iz>
 800bbf6:	f7f4 fbfd 	bl	80003f4 <__aeabi_i2d>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc02:	2200      	movs	r2, #0
 800bc04:	4b38      	ldr	r3, [pc, #224]	; (800bce8 <__kernel_rem_pio2+0x2f8>)
 800bc06:	f7f4 fc5f 	bl	80004c8 <__aeabi_dmul>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	f7f4 faa1 	bl	8000158 <__aeabi_dsub>
 800bc16:	f7f4 fef1 	bl	80009fc <__aeabi_d2iz>
 800bc1a:	9b00      	ldr	r3, [sp, #0]
 800bc1c:	f109 39ff 	add.w	r9, r9, #4294967295
 800bc20:	f843 0b04 	str.w	r0, [r3], #4
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bc2e:	f7f4 fa95 	bl	800015c <__adddf3>
 800bc32:	4604      	mov	r4, r0
 800bc34:	460d      	mov	r5, r1
 800bc36:	e760      	b.n	800bafa <__kernel_rem_pio2+0x10a>
 800bc38:	d105      	bne.n	800bc46 <__kernel_rem_pio2+0x256>
 800bc3a:	1e73      	subs	r3, r6, #1
 800bc3c:	aa0c      	add	r2, sp, #48	; 0x30
 800bc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc42:	15db      	asrs	r3, r3, #23
 800bc44:	e79b      	b.n	800bb7e <__kernel_rem_pio2+0x18e>
 800bc46:	2200      	movs	r2, #0
 800bc48:	4b28      	ldr	r3, [pc, #160]	; (800bcec <__kernel_rem_pio2+0x2fc>)
 800bc4a:	f7f4 fec3 	bl	80009d4 <__aeabi_dcmpge>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d13e      	bne.n	800bcd0 <__kernel_rem_pio2+0x2e0>
 800bc52:	9000      	str	r0, [sp, #0]
 800bc54:	2200      	movs	r2, #0
 800bc56:	2300      	movs	r3, #0
 800bc58:	4640      	mov	r0, r8
 800bc5a:	4649      	mov	r1, r9
 800bc5c:	f7f4 fe9c 	bl	8000998 <__aeabi_dcmpeq>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	f000 80b2 	beq.w	800bdca <__kernel_rem_pio2+0x3da>
 800bc66:	1e74      	subs	r4, r6, #1
 800bc68:	4623      	mov	r3, r4
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	9902      	ldr	r1, [sp, #8]
 800bc6e:	428b      	cmp	r3, r1
 800bc70:	da60      	bge.n	800bd34 <__kernel_rem_pio2+0x344>
 800bc72:	2a00      	cmp	r2, #0
 800bc74:	d075      	beq.n	800bd62 <__kernel_rem_pio2+0x372>
 800bc76:	ab0c      	add	r3, sp, #48	; 0x30
 800bc78:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bc7c:	f1ab 0b18 	sub.w	fp, fp, #24
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 80a0 	beq.w	800bdc6 <__kernel_rem_pio2+0x3d6>
 800bc86:	465a      	mov	r2, fp
 800bc88:	2000      	movs	r0, #0
 800bc8a:	4915      	ldr	r1, [pc, #84]	; (800bce0 <__kernel_rem_pio2+0x2f0>)
 800bc8c:	f000 f9f0 	bl	800c070 <scalbn>
 800bc90:	46a2      	mov	sl, r4
 800bc92:	4606      	mov	r6, r0
 800bc94:	460f      	mov	r7, r1
 800bc96:	f04f 0800 	mov.w	r8, #0
 800bc9a:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc9c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800bce4 <__kernel_rem_pio2+0x2f4>
 800bca0:	00e5      	lsls	r5, r4, #3
 800bca2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800bca6:	f1ba 0f00 	cmp.w	sl, #0
 800bcaa:	f280 80c4 	bge.w	800be36 <__kernel_rem_pio2+0x446>
 800bcae:	4626      	mov	r6, r4
 800bcb0:	2e00      	cmp	r6, #0
 800bcb2:	f2c0 80f6 	blt.w	800bea2 <__kernel_rem_pio2+0x4b2>
 800bcb6:	4b0e      	ldr	r3, [pc, #56]	; (800bcf0 <__kernel_rem_pio2+0x300>)
 800bcb8:	f04f 0a00 	mov.w	sl, #0
 800bcbc:	9307      	str	r3, [sp, #28]
 800bcbe:	ab70      	add	r3, sp, #448	; 0x1c0
 800bcc0:	f04f 0b00 	mov.w	fp, #0
 800bcc4:	f04f 0800 	mov.w	r8, #0
 800bcc8:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bccc:	1ba7      	subs	r7, r4, r6
 800bcce:	e0dc      	b.n	800be8a <__kernel_rem_pio2+0x49a>
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	e757      	b.n	800bb86 <__kernel_rem_pio2+0x196>
 800bcd6:	bf00      	nop
 800bcd8:	0800c488 	.word	0x0800c488
 800bcdc:	40200000 	.word	0x40200000
 800bce0:	3ff00000 	.word	0x3ff00000
 800bce4:	3e700000 	.word	0x3e700000
 800bce8:	41700000 	.word	0x41700000
 800bcec:	3fe00000 	.word	0x3fe00000
 800bcf0:	0800c448 	.word	0x0800c448
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	b944      	cbnz	r4, 800bd0a <__kernel_rem_pio2+0x31a>
 800bcf8:	b11b      	cbz	r3, 800bd02 <__kernel_rem_pio2+0x312>
 800bcfa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bcfe:	603b      	str	r3, [r7, #0]
 800bd00:	2301      	movs	r3, #1
 800bd02:	461c      	mov	r4, r3
 800bd04:	3201      	adds	r2, #1
 800bd06:	3704      	adds	r7, #4
 800bd08:	e744      	b.n	800bb94 <__kernel_rem_pio2+0x1a4>
 800bd0a:	1acb      	subs	r3, r1, r3
 800bd0c:	603b      	str	r3, [r7, #0]
 800bd0e:	4623      	mov	r3, r4
 800bd10:	e7f7      	b.n	800bd02 <__kernel_rem_pio2+0x312>
 800bd12:	1e72      	subs	r2, r6, #1
 800bd14:	ab0c      	add	r3, sp, #48	; 0x30
 800bd16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd1e:	a90c      	add	r1, sp, #48	; 0x30
 800bd20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd24:	e744      	b.n	800bbb0 <__kernel_rem_pio2+0x1c0>
 800bd26:	1e72      	subs	r2, r6, #1
 800bd28:	ab0c      	add	r3, sp, #48	; 0x30
 800bd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd2e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd32:	e7f4      	b.n	800bd1e <__kernel_rem_pio2+0x32e>
 800bd34:	a90c      	add	r1, sp, #48	; 0x30
 800bd36:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	e795      	b.n	800bc6c <__kernel_rem_pio2+0x27c>
 800bd40:	3301      	adds	r3, #1
 800bd42:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bd46:	2900      	cmp	r1, #0
 800bd48:	d0fa      	beq.n	800bd40 <__kernel_rem_pio2+0x350>
 800bd4a:	9a08      	ldr	r2, [sp, #32]
 800bd4c:	a920      	add	r1, sp, #128	; 0x80
 800bd4e:	18b2      	adds	r2, r6, r2
 800bd50:	f106 0801 	add.w	r8, r6, #1
 800bd54:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800bd58:	18f4      	adds	r4, r6, r3
 800bd5a:	4544      	cmp	r4, r8
 800bd5c:	da04      	bge.n	800bd68 <__kernel_rem_pio2+0x378>
 800bd5e:	4626      	mov	r6, r4
 800bd60:	e6bf      	b.n	800bae2 <__kernel_rem_pio2+0xf2>
 800bd62:	2301      	movs	r3, #1
 800bd64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd66:	e7ec      	b.n	800bd42 <__kernel_rem_pio2+0x352>
 800bd68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd6a:	f04f 0900 	mov.w	r9, #0
 800bd6e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bd72:	f7f4 fb3f 	bl	80003f4 <__aeabi_i2d>
 800bd76:	2600      	movs	r6, #0
 800bd78:	2700      	movs	r7, #0
 800bd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7c:	e9c5 0100 	strd	r0, r1, [r5]
 800bd80:	3b08      	subs	r3, #8
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	9504      	str	r5, [sp, #16]
 800bd86:	9b07      	ldr	r3, [sp, #28]
 800bd88:	4599      	cmp	r9, r3
 800bd8a:	dd05      	ble.n	800bd98 <__kernel_rem_pio2+0x3a8>
 800bd8c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800bd90:	f108 0801 	add.w	r8, r8, #1
 800bd94:	3508      	adds	r5, #8
 800bd96:	e7e0      	b.n	800bd5a <__kernel_rem_pio2+0x36a>
 800bd98:	f8dd c010 	ldr.w	ip, [sp, #16]
 800bd9c:	9900      	ldr	r1, [sp, #0]
 800bd9e:	f109 0901 	add.w	r9, r9, #1
 800bda2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800bda6:	9100      	str	r1, [sp, #0]
 800bda8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800bdac:	f8cd c010 	str.w	ip, [sp, #16]
 800bdb0:	f7f4 fb8a 	bl	80004c8 <__aeabi_dmul>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4630      	mov	r0, r6
 800bdba:	4639      	mov	r1, r7
 800bdbc:	f7f4 f9ce 	bl	800015c <__adddf3>
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	e7df      	b.n	800bd86 <__kernel_rem_pio2+0x396>
 800bdc6:	3c01      	subs	r4, #1
 800bdc8:	e755      	b.n	800bc76 <__kernel_rem_pio2+0x286>
 800bdca:	f1cb 0200 	rsb	r2, fp, #0
 800bdce:	4640      	mov	r0, r8
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	f000 f94d 	bl	800c070 <scalbn>
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4ba3      	ldr	r3, [pc, #652]	; (800c068 <__kernel_rem_pio2+0x678>)
 800bdda:	4604      	mov	r4, r0
 800bddc:	460d      	mov	r5, r1
 800bdde:	f7f4 fdf9 	bl	80009d4 <__aeabi_dcmpge>
 800bde2:	b1f8      	cbz	r0, 800be24 <__kernel_rem_pio2+0x434>
 800bde4:	2200      	movs	r2, #0
 800bde6:	4ba1      	ldr	r3, [pc, #644]	; (800c06c <__kernel_rem_pio2+0x67c>)
 800bde8:	4620      	mov	r0, r4
 800bdea:	4629      	mov	r1, r5
 800bdec:	f7f4 fb6c 	bl	80004c8 <__aeabi_dmul>
 800bdf0:	f7f4 fe04 	bl	80009fc <__aeabi_d2iz>
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	f7f4 fafd 	bl	80003f4 <__aeabi_i2d>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	4b9a      	ldr	r3, [pc, #616]	; (800c068 <__kernel_rem_pio2+0x678>)
 800bdfe:	f7f4 fb63 	bl	80004c8 <__aeabi_dmul>
 800be02:	460b      	mov	r3, r1
 800be04:	4602      	mov	r2, r0
 800be06:	4629      	mov	r1, r5
 800be08:	4620      	mov	r0, r4
 800be0a:	f7f4 f9a5 	bl	8000158 <__aeabi_dsub>
 800be0e:	f7f4 fdf5 	bl	80009fc <__aeabi_d2iz>
 800be12:	1c74      	adds	r4, r6, #1
 800be14:	ab0c      	add	r3, sp, #48	; 0x30
 800be16:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800be1a:	f10b 0b18 	add.w	fp, fp, #24
 800be1e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800be22:	e730      	b.n	800bc86 <__kernel_rem_pio2+0x296>
 800be24:	4620      	mov	r0, r4
 800be26:	4629      	mov	r1, r5
 800be28:	f7f4 fde8 	bl	80009fc <__aeabi_d2iz>
 800be2c:	ab0c      	add	r3, sp, #48	; 0x30
 800be2e:	4634      	mov	r4, r6
 800be30:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800be34:	e727      	b.n	800bc86 <__kernel_rem_pio2+0x296>
 800be36:	ab0c      	add	r3, sp, #48	; 0x30
 800be38:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800be3c:	f7f4 fada 	bl	80003f4 <__aeabi_i2d>
 800be40:	4632      	mov	r2, r6
 800be42:	463b      	mov	r3, r7
 800be44:	f7f4 fb40 	bl	80004c8 <__aeabi_dmul>
 800be48:	4642      	mov	r2, r8
 800be4a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800be4e:	464b      	mov	r3, r9
 800be50:	4630      	mov	r0, r6
 800be52:	4639      	mov	r1, r7
 800be54:	f7f4 fb38 	bl	80004c8 <__aeabi_dmul>
 800be58:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be5c:	4606      	mov	r6, r0
 800be5e:	460f      	mov	r7, r1
 800be60:	e721      	b.n	800bca6 <__kernel_rem_pio2+0x2b6>
 800be62:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800be66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800be6a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800be6e:	f8cd c01c 	str.w	ip, [sp, #28]
 800be72:	f7f4 fb29 	bl	80004c8 <__aeabi_dmul>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	4650      	mov	r0, sl
 800be7c:	4659      	mov	r1, fp
 800be7e:	f7f4 f96d 	bl	800015c <__adddf3>
 800be82:	4682      	mov	sl, r0
 800be84:	468b      	mov	fp, r1
 800be86:	f108 0801 	add.w	r8, r8, #1
 800be8a:	9b02      	ldr	r3, [sp, #8]
 800be8c:	4598      	cmp	r8, r3
 800be8e:	dc01      	bgt.n	800be94 <__kernel_rem_pio2+0x4a4>
 800be90:	45b8      	cmp	r8, r7
 800be92:	dde6      	ble.n	800be62 <__kernel_rem_pio2+0x472>
 800be94:	ab48      	add	r3, sp, #288	; 0x120
 800be96:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800be9a:	e9c7 ab00 	strd	sl, fp, [r7]
 800be9e:	3e01      	subs	r6, #1
 800bea0:	e706      	b.n	800bcb0 <__kernel_rem_pio2+0x2c0>
 800bea2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	dc09      	bgt.n	800bebc <__kernel_rem_pio2+0x4cc>
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dc32      	bgt.n	800bf12 <__kernel_rem_pio2+0x522>
 800beac:	d058      	beq.n	800bf60 <__kernel_rem_pio2+0x570>
 800beae:	9b04      	ldr	r3, [sp, #16]
 800beb0:	f003 0007 	and.w	r0, r3, #7
 800beb4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d1f5      	bne.n	800beae <__kernel_rem_pio2+0x4be>
 800bec2:	ab48      	add	r3, sp, #288	; 0x120
 800bec4:	441d      	add	r5, r3
 800bec6:	46aa      	mov	sl, r5
 800bec8:	46a3      	mov	fp, r4
 800beca:	f1bb 0f00 	cmp.w	fp, #0
 800bece:	dc74      	bgt.n	800bfba <__kernel_rem_pio2+0x5ca>
 800bed0:	46aa      	mov	sl, r5
 800bed2:	46a3      	mov	fp, r4
 800bed4:	f1bb 0f01 	cmp.w	fp, #1
 800bed8:	f300 808e 	bgt.w	800bff8 <__kernel_rem_pio2+0x608>
 800bedc:	2700      	movs	r7, #0
 800bede:	463e      	mov	r6, r7
 800bee0:	2c01      	cmp	r4, #1
 800bee2:	f300 80a8 	bgt.w	800c036 <__kernel_rem_pio2+0x646>
 800bee6:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800beea:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f040 80aa 	bne.w	800c04a <__kernel_rem_pio2+0x65a>
 800bef6:	4603      	mov	r3, r0
 800bef8:	462a      	mov	r2, r5
 800befa:	9806      	ldr	r0, [sp, #24]
 800befc:	e9c0 2300 	strd	r2, r3, [r0]
 800bf00:	4622      	mov	r2, r4
 800bf02:	460b      	mov	r3, r1
 800bf04:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bf08:	463a      	mov	r2, r7
 800bf0a:	4633      	mov	r3, r6
 800bf0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bf10:	e7cd      	b.n	800beae <__kernel_rem_pio2+0x4be>
 800bf12:	2000      	movs	r0, #0
 800bf14:	46a0      	mov	r8, r4
 800bf16:	4601      	mov	r1, r0
 800bf18:	ab48      	add	r3, sp, #288	; 0x120
 800bf1a:	441d      	add	r5, r3
 800bf1c:	f1b8 0f00 	cmp.w	r8, #0
 800bf20:	da38      	bge.n	800bf94 <__kernel_rem_pio2+0x5a4>
 800bf22:	9b00      	ldr	r3, [sp, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d03c      	beq.n	800bfa2 <__kernel_rem_pio2+0x5b2>
 800bf28:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	462b      	mov	r3, r5
 800bf30:	9d06      	ldr	r5, [sp, #24]
 800bf32:	2601      	movs	r6, #1
 800bf34:	e9c5 2300 	strd	r2, r3, [r5]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bf3e:	f7f4 f90b 	bl	8000158 <__aeabi_dsub>
 800bf42:	4684      	mov	ip, r0
 800bf44:	460f      	mov	r7, r1
 800bf46:	ad48      	add	r5, sp, #288	; 0x120
 800bf48:	42b4      	cmp	r4, r6
 800bf4a:	da2c      	bge.n	800bfa6 <__kernel_rem_pio2+0x5b6>
 800bf4c:	9b00      	ldr	r3, [sp, #0]
 800bf4e:	b10b      	cbz	r3, 800bf54 <__kernel_rem_pio2+0x564>
 800bf50:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bf54:	4662      	mov	r2, ip
 800bf56:	463b      	mov	r3, r7
 800bf58:	9906      	ldr	r1, [sp, #24]
 800bf5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bf5e:	e7a6      	b.n	800beae <__kernel_rem_pio2+0x4be>
 800bf60:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800bf62:	ab48      	add	r3, sp, #288	; 0x120
 800bf64:	4637      	mov	r7, r6
 800bf66:	441d      	add	r5, r3
 800bf68:	2c00      	cmp	r4, #0
 800bf6a:	da09      	bge.n	800bf80 <__kernel_rem_pio2+0x590>
 800bf6c:	9b00      	ldr	r3, [sp, #0]
 800bf6e:	b10b      	cbz	r3, 800bf74 <__kernel_rem_pio2+0x584>
 800bf70:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bf74:	4632      	mov	r2, r6
 800bf76:	463b      	mov	r3, r7
 800bf78:	9906      	ldr	r1, [sp, #24]
 800bf7a:	e9c1 2300 	strd	r2, r3, [r1]
 800bf7e:	e796      	b.n	800beae <__kernel_rem_pio2+0x4be>
 800bf80:	4630      	mov	r0, r6
 800bf82:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bf86:	4639      	mov	r1, r7
 800bf88:	f7f4 f8e8 	bl	800015c <__adddf3>
 800bf8c:	3c01      	subs	r4, #1
 800bf8e:	4606      	mov	r6, r0
 800bf90:	460f      	mov	r7, r1
 800bf92:	e7e9      	b.n	800bf68 <__kernel_rem_pio2+0x578>
 800bf94:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bf98:	f7f4 f8e0 	bl	800015c <__adddf3>
 800bf9c:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfa0:	e7bc      	b.n	800bf1c <__kernel_rem_pio2+0x52c>
 800bfa2:	460d      	mov	r5, r1
 800bfa4:	e7c2      	b.n	800bf2c <__kernel_rem_pio2+0x53c>
 800bfa6:	4660      	mov	r0, ip
 800bfa8:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800bfac:	4639      	mov	r1, r7
 800bfae:	f7f4 f8d5 	bl	800015c <__adddf3>
 800bfb2:	3601      	adds	r6, #1
 800bfb4:	4684      	mov	ip, r0
 800bfb6:	460f      	mov	r7, r1
 800bfb8:	e7c6      	b.n	800bf48 <__kernel_rem_pio2+0x558>
 800bfba:	e9da 6700 	ldrd	r6, r7, [sl]
 800bfbe:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800bfc2:	4632      	mov	r2, r6
 800bfc4:	463b      	mov	r3, r7
 800bfc6:	4640      	mov	r0, r8
 800bfc8:	4649      	mov	r1, r9
 800bfca:	f7f4 f8c7 	bl	800015c <__adddf3>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	4649      	mov	r1, r9
 800bfda:	f7f4 f8bd 	bl	8000158 <__aeabi_dsub>
 800bfde:	4632      	mov	r2, r6
 800bfe0:	463b      	mov	r3, r7
 800bfe2:	f7f4 f8bb 	bl	800015c <__adddf3>
 800bfe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfea:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bfee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bff2:	e9ca 2300 	strd	r2, r3, [sl]
 800bff6:	e768      	b.n	800beca <__kernel_rem_pio2+0x4da>
 800bff8:	e9da 8900 	ldrd	r8, r9, [sl]
 800bffc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	4630      	mov	r0, r6
 800c006:	4639      	mov	r1, r7
 800c008:	f7f4 f8a8 	bl	800015c <__adddf3>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c014:	4630      	mov	r0, r6
 800c016:	4639      	mov	r1, r7
 800c018:	f7f4 f89e 	bl	8000158 <__aeabi_dsub>
 800c01c:	4642      	mov	r2, r8
 800c01e:	464b      	mov	r3, r9
 800c020:	f7f4 f89c 	bl	800015c <__adddf3>
 800c024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c028:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c02c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c030:	e9ca 2300 	strd	r2, r3, [sl]
 800c034:	e74e      	b.n	800bed4 <__kernel_rem_pio2+0x4e4>
 800c036:	4638      	mov	r0, r7
 800c038:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c03c:	4631      	mov	r1, r6
 800c03e:	f7f4 f88d 	bl	800015c <__adddf3>
 800c042:	3c01      	subs	r4, #1
 800c044:	4607      	mov	r7, r0
 800c046:	460e      	mov	r6, r1
 800c048:	e74a      	b.n	800bee0 <__kernel_rem_pio2+0x4f0>
 800c04a:	9b06      	ldr	r3, [sp, #24]
 800c04c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c050:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c054:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c058:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c05c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c060:	601d      	str	r5, [r3, #0]
 800c062:	615e      	str	r6, [r3, #20]
 800c064:	e723      	b.n	800beae <__kernel_rem_pio2+0x4be>
 800c066:	bf00      	nop
 800c068:	41700000 	.word	0x41700000
 800c06c:	3e700000 	.word	0x3e700000

0800c070 <scalbn>:
 800c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c072:	4616      	mov	r6, r2
 800c074:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c078:	4604      	mov	r4, r0
 800c07a:	460d      	mov	r5, r1
 800c07c:	460b      	mov	r3, r1
 800c07e:	b992      	cbnz	r2, 800c0a6 <scalbn+0x36>
 800c080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c084:	4303      	orrs	r3, r0
 800c086:	d03c      	beq.n	800c102 <scalbn+0x92>
 800c088:	4b31      	ldr	r3, [pc, #196]	; (800c150 <scalbn+0xe0>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	f7f4 fa1c 	bl	80004c8 <__aeabi_dmul>
 800c090:	4b30      	ldr	r3, [pc, #192]	; (800c154 <scalbn+0xe4>)
 800c092:	4604      	mov	r4, r0
 800c094:	429e      	cmp	r6, r3
 800c096:	460d      	mov	r5, r1
 800c098:	da0f      	bge.n	800c0ba <scalbn+0x4a>
 800c09a:	a329      	add	r3, pc, #164	; (adr r3, 800c140 <scalbn+0xd0>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 fa12 	bl	80004c8 <__aeabi_dmul>
 800c0a4:	e006      	b.n	800c0b4 <scalbn+0x44>
 800c0a6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c0aa:	42ba      	cmp	r2, r7
 800c0ac:	d109      	bne.n	800c0c2 <scalbn+0x52>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	f7f4 f854 	bl	800015c <__adddf3>
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	e023      	b.n	800c102 <scalbn+0x92>
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c0c0:	3a36      	subs	r2, #54	; 0x36
 800c0c2:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c0c6:	428e      	cmp	r6, r1
 800c0c8:	dd0e      	ble.n	800c0e8 <scalbn+0x78>
 800c0ca:	a31f      	add	r3, pc, #124	; (adr r3, 800c148 <scalbn+0xd8>)
 800c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c0d4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c0d8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c0dc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c0e0:	481d      	ldr	r0, [pc, #116]	; (800c158 <scalbn+0xe8>)
 800c0e2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c0e6:	e7db      	b.n	800c0a0 <scalbn+0x30>
 800c0e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c0ec:	4432      	add	r2, r6
 800c0ee:	428a      	cmp	r2, r1
 800c0f0:	dceb      	bgt.n	800c0ca <scalbn+0x5a>
 800c0f2:	2a00      	cmp	r2, #0
 800c0f4:	dd08      	ble.n	800c108 <scalbn+0x98>
 800c0f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c0fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c0fe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c108:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c10c:	da0c      	bge.n	800c128 <scalbn+0xb8>
 800c10e:	a30c      	add	r3, pc, #48	; (adr r3, 800c140 <scalbn+0xd0>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c118:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c11c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c120:	480e      	ldr	r0, [pc, #56]	; (800c15c <scalbn+0xec>)
 800c122:	f041 011f 	orr.w	r1, r1, #31
 800c126:	e7bb      	b.n	800c0a0 <scalbn+0x30>
 800c128:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c12c:	3236      	adds	r2, #54	; 0x36
 800c12e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c132:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c136:	4620      	mov	r0, r4
 800c138:	4629      	mov	r1, r5
 800c13a:	2200      	movs	r2, #0
 800c13c:	4b08      	ldr	r3, [pc, #32]	; (800c160 <scalbn+0xf0>)
 800c13e:	e7af      	b.n	800c0a0 <scalbn+0x30>
 800c140:	c2f8f359 	.word	0xc2f8f359
 800c144:	01a56e1f 	.word	0x01a56e1f
 800c148:	8800759c 	.word	0x8800759c
 800c14c:	7e37e43c 	.word	0x7e37e43c
 800c150:	43500000 	.word	0x43500000
 800c154:	ffff3cb0 	.word	0xffff3cb0
 800c158:	8800759c 	.word	0x8800759c
 800c15c:	c2f8f359 	.word	0xc2f8f359
 800c160:	3c900000 	.word	0x3c900000
 800c164:	00000000 	.word	0x00000000

0800c168 <floor>:
 800c168:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c170:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c174:	2e13      	cmp	r6, #19
 800c176:	460b      	mov	r3, r1
 800c178:	4607      	mov	r7, r0
 800c17a:	460c      	mov	r4, r1
 800c17c:	4605      	mov	r5, r0
 800c17e:	dc32      	bgt.n	800c1e6 <floor+0x7e>
 800c180:	2e00      	cmp	r6, #0
 800c182:	da14      	bge.n	800c1ae <floor+0x46>
 800c184:	a334      	add	r3, pc, #208	; (adr r3, 800c258 <floor+0xf0>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	f7f3 ffe7 	bl	800015c <__adddf3>
 800c18e:	2200      	movs	r2, #0
 800c190:	2300      	movs	r3, #0
 800c192:	f7f4 fc29 	bl	80009e8 <__aeabi_dcmpgt>
 800c196:	b138      	cbz	r0, 800c1a8 <floor+0x40>
 800c198:	2c00      	cmp	r4, #0
 800c19a:	da56      	bge.n	800c24a <floor+0xe2>
 800c19c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c1a0:	4325      	orrs	r5, r4
 800c1a2:	d055      	beq.n	800c250 <floor+0xe8>
 800c1a4:	2500      	movs	r5, #0
 800c1a6:	4c2e      	ldr	r4, [pc, #184]	; (800c260 <floor+0xf8>)
 800c1a8:	4623      	mov	r3, r4
 800c1aa:	462f      	mov	r7, r5
 800c1ac:	e025      	b.n	800c1fa <floor+0x92>
 800c1ae:	4a2d      	ldr	r2, [pc, #180]	; (800c264 <floor+0xfc>)
 800c1b0:	fa42 f806 	asr.w	r8, r2, r6
 800c1b4:	ea01 0208 	and.w	r2, r1, r8
 800c1b8:	4302      	orrs	r2, r0
 800c1ba:	d01e      	beq.n	800c1fa <floor+0x92>
 800c1bc:	a326      	add	r3, pc, #152	; (adr r3, 800c258 <floor+0xf0>)
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	f7f3 ffcb 	bl	800015c <__adddf3>
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f7f4 fc0d 	bl	80009e8 <__aeabi_dcmpgt>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d0ea      	beq.n	800c1a8 <floor+0x40>
 800c1d2:	2c00      	cmp	r4, #0
 800c1d4:	bfbe      	ittt	lt
 800c1d6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c1da:	4133      	asrlt	r3, r6
 800c1dc:	18e4      	addlt	r4, r4, r3
 800c1de:	2500      	movs	r5, #0
 800c1e0:	ea24 0408 	bic.w	r4, r4, r8
 800c1e4:	e7e0      	b.n	800c1a8 <floor+0x40>
 800c1e6:	2e33      	cmp	r6, #51	; 0x33
 800c1e8:	dd0b      	ble.n	800c202 <floor+0x9a>
 800c1ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c1ee:	d104      	bne.n	800c1fa <floor+0x92>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	f7f3 ffb3 	bl	800015c <__adddf3>
 800c1f6:	4607      	mov	r7, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c202:	f04f 38ff 	mov.w	r8, #4294967295
 800c206:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c20a:	fa28 f802 	lsr.w	r8, r8, r2
 800c20e:	ea10 0f08 	tst.w	r0, r8
 800c212:	d0f2      	beq.n	800c1fa <floor+0x92>
 800c214:	a310      	add	r3, pc, #64	; (adr r3, 800c258 <floor+0xf0>)
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	f7f3 ff9f 	bl	800015c <__adddf3>
 800c21e:	2200      	movs	r2, #0
 800c220:	2300      	movs	r3, #0
 800c222:	f7f4 fbe1 	bl	80009e8 <__aeabi_dcmpgt>
 800c226:	2800      	cmp	r0, #0
 800c228:	d0be      	beq.n	800c1a8 <floor+0x40>
 800c22a:	2c00      	cmp	r4, #0
 800c22c:	da0a      	bge.n	800c244 <floor+0xdc>
 800c22e:	2e14      	cmp	r6, #20
 800c230:	d101      	bne.n	800c236 <floor+0xce>
 800c232:	3401      	adds	r4, #1
 800c234:	e006      	b.n	800c244 <floor+0xdc>
 800c236:	2301      	movs	r3, #1
 800c238:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c23c:	40b3      	lsls	r3, r6
 800c23e:	441d      	add	r5, r3
 800c240:	42af      	cmp	r7, r5
 800c242:	d8f6      	bhi.n	800c232 <floor+0xca>
 800c244:	ea25 0508 	bic.w	r5, r5, r8
 800c248:	e7ae      	b.n	800c1a8 <floor+0x40>
 800c24a:	2500      	movs	r5, #0
 800c24c:	462c      	mov	r4, r5
 800c24e:	e7ab      	b.n	800c1a8 <floor+0x40>
 800c250:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c254:	e7a8      	b.n	800c1a8 <floor+0x40>
 800c256:	bf00      	nop
 800c258:	8800759c 	.word	0x8800759c
 800c25c:	7e37e43c 	.word	0x7e37e43c
 800c260:	bff00000 	.word	0xbff00000
 800c264:	000fffff 	.word	0x000fffff

0800c268 <_init>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	bf00      	nop
 800c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26e:	bc08      	pop	{r3}
 800c270:	469e      	mov	lr, r3
 800c272:	4770      	bx	lr

0800c274 <_fini>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr
