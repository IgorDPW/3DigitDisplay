
TMR_INTERRUPT_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080075b0  080075b0  000175b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b0  080077b0  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080077b0  080077b0  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077b0  080077b0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080077b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000180  08007938  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  08007938  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a485  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cce  00000000  00000000  0002a671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008dc  00000000  00000000  0002ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020b9  00000000  00000000  0002d78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc16  00000000  00000000  0002f845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cff2  00000000  00000000  0003c45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003338  00000000  00000000  000c9450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000cc788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08007598 	.word	0x08007598

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08007598 	.word	0x08007598

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f002 fb1c 	bl	8003388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f84a 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 fa62 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d58:	f000 fa3a 	bl	80011d0 <MX_DMA_Init>
  MX_TIM4_Init();
 8000d5c:	f000 f9ea 	bl	8001134 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000d60:	f000 f99a 	bl	8001098 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d64:	f000 f89c 	bl	8000ea0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d68:	f000 f8f6 	bl	8000f58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim4);
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <main+0x80>)
 8000d6e:	f004 f983 	bl	8005078 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000d72:	4816      	ldr	r0, [pc, #88]	; (8000dcc <main+0x84>)
 8000d74:	f004 f980 	bl	8005078 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <main+0x88>)
 8000d80:	f003 fc4c 	bl	800461c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG2, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <main+0x88>)
 8000d8c:	f003 fc46 	bl	800461c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG3, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <main+0x88>)
 8000d98:	f003 fc40 	bl	800461c <HAL_GPIO_WritePin>
	//HAL_ADC_Start(&hadc1);

	HAL_ADC_Start_DMA(&hadc1,ADC_Buffer,ADC_CH_NMR);	//Start o ADC no modo DMA
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <main+0x8c>)
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <main+0x90>)
 8000da2:	f002 fc4f 	bl	8003644 <HAL_ADC_Start_DMA>
	// Aqui os valores do ADC serão salvos no Buffer

	 WS2512_Send();
 8000da6:	f002 f89d 	bl	8002ee4 <WS2512_Send>

	 counter_timer4=0;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <main+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN 3 */

		//HAL_ADC_PollForConversion(&hadc1, 1000);
		//readValue = HAL_ADC_GetValue(&hadc1);

		LEDHandler(Speed_Signal_Output);
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <main+0x98>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fb2d 	bl	8001414 <LEDHandler>
		DigitExtract(Speed_Signal_Input);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <main+0x9c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fdc0 	bl	8002944 <DigitExtract>
		LEDHandler(Speed_Signal_Output);
 8000dc4:	e7f4      	b.n	8000db0 <main+0x68>
 8000dc6:	bf00      	nop
 8000dc8:	200002a0 	.word	0x200002a0
 8000dcc:	20000258 	.word	0x20000258
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	20000364 	.word	0x20000364
 8000dd8:	2000019c 	.word	0x2000019c
 8000ddc:	20000350 	.word	0x20000350
 8000de0:	2000035c 	.word	0x2000035c
 8000de4:	20000358 	.word	0x20000358

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	; 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2228      	movs	r2, #40	; 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f005 fb45 	bl	8006486 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e26:	2301      	movs	r3, #1
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 fc36 	bl	80046b0 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4a:	f002 f8b9 	bl	8002fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4e:	230f      	movs	r3, #15
 8000e50:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fea2 	bl	8004bb4 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e76:	f002 f8a3 	bl	8002fc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e82:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fff0 	bl	8004e6c <HAL_RCCEx_PeriphCLKConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e92:	f002 f895 	bl	8002fc0 <Error_Handler>
  }
}
 8000e96:	bf00      	nop
 8000e98:	3750      	adds	r7, #80	; 0x50
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000eb2:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <MX_ADC1_Init+0xb4>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000ecc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ed0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000eda:	2203      	movs	r2, #3
 8000edc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ede:	481c      	ldr	r0, [pc, #112]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000ee0:	f002 fad8 	bl	8003494 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000eea:	f002 f869 	bl	8002fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000f00:	f002 fc9a 	bl	8003838 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f002 f859 	bl	8002fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000f1c:	f002 fc8c 	bl	8003838 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f26:	f002 f84b 	bl	8002fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f2a:	2309      	movs	r3, #9
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_ADC1_Init+0xb0>)
 8000f38:	f002 fc7e 	bl	8003838 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f42:	f002 f83d 	bl	8002fc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000019c 	.word	0x2000019c
 8000f54:	40012400 	.word	0x40012400

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	; 0x58
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f005 fa78 	bl	8006486 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f96:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <MX_TIM1_Init+0x138>)
 8000f98:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <MX_TIM1_Init+0x13c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <MX_TIM1_Init+0x138>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <MX_TIM1_Init+0x138>)
 8000faa:	2259      	movs	r2, #89	; 0x59
 8000fac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc0:	4833      	ldr	r0, [pc, #204]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fc2:	f004 f809 	bl	8004fd8 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fcc:	f001 fff8 	bl	8002fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fda:	4619      	mov	r1, r3
 8000fdc:	482c      	ldr	r0, [pc, #176]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fde:	f004 fd27 	bl	8005a30 <HAL_TIM_ConfigClockSource>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000fe8:	f001 ffea 	bl	8002fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fec:	4828      	ldr	r0, [pc, #160]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fee:	f004 f895 	bl	800511c <HAL_TIM_PWM_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ff8:	f001 ffe2 	bl	8002fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001008:	4619      	mov	r1, r3
 800100a:	4821      	ldr	r0, [pc, #132]	; (8001090 <MX_TIM1_Init+0x138>)
 800100c:	f005 f97a 	bl	8006304 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001016:	f001 ffd3 	bl	8002fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101a:	2360      	movs	r3, #96	; 0x60
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4814      	ldr	r0, [pc, #80]	; (8001090 <MX_TIM1_Init+0x138>)
 8001040:	f004 fc34 	bl	80058ac <HAL_TIM_PWM_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800104a:	f001 ffb9 	bl	8002fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM1_Init+0x138>)
 8001072:	f005 f9a5 	bl	80063c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800107c:	f001 ffa0 	bl	8002fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM1_Init+0x138>)
 8001082:	f002 f8c7 	bl	8003214 <HAL_TIM_MspPostInit>

}
 8001086:	bf00      	nop
 8001088:	3758      	adds	r7, #88	; 0x58
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000210 	.word	0x20000210
 8001094:	40012c00 	.word	0x40012c00

08001098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_TIM3_Init+0x94>)
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <MX_TIM3_Init+0x98>)
 80010b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_TIM3_Init+0x94>)
 80010bc:	f240 22cf 	movw	r2, #719	; 0x2cf
 80010c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_TIM3_Init+0x94>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_TIM3_Init+0x94>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_TIM3_Init+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_TIM3_Init+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010da:	4814      	ldr	r0, [pc, #80]	; (800112c <MX_TIM3_Init+0x94>)
 80010dc:	f003 ff7c 	bl	8004fd8 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010e6:	f001 ff6b 	bl	8002fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_TIM3_Init+0x94>)
 80010f8:	f004 fc9a 	bl	8005a30 <HAL_TIM_ConfigClockSource>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001102:	f001 ff5d 	bl	8002fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_TIM3_Init+0x94>)
 8001114:	f005 f8f6 	bl	8006304 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800111e:	f001 ff4f 	bl	8002fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000258 	.word	0x20000258
 8001130:	40000400 	.word	0x40000400

08001134 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <MX_TIM4_Init+0x98>)
 8001154:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001158:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800115c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001166:	2201      	movs	r2, #1
 8001168:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_TIM4_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001178:	f003 ff2e 	bl	8004fd8 <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001182:	f001 ff1d 	bl	8002fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001194:	f004 fc4c 	bl	8005a30 <HAL_TIM_ConfigClockSource>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800119e:	f001 ff0f 	bl	8002fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM4_Init+0x94>)
 80011b0:	f005 f8a8 	bl	8006304 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011ba:	f001 ff01 	bl	8002fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002a0 	.word	0x200002a0
 80011cc:	40000800 	.word	0x40000800

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_DMA_Init+0x48>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_DMA_Init+0x48>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_DMA_Init+0x48>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	200b      	movs	r0, #11
 80011f4:	f002 fdf1 	bl	8003dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011f8:	200b      	movs	r0, #11
 80011fa:	f002 fe0a 	bl	8003e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	200c      	movs	r0, #12
 8001204:	f002 fde9 	bl	8003dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001208:	200c      	movs	r0, #12
 800120a:	f002 fe02 	bl	8003e12 <HAL_NVIC_EnableIRQ>

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <MX_GPIO_Init+0xf8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a37      	ldr	r2, [pc, #220]	; (8001314 <MX_GPIO_Init+0xf8>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <MX_GPIO_Init+0xf8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <MX_GPIO_Init+0xf8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a31      	ldr	r2, [pc, #196]	; (8001314 <MX_GPIO_Init+0xf8>)
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <MX_GPIO_Init+0xf8>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <MX_GPIO_Init+0xf8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <MX_GPIO_Init+0xf8>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <MX_GPIO_Init+0xf8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_GPIO_Init+0xf8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <MX_GPIO_Init+0xf8>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <MX_GPIO_Init+0xf8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001296:	4820      	ldr	r0, [pc, #128]	; (8001318 <MX_GPIO_Init+0xfc>)
 8001298:	f003 f9c0 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80012a2:	481e      	ldr	r0, [pc, #120]	; (800131c <MX_GPIO_Init+0x100>)
 80012a4:	f003 f9ba 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
 80012a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	4815      	ldr	r0, [pc, #84]	; (8001318 <MX_GPIO_Init+0xfc>)
 80012c2:	f003 f827 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c6:	2301      	movs	r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_GPIO_Init+0x104>)
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <MX_GPIO_Init+0x100>)
 80012da:	f003 f81b 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHCP_pin_Pin STCP_pin_Pin DS_pin_Pin */
  GPIO_InitStruct.Pin = SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin;
 80012de:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	4809      	ldr	r0, [pc, #36]	; (800131c <MX_GPIO_Init+0x100>)
 80012f8:	f003 f80c 	bl	8004314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2006      	movs	r0, #6
 8001302:	f002 fd6a 	bl	8003dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001306:	2006      	movs	r0, #6
 8001308:	f002 fd83 	bl	8003e12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	40011000 	.word	0x40011000
 800131c:	40010c00 	.word	0x40010c00
 8001320:	10110000 	.word	0x10110000

08001324 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]

	currentMillis = HAL_GetTick();
 800132e:	f002 f883 	bl	8003438 <HAL_GetTick>
 8001332:	4603      	mov	r3, r0
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001336:	6013      	str	r3, [r2, #0]

	if ((currentMillis - previousMillis) > 200) {
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd8>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <HAL_GPIO_EXTI_Callback+0xdc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2bc8      	cmp	r3, #200	; 0xc8
 8001344:	d956      	bls.n	80013f4 <HAL_GPIO_EXTI_Callback+0xd0>

		//brilho = brilho + 5;

		switch(color){
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b04      	cmp	r3, #4
 800134c:	d84d      	bhi.n	80013ea <HAL_GPIO_EXTI_Callback+0xc6>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <HAL_GPIO_EXTI_Callback+0x30>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001369 	.word	0x08001369
 8001358:	08001383 	.word	0x08001383
 800135c:	0800139d 	.word	0x0800139d
 8001360:	080013b7 	.word	0x080013b7
 8001364:	080013d1 	.word	0x080013d1

		case branco:
			Red=255;
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_GPIO_EXTI_Callback+0xe4>)
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	601a      	str	r2, [r3, #0]
			Green=255;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001370:	22ff      	movs	r2, #255	; 0xff
 8001372:	601a      	str	r2, [r3, #0]
			Blue=255;
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_GPIO_EXTI_Callback+0xec>)
 8001376:	22ff      	movs	r2, #255	; 0xff
 8001378:	601a      	str	r2, [r3, #0]

			color=verde;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_GPIO_EXTI_Callback+0xe0>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]

		break;
 8001380:	e034      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0xc8>

		case verde:
			Red=0;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
			Green=255;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_GPIO_EXTI_Callback+0xe8>)
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	601a      	str	r2, [r3, #0]
			Blue=0;
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_GPIO_EXTI_Callback+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

			color=amarelo;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001396:	2202      	movs	r2, #2
 8001398:	601a      	str	r2, [r3, #0]
		break;
 800139a:	e027      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0xc8>

		case amarelo:
			Red=255;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_GPIO_EXTI_Callback+0xe4>)
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	601a      	str	r2, [r3, #0]
			Green=255;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_GPIO_EXTI_Callback+0xe8>)
 80013a4:	22ff      	movs	r2, #255	; 0xff
 80013a6:	601a      	str	r2, [r3, #0]
			Blue=0;
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_GPIO_EXTI_Callback+0xec>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

			color=vermelho;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_GPIO_EXTI_Callback+0xe0>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	601a      	str	r2, [r3, #0]
			break;
 80013b4:	e01a      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0xc8>

		case vermelho:
			Red=255;
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	601a      	str	r2, [r3, #0]
			Green=0;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_GPIO_EXTI_Callback+0xe8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
			Blue=0;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_GPIO_EXTI_Callback+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

			color = azul;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_GPIO_EXTI_Callback+0xe0>)
 80013ca:	2204      	movs	r2, #4
 80013cc:	601a      	str	r2, [r3, #0]
			break;
 80013ce:	e00d      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0xc8>

		case azul:
		Red=0;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
		Green=0;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_GPIO_EXTI_Callback+0xe8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
		Blue=255;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_GPIO_EXTI_Callback+0xec>)
 80013de:	22ff      	movs	r2, #255	; 0xff
 80013e0:	601a      	str	r2, [r3, #0]

		color=branco;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_GPIO_EXTI_Callback+0xe0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

		break;
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_EXTI_Callback+0xc8>

		default:
			break;
 80013ea:	bf00      	nop
//			brilho = 1;
//		}



		previousMillis = currentMillis;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GPIO_EXTI_Callback+0xd8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_GPIO_EXTI_Callback+0xdc>)
 80013f2:	6013      	str	r3, [r2, #0]

	}
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000330 	.word	0x20000330
 8001400:	2000032c 	.word	0x2000032c
 8001404:	20000354 	.word	0x20000354
 8001408:	20000008 	.word	0x20000008
 800140c:	2000000c 	.word	0x2000000c
 8001410:	20000010 	.word	0x20000010

08001414 <LEDHandler>:


//TODO Documentar método
void LEDHandler(int Value) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]


	//brilho = Value * MAX_Brightness / 100;

	//lógica para acionamento sequencial
	if (Value == 0 ) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d16b      	bne.n	80014fa <LEDHandler+0xe6>
		Set_LED(0, 0, 0, 0);
 8001422:	2300      	movs	r3, #0
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2000      	movs	r0, #0
 800142a:	f001 fa5f 	bl	80028ec <Set_LED>
		Set_LED(1, 0, 0, 0);
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2001      	movs	r0, #1
 8001436:	f001 fa59 	bl	80028ec <Set_LED>
		Set_LED(2, 0, 0, 0);
 800143a:	2300      	movs	r3, #0
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2002      	movs	r0, #2
 8001442:	f001 fa53 	bl	80028ec <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001446:	2300      	movs	r3, #0
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2003      	movs	r0, #3
 800144e:	f001 fa4d 	bl	80028ec <Set_LED>
		Set_LED(4, 0, 0, 0);
 8001452:	2300      	movs	r3, #0
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2004      	movs	r0, #4
 800145a:	f001 fa47 	bl	80028ec <Set_LED>
		Set_LED(5, 0, 0, 0);
 800145e:	2300      	movs	r3, #0
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2005      	movs	r0, #5
 8001466:	f001 fa41 	bl	80028ec <Set_LED>
		Set_LED(6, 0, 0, 0);
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2006      	movs	r0, #6
 8001472:	f001 fa3b 	bl	80028ec <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2007      	movs	r0, #7
 800147e:	f001 fa35 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001482:	2300      	movs	r3, #0
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2008      	movs	r0, #8
 800148a:	f001 fa2f 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2009      	movs	r0, #9
 8001496:	f001 fa29 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 800149a:	2300      	movs	r3, #0
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	200a      	movs	r0, #10
 80014a2:	f001 fa23 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 80014a6:	2300      	movs	r3, #0
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	200b      	movs	r0, #11
 80014ae:	f001 fa1d 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 80014b2:	2300      	movs	r3, #0
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	200c      	movs	r0, #12
 80014ba:	f001 fa17 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 80014be:	2300      	movs	r3, #0
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	200d      	movs	r0, #13
 80014c6:	f001 fa11 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 80014ca:	2300      	movs	r3, #0
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	200e      	movs	r0, #14
 80014d2:	f001 fa0b 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80014d6:	2300      	movs	r3, #0
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	200f      	movs	r0, #15
 80014de:	f001 fa05 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80014e2:	2300      	movs	r3, #0
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2010      	movs	r0, #16
 80014ea:	f001 f9ff 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 80014ee:	2300      	movs	r3, #0
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2011      	movs	r0, #17
 80014f6:	f001 f9f9 	bl	80028ec <Set_LED>

	}
	if (Value >= 1 && Value < 6) {
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	dd73      	ble.n	80015e8 <LEDHandler+0x1d4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b05      	cmp	r3, #5
 8001504:	dc70      	bgt.n	80015e8 <LEDHandler+0x1d4>
		Set_LED(0, Red, Green, Blue);
 8001506:	4bb8      	ldr	r3, [pc, #736]	; (80017e8 <LEDHandler+0x3d4>)
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	4bb8      	ldr	r3, [pc, #736]	; (80017ec <LEDHandler+0x3d8>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4bb8      	ldr	r3, [pc, #736]	; (80017f0 <LEDHandler+0x3dc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2000      	movs	r0, #0
 8001514:	f001 f9ea 	bl	80028ec <Set_LED>
		Set_LED(1, 0, 0, 0);
 8001518:	2300      	movs	r3, #0
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2001      	movs	r0, #1
 8001520:	f001 f9e4 	bl	80028ec <Set_LED>
		Set_LED(2, 0, 0, 0);
 8001524:	2300      	movs	r3, #0
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2002      	movs	r0, #2
 800152c:	f001 f9de 	bl	80028ec <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2003      	movs	r0, #3
 8001538:	f001 f9d8 	bl	80028ec <Set_LED>
		Set_LED(4, 0, 0, 0);
 800153c:	2300      	movs	r3, #0
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2004      	movs	r0, #4
 8001544:	f001 f9d2 	bl	80028ec <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001548:	2300      	movs	r3, #0
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2005      	movs	r0, #5
 8001550:	f001 f9cc 	bl	80028ec <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2006      	movs	r0, #6
 800155c:	f001 f9c6 	bl	80028ec <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001560:	2300      	movs	r3, #0
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2007      	movs	r0, #7
 8001568:	f001 f9c0 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 800156c:	2300      	movs	r3, #0
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2008      	movs	r0, #8
 8001574:	f001 f9ba 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001578:	2300      	movs	r3, #0
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2009      	movs	r0, #9
 8001580:	f001 f9b4 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001584:	2300      	movs	r3, #0
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	200a      	movs	r0, #10
 800158c:	f001 f9ae 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001590:	2300      	movs	r3, #0
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	200b      	movs	r0, #11
 8001598:	f001 f9a8 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 800159c:	2300      	movs	r3, #0
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	200c      	movs	r0, #12
 80015a4:	f001 f9a2 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 80015a8:	2300      	movs	r3, #0
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	200d      	movs	r0, #13
 80015b0:	f001 f99c 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 80015b4:	2300      	movs	r3, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	200e      	movs	r0, #14
 80015bc:	f001 f996 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80015c0:	2300      	movs	r3, #0
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	200f      	movs	r0, #15
 80015c8:	f001 f990 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80015cc:	2300      	movs	r3, #0
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2010      	movs	r0, #16
 80015d4:	f001 f98a 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 80015d8:	2300      	movs	r3, #0
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2011      	movs	r0, #17
 80015e0:	f001 f984 	bl	80028ec <Set_LED>
 80015e4:	f001 b957 	b.w	8002896 <LEDHandler+0x1482>



	} else if (Value >= 6 && Value < 12) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	dd76      	ble.n	80016dc <LEDHandler+0x2c8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0b      	cmp	r3, #11
 80015f2:	dc73      	bgt.n	80016dc <LEDHandler+0x2c8>
		Set_LED(0, Red, Green, Blue);
 80015f4:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <LEDHandler+0x3d4>)
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	4b7c      	ldr	r3, [pc, #496]	; (80017ec <LEDHandler+0x3d8>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b7c      	ldr	r3, [pc, #496]	; (80017f0 <LEDHandler+0x3dc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2000      	movs	r0, #0
 8001602:	f001 f973 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001606:	4b78      	ldr	r3, [pc, #480]	; (80017e8 <LEDHandler+0x3d4>)
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	4b78      	ldr	r3, [pc, #480]	; (80017ec <LEDHandler+0x3d8>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <LEDHandler+0x3dc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2001      	movs	r0, #1
 8001614:	f001 f96a 	bl	80028ec <Set_LED>
		Set_LED(2, 0, 0, 0);
 8001618:	2300      	movs	r3, #0
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2002      	movs	r0, #2
 8001620:	f001 f964 	bl	80028ec <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001624:	2300      	movs	r3, #0
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2003      	movs	r0, #3
 800162c:	f001 f95e 	bl	80028ec <Set_LED>
		Set_LED(4, 0, 0, 0);
 8001630:	2300      	movs	r3, #0
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2004      	movs	r0, #4
 8001638:	f001 f958 	bl	80028ec <Set_LED>
		Set_LED(5, 0, 0, 0);
 800163c:	2300      	movs	r3, #0
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2005      	movs	r0, #5
 8001644:	f001 f952 	bl	80028ec <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001648:	2300      	movs	r3, #0
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2006      	movs	r0, #6
 8001650:	f001 f94c 	bl	80028ec <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001654:	2300      	movs	r3, #0
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2007      	movs	r0, #7
 800165c:	f001 f946 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001660:	2300      	movs	r3, #0
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2008      	movs	r0, #8
 8001668:	f001 f940 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 800166c:	2300      	movs	r3, #0
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2009      	movs	r0, #9
 8001674:	f001 f93a 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001678:	2300      	movs	r3, #0
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	200a      	movs	r0, #10
 8001680:	f001 f934 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001684:	2300      	movs	r3, #0
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	200b      	movs	r0, #11
 800168c:	f001 f92e 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001690:	2300      	movs	r3, #0
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	200c      	movs	r0, #12
 8001698:	f001 f928 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 800169c:	2300      	movs	r3, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	200d      	movs	r0, #13
 80016a4:	f001 f922 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 80016a8:	2300      	movs	r3, #0
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	200e      	movs	r0, #14
 80016b0:	f001 f91c 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80016b4:	2300      	movs	r3, #0
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	200f      	movs	r0, #15
 80016bc:	f001 f916 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80016c0:	2300      	movs	r3, #0
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2010      	movs	r0, #16
 80016c8:	f001 f910 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 80016cc:	2300      	movs	r3, #0
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2011      	movs	r0, #17
 80016d4:	f001 f90a 	bl	80028ec <Set_LED>
 80016d8:	f001 b8dd 	b.w	8002896 <LEDHandler+0x1482>

	} else if (Value >= 12 && Value < 18) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b0b      	cmp	r3, #11
 80016e0:	f340 8088 	ble.w	80017f4 <LEDHandler+0x3e0>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	f300 8084 	bgt.w	80017f4 <LEDHandler+0x3e0>
		Set_LED(0, Red, Green, Blue);
 80016ec:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <LEDHandler+0x3d4>)
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <LEDHandler+0x3d8>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <LEDHandler+0x3dc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2000      	movs	r0, #0
 80016fa:	f001 f8f7 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <LEDHandler+0x3d4>)
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <LEDHandler+0x3d8>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <LEDHandler+0x3dc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2001      	movs	r0, #1
 800170c:	f001 f8ee 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001710:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <LEDHandler+0x3d4>)
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <LEDHandler+0x3d8>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <LEDHandler+0x3dc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2002      	movs	r0, #2
 800171e:	f001 f8e5 	bl	80028ec <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001722:	2300      	movs	r3, #0
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2003      	movs	r0, #3
 800172a:	f001 f8df 	bl	80028ec <Set_LED>
		Set_LED(3, 0, 0, 0);
 800172e:	2300      	movs	r3, #0
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2003      	movs	r0, #3
 8001736:	f001 f8d9 	bl	80028ec <Set_LED>
		Set_LED(4, 0, 0, 0);
 800173a:	2300      	movs	r3, #0
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2004      	movs	r0, #4
 8001742:	f001 f8d3 	bl	80028ec <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001746:	2300      	movs	r3, #0
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2005      	movs	r0, #5
 800174e:	f001 f8cd 	bl	80028ec <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001752:	2300      	movs	r3, #0
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2006      	movs	r0, #6
 800175a:	f001 f8c7 	bl	80028ec <Set_LED>
		Set_LED(7, 0, 0, 0);
 800175e:	2300      	movs	r3, #0
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2007      	movs	r0, #7
 8001766:	f001 f8c1 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 800176a:	2300      	movs	r3, #0
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2008      	movs	r0, #8
 8001772:	f001 f8bb 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001776:	2300      	movs	r3, #0
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	2009      	movs	r0, #9
 800177e:	f001 f8b5 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001782:	2300      	movs	r3, #0
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	200a      	movs	r0, #10
 800178a:	f001 f8af 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 800178e:	2300      	movs	r3, #0
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	200b      	movs	r0, #11
 8001796:	f001 f8a9 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 800179a:	2300      	movs	r3, #0
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	200c      	movs	r0, #12
 80017a2:	f001 f8a3 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 80017a6:	2300      	movs	r3, #0
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	200d      	movs	r0, #13
 80017ae:	f001 f89d 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 80017b2:	2300      	movs	r3, #0
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	200e      	movs	r0, #14
 80017ba:	f001 f897 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80017be:	2300      	movs	r3, #0
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	200f      	movs	r0, #15
 80017c6:	f001 f891 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80017ca:	2300      	movs	r3, #0
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2010      	movs	r0, #16
 80017d2:	f001 f88b 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 80017d6:	2300      	movs	r3, #0
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2011      	movs	r0, #17
 80017de:	f001 f885 	bl	80028ec <Set_LED>
 80017e2:	f001 b858 	b.w	8002896 <LEDHandler+0x1482>
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	2000000c 	.word	0x2000000c
 80017f0:	20000010 	.word	0x20000010

	} else if (Value >= 18 && Value < 24) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b11      	cmp	r3, #17
 80017f8:	dd7c      	ble.n	80018f4 <LEDHandler+0x4e0>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b17      	cmp	r3, #23
 80017fe:	dc79      	bgt.n	80018f4 <LEDHandler+0x4e0>
		Set_LED(0, Red, Green, Blue);
 8001800:	4bc2      	ldr	r3, [pc, #776]	; (8001b0c <LEDHandler+0x6f8>)
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	4bc2      	ldr	r3, [pc, #776]	; (8001b10 <LEDHandler+0x6fc>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4bc2      	ldr	r3, [pc, #776]	; (8001b14 <LEDHandler+0x700>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2000      	movs	r0, #0
 800180e:	f001 f86d 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001812:	4bbe      	ldr	r3, [pc, #760]	; (8001b0c <LEDHandler+0x6f8>)
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	4bbe      	ldr	r3, [pc, #760]	; (8001b10 <LEDHandler+0x6fc>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4bbe      	ldr	r3, [pc, #760]	; (8001b14 <LEDHandler+0x700>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2001      	movs	r0, #1
 8001820:	f001 f864 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001824:	4bb9      	ldr	r3, [pc, #740]	; (8001b0c <LEDHandler+0x6f8>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	4bb9      	ldr	r3, [pc, #740]	; (8001b10 <LEDHandler+0x6fc>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4bb9      	ldr	r3, [pc, #740]	; (8001b14 <LEDHandler+0x700>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2002      	movs	r0, #2
 8001832:	f001 f85b 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001836:	4bb5      	ldr	r3, [pc, #724]	; (8001b0c <LEDHandler+0x6f8>)
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	4bb5      	ldr	r3, [pc, #724]	; (8001b10 <LEDHandler+0x6fc>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4bb5      	ldr	r3, [pc, #724]	; (8001b14 <LEDHandler+0x700>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2003      	movs	r0, #3
 8001844:	f001 f852 	bl	80028ec <Set_LED>
		Set_LED(4, 0, 0, 0);
 8001848:	2300      	movs	r3, #0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2004      	movs	r0, #4
 8001850:	f001 f84c 	bl	80028ec <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001854:	2300      	movs	r3, #0
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2005      	movs	r0, #5
 800185c:	f001 f846 	bl	80028ec <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001860:	2300      	movs	r3, #0
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2006      	movs	r0, #6
 8001868:	f001 f840 	bl	80028ec <Set_LED>
		Set_LED(7, 0, 0, 0);
 800186c:	2300      	movs	r3, #0
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2007      	movs	r0, #7
 8001874:	f001 f83a 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001878:	2300      	movs	r3, #0
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	2008      	movs	r0, #8
 8001880:	f001 f834 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001884:	2300      	movs	r3, #0
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2009      	movs	r0, #9
 800188c:	f001 f82e 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001890:	2300      	movs	r3, #0
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	200a      	movs	r0, #10
 8001898:	f001 f828 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 800189c:	2300      	movs	r3, #0
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	200b      	movs	r0, #11
 80018a4:	f001 f822 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 80018a8:	2300      	movs	r3, #0
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	200c      	movs	r0, #12
 80018b0:	f001 f81c 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 80018b4:	2300      	movs	r3, #0
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	200d      	movs	r0, #13
 80018bc:	f001 f816 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 80018c0:	2300      	movs	r3, #0
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	200e      	movs	r0, #14
 80018c8:	f001 f810 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80018cc:	2300      	movs	r3, #0
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	200f      	movs	r0, #15
 80018d4:	f001 f80a 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80018d8:	2300      	movs	r3, #0
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2010      	movs	r0, #16
 80018e0:	f001 f804 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 80018e4:	2300      	movs	r3, #0
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2011      	movs	r0, #17
 80018ec:	f000 fffe 	bl	80028ec <Set_LED>
 80018f0:	f000 bfd1 	b.w	8002896 <LEDHandler+0x1482>

	} else if (Value >= 24 && Value < 30) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b17      	cmp	r3, #23
 80018f8:	dd7f      	ble.n	80019fa <LEDHandler+0x5e6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b1d      	cmp	r3, #29
 80018fe:	dc7c      	bgt.n	80019fa <LEDHandler+0x5e6>
		Set_LED(0, Red, Green, Blue);
 8001900:	4b82      	ldr	r3, [pc, #520]	; (8001b0c <LEDHandler+0x6f8>)
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <LEDHandler+0x6fc>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b82      	ldr	r3, [pc, #520]	; (8001b14 <LEDHandler+0x700>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2000      	movs	r0, #0
 800190e:	f000 ffed 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001912:	4b7e      	ldr	r3, [pc, #504]	; (8001b0c <LEDHandler+0x6f8>)
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <LEDHandler+0x6fc>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b7e      	ldr	r3, [pc, #504]	; (8001b14 <LEDHandler+0x700>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2001      	movs	r0, #1
 8001920:	f000 ffe4 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001924:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <LEDHandler+0x6f8>)
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <LEDHandler+0x6fc>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b79      	ldr	r3, [pc, #484]	; (8001b14 <LEDHandler+0x700>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2002      	movs	r0, #2
 8001932:	f000 ffdb 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001936:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <LEDHandler+0x6f8>)
 8001938:	6819      	ldr	r1, [r3, #0]
 800193a:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <LEDHandler+0x6fc>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <LEDHandler+0x700>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2003      	movs	r0, #3
 8001944:	f000 ffd2 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001948:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <LEDHandler+0x6f8>)
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <LEDHandler+0x6fc>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <LEDHandler+0x700>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2004      	movs	r0, #4
 8001956:	f000 ffc9 	bl	80028ec <Set_LED>
		Set_LED(5, 0, 0, 0);
 800195a:	2300      	movs	r3, #0
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2005      	movs	r0, #5
 8001962:	f000 ffc3 	bl	80028ec <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001966:	2300      	movs	r3, #0
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	2006      	movs	r0, #6
 800196e:	f000 ffbd 	bl	80028ec <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001972:	2300      	movs	r3, #0
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	2007      	movs	r0, #7
 800197a:	f000 ffb7 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2008      	movs	r0, #8
 8001986:	f000 ffb1 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 800198a:	2300      	movs	r3, #0
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2009      	movs	r0, #9
 8001992:	f000 ffab 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	200a      	movs	r0, #10
 800199e:	f000 ffa5 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 80019a2:	2300      	movs	r3, #0
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	200b      	movs	r0, #11
 80019aa:	f000 ff9f 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 80019ae:	2300      	movs	r3, #0
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	200c      	movs	r0, #12
 80019b6:	f000 ff99 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 80019ba:	2300      	movs	r3, #0
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	200d      	movs	r0, #13
 80019c2:	f000 ff93 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 80019c6:	2300      	movs	r3, #0
 80019c8:	2200      	movs	r2, #0
 80019ca:	2100      	movs	r1, #0
 80019cc:	200e      	movs	r0, #14
 80019ce:	f000 ff8d 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80019d2:	2300      	movs	r3, #0
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	200f      	movs	r0, #15
 80019da:	f000 ff87 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80019de:	2300      	movs	r3, #0
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2010      	movs	r0, #16
 80019e6:	f000 ff81 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 80019ea:	2300      	movs	r3, #0
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2011      	movs	r0, #17
 80019f2:	f000 ff7b 	bl	80028ec <Set_LED>
 80019f6:	f000 bf4e 	b.w	8002896 <LEDHandler+0x1482>

	} else if (Value >= 30 && Value < 36) {
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b1d      	cmp	r3, #29
 80019fe:	f340 808b 	ble.w	8001b18 <LEDHandler+0x704>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b23      	cmp	r3, #35	; 0x23
 8001a06:	f300 8087 	bgt.w	8001b18 <LEDHandler+0x704>
		Set_LED(0, Red, Green, Blue);
 8001a0a:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <LEDHandler+0x6f8>)
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <LEDHandler+0x6fc>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <LEDHandler+0x700>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 ff68 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <LEDHandler+0x6f8>)
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <LEDHandler+0x6fc>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <LEDHandler+0x700>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f000 ff5f 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <LEDHandler+0x6f8>)
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <LEDHandler+0x6fc>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <LEDHandler+0x700>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f000 ff56 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <LEDHandler+0x6f8>)
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <LEDHandler+0x6fc>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <LEDHandler+0x700>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 ff4d 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <LEDHandler+0x6f8>)
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <LEDHandler+0x6fc>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <LEDHandler+0x700>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2004      	movs	r0, #4
 8001a60:	f000 ff44 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <LEDHandler+0x6f8>)
 8001a66:	6819      	ldr	r1, [r3, #0]
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <LEDHandler+0x6fc>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <LEDHandler+0x700>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2005      	movs	r0, #5
 8001a72:	f000 ff3b 	bl	80028ec <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2006      	movs	r0, #6
 8001a7e:	f000 ff35 	bl	80028ec <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001a82:	2300      	movs	r3, #0
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2007      	movs	r0, #7
 8001a8a:	f000 ff2f 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2008      	movs	r0, #8
 8001a96:	f000 ff29 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2009      	movs	r0, #9
 8001aa2:	f000 ff23 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	200a      	movs	r0, #10
 8001aae:	f000 ff1d 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	200b      	movs	r0, #11
 8001aba:	f000 ff17 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	200c      	movs	r0, #12
 8001ac6:	f000 ff11 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001aca:	2300      	movs	r3, #0
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	200d      	movs	r0, #13
 8001ad2:	f000 ff0b 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	200e      	movs	r0, #14
 8001ade:	f000 ff05 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	200f      	movs	r0, #15
 8001aea:	f000 feff 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001aee:	2300      	movs	r3, #0
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2010      	movs	r0, #16
 8001af6:	f000 fef9 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001afa:	2300      	movs	r3, #0
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	2011      	movs	r0, #17
 8001b02:	f000 fef3 	bl	80028ec <Set_LED>
 8001b06:	f000 bec6 	b.w	8002896 <LEDHandler+0x1482>
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	20000010 	.word	0x20000010

	} else if (Value >= 36 && Value < 42) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b23      	cmp	r3, #35	; 0x23
 8001b1c:	f340 8087 	ble.w	8001c2e <LEDHandler+0x81a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b29      	cmp	r3, #41	; 0x29
 8001b24:	f300 8083 	bgt.w	8001c2e <LEDHandler+0x81a>
		Set_LED(0, Red, Green, Blue);
 8001b28:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <LEDHandler+0x938>)
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <LEDHandler+0x93c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <LEDHandler+0x940>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2000      	movs	r0, #0
 8001b36:	f000 fed9 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001b3a:	4b84      	ldr	r3, [pc, #528]	; (8001d4c <LEDHandler+0x938>)
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	4b84      	ldr	r3, [pc, #528]	; (8001d50 <LEDHandler+0x93c>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <LEDHandler+0x940>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2001      	movs	r0, #1
 8001b48:	f000 fed0 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001b4c:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <LEDHandler+0x938>)
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <LEDHandler+0x93c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <LEDHandler+0x940>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f000 fec7 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001b5e:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <LEDHandler+0x938>)
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <LEDHandler+0x93c>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <LEDHandler+0x940>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f000 febe 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001b70:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <LEDHandler+0x938>)
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <LEDHandler+0x93c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <LEDHandler+0x940>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f000 feb5 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001b82:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <LEDHandler+0x938>)
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	4b72      	ldr	r3, [pc, #456]	; (8001d50 <LEDHandler+0x93c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <LEDHandler+0x940>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2005      	movs	r0, #5
 8001b90:	f000 feac 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001b94:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <LEDHandler+0x938>)
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <LEDHandler+0x93c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <LEDHandler+0x940>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2006      	movs	r0, #6
 8001ba2:	f000 fea3 	bl	80028ec <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2007      	movs	r0, #7
 8001bae:	f000 fe9d 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2008      	movs	r0, #8
 8001bba:	f000 fe97 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2009      	movs	r0, #9
 8001bc6:	f000 fe91 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f000 fe8b 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	200b      	movs	r0, #11
 8001bde:	f000 fe85 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	200c      	movs	r0, #12
 8001bea:	f000 fe7f 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	200d      	movs	r0, #13
 8001bf6:	f000 fe79 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	200e      	movs	r0, #14
 8001c02:	f000 fe73 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001c06:	2300      	movs	r3, #0
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	200f      	movs	r0, #15
 8001c0e:	f000 fe6d 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001c12:	2300      	movs	r3, #0
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2010      	movs	r0, #16
 8001c1a:	f000 fe67 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2011      	movs	r0, #17
 8001c26:	f000 fe61 	bl	80028ec <Set_LED>
 8001c2a:	f000 be34 	b.w	8002896 <LEDHandler+0x1482>

	} else if (Value >= 42 && Value < 48) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b29      	cmp	r3, #41	; 0x29
 8001c32:	f340 8091 	ble.w	8001d58 <LEDHandler+0x944>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b2f      	cmp	r3, #47	; 0x2f
 8001c3a:	f300 808d 	bgt.w	8001d58 <LEDHandler+0x944>
		Set_LED(0, Red, Green, Blue);
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <LEDHandler+0x938>)
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <LEDHandler+0x93c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <LEDHandler+0x940>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 fe4e 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001c50:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <LEDHandler+0x938>)
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <LEDHandler+0x93c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <LEDHandler+0x940>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 fe45 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <LEDHandler+0x938>)
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <LEDHandler+0x93c>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <LEDHandler+0x940>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f000 fe3c 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <LEDHandler+0x938>)
 8001c76:	6819      	ldr	r1, [r3, #0]
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <LEDHandler+0x93c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <LEDHandler+0x940>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 fe33 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001c86:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <LEDHandler+0x938>)
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <LEDHandler+0x93c>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <LEDHandler+0x940>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2004      	movs	r0, #4
 8001c94:	f000 fe2a 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <LEDHandler+0x938>)
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <LEDHandler+0x93c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <LEDHandler+0x940>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2005      	movs	r0, #5
 8001ca6:	f000 fe21 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <LEDHandler+0x938>)
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <LEDHandler+0x93c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <LEDHandler+0x940>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2006      	movs	r0, #6
 8001cb8:	f000 fe18 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <LEDHandler+0x938>)
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <LEDHandler+0x93c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <LEDHandler+0x940>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2007      	movs	r0, #7
 8001cca:	f000 fe0f 	bl	80028ec <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2008      	movs	r0, #8
 8001cd6:	f000 fe09 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2009      	movs	r0, #9
 8001ce2:	f000 fe03 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	200a      	movs	r0, #10
 8001cee:	f000 fdfd 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	200b      	movs	r0, #11
 8001cfa:	f000 fdf7 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	200c      	movs	r0, #12
 8001d06:	f000 fdf1 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	200d      	movs	r0, #13
 8001d12:	f000 fdeb 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001d16:	2300      	movs	r3, #0
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	200e      	movs	r0, #14
 8001d1e:	f000 fde5 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001d22:	2300      	movs	r3, #0
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	200f      	movs	r0, #15
 8001d2a:	f000 fddf 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	2010      	movs	r0, #16
 8001d36:	f000 fdd9 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2011      	movs	r0, #17
 8001d42:	f000 fdd3 	bl	80028ec <Set_LED>
 8001d46:	f000 bda6 	b.w	8002896 <LEDHandler+0x1482>
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000010 	.word	0x20000010

	} else if (Value >= 48 && Value < 54) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b2f      	cmp	r3, #47	; 0x2f
 8001d5c:	f340 808d 	ble.w	8001e7a <LEDHandler+0xa66>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b35      	cmp	r3, #53	; 0x35
 8001d64:	f300 8089 	bgt.w	8001e7a <LEDHandler+0xa66>
		Set_LED(0, Red, Green, Blue);
 8001d68:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <LEDHandler+0xb90>)
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <LEDHandler+0xb94>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b8e      	ldr	r3, [pc, #568]	; (8001fac <LEDHandler+0xb98>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2000      	movs	r0, #0
 8001d76:	f000 fdb9 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001d7a:	4b8a      	ldr	r3, [pc, #552]	; (8001fa4 <LEDHandler+0xb90>)
 8001d7c:	6819      	ldr	r1, [r3, #0]
 8001d7e:	4b8a      	ldr	r3, [pc, #552]	; (8001fa8 <LEDHandler+0xb94>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <LEDHandler+0xb98>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2001      	movs	r0, #1
 8001d88:	f000 fdb0 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001d8c:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <LEDHandler+0xb90>)
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	4b85      	ldr	r3, [pc, #532]	; (8001fa8 <LEDHandler+0xb94>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b85      	ldr	r3, [pc, #532]	; (8001fac <LEDHandler+0xb98>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f000 fda7 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001d9e:	4b81      	ldr	r3, [pc, #516]	; (8001fa4 <LEDHandler+0xb90>)
 8001da0:	6819      	ldr	r1, [r3, #0]
 8001da2:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <LEDHandler+0xb94>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b81      	ldr	r3, [pc, #516]	; (8001fac <LEDHandler+0xb98>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 fd9e 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001db0:	4b7c      	ldr	r3, [pc, #496]	; (8001fa4 <LEDHandler+0xb90>)
 8001db2:	6819      	ldr	r1, [r3, #0]
 8001db4:	4b7c      	ldr	r3, [pc, #496]	; (8001fa8 <LEDHandler+0xb94>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <LEDHandler+0xb98>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2004      	movs	r0, #4
 8001dbe:	f000 fd95 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001dc2:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <LEDHandler+0xb90>)
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <LEDHandler+0xb94>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b78      	ldr	r3, [pc, #480]	; (8001fac <LEDHandler+0xb98>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2005      	movs	r0, #5
 8001dd0:	f000 fd8c 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001dd4:	4b73      	ldr	r3, [pc, #460]	; (8001fa4 <LEDHandler+0xb90>)
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <LEDHandler+0xb94>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b73      	ldr	r3, [pc, #460]	; (8001fac <LEDHandler+0xb98>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2006      	movs	r0, #6
 8001de2:	f000 fd83 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8001de6:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <LEDHandler+0xb90>)
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <LEDHandler+0xb94>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <LEDHandler+0xb98>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2007      	movs	r0, #7
 8001df4:	f000 fd7a 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8001df8:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <LEDHandler+0xb90>)
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <LEDHandler+0xb94>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <LEDHandler+0xb98>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2008      	movs	r0, #8
 8001e06:	f000 fd71 	bl	80028ec <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2009      	movs	r0, #9
 8001e12:	f000 fd6b 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001e16:	2300      	movs	r3, #0
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f000 fd65 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001e22:	2300      	movs	r3, #0
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	200b      	movs	r0, #11
 8001e2a:	f000 fd5f 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	200c      	movs	r0, #12
 8001e36:	f000 fd59 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	200d      	movs	r0, #13
 8001e42:	f000 fd53 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001e46:	2300      	movs	r3, #0
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	200e      	movs	r0, #14
 8001e4e:	f000 fd4d 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001e52:	2300      	movs	r3, #0
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f000 fd47 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2010      	movs	r0, #16
 8001e66:	f000 fd41 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2011      	movs	r0, #17
 8001e72:	f000 fd3b 	bl	80028ec <Set_LED>
 8001e76:	f000 bd0e 	b.w	8002896 <LEDHandler+0x1482>

	} else if (Value >= 54 && Value < 60) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b35      	cmp	r3, #53	; 0x35
 8001e7e:	f340 8097 	ble.w	8001fb0 <LEDHandler+0xb9c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b3b      	cmp	r3, #59	; 0x3b
 8001e86:	f300 8093 	bgt.w	8001fb0 <LEDHandler+0xb9c>
		Set_LED(0, Red, Green, Blue);
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <LEDHandler+0xb90>)
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <LEDHandler+0xb94>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <LEDHandler+0xb98>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 fd28 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001e9c:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <LEDHandler+0xb90>)
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <LEDHandler+0xb94>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <LEDHandler+0xb98>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f000 fd1f 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <LEDHandler+0xb90>)
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <LEDHandler+0xb94>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <LEDHandler+0xb98>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f000 fd16 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001ec0:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <LEDHandler+0xb90>)
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <LEDHandler+0xb94>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b38      	ldr	r3, [pc, #224]	; (8001fac <LEDHandler+0xb98>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 fd0d 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001ed2:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <LEDHandler+0xb90>)
 8001ed4:	6819      	ldr	r1, [r3, #0]
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <LEDHandler+0xb94>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b34      	ldr	r3, [pc, #208]	; (8001fac <LEDHandler+0xb98>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2004      	movs	r0, #4
 8001ee0:	f000 fd04 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <LEDHandler+0xb90>)
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <LEDHandler+0xb94>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <LEDHandler+0xb98>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2005      	movs	r0, #5
 8001ef2:	f000 fcfb 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <LEDHandler+0xb90>)
 8001ef8:	6819      	ldr	r1, [r3, #0]
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <LEDHandler+0xb94>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <LEDHandler+0xb98>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2006      	movs	r0, #6
 8001f04:	f000 fcf2 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <LEDHandler+0xb90>)
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <LEDHandler+0xb94>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <LEDHandler+0xb98>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2007      	movs	r0, #7
 8001f16:	f000 fce9 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <LEDHandler+0xb90>)
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <LEDHandler+0xb94>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <LEDHandler+0xb98>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2008      	movs	r0, #8
 8001f28:	f000 fce0 	bl	80028ec <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <LEDHandler+0xb90>)
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <LEDHandler+0xb94>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <LEDHandler+0xb98>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2009      	movs	r0, #9
 8001f3a:	f000 fcd7 	bl	80028ec <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2200      	movs	r2, #0
 8001f42:	2100      	movs	r1, #0
 8001f44:	200a      	movs	r0, #10
 8001f46:	f000 fcd1 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	200b      	movs	r0, #11
 8001f52:	f000 fccb 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001f56:	2300      	movs	r3, #0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	200c      	movs	r0, #12
 8001f5e:	f000 fcc5 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001f62:	2300      	movs	r3, #0
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	200d      	movs	r0, #13
 8001f6a:	f000 fcbf 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	200e      	movs	r0, #14
 8001f76:	f000 fcb9 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	200f      	movs	r0, #15
 8001f82:	f000 fcb3 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001f86:	2300      	movs	r3, #0
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2010      	movs	r0, #16
 8001f8e:	f000 fcad 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001f92:	2300      	movs	r3, #0
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	2011      	movs	r0, #17
 8001f9a:	f000 fca7 	bl	80028ec <Set_LED>
 8001f9e:	f000 bc7a 	b.w	8002896 <LEDHandler+0x1482>
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	2000000c 	.word	0x2000000c
 8001fac:	20000010 	.word	0x20000010
	} else if (Value >= 60 && Value < 66) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b3b      	cmp	r3, #59	; 0x3b
 8001fb4:	f340 8092 	ble.w	80020dc <LEDHandler+0xcc8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b41      	cmp	r3, #65	; 0x41
 8001fbc:	f300 808e 	bgt.w	80020dc <LEDHandler+0xcc8>
		Set_LED(0, Red, Green, Blue);
 8001fc0:	4b93      	ldr	r3, [pc, #588]	; (8002210 <LEDHandler+0xdfc>)
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	4b93      	ldr	r3, [pc, #588]	; (8002214 <LEDHandler+0xe00>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b93      	ldr	r3, [pc, #588]	; (8002218 <LEDHandler+0xe04>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f000 fc8d 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001fd2:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <LEDHandler+0xdfc>)
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	4b8f      	ldr	r3, [pc, #572]	; (8002214 <LEDHandler+0xe00>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b8f      	ldr	r3, [pc, #572]	; (8002218 <LEDHandler+0xe04>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 fc84 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <LEDHandler+0xdfc>)
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	4b8a      	ldr	r3, [pc, #552]	; (8002214 <LEDHandler+0xe00>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b8a      	ldr	r3, [pc, #552]	; (8002218 <LEDHandler+0xe04>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	f000 fc7b 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001ff6:	4b86      	ldr	r3, [pc, #536]	; (8002210 <LEDHandler+0xdfc>)
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	4b86      	ldr	r3, [pc, #536]	; (8002214 <LEDHandler+0xe00>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b86      	ldr	r3, [pc, #536]	; (8002218 <LEDHandler+0xe04>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2003      	movs	r0, #3
 8002004:	f000 fc72 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002008:	4b81      	ldr	r3, [pc, #516]	; (8002210 <LEDHandler+0xdfc>)
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	4b81      	ldr	r3, [pc, #516]	; (8002214 <LEDHandler+0xe00>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b81      	ldr	r3, [pc, #516]	; (8002218 <LEDHandler+0xe04>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2004      	movs	r0, #4
 8002016:	f000 fc69 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 800201a:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <LEDHandler+0xdfc>)
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	4b7d      	ldr	r3, [pc, #500]	; (8002214 <LEDHandler+0xe00>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b7d      	ldr	r3, [pc, #500]	; (8002218 <LEDHandler+0xe04>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2005      	movs	r0, #5
 8002028:	f000 fc60 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 800202c:	4b78      	ldr	r3, [pc, #480]	; (8002210 <LEDHandler+0xdfc>)
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	4b78      	ldr	r3, [pc, #480]	; (8002214 <LEDHandler+0xe00>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b78      	ldr	r3, [pc, #480]	; (8002218 <LEDHandler+0xe04>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2006      	movs	r0, #6
 800203a:	f000 fc57 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800203e:	4b74      	ldr	r3, [pc, #464]	; (8002210 <LEDHandler+0xdfc>)
 8002040:	6819      	ldr	r1, [r3, #0]
 8002042:	4b74      	ldr	r3, [pc, #464]	; (8002214 <LEDHandler+0xe00>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4b74      	ldr	r3, [pc, #464]	; (8002218 <LEDHandler+0xe04>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2007      	movs	r0, #7
 800204c:	f000 fc4e 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002050:	4b6f      	ldr	r3, [pc, #444]	; (8002210 <LEDHandler+0xdfc>)
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	4b6f      	ldr	r3, [pc, #444]	; (8002214 <LEDHandler+0xe00>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <LEDHandler+0xe04>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2008      	movs	r0, #8
 800205e:	f000 fc45 	bl	80028ec <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002062:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <LEDHandler+0xdfc>)
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	4b6b      	ldr	r3, [pc, #428]	; (8002214 <LEDHandler+0xe00>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b6b      	ldr	r3, [pc, #428]	; (8002218 <LEDHandler+0xe04>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2009      	movs	r0, #9
 8002070:	f000 fc3c 	bl	80028ec <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002074:	4b66      	ldr	r3, [pc, #408]	; (8002210 <LEDHandler+0xdfc>)
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <LEDHandler+0xe00>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b66      	ldr	r3, [pc, #408]	; (8002218 <LEDHandler+0xe04>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	200a      	movs	r0, #10
 8002082:	f000 fc33 	bl	80028ec <Set_LED>
		Set_LED(11, 0, 0, 0);
 8002086:	2300      	movs	r3, #0
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	200b      	movs	r0, #11
 800208e:	f000 fc2d 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 8002092:	2300      	movs	r3, #0
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	200c      	movs	r0, #12
 800209a:	f000 fc27 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 800209e:	2300      	movs	r3, #0
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	200d      	movs	r0, #13
 80020a6:	f000 fc21 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 80020aa:	2300      	movs	r3, #0
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	200e      	movs	r0, #14
 80020b2:	f000 fc1b 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80020b6:	2300      	movs	r3, #0
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	200f      	movs	r0, #15
 80020be:	f000 fc15 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80020c2:	2300      	movs	r3, #0
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2010      	movs	r0, #16
 80020ca:	f000 fc0f 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 80020ce:	2300      	movs	r3, #0
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2011      	movs	r0, #17
 80020d6:	f000 fc09 	bl	80028ec <Set_LED>
 80020da:	e3dc      	b.n	8002896 <LEDHandler+0x1482>
	} else if (Value >= 66 && Value < 72) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b41      	cmp	r3, #65	; 0x41
 80020e0:	f340 809c 	ble.w	800221c <LEDHandler+0xe08>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b47      	cmp	r3, #71	; 0x47
 80020e8:	f300 8098 	bgt.w	800221c <LEDHandler+0xe08>
		Set_LED(0, Red, Green, Blue);
 80020ec:	4b48      	ldr	r3, [pc, #288]	; (8002210 <LEDHandler+0xdfc>)
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	4b48      	ldr	r3, [pc, #288]	; (8002214 <LEDHandler+0xe00>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b48      	ldr	r3, [pc, #288]	; (8002218 <LEDHandler+0xe04>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 fbf7 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <LEDHandler+0xdfc>)
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <LEDHandler+0xe00>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <LEDHandler+0xe04>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2001      	movs	r0, #1
 800210c:	f000 fbee 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002110:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <LEDHandler+0xdfc>)
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <LEDHandler+0xe00>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <LEDHandler+0xe04>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2002      	movs	r0, #2
 800211e:	f000 fbe5 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8002122:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <LEDHandler+0xdfc>)
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <LEDHandler+0xe00>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <LEDHandler+0xe04>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2003      	movs	r0, #3
 8002130:	f000 fbdc 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <LEDHandler+0xdfc>)
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <LEDHandler+0xe00>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <LEDHandler+0xe04>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2004      	movs	r0, #4
 8002142:	f000 fbd3 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <LEDHandler+0xdfc>)
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	4b32      	ldr	r3, [pc, #200]	; (8002214 <LEDHandler+0xe00>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b32      	ldr	r3, [pc, #200]	; (8002218 <LEDHandler+0xe04>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2005      	movs	r0, #5
 8002154:	f000 fbca 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <LEDHandler+0xdfc>)
 800215a:	6819      	ldr	r1, [r3, #0]
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <LEDHandler+0xe00>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <LEDHandler+0xe04>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2006      	movs	r0, #6
 8002166:	f000 fbc1 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <LEDHandler+0xdfc>)
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <LEDHandler+0xe00>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <LEDHandler+0xe04>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2007      	movs	r0, #7
 8002178:	f000 fbb8 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <LEDHandler+0xdfc>)
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <LEDHandler+0xe00>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <LEDHandler+0xe04>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2008      	movs	r0, #8
 800218a:	f000 fbaf 	bl	80028ec <Set_LED>
		Set_LED(9, Red, Green, Blue);
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <LEDHandler+0xdfc>)
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <LEDHandler+0xe00>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <LEDHandler+0xe04>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2009      	movs	r0, #9
 800219c:	f000 fba6 	bl	80028ec <Set_LED>
		Set_LED(10, Red, Green, Blue);
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <LEDHandler+0xdfc>)
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <LEDHandler+0xe00>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <LEDHandler+0xe04>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	200a      	movs	r0, #10
 80021ae:	f000 fb9d 	bl	80028ec <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <LEDHandler+0xdfc>)
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <LEDHandler+0xe00>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <LEDHandler+0xe04>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	200b      	movs	r0, #11
 80021c0:	f000 fb94 	bl	80028ec <Set_LED>
		Set_LED(12, 0, 0, 0);
 80021c4:	2300      	movs	r3, #0
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	200c      	movs	r0, #12
 80021cc:	f000 fb8e 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 80021d0:	2300      	movs	r3, #0
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	200d      	movs	r0, #13
 80021d8:	f000 fb88 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 80021dc:	2300      	movs	r3, #0
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	200e      	movs	r0, #14
 80021e4:	f000 fb82 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80021e8:	2300      	movs	r3, #0
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	200f      	movs	r0, #15
 80021f0:	f000 fb7c 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2010      	movs	r0, #16
 80021fc:	f000 fb76 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2011      	movs	r0, #17
 8002208:	f000 fb70 	bl	80028ec <Set_LED>
 800220c:	e343      	b.n	8002896 <LEDHandler+0x1482>
 800220e:	bf00      	nop
 8002210:	20000008 	.word	0x20000008
 8002214:	2000000c 	.word	0x2000000c
 8002218:	20000010 	.word	0x20000010
	} else if (Value >= 72 && Value < 78) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b47      	cmp	r3, #71	; 0x47
 8002220:	f340 8098 	ble.w	8002354 <LEDHandler+0xf40>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b4d      	cmp	r3, #77	; 0x4d
 8002228:	f300 8094 	bgt.w	8002354 <LEDHandler+0xf40>
		Set_LED(0, Red, Green, Blue);
 800222c:	4b99      	ldr	r3, [pc, #612]	; (8002494 <LEDHandler+0x1080>)
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	4b99      	ldr	r3, [pc, #612]	; (8002498 <LEDHandler+0x1084>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b99      	ldr	r3, [pc, #612]	; (800249c <LEDHandler+0x1088>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2000      	movs	r0, #0
 800223a:	f000 fb57 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 800223e:	4b95      	ldr	r3, [pc, #596]	; (8002494 <LEDHandler+0x1080>)
 8002240:	6819      	ldr	r1, [r3, #0]
 8002242:	4b95      	ldr	r3, [pc, #596]	; (8002498 <LEDHandler+0x1084>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b95      	ldr	r3, [pc, #596]	; (800249c <LEDHandler+0x1088>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2001      	movs	r0, #1
 800224c:	f000 fb4e 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002250:	4b90      	ldr	r3, [pc, #576]	; (8002494 <LEDHandler+0x1080>)
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	4b90      	ldr	r3, [pc, #576]	; (8002498 <LEDHandler+0x1084>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b90      	ldr	r3, [pc, #576]	; (800249c <LEDHandler+0x1088>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2002      	movs	r0, #2
 800225e:	f000 fb45 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8002262:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <LEDHandler+0x1080>)
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <LEDHandler+0x1084>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b8c      	ldr	r3, [pc, #560]	; (800249c <LEDHandler+0x1088>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2003      	movs	r0, #3
 8002270:	f000 fb3c 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002274:	4b87      	ldr	r3, [pc, #540]	; (8002494 <LEDHandler+0x1080>)
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	4b87      	ldr	r3, [pc, #540]	; (8002498 <LEDHandler+0x1084>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b87      	ldr	r3, [pc, #540]	; (800249c <LEDHandler+0x1088>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2004      	movs	r0, #4
 8002282:	f000 fb33 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8002286:	4b83      	ldr	r3, [pc, #524]	; (8002494 <LEDHandler+0x1080>)
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	4b83      	ldr	r3, [pc, #524]	; (8002498 <LEDHandler+0x1084>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b83      	ldr	r3, [pc, #524]	; (800249c <LEDHandler+0x1088>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2005      	movs	r0, #5
 8002294:	f000 fb2a 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8002298:	4b7e      	ldr	r3, [pc, #504]	; (8002494 <LEDHandler+0x1080>)
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <LEDHandler+0x1084>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b7e      	ldr	r3, [pc, #504]	; (800249c <LEDHandler+0x1088>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2006      	movs	r0, #6
 80022a6:	f000 fb21 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 80022aa:	4b7a      	ldr	r3, [pc, #488]	; (8002494 <LEDHandler+0x1080>)
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <LEDHandler+0x1084>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b7a      	ldr	r3, [pc, #488]	; (800249c <LEDHandler+0x1088>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2007      	movs	r0, #7
 80022b8:	f000 fb18 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 80022bc:	4b75      	ldr	r3, [pc, #468]	; (8002494 <LEDHandler+0x1080>)
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <LEDHandler+0x1084>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b75      	ldr	r3, [pc, #468]	; (800249c <LEDHandler+0x1088>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2008      	movs	r0, #8
 80022ca:	f000 fb0f 	bl	80028ec <Set_LED>
		Set_LED(9, Red, Green, Blue);
 80022ce:	4b71      	ldr	r3, [pc, #452]	; (8002494 <LEDHandler+0x1080>)
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	4b71      	ldr	r3, [pc, #452]	; (8002498 <LEDHandler+0x1084>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b71      	ldr	r3, [pc, #452]	; (800249c <LEDHandler+0x1088>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2009      	movs	r0, #9
 80022dc:	f000 fb06 	bl	80028ec <Set_LED>
		Set_LED(10, Red, Green, Blue);
 80022e0:	4b6c      	ldr	r3, [pc, #432]	; (8002494 <LEDHandler+0x1080>)
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <LEDHandler+0x1084>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b6c      	ldr	r3, [pc, #432]	; (800249c <LEDHandler+0x1088>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	200a      	movs	r0, #10
 80022ee:	f000 fafd 	bl	80028ec <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80022f2:	4b68      	ldr	r3, [pc, #416]	; (8002494 <LEDHandler+0x1080>)
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	4b68      	ldr	r3, [pc, #416]	; (8002498 <LEDHandler+0x1084>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b68      	ldr	r3, [pc, #416]	; (800249c <LEDHandler+0x1088>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	200b      	movs	r0, #11
 8002300:	f000 faf4 	bl	80028ec <Set_LED>
		Set_LED(12, Red, Green, Blue);
 8002304:	4b63      	ldr	r3, [pc, #396]	; (8002494 <LEDHandler+0x1080>)
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	4b63      	ldr	r3, [pc, #396]	; (8002498 <LEDHandler+0x1084>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b63      	ldr	r3, [pc, #396]	; (800249c <LEDHandler+0x1088>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	200c      	movs	r0, #12
 8002312:	f000 faeb 	bl	80028ec <Set_LED>
		Set_LED(13, 0, 0, 0);
 8002316:	2300      	movs	r3, #0
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	200d      	movs	r0, #13
 800231e:	f000 fae5 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 8002322:	2300      	movs	r3, #0
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	200e      	movs	r0, #14
 800232a:	f000 fadf 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 800232e:	2300      	movs	r3, #0
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	200f      	movs	r0, #15
 8002336:	f000 fad9 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 800233a:	2300      	movs	r3, #0
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	2010      	movs	r0, #16
 8002342:	f000 fad3 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002346:	2300      	movs	r3, #0
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2011      	movs	r0, #17
 800234e:	f000 facd 	bl	80028ec <Set_LED>
 8002352:	e2a0      	b.n	8002896 <LEDHandler+0x1482>
	} else if (Value >= 78 && Value < 84) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b4d      	cmp	r3, #77	; 0x4d
 8002358:	f340 80a2 	ble.w	80024a0 <LEDHandler+0x108c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b53      	cmp	r3, #83	; 0x53
 8002360:	f300 809e 	bgt.w	80024a0 <LEDHandler+0x108c>
		Set_LED(0, Red, Green, Blue);
 8002364:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <LEDHandler+0x1080>)
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <LEDHandler+0x1084>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <LEDHandler+0x1088>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2000      	movs	r0, #0
 8002372:	f000 fabb 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <LEDHandler+0x1080>)
 8002378:	6819      	ldr	r1, [r3, #0]
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <LEDHandler+0x1084>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <LEDHandler+0x1088>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2001      	movs	r0, #1
 8002384:	f000 fab2 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002388:	4b42      	ldr	r3, [pc, #264]	; (8002494 <LEDHandler+0x1080>)
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	4b42      	ldr	r3, [pc, #264]	; (8002498 <LEDHandler+0x1084>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <LEDHandler+0x1088>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2002      	movs	r0, #2
 8002396:	f000 faa9 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 800239a:	4b3e      	ldr	r3, [pc, #248]	; (8002494 <LEDHandler+0x1080>)
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <LEDHandler+0x1084>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b3e      	ldr	r3, [pc, #248]	; (800249c <LEDHandler+0x1088>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2003      	movs	r0, #3
 80023a8:	f000 faa0 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <LEDHandler+0x1080>)
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <LEDHandler+0x1084>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b39      	ldr	r3, [pc, #228]	; (800249c <LEDHandler+0x1088>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2004      	movs	r0, #4
 80023ba:	f000 fa97 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 80023be:	4b35      	ldr	r3, [pc, #212]	; (8002494 <LEDHandler+0x1080>)
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	4b35      	ldr	r3, [pc, #212]	; (8002498 <LEDHandler+0x1084>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b35      	ldr	r3, [pc, #212]	; (800249c <LEDHandler+0x1088>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2005      	movs	r0, #5
 80023cc:	f000 fa8e 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <LEDHandler+0x1080>)
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <LEDHandler+0x1084>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b30      	ldr	r3, [pc, #192]	; (800249c <LEDHandler+0x1088>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2006      	movs	r0, #6
 80023de:	f000 fa85 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 80023e2:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <LEDHandler+0x1080>)
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <LEDHandler+0x1084>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b2c      	ldr	r3, [pc, #176]	; (800249c <LEDHandler+0x1088>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2007      	movs	r0, #7
 80023f0:	f000 fa7c 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <LEDHandler+0x1080>)
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <LEDHandler+0x1084>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <LEDHandler+0x1088>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2008      	movs	r0, #8
 8002402:	f000 fa73 	bl	80028ec <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <LEDHandler+0x1080>)
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <LEDHandler+0x1084>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b23      	ldr	r3, [pc, #140]	; (800249c <LEDHandler+0x1088>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2009      	movs	r0, #9
 8002414:	f000 fa6a 	bl	80028ec <Set_LED>
		Set_LED(10,Red, Green, Blue);
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <LEDHandler+0x1080>)
 800241a:	6819      	ldr	r1, [r3, #0]
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <LEDHandler+0x1084>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <LEDHandler+0x1088>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	200a      	movs	r0, #10
 8002426:	f000 fa61 	bl	80028ec <Set_LED>
		Set_LED(11, Red, Green, Blue);
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <LEDHandler+0x1080>)
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <LEDHandler+0x1084>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <LEDHandler+0x1088>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	200b      	movs	r0, #11
 8002438:	f000 fa58 	bl	80028ec <Set_LED>
		Set_LED(12, Red, Green, Blue);
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <LEDHandler+0x1080>)
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <LEDHandler+0x1084>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <LEDHandler+0x1088>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	200c      	movs	r0, #12
 800244a:	f000 fa4f 	bl	80028ec <Set_LED>
		Set_LED(13, Red, Green, Blue);
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <LEDHandler+0x1080>)
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <LEDHandler+0x1084>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <LEDHandler+0x1088>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	200d      	movs	r0, #13
 800245c:	f000 fa46 	bl	80028ec <Set_LED>
		Set_LED(14, 0, 0, 0);
 8002460:	2300      	movs	r3, #0
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	200e      	movs	r0, #14
 8002468:	f000 fa40 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 800246c:	2300      	movs	r3, #0
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	200f      	movs	r0, #15
 8002474:	f000 fa3a 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 8002478:	2300      	movs	r3, #0
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	2010      	movs	r0, #16
 8002480:	f000 fa34 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	2011      	movs	r0, #17
 800248c:	f000 fa2e 	bl	80028ec <Set_LED>
 8002490:	e201      	b.n	8002896 <LEDHandler+0x1482>
 8002492:	bf00      	nop
 8002494:	20000008 	.word	0x20000008
 8002498:	2000000c 	.word	0x2000000c
 800249c:	20000010 	.word	0x20000010
	} else if (Value >= 84 && Value < 90) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b53      	cmp	r3, #83	; 0x53
 80024a4:	f340 80a4 	ble.w	80025f0 <LEDHandler+0x11dc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b59      	cmp	r3, #89	; 0x59
 80024ac:	f300 80a0 	bgt.w	80025f0 <LEDHandler+0x11dc>
		Set_LED(0, Red, Green, Blue);
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <LEDHandler+0x11d0>)
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <LEDHandler+0x11d4>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <LEDHandler+0x11d8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2000      	movs	r0, #0
 80024be:	f000 fa15 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80024c2:	4b48      	ldr	r3, [pc, #288]	; (80025e4 <LEDHandler+0x11d0>)
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	4b48      	ldr	r3, [pc, #288]	; (80025e8 <LEDHandler+0x11d4>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b48      	ldr	r3, [pc, #288]	; (80025ec <LEDHandler+0x11d8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 fa0c 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <LEDHandler+0x11d0>)
 80024d6:	6819      	ldr	r1, [r3, #0]
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <LEDHandler+0x11d4>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b43      	ldr	r3, [pc, #268]	; (80025ec <LEDHandler+0x11d8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2002      	movs	r0, #2
 80024e2:	f000 fa03 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80024e6:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <LEDHandler+0x11d0>)
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <LEDHandler+0x11d4>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <LEDHandler+0x11d8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2003      	movs	r0, #3
 80024f4:	f000 f9fa 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 80024f8:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <LEDHandler+0x11d0>)
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <LEDHandler+0x11d4>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <LEDHandler+0x11d8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2004      	movs	r0, #4
 8002506:	f000 f9f1 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <LEDHandler+0x11d0>)
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <LEDHandler+0x11d4>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <LEDHandler+0x11d8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2005      	movs	r0, #5
 8002518:	f000 f9e8 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <LEDHandler+0x11d0>)
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <LEDHandler+0x11d4>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <LEDHandler+0x11d8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2006      	movs	r0, #6
 800252a:	f000 f9df 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <LEDHandler+0x11d0>)
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <LEDHandler+0x11d4>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <LEDHandler+0x11d8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2007      	movs	r0, #7
 800253c:	f000 f9d6 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <LEDHandler+0x11d0>)
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <LEDHandler+0x11d4>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <LEDHandler+0x11d8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2008      	movs	r0, #8
 800254e:	f000 f9cd 	bl	80028ec <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <LEDHandler+0x11d0>)
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <LEDHandler+0x11d4>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <LEDHandler+0x11d8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2009      	movs	r0, #9
 8002560:	f000 f9c4 	bl	80028ec <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <LEDHandler+0x11d0>)
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <LEDHandler+0x11d4>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <LEDHandler+0x11d8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	200a      	movs	r0, #10
 8002572:	f000 f9bb 	bl	80028ec <Set_LED>
		Set_LED(11, Red, Green, Blue);
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <LEDHandler+0x11d0>)
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <LEDHandler+0x11d4>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <LEDHandler+0x11d8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	200b      	movs	r0, #11
 8002584:	f000 f9b2 	bl	80028ec <Set_LED>
		Set_LED(12, Red, Green, Blue);
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <LEDHandler+0x11d0>)
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <LEDHandler+0x11d4>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <LEDHandler+0x11d8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	200c      	movs	r0, #12
 8002596:	f000 f9a9 	bl	80028ec <Set_LED>
		Set_LED(13, Red, Green, Blue);
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <LEDHandler+0x11d0>)
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <LEDHandler+0x11d4>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <LEDHandler+0x11d8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	200d      	movs	r0, #13
 80025a8:	f000 f9a0 	bl	80028ec <Set_LED>
		Set_LED(14, Red, Green, Blue);
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <LEDHandler+0x11d0>)
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <LEDHandler+0x11d4>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <LEDHandler+0x11d8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	200e      	movs	r0, #14
 80025ba:	f000 f997 	bl	80028ec <Set_LED>
		Set_LED(15, 0, 0, 0);
 80025be:	2300      	movs	r3, #0
 80025c0:	2200      	movs	r2, #0
 80025c2:	2100      	movs	r1, #0
 80025c4:	200f      	movs	r0, #15
 80025c6:	f000 f991 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 80025ca:	2300      	movs	r3, #0
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2010      	movs	r0, #16
 80025d2:	f000 f98b 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 80025d6:	2300      	movs	r3, #0
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	2011      	movs	r0, #17
 80025de:	f000 f985 	bl	80028ec <Set_LED>
 80025e2:	e158      	b.n	8002896 <LEDHandler+0x1482>
 80025e4:	20000008 	.word	0x20000008
 80025e8:	2000000c 	.word	0x2000000c
 80025ec:	20000010 	.word	0x20000010
	} else if (Value >= 90 && Value < 96) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b59      	cmp	r3, #89	; 0x59
 80025f4:	f340 80a8 	ble.w	8002748 <LEDHandler+0x1334>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b5f      	cmp	r3, #95	; 0x5f
 80025fc:	f300 80a4 	bgt.w	8002748 <LEDHandler+0x1334>
		Set_LED(0, Red, Green, Blue);
 8002600:	4b4e      	ldr	r3, [pc, #312]	; (800273c <LEDHandler+0x1328>)
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <LEDHandler+0x132c>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b4e      	ldr	r3, [pc, #312]	; (8002744 <LEDHandler+0x1330>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2000      	movs	r0, #0
 800260e:	f000 f96d 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <LEDHandler+0x1328>)
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <LEDHandler+0x132c>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <LEDHandler+0x1330>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2001      	movs	r0, #1
 8002620:	f000 f964 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002624:	4b45      	ldr	r3, [pc, #276]	; (800273c <LEDHandler+0x1328>)
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <LEDHandler+0x132c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <LEDHandler+0x1330>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2002      	movs	r0, #2
 8002632:	f000 f95b 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <LEDHandler+0x1328>)
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <LEDHandler+0x132c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <LEDHandler+0x1330>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2003      	movs	r0, #3
 8002644:	f000 f952 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002648:	4b3c      	ldr	r3, [pc, #240]	; (800273c <LEDHandler+0x1328>)
 800264a:	6819      	ldr	r1, [r3, #0]
 800264c:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <LEDHandler+0x132c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <LEDHandler+0x1330>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2004      	movs	r0, #4
 8002656:	f000 f949 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <LEDHandler+0x1328>)
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <LEDHandler+0x132c>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <LEDHandler+0x1330>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2005      	movs	r0, #5
 8002668:	f000 f940 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 800266c:	4b33      	ldr	r3, [pc, #204]	; (800273c <LEDHandler+0x1328>)
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	4b33      	ldr	r3, [pc, #204]	; (8002740 <LEDHandler+0x132c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <LEDHandler+0x1330>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2006      	movs	r0, #6
 800267a:	f000 f937 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <LEDHandler+0x1328>)
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <LEDHandler+0x132c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <LEDHandler+0x1330>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2007      	movs	r0, #7
 800268c:	f000 f92e 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <LEDHandler+0x1328>)
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <LEDHandler+0x132c>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <LEDHandler+0x1330>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2008      	movs	r0, #8
 800269e:	f000 f925 	bl	80028ec <Set_LED>
		Set_LED(9, Red, Green, Blue);
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <LEDHandler+0x1328>)
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <LEDHandler+0x132c>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b26      	ldr	r3, [pc, #152]	; (8002744 <LEDHandler+0x1330>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2009      	movs	r0, #9
 80026b0:	f000 f91c 	bl	80028ec <Set_LED>
		Set_LED(10, Red, Green, Blue);
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <LEDHandler+0x1328>)
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <LEDHandler+0x132c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <LEDHandler+0x1330>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	200a      	movs	r0, #10
 80026c2:	f000 f913 	bl	80028ec <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <LEDHandler+0x1328>)
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <LEDHandler+0x132c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <LEDHandler+0x1330>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	200b      	movs	r0, #11
 80026d4:	f000 f90a 	bl	80028ec <Set_LED>
		Set_LED(12, Red, Green, Blue);
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <LEDHandler+0x1328>)
 80026da:	6819      	ldr	r1, [r3, #0]
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <LEDHandler+0x132c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <LEDHandler+0x1330>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	200c      	movs	r0, #12
 80026e6:	f000 f901 	bl	80028ec <Set_LED>
		Set_LED(13, Red, Green, Blue);
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <LEDHandler+0x1328>)
 80026ec:	6819      	ldr	r1, [r3, #0]
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <LEDHandler+0x132c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <LEDHandler+0x1330>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	200d      	movs	r0, #13
 80026f8:	f000 f8f8 	bl	80028ec <Set_LED>
		Set_LED(14, Red, Green, Blue);
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <LEDHandler+0x1328>)
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <LEDHandler+0x132c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <LEDHandler+0x1330>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	200e      	movs	r0, #14
 800270a:	f000 f8ef 	bl	80028ec <Set_LED>
		Set_LED(15, Red, Green, Blue);
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <LEDHandler+0x1328>)
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <LEDHandler+0x132c>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <LEDHandler+0x1330>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	200f      	movs	r0, #15
 800271c:	f000 f8e6 	bl	80028ec <Set_LED>
		Set_LED(16, 0, 0, 0);
 8002720:	2300      	movs	r3, #0
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	2010      	movs	r0, #16
 8002728:	f000 f8e0 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 800272c:	2300      	movs	r3, #0
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	2011      	movs	r0, #17
 8002734:	f000 f8da 	bl	80028ec <Set_LED>
 8002738:	e0ad      	b.n	8002896 <LEDHandler+0x1482>
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	2000000c 	.word	0x2000000c
 8002744:	20000010 	.word	0x20000010
	} else if (Value >= 96 && Value < 101) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b5f      	cmp	r3, #95	; 0x5f
 800274c:	f340 80a3 	ble.w	8002896 <LEDHandler+0x1482>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	f300 809f 	bgt.w	8002896 <LEDHandler+0x1482>
		Set_LED(0, Red, Green, Blue);
 8002758:	4b56      	ldr	r3, [pc, #344]	; (80028b4 <LEDHandler+0x14a0>)
 800275a:	6819      	ldr	r1, [r3, #0]
 800275c:	4b56      	ldr	r3, [pc, #344]	; (80028b8 <LEDHandler+0x14a4>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b56      	ldr	r3, [pc, #344]	; (80028bc <LEDHandler+0x14a8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2000      	movs	r0, #0
 8002766:	f000 f8c1 	bl	80028ec <Set_LED>
		Set_LED(1, Red, Green, Blue);
 800276a:	4b52      	ldr	r3, [pc, #328]	; (80028b4 <LEDHandler+0x14a0>)
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	4b52      	ldr	r3, [pc, #328]	; (80028b8 <LEDHandler+0x14a4>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b52      	ldr	r3, [pc, #328]	; (80028bc <LEDHandler+0x14a8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2001      	movs	r0, #1
 8002778:	f000 f8b8 	bl	80028ec <Set_LED>
		Set_LED(2, Red, Green, Blue);
 800277c:	4b4d      	ldr	r3, [pc, #308]	; (80028b4 <LEDHandler+0x14a0>)
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <LEDHandler+0x14a4>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b4d      	ldr	r3, [pc, #308]	; (80028bc <LEDHandler+0x14a8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2002      	movs	r0, #2
 800278a:	f000 f8af 	bl	80028ec <Set_LED>
		Set_LED(3, Red, Green, Blue);
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <LEDHandler+0x14a0>)
 8002790:	6819      	ldr	r1, [r3, #0]
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <LEDHandler+0x14a4>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b49      	ldr	r3, [pc, #292]	; (80028bc <LEDHandler+0x14a8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2003      	movs	r0, #3
 800279c:	f000 f8a6 	bl	80028ec <Set_LED>
		Set_LED(4, Red, Green, Blue);
 80027a0:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <LEDHandler+0x14a0>)
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <LEDHandler+0x14a4>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b44      	ldr	r3, [pc, #272]	; (80028bc <LEDHandler+0x14a8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2004      	movs	r0, #4
 80027ae:	f000 f89d 	bl	80028ec <Set_LED>
		Set_LED(5, Red, Green, Blue);
 80027b2:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <LEDHandler+0x14a0>)
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <LEDHandler+0x14a4>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <LEDHandler+0x14a8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2005      	movs	r0, #5
 80027c0:	f000 f894 	bl	80028ec <Set_LED>
		Set_LED(6, Red, Green, Blue);
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <LEDHandler+0x14a0>)
 80027c6:	6819      	ldr	r1, [r3, #0]
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <LEDHandler+0x14a4>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <LEDHandler+0x14a8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2006      	movs	r0, #6
 80027d2:	f000 f88b 	bl	80028ec <Set_LED>
		Set_LED(7, Red, Green, Blue);
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <LEDHandler+0x14a0>)
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <LEDHandler+0x14a4>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <LEDHandler+0x14a8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2007      	movs	r0, #7
 80027e4:	f000 f882 	bl	80028ec <Set_LED>
		Set_LED(8, Red, Green, Blue);
 80027e8:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <LEDHandler+0x14a0>)
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <LEDHandler+0x14a4>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <LEDHandler+0x14a8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2008      	movs	r0, #8
 80027f6:	f000 f879 	bl	80028ec <Set_LED>
		Set_LED(9, Red, Green, Blue);
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <LEDHandler+0x14a0>)
 80027fc:	6819      	ldr	r1, [r3, #0]
 80027fe:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <LEDHandler+0x14a4>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <LEDHandler+0x14a8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2009      	movs	r0, #9
 8002808:	f000 f870 	bl	80028ec <Set_LED>
		Set_LED(10, Red, Green, Blue);
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <LEDHandler+0x14a0>)
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <LEDHandler+0x14a4>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b29      	ldr	r3, [pc, #164]	; (80028bc <LEDHandler+0x14a8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	200a      	movs	r0, #10
 800281a:	f000 f867 	bl	80028ec <Set_LED>
		Set_LED(11, Red, Green, Blue);
 800281e:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <LEDHandler+0x14a0>)
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <LEDHandler+0x14a4>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b25      	ldr	r3, [pc, #148]	; (80028bc <LEDHandler+0x14a8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	200b      	movs	r0, #11
 800282c:	f000 f85e 	bl	80028ec <Set_LED>
		Set_LED(12, Red, Green, Blue);
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <LEDHandler+0x14a0>)
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <LEDHandler+0x14a4>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <LEDHandler+0x14a8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	200c      	movs	r0, #12
 800283e:	f000 f855 	bl	80028ec <Set_LED>
		Set_LED(13, Red, Green, Blue);
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <LEDHandler+0x14a0>)
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <LEDHandler+0x14a4>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <LEDHandler+0x14a8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	200d      	movs	r0, #13
 8002850:	f000 f84c 	bl	80028ec <Set_LED>
		Set_LED(14, Red, Green, Blue);
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <LEDHandler+0x14a0>)
 8002856:	6819      	ldr	r1, [r3, #0]
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <LEDHandler+0x14a4>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <LEDHandler+0x14a8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	200e      	movs	r0, #14
 8002862:	f000 f843 	bl	80028ec <Set_LED>
		Set_LED(15, Red, Green, Blue);
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <LEDHandler+0x14a0>)
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <LEDHandler+0x14a4>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <LEDHandler+0x14a8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	200f      	movs	r0, #15
 8002874:	f000 f83a 	bl	80028ec <Set_LED>
		Set_LED(16, Red, Green, Blue);
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <LEDHandler+0x14a0>)
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <LEDHandler+0x14a4>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <LEDHandler+0x14a8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2010      	movs	r0, #16
 8002886:	f000 f831 	bl	80028ec <Set_LED>
		Set_LED(17, 0, 0, 0);
 800288a:	2300      	movs	r3, #0
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2011      	movs	r0, #17
 8002892:	f000 f82b 	bl	80028ec <Set_LED>
	}


	Set_Brightness(brilho);
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <LEDHandler+0x14ac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 faa4 	bl	8002de8 <Set_Brightness>
	WS2512_Send();
 80028a0:	f000 fb20 	bl	8002ee4 <WS2512_Send>
	HAL_Delay(50);
 80028a4:	2032      	movs	r0, #50	; 0x32
 80028a6:	f000 fdd1 	bl	800344c <HAL_Delay>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000008 	.word	0x20000008
 80028b8:	2000000c 	.word	0x2000000c
 80028bc:	20000010 	.word	0x20000010
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_TIM_PWM_PulseFinishedCallback>:

}

//TODO Documentar método
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80028cc:	2100      	movs	r1, #0
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80028d0:	f002 fe1e 	bl	8005510 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000210 	.word	0x20000210
 80028e8:	20000410 	.word	0x20000410

080028ec <Set_LED>:

//TODO Documentar método
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	b2d9      	uxtb	r1, r3
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <Set_LED+0x54>)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	b2d9      	uxtb	r1, r3
 800290a:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <Set_LED+0x54>)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	460a      	mov	r2, r1
 8002914:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	b2d9      	uxtb	r1, r3
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <Set_LED+0x54>)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	460a      	mov	r2, r1
 8002924:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2d9      	uxtb	r1, r3
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <Set_LED+0x54>)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	460a      	mov	r2, r1
 8002934:	70da      	strb	r2, [r3, #3]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000370 	.word	0x20000370

08002944 <DigitExtract>:
	//Final do ciclo de cada dígito
//	downcounter = 100;while (downcounter > 0);
}


void DigitExtract(int num) {
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

//	int unid, dez, cent;
	unid = num % 10;
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <DigitExtract+0x6c>)
 8002950:	fb83 2301 	smull	r2, r3, r3, r1
 8002954:	109a      	asrs	r2, r3, #2
 8002956:	17cb      	asrs	r3, r1, #31
 8002958:	1ad2      	subs	r2, r2, r3
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	1aca      	subs	r2, r1, r3
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <DigitExtract+0x70>)
 8002966:	601a      	str	r2, [r3, #0]
	num = num / 10;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <DigitExtract+0x6c>)
 800296c:	fb82 1203 	smull	r1, r2, r2, r3
 8002970:	1092      	asrs	r2, r2, #2
 8002972:	17db      	asrs	r3, r3, #31
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	607b      	str	r3, [r7, #4]
	dez = num % 10;
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <DigitExtract+0x6c>)
 800297c:	fb83 2301 	smull	r2, r3, r3, r1
 8002980:	109a      	asrs	r2, r3, #2
 8002982:	17cb      	asrs	r3, r1, #31
 8002984:	1ad2      	subs	r2, r2, r3
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	1aca      	subs	r2, r1, r3
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <DigitExtract+0x74>)
 8002992:	601a      	str	r2, [r3, #0]
	cent = num / 10;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <DigitExtract+0x6c>)
 8002998:	fb82 1203 	smull	r1, r2, r2, r3
 800299c:	1092      	asrs	r2, r2, #2
 800299e:	17db      	asrs	r3, r3, #31
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <DigitExtract+0x78>)
 80029a4:	6013      	str	r3, [r2, #0]

}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	66666667 	.word	0x66666667
 80029b4:	20000338 	.word	0x20000338
 80029b8:	2000033c 	.word	0x2000033c
 80029bc:	20000340 	.word	0x20000340

080029c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) //frequencia do timer4 é de 5 kHz, st=200us
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4aa2      	ldr	r2, [pc, #648]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d129      	bne.n	8002a26 <HAL_TIM_PeriodElapsedCallback+0x66>
	{

		if (idx < 200) {		//atualizar a contagem a cada 500 ms
 80029d2:	4ba2      	ldr	r3, [pc, #648]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2bc7      	cmp	r3, #199	; 0xc7
 80029d8:	dc05      	bgt.n	80029e6 <HAL_TIM_PeriodElapsedCallback+0x26>

			idx++;
 80029da:	4ba0      	ldr	r3, [pc, #640]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	4a9e      	ldr	r2, [pc, #632]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e011      	b.n	8002a0a <HAL_TIM_PeriodElapsedCallback+0x4a>
		} else {

			//var = AnalogHandler(readValue);		//atualização do valor do sinal analógico

			Speed_Signal_Input = ADC_Buffer[0];
 80029e6:	4b9e      	ldr	r3, [pc, #632]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b9d      	ldr	r3, [pc, #628]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80029ee:	601a      	str	r2, [r3, #0]
			Speed_Signal_Output = ADC_Buffer[1];
 80029f0:	4b9b      	ldr	r3, [pc, #620]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80029f8:	601a      	str	r2, [r3, #0]
			Speed_Mode = ADC_Buffer[2];
 80029fa:	4b99      	ldr	r3, [pc, #612]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b9a      	ldr	r3, [pc, #616]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002a02:	601a      	str	r2, [r3, #0]

			idx = 1;
 8002a04:	4b95      	ldr	r3, [pc, #596]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
		}

		if (downcounter_timer4 > 0) {
 8002a0a:	4b99      	ldr	r3, [pc, #612]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	dd04      	ble.n	8002a1c <HAL_TIM_PeriodElapsedCallback+0x5c>
			downcounter_timer4--;
 8002a12:	4b97      	ldr	r3, [pc, #604]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	4a95      	ldr	r2, [pc, #596]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a1a:	6013      	str	r3, [r2, #0]
		}

		counter_timer4++;
 8002a1c:	4b95      	ldr	r3, [pc, #596]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a94      	ldr	r2, [pc, #592]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a24:	6013      	str	r3, [r2, #0]
	}

	if (htim->Instance == TIM3) { //frequencia do timer3 é de 50 kHz, time=20us
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a93      	ldr	r2, [pc, #588]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	f040 81c7 	bne.w	8002dc0 <HAL_TIM_PeriodElapsedCallback+0x400>

		if (downcounter > 0) {
 8002a32:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	dd05      	ble.n	8002a46 <HAL_TIM_PeriodElapsedCallback+0x86>
			downcounter--;
 8002a3a:	4b90      	ldr	r3, [pc, #576]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	4a8e      	ldr	r2, [pc, #568]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a42:	6013      	str	r3, [r2, #0]
			fsm++;

		}
	}

}
 8002a44:	e1bc      	b.n	8002dc0 <HAL_TIM_PeriodElapsedCallback+0x400>
			switch (fsm) {
 8002a46:	4b8e      	ldr	r3, [pc, #568]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f240 2255 	movw	r2, #597	; 0x255
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	f000 819b 	beq.w	8002d8a <HAL_TIM_PeriodElapsedCallback+0x3ca>
 8002a54:	f240 2255 	movw	r2, #597	; 0x255
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	f300 81a6 	bgt.w	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002a5e:	f240 2253 	movw	r2, #595	; 0x253
 8002a62:	4293      	cmp	r3, r2
 8002a64:	f000 8185 	beq.w	8002d72 <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8002a68:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8002a6c:	f280 819d 	bge.w	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002a70:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 8002a74:	f300 8199 	bgt.w	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002a78:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8002a7c:	da11      	bge.n	8002aa2 <HAL_TIM_PeriodElapsedCallback+0xe2>
 8002a7e:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002a82:	f000 812a 	beq.w	8002cda <HAL_TIM_PeriodElapsedCallback+0x31a>
 8002a86:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002a8a:	f300 818e 	bgt.w	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002a8e:	2be7      	cmp	r3, #231	; 0xe7
 8002a90:	f300 818b 	bgt.w	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002a94:	2bd7      	cmp	r3, #215	; 0xd7
 8002a96:	da2a      	bge.n	8002aee <HAL_TIM_PeriodElapsedCallback+0x12e>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	dc6d      	bgt.n	8002b78 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	da4a      	bge.n	8002b36 <HAL_TIM_PeriodElapsedCallback+0x176>
 8002aa0:	e183      	b.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002aa2:	f5a3 73d7 	sub.w	r3, r3, #430	; 0x1ae
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	2a00      	cmp	r2, #0
 8002ab4:	bf14      	ite	ne
 8002ab6:	2201      	movne	r2, #1
 8002ab8:	2200      	moveq	r2, #0
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	f040 8139 	bne.w	8002d34 <HAL_TIM_PeriodElapsedCallback+0x374>
 8002ac2:	f245 5255 	movw	r2, #21845	; 0x5555
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	2a00      	cmp	r2, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2201      	movne	r2, #1
 8002ace:	2200      	moveq	r2, #0
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	2a00      	cmp	r2, #0
 8002ad4:	f040 810d 	bne.w	8002cf2 <HAL_TIM_PeriodElapsedCallback+0x332>
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 812f 	bne.w	8002d4a <HAL_TIM_PeriodElapsedCallback+0x38a>
 8002aec:	e15d      	b.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002aee:	3bd7      	subs	r3, #215	; 0xd7
 8002af0:	2201      	movs	r2, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002afa:	401a      	ands	r2, r3
 8002afc:	2a00      	cmp	r2, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2201      	movne	r2, #1
 8002b02:	2200      	moveq	r2, #0
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	f040 80c8 	bne.w	8002c9c <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8002b0c:	f245 5255 	movw	r2, #21845	; 0x5555
 8002b10:	401a      	ands	r2, r3
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2201      	movne	r2, #1
 8002b18:	2200      	moveq	r2, #0
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	2a00      	cmp	r2, #0
 8002b1e:	d17a      	bne.n	8002c16 <HAL_TIM_PeriodElapsedCallback+0x256>
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 80bf 	bne.w	8002cb2 <HAL_TIM_PeriodElapsedCallback+0x2f2>
 8002b34:	e139      	b.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002b36:	461a      	mov	r2, r3
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4093      	lsls	r3, r2
 8002b3c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002b40:	401a      	ands	r2, r3
 8002b42:	2a00      	cmp	r2, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2201      	movne	r2, #1
 8002b48:	2200      	moveq	r2, #0
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d137      	bne.n	8002bc0 <HAL_TIM_PeriodElapsedCallback+0x200>
 8002b50:	f245 5255 	movw	r2, #21845	; 0x5555
 8002b54:	401a      	ands	r2, r3
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2201      	movne	r2, #1
 8002b5c:	2200      	moveq	r2, #0
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	2a00      	cmp	r2, #0
 8002b62:	d10c      	bne.n	8002b7e <HAL_TIM_PeriodElapsedCallback+0x1be>
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d12f      	bne.n	8002bd6 <HAL_TIM_PeriodElapsedCallback+0x216>
 8002b76:	e118      	b.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
 8002b78:	2ba5      	cmp	r3, #165	; 0xa5
 8002b7a:	d040      	beq.n	8002bfe <HAL_TIM_PeriodElapsedCallback+0x23e>
 8002b7c:	e115      	b.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x3ea>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2140      	movs	r1, #64	; 0x40
 8002b82:	4840      	ldr	r0, [pc, #256]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b84:	f001 fd4a 	bl	800461c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b8c:	483d      	ldr	r0, [pc, #244]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b8e:	f001 fd5d 	bl	800464c <HAL_GPIO_TogglePin>
				if (digits[cent][myIndex] == 1) {
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	493d      	ldr	r1, [pc, #244]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002b9c:	00d2      	lsls	r2, r2, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	4835      	ldr	r0, [pc, #212]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bae:	f001 fd35 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002bb2:	e100      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2180      	movs	r1, #128	; 0x80
 8002bb8:	4832      	ldr	r0, [pc, #200]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bba:	f001 fd2f 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002bbe:	e0fa      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				myIndex--;
 8002bc0:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	4a31      	ldr	r2, [pc, #196]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002bc8:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bce:	482d      	ldr	r0, [pc, #180]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bd0:	f001 fd3c 	bl	800464c <HAL_GPIO_TogglePin>
				break;
 8002bd4:	e0ef      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bda:	482a      	ldr	r0, [pc, #168]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bdc:	f001 fd36 	bl	800464c <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 8002be0:	2201      	movs	r2, #1
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	4827      	ldr	r0, [pc, #156]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002be6:	f001 fd19 	bl	800461c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 8002bea:	2201      	movs	r2, #1
 8002bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bf0:	4828      	ldr	r0, [pc, #160]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002bf2:	f001 fd13 	bl	800461c <HAL_GPIO_WritePin>
				myIndex = 7;
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
				break;
 8002bfc:	e0db      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c02:	4820      	ldr	r0, [pc, #128]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c04:	f001 fd22 	bl	800464c <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c0e:	4821      	ldr	r0, [pc, #132]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002c10:	f001 fd04 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002c14:	e0cf      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002c16:	2200      	movs	r2, #0
 8002c18:	2140      	movs	r1, #64	; 0x40
 8002c1a:	481a      	ldr	r0, [pc, #104]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c1c:	f001 fcfe 	bl	800461c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c24:	4817      	ldr	r0, [pc, #92]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c26:	f001 fd11 	bl	800464c <HAL_GPIO_TogglePin>
				if (digits[dez][myIndex] == 1) {
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4917      	ldr	r1, [pc, #92]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002c34:	00d2      	lsls	r2, r2, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x28c>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8002c40:	2201      	movs	r2, #1
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	480f      	ldr	r0, [pc, #60]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c46:	f001 fce9 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002c4a:	e0b4      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c52:	f001 fce3 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002c56:	e0ae      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	20000334 	.word	0x20000334
 8002c60:	20000364 	.word	0x20000364
 8002c64:	20000358 	.word	0x20000358
 8002c68:	2000035c 	.word	0x2000035c
 8002c6c:	20000360 	.word	0x20000360
 8002c70:	2000034c 	.word	0x2000034c
 8002c74:	20000350 	.word	0x20000350
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	20000348 	.word	0x20000348
 8002c80:	20000344 	.word	0x20000344
 8002c84:	40010c00 	.word	0x40010c00
 8002c88:	20000340 	.word	0x20000340
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000014 	.word	0x20000014
 8002c94:	40011000 	.word	0x40011000
 8002c98:	2000033c 	.word	0x2000033c
				myIndex--;
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002ca4:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002caa:	4848      	ldr	r0, [pc, #288]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002cac:	f001 fcce 	bl	800464c <HAL_GPIO_TogglePin>
				break;
 8002cb0:	e081      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				myIndex = 7;
 8002cb2:	4b45      	ldr	r3, [pc, #276]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cbc:	4843      	ldr	r0, [pc, #268]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002cbe:	f001 fcc5 	bl	800464c <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2140      	movs	r1, #64	; 0x40
 8002cc6:	4841      	ldr	r0, [pc, #260]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002cc8:	f001 fca8 	bl	800461c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 1);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cd2:	483f      	ldr	r0, [pc, #252]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002cd4:	f001 fca2 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002cd8:	e06d      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cde:	483b      	ldr	r0, [pc, #236]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002ce0:	f001 fcb4 	bl	800464c <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cea:	4839      	ldr	r0, [pc, #228]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002cec:	f001 fc96 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002cf0:	e061      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	4835      	ldr	r0, [pc, #212]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002cf8:	f001 fc90 	bl	800461c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d00:	4832      	ldr	r0, [pc, #200]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d02:	f001 fca3 	bl	800464c <HAL_GPIO_TogglePin>
				if (digits[unid][myIndex] == 1) {
 8002d06:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4932      	ldr	r1, [pc, #200]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002d10:	00d2      	lsls	r2, r2, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_TIM_PeriodElapsedCallback+0x368>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	482a      	ldr	r0, [pc, #168]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d22:	f001 fc7b 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002d26:	e046      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	4827      	ldr	r0, [pc, #156]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d2e:	f001 fc75 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002d32:	e040      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				myIndex--;
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002d3c:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d42:	4822      	ldr	r0, [pc, #136]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d44:	f001 fc82 	bl	800464c <HAL_GPIO_TogglePin>
				break;
 8002d48:	e035      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d4e:	481f      	ldr	r0, [pc, #124]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d50:	f001 fc7c 	bl	800464c <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 8002d54:	2201      	movs	r2, #1
 8002d56:	2140      	movs	r1, #64	; 0x40
 8002d58:	481c      	ldr	r0, [pc, #112]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d5a:	f001 fc5f 	bl	800461c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 1);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d64:	481a      	ldr	r0, [pc, #104]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002d66:	f001 fc59 	bl	800461c <HAL_GPIO_WritePin>
				myIndex = 7;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002d6c:	2207      	movs	r2, #7
 8002d6e:	601a      	str	r2, [r3, #0]
				break;
 8002d70:	e021      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d76:	4815      	ldr	r0, [pc, #84]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d78:	f001 fc68 	bl	800464c <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d82:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002d84:	f001 fc4a 	bl	800461c <HAL_GPIO_WritePin>
				break;
 8002d88:	e015      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002d8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d8e:	480f      	ldr	r0, [pc, #60]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d90:	f001 fc5c 	bl	800464c <HAL_GPIO_TogglePin>
				downcounter = 50;		//tempo morto de 1ms
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002d96:	2232      	movs	r2, #50	; 0x32
 8002d98:	601a      	str	r2, [r3, #0]
				fsm = -1;
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	601a      	str	r2, [r3, #0]
				myIndex = 7;
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
				break;
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);	//CLOCK
 8002daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dae:	4807      	ldr	r0, [pc, #28]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002db0:	f001 fc4c 	bl	800464c <HAL_GPIO_TogglePin>
				break;
 8002db4:	bf00      	nop
			fsm++;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	40010c00 	.word	0x40010c00
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	20000338 	.word	0x20000338
 8002dd8:	20000014 	.word	0x20000014
 8002ddc:	20000348 	.word	0x20000348
 8002de0:	20000344 	.word	0x20000344
 8002de4:	00000000 	.word	0x00000000

08002de8 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness) // 0~45 linearização do brilho
{
 8002de8:	b5b0      	push	{r4, r5, r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b2d      	cmp	r3, #45	; 0x2d
 8002df4:	dd01      	ble.n	8002dfa <Set_Brightness+0x12>
		brightness = 45;
 8002df6:	232d      	movs	r3, #45	; 0x2d
 8002df8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e05f      	b.n	8002ec0 <Set_Brightness+0xd8>
		LED_Mod[i][0] = LED_Data[i][0];
 8002e00:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <Set_Brightness+0xf0>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002e08:	4a34      	ldr	r2, [pc, #208]	; (8002edc <Set_Brightness+0xf4>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e04e      	b.n	8002eb4 <Set_Brightness+0xcc>
			float angle = 90 - brightness; // em graus
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd ff3f 	bl	8000ca0 <__aeabi_i2f>
 8002e22:	4603      	mov	r3, r0
 8002e24:	60fb      	str	r3, [r7, #12]
			angle = angle * PI / 180; //em radianos
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7fd faf6 	bl	8000418 <__aeabi_f2d>
 8002e2c:	a328      	add	r3, pc, #160	; (adr r3, 8002ed0 <Set_Brightness+0xe8>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f7fd fb49 	bl	80004c8 <__aeabi_dmul>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <Set_Brightness+0xf8>)
 8002e44:	f7fd fc6a 	bl	800071c <__aeabi_ddiv>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f7fd fe1c 	bl	8000a8c <__aeabi_d2f>
 8002e54:	4603      	mov	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8002e58:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <Set_Brightness+0xf0>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fac4 	bl	80003f4 <__aeabi_i2d>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	460d      	mov	r5, r1
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7fd fad1 	bl	8000418 <__aeabi_f2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f003 fb2f 	bl	80064e0 <tan>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4620      	mov	r0, r4
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7fd fc47 	bl	800071c <__aeabi_ddiv>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f7fd fdd9 	bl	8000a4c <__aeabi_d2uiz>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	b2d9      	uxtb	r1, r3
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <Set_Brightness+0xf4>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	460a      	mov	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	ddad      	ble.n	8002e16 <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b13      	cmp	r3, #19
 8002ec4:	dd9c      	ble.n	8002e00 <Set_Brightness+0x18>
		}
	}
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed0:	53c8d4f1 	.word	0x53c8d4f1
 8002ed4:	400921fb 	.word	0x400921fb
 8002ed8:	20000370 	.word	0x20000370
 8002edc:	200003c0 	.word	0x200003c0
 8002ee0:	40668000 	.word	0x40668000

08002ee4 <WS2512_Send>:

#endif

uint16_t pwmData[(24*MAX_LED+50)];

void WS2512_Send(void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
//	{
//		pwmData[indx] = 0;
//		indx++;
//	}

	for (int i = 0; i < MAX_LED; i++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	e036      	b.n	8002f62 <WS2512_Send+0x7e>
	{
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <WS2512_Send+0xcc>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	785b      	ldrb	r3, [r3, #1]
 8002efe:	041a      	lsls	r2, r3, #16
 8002f00:	492b      	ldr	r1, [pc, #172]	; (8002fb0 <WS2512_Send+0xcc>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	789b      	ldrb	r3, [r3, #2]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	4928      	ldr	r1, [pc, #160]	; (8002fb0 <WS2512_Send+0xcc>)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	78db      	ldrb	r3, [r3, #3]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	607b      	str	r3, [r7, #4]

		for (int i = 23; i >= 0; i--) {
 8002f1c:	2317      	movs	r3, #23
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e019      	b.n	8002f56 <WS2512_Send+0x72>
			if (color & (1 << i)) {
 8002f22:	2201      	movs	r2, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <WS2512_Send+0x5c>
				pwmData[indx] = 60;		// pulso alto, 2/3 de 90, aprox 68%
 8002f34:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <WS2512_Send+0xd0>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	213c      	movs	r1, #60	; 0x3c
 8002f3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002f3e:	e004      	b.n	8002f4a <WS2512_Send+0x66>
			}

			else
				pwmData[indx] = 30;	// pulso baixo, 1/3 de 90, aprox 32%
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <WS2512_Send+0xd0>)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	211e      	movs	r1, #30
 8002f46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	dae2      	bge.n	8002f22 <WS2512_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b13      	cmp	r3, #19
 8002f66:	ddc5      	ble.n	8002ef4 <WS2512_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++)//intervalor de tempo de 50us antes da próxima msg
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	e00a      	b.n	8002f84 <WS2512_Send+0xa0>
			{
		pwmData[indx] = 0;
 8002f6e:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <WS2512_Send+0xd0>)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2100      	movs	r1, #0
 8002f74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++)//intervalor de tempo de 50us antes da próxima msg
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3301      	adds	r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b31      	cmp	r3, #49	; 0x31
 8002f88:	ddf1      	ble.n	8002f6e <WS2512_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <WS2512_Send+0xd0>)
 8002f90:	2100      	movs	r1, #0
 8002f92:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <WS2512_Send+0xd4>)
 8002f94:	f002 f91a 	bl	80051cc <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8002f98:	bf00      	nop
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <WS2512_Send+0xd8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0fb      	beq.n	8002f9a <WS2512_Send+0xb6>
	};
	datasentflag = 0;
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <WS2512_Send+0xd8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200003c0 	.word	0x200003c0
 8002fb4:	20000414 	.word	0x20000414
 8002fb8:	20000210 	.word	0x20000210
 8002fbc:	20000410 	.word	0x20000410

08002fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_MspInit+0x40>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	4a0d      	ldr	r2, [pc, #52]	; (800300c <HAL_MspInit+0x40>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6193      	str	r3, [r2, #24]
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_MspInit+0x40>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_MspInit+0x40>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4a07      	ldr	r2, [pc, #28]	; (800300c <HAL_MspInit+0x40>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	61d3      	str	r3, [r2, #28]
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_MspInit+0x40>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000

08003010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 0318 	add.w	r3, r7, #24
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a33      	ldr	r2, [pc, #204]	; (80030f8 <HAL_ADC_MspInit+0xe8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d15f      	bne.n	80030f0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003030:	4b32      	ldr	r3, [pc, #200]	; (80030fc <HAL_ADC_MspInit+0xec>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a31      	ldr	r2, [pc, #196]	; (80030fc <HAL_ADC_MspInit+0xec>)
 8003036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_ADC_MspInit+0xec>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003048:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_ADC_MspInit+0xec>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <HAL_ADC_MspInit+0xec>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6193      	str	r3, [r2, #24]
 8003054:	4b29      	ldr	r3, [pc, #164]	; (80030fc <HAL_ADC_MspInit+0xec>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003060:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_ADC_MspInit+0xec>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_ADC_MspInit+0xec>)
 8003066:	f043 0308 	orr.w	r3, r3, #8
 800306a:	6193      	str	r3, [r2, #24]
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_ADC_MspInit+0xec>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003078:	2303      	movs	r3, #3
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800307c:	2303      	movs	r3, #3
 800307e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 0318 	add.w	r3, r7, #24
 8003084:	4619      	mov	r1, r3
 8003086:	481e      	ldr	r0, [pc, #120]	; (8003100 <HAL_ADC_MspInit+0xf0>)
 8003088:	f001 f944 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800308c:	2302      	movs	r3, #2
 800308e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003090:	2303      	movs	r3, #3
 8003092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	4619      	mov	r1, r3
 800309a:	481a      	ldr	r0, [pc, #104]	; (8003104 <HAL_ADC_MspInit+0xf4>)
 800309c:	f001 f93a 	bl	8004314 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030a2:	4a1a      	ldr	r2, [pc, #104]	; (800310c <HAL_ADC_MspInit+0xfc>)
 80030a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ac:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030ca:	2220      	movs	r2, #32
 80030cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030d4:	480c      	ldr	r0, [pc, #48]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030d6:	f000 feb7 	bl	8003e48 <HAL_DMA_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80030e0:	f7ff ff6e 	bl	8002fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030e8:	621a      	str	r2, [r3, #32]
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_ADC_MspInit+0xf8>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030f0:	bf00      	nop
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40012400 	.word	0x40012400
 80030fc:	40021000 	.word	0x40021000
 8003100:	40010800 	.word	0x40010800
 8003104:	40010c00 	.word	0x40010c00
 8003108:	200001cc 	.word	0x200001cc
 800310c:	40020008 	.word	0x40020008

08003110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a37      	ldr	r2, [pc, #220]	; (80031fc <HAL_TIM_Base_MspInit+0xec>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d134      	bne.n	800318c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	4a36      	ldr	r2, [pc, #216]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 8003128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800312c:	6193      	str	r3, [r2, #24]
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800313a:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 800313c:	4a32      	ldr	r2, [pc, #200]	; (8003208 <HAL_TIM_Base_MspInit+0xf8>)
 800313e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003140:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 8003142:	2210      	movs	r2, #16
 8003144:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003152:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 8003154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003158:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 800315c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003160:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003168:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800316e:	4825      	ldr	r0, [pc, #148]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 8003170:	f000 fe6a 	bl	8003e48 <HAL_DMA_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800317a:	f7ff ff21 	bl	8002fc0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a20      	ldr	r2, [pc, #128]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <HAL_TIM_Base_MspInit+0xf4>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800318a:	e032      	b.n	80031f2 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_TIM_Base_MspInit+0xfc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d114      	bne.n	80031c0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	61d3      	str	r3, [r2, #28]
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	201d      	movs	r0, #29
 80031b4:	f000 fe11 	bl	8003dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031b8:	201d      	movs	r0, #29
 80031ba:	f000 fe2a 	bl	8003e12 <HAL_NVIC_EnableIRQ>
}
 80031be:	e018      	b.n	80031f2 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM4)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a12      	ldr	r2, [pc, #72]	; (8003210 <HAL_TIM_Base_MspInit+0x100>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d113      	bne.n	80031f2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	61d3      	str	r3, [r2, #28]
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_TIM_Base_MspInit+0xf0>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	201e      	movs	r0, #30
 80031e8:	f000 fdf7 	bl	8003dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031ec:	201e      	movs	r0, #30
 80031ee:	f000 fe10 	bl	8003e12 <HAL_NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40021000 	.word	0x40021000
 8003204:	200002e8 	.word	0x200002e8
 8003208:	4002001c 	.word	0x4002001c
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800

08003214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <HAL_TIM_MspPostInit+0x5c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d118      	bne.n	8003266 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_TIM_MspPostInit+0x60>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <HAL_TIM_MspPostInit+0x60>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6193      	str	r3, [r2, #24]
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_TIM_MspPostInit+0x60>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800324c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	2302      	movs	r3, #2
 8003258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 0310 	add.w	r3, r7, #16
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <HAL_TIM_MspPostInit+0x64>)
 8003262:	f001 f857 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003266:	bf00      	nop
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40021000 	.word	0x40021000
 8003278:	40010800 	.word	0x40010800

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <HardFault_Handler+0x4>

0800328e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003292:	e7fe      	b.n	8003292 <MemManage_Handler+0x4>

08003294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <BusFault_Handler+0x4>

0800329a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800329e:	e7fe      	b.n	800329e <UsageFault_Handler+0x4>

080032a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c8:	f000 f8a4 	bl	8003414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032d4:	2001      	movs	r0, #1
 80032d6:	f001 f9d3 	bl	8004680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <DMA1_Channel1_IRQHandler+0x10>)
 80032e6:	f000 fee1 	bl	80040ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200001cc 	.word	0x200001cc

080032f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <DMA1_Channel2_IRQHandler+0x10>)
 80032fa:	f000 fed7 	bl	80040ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200002e8 	.word	0x200002e8

08003308 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <TIM3_IRQHandler+0x10>)
 800330e:	f002 f9c5 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000258 	.word	0x20000258

0800331c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <TIM4_IRQHandler+0x10>)
 8003322:	f002 f9bb 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200002a0 	.word	0x200002a0

08003330 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800333c:	f7ff fff8 	bl	8003330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003342:	490c      	ldr	r1, [pc, #48]	; (8003374 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003344:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003348:	e002      	b.n	8003350 <LoopCopyDataInit>

0800334a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800334c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334e:	3304      	adds	r3, #4

08003350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003354:	d3f9      	bcc.n	800334a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003358:	4c09      	ldr	r4, [pc, #36]	; (8003380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800335c:	e001      	b.n	8003362 <LoopFillZerobss>

0800335e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003360:	3204      	adds	r2, #4

08003362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003364:	d3fb      	bcc.n	800335e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003366:	f003 f897 	bl	8006498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800336a:	f7fd fced 	bl	8000d48 <main>
  bx lr
 800336e:	4770      	bx	lr
  ldr r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003374:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8003378:	080077b8 	.word	0x080077b8
  ldr r2, =_sbss
 800337c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8003380:	2000083c 	.word	0x2000083c

08003384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003384:	e7fe      	b.n	8003384 <ADC1_2_IRQHandler>
	...

08003388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_Init+0x28>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <HAL_Init+0x28>)
 8003392:	f043 0310 	orr.w	r3, r3, #16
 8003396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003398:	2003      	movs	r0, #3
 800339a:	f000 fd13 	bl	8003dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800339e:	200f      	movs	r0, #15
 80033a0:	f000 f808 	bl	80033b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033a4:	f7ff fe12 	bl	8002fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40022000 	.word	0x40022000

080033b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_InitTick+0x54>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_InitTick+0x58>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fd2b 	bl	8003e2e <HAL_SYSTICK_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e00e      	b.n	8003400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d80a      	bhi.n	80033fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e8:	2200      	movs	r2, #0
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	f000 fcf3 	bl	8003dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033f4:	4a06      	ldr	r2, [pc, #24]	; (8003410 <HAL_InitTick+0x5c>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000174 	.word	0x20000174
 800340c:	2000017c 	.word	0x2000017c
 8003410:	20000178 	.word	0x20000178

08003414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_IncTick+0x1c>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_IncTick+0x20>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4413      	add	r3, r2
 8003424:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_IncTick+0x20>)
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	2000017c 	.word	0x2000017c
 8003434:	20000838 	.word	0x20000838

08003438 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return uwTick;
 800343c:	4b02      	ldr	r3, [pc, #8]	; (8003448 <HAL_GetTick+0x10>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	20000838 	.word	0x20000838

0800344c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7ff fff0 	bl	8003438 <HAL_GetTick>
 8003458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d005      	beq.n	8003472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_Delay+0x44>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003472:	bf00      	nop
 8003474:	f7ff ffe0 	bl	8003438 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d8f7      	bhi.n	8003474 <HAL_Delay+0x28>
  {
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000017c 	.word	0x2000017c

08003494 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0be      	b.n	8003634 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fd9c 	bl	8003010 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 faff 	bl	8003adc <ADC_ConversionStop_Disable>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8099 	bne.w	8003622 <HAL_ADC_Init+0x18e>
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 8095 	bne.w	8003622 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003500:	f023 0302 	bic.w	r3, r3, #2
 8003504:	f043 0202 	orr.w	r2, r3, #2
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003514:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7b1b      	ldrb	r3, [r3, #12]
 800351a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800351c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4313      	orrs	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352c:	d003      	beq.n	8003536 <HAL_ADC_Init+0xa2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_ADC_Init+0xa8>
 8003536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800353a:	e000      	b.n	800353e <HAL_ADC_Init+0xaa>
 800353c:	2300      	movs	r3, #0
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7d1b      	ldrb	r3, [r3, #20]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d119      	bne.n	8003580 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7b1b      	ldrb	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d109      	bne.n	8003568 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	3b01      	subs	r3, #1
 800355a:	035a      	lsls	r2, r3, #13
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	e00b      	b.n	8003580 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	430a      	orrs	r2, r1
 8003592:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_ADC_Init+0x1a8>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b0:	d003      	beq.n	80035ba <HAL_ADC_Init+0x126>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d104      	bne.n	80035c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	3b01      	subs	r3, #1
 80035c0:	051b      	lsls	r3, r3, #20
 80035c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b18      	ldr	r3, [pc, #96]	; (8003640 <HAL_ADC_Init+0x1ac>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d10b      	bne.n	8003600 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	f043 0201 	orr.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035fe:	e018      	b.n	8003632 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	f023 0312 	bic.w	r3, r3, #18
 8003608:	f043 0210 	orr.w	r2, r3, #16
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f043 0201 	orr.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003620:	e007      	b.n	8003632 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	ffe1f7fd 	.word	0xffe1f7fd
 8003640:	ff1f0efe 	.word	0xff1f0efe

08003644 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a64      	ldr	r2, [pc, #400]	; (80037ec <HAL_ADC_Start_DMA+0x1a8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_ADC_Start_DMA+0x24>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a63      	ldr	r2, [pc, #396]	; (80037f0 <HAL_ADC_Start_DMA+0x1ac>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d106      	bne.n	8003676 <HAL_ADC_Start_DMA+0x32>
 8003668:	4b60      	ldr	r3, [pc, #384]	; (80037ec <HAL_ADC_Start_DMA+0x1a8>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 80b3 	bne.w	80037dc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_ADC_Start_DMA+0x40>
 8003680:	2302      	movs	r3, #2
 8003682:	e0ae      	b.n	80037e2 <HAL_ADC_Start_DMA+0x19e>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f9cb 	bl	8003a28 <ADC_Enable>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 809a 	bne.w	80037d2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a4e      	ldr	r2, [pc, #312]	; (80037f0 <HAL_ADC_Start_DMA+0x1ac>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d105      	bne.n	80036c8 <HAL_ADC_Start_DMA+0x84>
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_ADC_Start_DMA+0x1a8>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d115      	bne.n	80036f4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d026      	beq.n	8003730 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036f2:	e01d      	b.n	8003730 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a39      	ldr	r2, [pc, #228]	; (80037ec <HAL_ADC_Start_DMA+0x1a8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_ADC_Start_DMA+0xd0>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_ADC_Start_DMA+0x1ac>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10d      	bne.n	8003730 <HAL_ADC_Start_DMA+0xec>
 8003714:	4b35      	ldr	r3, [pc, #212]	; (80037ec <HAL_ADC_Start_DMA+0x1a8>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003728:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	f023 0206 	bic.w	r2, r3, #6
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
 8003748:	e002      	b.n	8003750 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <HAL_ADC_Start_DMA+0x1b0>)
 800375e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4a24      	ldr	r2, [pc, #144]	; (80037f8 <HAL_ADC_Start_DMA+0x1b4>)
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_ADC_Start_DMA+0x1b8>)
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0202 	mvn.w	r2, #2
 8003778:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003788:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a18      	ldr	r0, [r3, #32]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	334c      	adds	r3, #76	; 0x4c
 8003794:	4619      	mov	r1, r3
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f000 fbaf 	bl	8003efc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037ac:	d108      	bne.n	80037c0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80037bc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80037be:	e00f      	b.n	80037e0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80037ce:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80037d0:	e006      	b.n	80037e0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80037da:	e001      	b.n	80037e0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40012400 	.word	0x40012400
 80037f0:	40012800 	.word	0x40012800
 80037f4:	08003b5f 	.word	0x08003b5f
 80037f8:	08003bdb 	.word	0x08003bdb
 80037fc:	08003bf7 	.word	0x08003bf7

08003800 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
	...

08003838 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x20>
 8003854:	2302      	movs	r3, #2
 8003856:	e0dc      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x1da>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b06      	cmp	r3, #6
 8003866:	d81c      	bhi.n	80038a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	3b05      	subs	r3, #5
 800387a:	221f      	movs	r2, #31
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	4019      	ands	r1, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	3b05      	subs	r3, #5
 8003894:	fa00 f203 	lsl.w	r2, r0, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	635a      	str	r2, [r3, #52]	; 0x34
 80038a0:	e03c      	b.n	800391c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d81c      	bhi.n	80038e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	3b23      	subs	r3, #35	; 0x23
 80038bc:	221f      	movs	r2, #31
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	4019      	ands	r1, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	3b23      	subs	r3, #35	; 0x23
 80038d6:	fa00 f203 	lsl.w	r2, r0, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
 80038e2:	e01b      	b.n	800391c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	3b41      	subs	r3, #65	; 0x41
 80038f6:	221f      	movs	r2, #31
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	4019      	ands	r1, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	3b41      	subs	r3, #65	; 0x41
 8003910:	fa00 f203 	lsl.w	r2, r0, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b09      	cmp	r3, #9
 8003922:	d91c      	bls.n	800395e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68d9      	ldr	r1, [r3, #12]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	3b1e      	subs	r3, #30
 8003936:	2207      	movs	r2, #7
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	4019      	ands	r1, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6898      	ldr	r0, [r3, #8]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	3b1e      	subs	r3, #30
 8003950:	fa00 f203 	lsl.w	r2, r0, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]
 800395c:	e019      	b.n	8003992 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6919      	ldr	r1, [r3, #16]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4413      	add	r3, r2
 800396e:	2207      	movs	r2, #7
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	4019      	ands	r1, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6898      	ldr	r0, [r3, #8]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	fa00 f203 	lsl.w	r2, r0, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b10      	cmp	r3, #16
 8003998:	d003      	beq.n	80039a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800399e:	2b11      	cmp	r3, #17
 80039a0:	d132      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <HAL_ADC_ConfigChannel+0x1e4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d125      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d126      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d11a      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039d2:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_ADC_ConfigChannel+0x1e8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <HAL_ADC_ConfigChannel+0x1ec>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	0c9a      	lsrs	r2, r3, #18
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039e8:	e002      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f9      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x1b2>
 80039f6:	e007      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	40012400 	.word	0x40012400
 8003a20:	20000174 	.word	0x20000174
 8003a24:	431bde83 	.word	0x431bde83

08003a28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d040      	beq.n	8003ac8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a56:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <ADC_Enable+0xac>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ad8 <ADC_Enable+0xb0>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	0c9b      	lsrs	r3, r3, #18
 8003a62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a64:	e002      	b.n	8003a6c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f9      	bne.n	8003a66 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a72:	f7ff fce1 	bl	8003438 <HAL_GetTick>
 8003a76:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a78:	e01f      	b.n	8003aba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a7a:	f7ff fcdd 	bl	8003438 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d918      	bls.n	8003aba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d011      	beq.n	8003aba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	f043 0210 	orr.w	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e007      	b.n	8003aca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d1d8      	bne.n	8003a7a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000174 	.word	0x20000174
 8003ad8:	431bde83 	.word	0x431bde83

08003adc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d12e      	bne.n	8003b54 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b06:	f7ff fc97 	bl	8003438 <HAL_GetTick>
 8003b0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b0c:	e01b      	b.n	8003b46 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b0e:	f7ff fc93 	bl	8003438 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d914      	bls.n	8003b46 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10d      	bne.n	8003b46 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	f043 0210 	orr.w	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d0dc      	beq.n	8003b0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d127      	bne.n	8003bc8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b92:	d115      	bne.n	8003bc0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	f043 0201 	orr.w	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff fe1d 	bl	8003800 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003bc6:	e004      	b.n	8003bd2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff fe12 	bl	8003812 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	f043 0204 	orr.w	r2, r3, #4
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fe01 	bl	8003824 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5e:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	60d3      	str	r3, [r2, #12]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <__NVIC_GetPriorityGrouping+0x18>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 0307 	and.w	r3, r3, #7
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	db0b      	blt.n	8003cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <__NVIC_EnableIRQ+0x34>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	e000e100 	.word	0xe000e100

08003cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	; (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	; (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1c3 0307 	rsb	r3, r3, #7
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf28      	it	cs
 8003d3a:	2304      	movcs	r3, #4
 8003d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <NVIC_EncodePriority+0x30>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3b03      	subs	r3, #3
 8003d4a:	e000      	b.n	8003d4e <NVIC_EncodePriority+0x32>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4313      	orrs	r3, r2
         );
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d90:	d301      	bcc.n	8003d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00f      	b.n	8003db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <SysTick_Config+0x40>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9e:	210f      	movs	r1, #15
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f7ff ff90 	bl	8003cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <SysTick_Config+0x40>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <SysTick_Config+0x40>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010

08003dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff2d 	bl	8003c2c <__NVIC_SetPriorityGrouping>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dec:	f7ff ff42 	bl	8003c74 <__NVIC_GetPriorityGrouping>
 8003df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff90 	bl	8003d1c <NVIC_EncodePriority>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff5f 	bl	8003cc8 <__NVIC_SetPriority>
}
 8003e0a:	bf00      	nop
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff35 	bl	8003c90 <__NVIC_EnableIRQ>
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffa2 	bl	8003d80 <SysTick_Config>
 8003e3c:	4603      	mov	r3, r0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e043      	b.n	8003ee6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_DMA_Init+0xa8>)
 8003e66:	4413      	add	r3, r2
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <HAL_DMA_Init+0xac>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	009a      	lsls	r2, r3, #2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_DMA_Init+0xb0>)
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	bffdfff8 	.word	0xbffdfff8
 8003ef4:	cccccccd 	.word	0xcccccccd
 8003ef8:	40020000 	.word	0x40020000

08003efc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_DMA_Start_IT+0x20>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e04b      	b.n	8003fb4 <HAL_DMA_Start_IT+0xb8>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d13a      	bne.n	8003fa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f9af 	bl	80042b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 020e 	orr.w	r2, r2, #14
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e00f      	b.n	8003f94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0204 	bic.w	r2, r2, #4
 8003f82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 020a 	orr.w	r2, r2, #10
 8003f92:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e005      	b.n	8003fb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d005      	beq.n	8003fe0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
 8003fde:	e051      	b.n	8004084 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 020e 	bic.w	r2, r2, #14
 8003fee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_DMA_Abort_IT+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d029      	beq.n	800405e <HAL_DMA_Abort_IT+0xa2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	; (8004094 <HAL_DMA_Abort_IT+0xd8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <HAL_DMA_Abort_IT+0x9e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_DMA_Abort_IT+0xdc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01a      	beq.n	8004054 <HAL_DMA_Abort_IT+0x98>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1e      	ldr	r2, [pc, #120]	; (800409c <HAL_DMA_Abort_IT+0xe0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d012      	beq.n	800404e <HAL_DMA_Abort_IT+0x92>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_DMA_Abort_IT+0xe4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00a      	beq.n	8004048 <HAL_DMA_Abort_IT+0x8c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_DMA_Abort_IT+0xe8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d102      	bne.n	8004042 <HAL_DMA_Abort_IT+0x86>
 800403c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004040:	e00e      	b.n	8004060 <HAL_DMA_Abort_IT+0xa4>
 8004042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004046:	e00b      	b.n	8004060 <HAL_DMA_Abort_IT+0xa4>
 8004048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800404c:	e008      	b.n	8004060 <HAL_DMA_Abort_IT+0xa4>
 800404e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004052:	e005      	b.n	8004060 <HAL_DMA_Abort_IT+0xa4>
 8004054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004058:	e002      	b.n	8004060 <HAL_DMA_Abort_IT+0xa4>
 800405a:	2310      	movs	r3, #16
 800405c:	e000      	b.n	8004060 <HAL_DMA_Abort_IT+0xa4>
 800405e:	2301      	movs	r3, #1
 8004060:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HAL_DMA_Abort_IT+0xec>)
 8004062:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
    } 
  }
  return status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40020008 	.word	0x40020008
 8004094:	4002001c 	.word	0x4002001c
 8004098:	40020030 	.word	0x40020030
 800409c:	40020044 	.word	0x40020044
 80040a0:	40020058 	.word	0x40020058
 80040a4:	4002006c 	.word	0x4002006c
 80040a8:	40020000 	.word	0x40020000

080040ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	2204      	movs	r2, #4
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d04f      	beq.n	8004174 <HAL_DMA_IRQHandler+0xc8>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d04a      	beq.n	8004174 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0204 	bic.w	r2, r2, #4
 80040fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a66      	ldr	r2, [pc, #408]	; (800429c <HAL_DMA_IRQHandler+0x1f0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d029      	beq.n	800415a <HAL_DMA_IRQHandler+0xae>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a65      	ldr	r2, [pc, #404]	; (80042a0 <HAL_DMA_IRQHandler+0x1f4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d022      	beq.n	8004156 <HAL_DMA_IRQHandler+0xaa>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a63      	ldr	r2, [pc, #396]	; (80042a4 <HAL_DMA_IRQHandler+0x1f8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01a      	beq.n	8004150 <HAL_DMA_IRQHandler+0xa4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a62      	ldr	r2, [pc, #392]	; (80042a8 <HAL_DMA_IRQHandler+0x1fc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d012      	beq.n	800414a <HAL_DMA_IRQHandler+0x9e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a60      	ldr	r2, [pc, #384]	; (80042ac <HAL_DMA_IRQHandler+0x200>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00a      	beq.n	8004144 <HAL_DMA_IRQHandler+0x98>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5f      	ldr	r2, [pc, #380]	; (80042b0 <HAL_DMA_IRQHandler+0x204>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d102      	bne.n	800413e <HAL_DMA_IRQHandler+0x92>
 8004138:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800413c:	e00e      	b.n	800415c <HAL_DMA_IRQHandler+0xb0>
 800413e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004142:	e00b      	b.n	800415c <HAL_DMA_IRQHandler+0xb0>
 8004144:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004148:	e008      	b.n	800415c <HAL_DMA_IRQHandler+0xb0>
 800414a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800414e:	e005      	b.n	800415c <HAL_DMA_IRQHandler+0xb0>
 8004150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004154:	e002      	b.n	800415c <HAL_DMA_IRQHandler+0xb0>
 8004156:	2340      	movs	r3, #64	; 0x40
 8004158:	e000      	b.n	800415c <HAL_DMA_IRQHandler+0xb0>
 800415a:	2304      	movs	r3, #4
 800415c:	4a55      	ldr	r2, [pc, #340]	; (80042b4 <HAL_DMA_IRQHandler+0x208>)
 800415e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8094 	beq.w	8004292 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004172:	e08e      	b.n	8004292 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	2202      	movs	r2, #2
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d056      	beq.n	8004232 <HAL_DMA_IRQHandler+0x186>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d051      	beq.n	8004232 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 020a 	bic.w	r2, r2, #10
 80041aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a38      	ldr	r2, [pc, #224]	; (800429c <HAL_DMA_IRQHandler+0x1f0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d029      	beq.n	8004212 <HAL_DMA_IRQHandler+0x166>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a37      	ldr	r2, [pc, #220]	; (80042a0 <HAL_DMA_IRQHandler+0x1f4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d022      	beq.n	800420e <HAL_DMA_IRQHandler+0x162>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a35      	ldr	r2, [pc, #212]	; (80042a4 <HAL_DMA_IRQHandler+0x1f8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01a      	beq.n	8004208 <HAL_DMA_IRQHandler+0x15c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a34      	ldr	r2, [pc, #208]	; (80042a8 <HAL_DMA_IRQHandler+0x1fc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d012      	beq.n	8004202 <HAL_DMA_IRQHandler+0x156>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a32      	ldr	r2, [pc, #200]	; (80042ac <HAL_DMA_IRQHandler+0x200>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00a      	beq.n	80041fc <HAL_DMA_IRQHandler+0x150>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a31      	ldr	r2, [pc, #196]	; (80042b0 <HAL_DMA_IRQHandler+0x204>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d102      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x14a>
 80041f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041f4:	e00e      	b.n	8004214 <HAL_DMA_IRQHandler+0x168>
 80041f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fa:	e00b      	b.n	8004214 <HAL_DMA_IRQHandler+0x168>
 80041fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004200:	e008      	b.n	8004214 <HAL_DMA_IRQHandler+0x168>
 8004202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004206:	e005      	b.n	8004214 <HAL_DMA_IRQHandler+0x168>
 8004208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800420c:	e002      	b.n	8004214 <HAL_DMA_IRQHandler+0x168>
 800420e:	2320      	movs	r3, #32
 8004210:	e000      	b.n	8004214 <HAL_DMA_IRQHandler+0x168>
 8004212:	2302      	movs	r3, #2
 8004214:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_DMA_IRQHandler+0x208>)
 8004216:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d034      	beq.n	8004292 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004230:	e02f      	b.n	8004292 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2208      	movs	r2, #8
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d028      	beq.n	8004294 <HAL_DMA_IRQHandler+0x1e8>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d023      	beq.n	8004294 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 020e 	bic.w	r2, r2, #14
 800425a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	2101      	movs	r1, #1
 8004266:	fa01 f202 	lsl.w	r2, r1, r2
 800426a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
    }
  }
  return;
 8004292:	bf00      	nop
 8004294:	bf00      	nop
}
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40020008 	.word	0x40020008
 80042a0:	4002001c 	.word	0x4002001c
 80042a4:	40020030 	.word	0x40020030
 80042a8:	40020044 	.word	0x40020044
 80042ac:	40020058 	.word	0x40020058
 80042b0:	4002006c 	.word	0x4002006c
 80042b4:	40020000 	.word	0x40020000

080042b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	2101      	movs	r1, #1
 80042d0:	fa01 f202 	lsl.w	r2, r1, r2
 80042d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d108      	bne.n	80042f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042f6:	e007      	b.n	8004308 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	60da      	str	r2, [r3, #12]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr
	...

08004314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004314:	b480      	push	{r7}
 8004316:	b08b      	sub	sp, #44	; 0x2c
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004322:	2300      	movs	r3, #0
 8004324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004326:	e169      	b.n	80045fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004328:	2201      	movs	r2, #1
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	429a      	cmp	r2, r3
 8004342:	f040 8158 	bne.w	80045f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4a9a      	ldr	r2, [pc, #616]	; (80045b4 <HAL_GPIO_Init+0x2a0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d05e      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 8004350:	4a98      	ldr	r2, [pc, #608]	; (80045b4 <HAL_GPIO_Init+0x2a0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d875      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 8004356:	4a98      	ldr	r2, [pc, #608]	; (80045b8 <HAL_GPIO_Init+0x2a4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d058      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 800435c:	4a96      	ldr	r2, [pc, #600]	; (80045b8 <HAL_GPIO_Init+0x2a4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d86f      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 8004362:	4a96      	ldr	r2, [pc, #600]	; (80045bc <HAL_GPIO_Init+0x2a8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d052      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 8004368:	4a94      	ldr	r2, [pc, #592]	; (80045bc <HAL_GPIO_Init+0x2a8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d869      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 800436e:	4a94      	ldr	r2, [pc, #592]	; (80045c0 <HAL_GPIO_Init+0x2ac>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d04c      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 8004374:	4a92      	ldr	r2, [pc, #584]	; (80045c0 <HAL_GPIO_Init+0x2ac>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d863      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 800437a:	4a92      	ldr	r2, [pc, #584]	; (80045c4 <HAL_GPIO_Init+0x2b0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d046      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 8004380:	4a90      	ldr	r2, [pc, #576]	; (80045c4 <HAL_GPIO_Init+0x2b0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d85d      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 8004386:	2b12      	cmp	r3, #18
 8004388:	d82a      	bhi.n	80043e0 <HAL_GPIO_Init+0xcc>
 800438a:	2b12      	cmp	r3, #18
 800438c:	d859      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <HAL_GPIO_Init+0x80>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	0800440f 	.word	0x0800440f
 8004398:	080043e9 	.word	0x080043e9
 800439c:	080043fb 	.word	0x080043fb
 80043a0:	0800443d 	.word	0x0800443d
 80043a4:	08004443 	.word	0x08004443
 80043a8:	08004443 	.word	0x08004443
 80043ac:	08004443 	.word	0x08004443
 80043b0:	08004443 	.word	0x08004443
 80043b4:	08004443 	.word	0x08004443
 80043b8:	08004443 	.word	0x08004443
 80043bc:	08004443 	.word	0x08004443
 80043c0:	08004443 	.word	0x08004443
 80043c4:	08004443 	.word	0x08004443
 80043c8:	08004443 	.word	0x08004443
 80043cc:	08004443 	.word	0x08004443
 80043d0:	08004443 	.word	0x08004443
 80043d4:	08004443 	.word	0x08004443
 80043d8:	080043f1 	.word	0x080043f1
 80043dc:	08004405 	.word	0x08004405
 80043e0:	4a79      	ldr	r2, [pc, #484]	; (80045c8 <HAL_GPIO_Init+0x2b4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043e6:	e02c      	b.n	8004442 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	623b      	str	r3, [r7, #32]
          break;
 80043ee:	e029      	b.n	8004444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	3304      	adds	r3, #4
 80043f6:	623b      	str	r3, [r7, #32]
          break;
 80043f8:	e024      	b.n	8004444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	3308      	adds	r3, #8
 8004400:	623b      	str	r3, [r7, #32]
          break;
 8004402:	e01f      	b.n	8004444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	330c      	adds	r3, #12
 800440a:	623b      	str	r3, [r7, #32]
          break;
 800440c:	e01a      	b.n	8004444 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004416:	2304      	movs	r3, #4
 8004418:	623b      	str	r3, [r7, #32]
          break;
 800441a:	e013      	b.n	8004444 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004424:	2308      	movs	r3, #8
 8004426:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	611a      	str	r2, [r3, #16]
          break;
 800442e:	e009      	b.n	8004444 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004430:	2308      	movs	r3, #8
 8004432:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	615a      	str	r2, [r3, #20]
          break;
 800443a:	e003      	b.n	8004444 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
          break;
 8004440:	e000      	b.n	8004444 <HAL_GPIO_Init+0x130>
          break;
 8004442:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2bff      	cmp	r3, #255	; 0xff
 8004448:	d801      	bhi.n	800444e <HAL_GPIO_Init+0x13a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	e001      	b.n	8004452 <HAL_GPIO_Init+0x13e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2bff      	cmp	r3, #255	; 0xff
 8004458:	d802      	bhi.n	8004460 <HAL_GPIO_Init+0x14c>
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	e002      	b.n	8004466 <HAL_GPIO_Init+0x152>
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	3b08      	subs	r3, #8
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	210f      	movs	r1, #15
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	401a      	ands	r2, r3
 8004478:	6a39      	ldr	r1, [r7, #32]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	431a      	orrs	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80b1 	beq.w	80045f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004494:	4b4d      	ldr	r3, [pc, #308]	; (80045cc <HAL_GPIO_Init+0x2b8>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4a4c      	ldr	r2, [pc, #304]	; (80045cc <HAL_GPIO_Init+0x2b8>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6193      	str	r3, [r2, #24]
 80044a0:	4b4a      	ldr	r3, [pc, #296]	; (80045cc <HAL_GPIO_Init+0x2b8>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044ac:	4a48      	ldr	r2, [pc, #288]	; (80045d0 <HAL_GPIO_Init+0x2bc>)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	3302      	adds	r3, #2
 80044b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a40      	ldr	r2, [pc, #256]	; (80045d4 <HAL_GPIO_Init+0x2c0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_GPIO_Init+0x1ec>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3f      	ldr	r2, [pc, #252]	; (80045d8 <HAL_GPIO_Init+0x2c4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00d      	beq.n	80044fc <HAL_GPIO_Init+0x1e8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3e      	ldr	r2, [pc, #248]	; (80045dc <HAL_GPIO_Init+0x2c8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <HAL_GPIO_Init+0x1e4>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3d      	ldr	r2, [pc, #244]	; (80045e0 <HAL_GPIO_Init+0x2cc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_GPIO_Init+0x1e0>
 80044f0:	2303      	movs	r3, #3
 80044f2:	e006      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044f4:	2304      	movs	r3, #4
 80044f6:	e004      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e002      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 8004500:	2300      	movs	r3, #0
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	f002 0203 	and.w	r2, r2, #3
 8004508:	0092      	lsls	r2, r2, #2
 800450a:	4093      	lsls	r3, r2
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004512:	492f      	ldr	r1, [pc, #188]	; (80045d0 <HAL_GPIO_Init+0x2bc>)
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	3302      	adds	r3, #2
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d006      	beq.n	800453a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800452c:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	492c      	ldr	r1, [pc, #176]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]
 8004538:	e006      	b.n	8004548 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800453a:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	43db      	mvns	r3, r3
 8004542:	4928      	ldr	r1, [pc, #160]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004544:	4013      	ands	r3, r2
 8004546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004554:	4b23      	ldr	r3, [pc, #140]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	4922      	ldr	r1, [pc, #136]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	4313      	orrs	r3, r2
 800455e:	60cb      	str	r3, [r1, #12]
 8004560:	e006      	b.n	8004570 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	43db      	mvns	r3, r3
 800456a:	491e      	ldr	r1, [pc, #120]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800456c:	4013      	ands	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d006      	beq.n	800458a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	4918      	ldr	r1, [pc, #96]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
 8004588:	e006      	b.n	8004598 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	43db      	mvns	r3, r3
 8004592:	4914      	ldr	r1, [pc, #80]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004594:	4013      	ands	r3, r2
 8004596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d021      	beq.n	80045e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	490e      	ldr	r1, [pc, #56]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]
 80045b0:	e021      	b.n	80045f6 <HAL_GPIO_Init+0x2e2>
 80045b2:	bf00      	nop
 80045b4:	10320000 	.word	0x10320000
 80045b8:	10310000 	.word	0x10310000
 80045bc:	10220000 	.word	0x10220000
 80045c0:	10210000 	.word	0x10210000
 80045c4:	10120000 	.word	0x10120000
 80045c8:	10110000 	.word	0x10110000
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40010800 	.word	0x40010800
 80045d8:	40010c00 	.word	0x40010c00
 80045dc:	40011000 	.word	0x40011000
 80045e0:	40011400 	.word	0x40011400
 80045e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_GPIO_Init+0x304>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	4909      	ldr	r1, [pc, #36]	; (8004618 <HAL_GPIO_Init+0x304>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	3301      	adds	r3, #1
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	f47f ae8e 	bne.w	8004328 <HAL_GPIO_Init+0x14>
  }
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	372c      	adds	r7, #44	; 0x2c
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr
 8004618:	40010400 	.word	0x40010400

0800461c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
 8004628:	4613      	mov	r3, r2
 800462a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800462c:	787b      	ldrb	r3, [r7, #1]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004632:	887a      	ldrh	r2, [r7, #2]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004638:	e003      	b.n	8004642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	041a      	lsls	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr

0800464c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4013      	ands	r3, r2
 8004664:	041a      	lsls	r2, r3, #16
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	43d9      	mvns	r1, r3
 800466a:	887b      	ldrh	r3, [r7, #2]
 800466c:	400b      	ands	r3, r1
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	611a      	str	r2, [r3, #16]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
	...

08004680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004696:	4a05      	ldr	r2, [pc, #20]	; (80046ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fc fe40 	bl	8001324 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40010400 	.word	0x40010400

080046b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e272      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8087 	beq.w	80047de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d0:	4b92      	ldr	r3, [pc, #584]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d00c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046dc:	4b8f      	ldr	r3, [pc, #572]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d112      	bne.n	800470e <HAL_RCC_OscConfig+0x5e>
 80046e8:	4b8c      	ldr	r3, [pc, #560]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f4:	d10b      	bne.n	800470e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f6:	4b89      	ldr	r3, [pc, #548]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d06c      	beq.n	80047dc <HAL_RCC_OscConfig+0x12c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d168      	bne.n	80047dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e24c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x76>
 8004718:	4b80      	ldr	r3, [pc, #512]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a7f      	ldr	r2, [pc, #508]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e02e      	b.n	8004784 <HAL_RCC_OscConfig+0xd4>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x98>
 800472e:	4b7b      	ldr	r3, [pc, #492]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7a      	ldr	r2, [pc, #488]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b78      	ldr	r3, [pc, #480]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a77      	ldr	r2, [pc, #476]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0xd4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0xbc>
 8004752:	4b72      	ldr	r3, [pc, #456]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a71      	ldr	r2, [pc, #452]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b6f      	ldr	r3, [pc, #444]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6e      	ldr	r2, [pc, #440]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0xd4>
 800476c:	4b6b      	ldr	r3, [pc, #428]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a6a      	ldr	r2, [pc, #424]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b68      	ldr	r3, [pc, #416]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a67      	ldr	r2, [pc, #412]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fe fe54 	bl	8003438 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7fe fe50 	bl	8003438 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	; 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e200      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b5d      	ldr	r3, [pc, #372]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xe4>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fe fe40 	bl	8003438 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047bc:	f7fe fe3c 	bl	8003438 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	; 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1ec      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x10c>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d063      	beq.n	80048b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ea:	4b4c      	ldr	r3, [pc, #304]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047f6:	4b49      	ldr	r3, [pc, #292]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d11c      	bne.n	800483c <HAL_RCC_OscConfig+0x18c>
 8004802:	4b46      	ldr	r3, [pc, #280]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d116      	bne.n	800483c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	4b43      	ldr	r3, [pc, #268]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_RCC_OscConfig+0x176>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e1c0      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004826:	4b3d      	ldr	r3, [pc, #244]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4939      	ldr	r1, [pc, #228]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	e03a      	b.n	80048b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004844:	4b36      	ldr	r3, [pc, #216]	; (8004920 <HAL_RCC_OscConfig+0x270>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fe fdf5 	bl	8003438 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fe fdf1 	bl	8003438 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1a1      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b2a      	ldr	r3, [pc, #168]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4927      	ldr	r1, [pc, #156]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
 8004884:	e015      	b.n	80048b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004886:	4b26      	ldr	r3, [pc, #152]	; (8004920 <HAL_RCC_OscConfig+0x270>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fe fdd4 	bl	8003438 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004894:	f7fe fdd0 	bl	8003438 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e180      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d03a      	beq.n	8004934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d019      	beq.n	80048fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c6:	4b17      	ldr	r3, [pc, #92]	; (8004924 <HAL_RCC_OscConfig+0x274>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048cc:	f7fe fdb4 	bl	8003438 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d4:	f7fe fdb0 	bl	8003438 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e160      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <HAL_RCC_OscConfig+0x26c>)
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f000 fa9c 	bl	8004e30 <RCC_Delay>
 80048f8:	e01c      	b.n	8004934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_RCC_OscConfig+0x274>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004900:	f7fe fd9a 	bl	8003438 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004906:	e00f      	b.n	8004928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004908:	f7fe fd96 	bl	8003438 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d908      	bls.n	8004928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e146      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	42420000 	.word	0x42420000
 8004924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b92      	ldr	r3, [pc, #584]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e9      	bne.n	8004908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a6 	beq.w	8004a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004946:	4b8b      	ldr	r3, [pc, #556]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4a87      	ldr	r2, [pc, #540]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495c:	61d3      	str	r3, [r2, #28]
 800495e:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496a:	2301      	movs	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496e:	4b82      	ldr	r3, [pc, #520]	; (8004b78 <HAL_RCC_OscConfig+0x4c8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d118      	bne.n	80049ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497a:	4b7f      	ldr	r3, [pc, #508]	; (8004b78 <HAL_RCC_OscConfig+0x4c8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a7e      	ldr	r2, [pc, #504]	; (8004b78 <HAL_RCC_OscConfig+0x4c8>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004986:	f7fe fd57 	bl	8003438 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fe fd53 	bl	8003438 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	; 0x64
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e103      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	4b75      	ldr	r3, [pc, #468]	; (8004b78 <HAL_RCC_OscConfig+0x4c8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x312>
 80049b4:	4b6f      	ldr	r3, [pc, #444]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	4a6e      	ldr	r2, [pc, #440]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	6213      	str	r3, [r2, #32]
 80049c0:	e02d      	b.n	8004a1e <HAL_RCC_OscConfig+0x36e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x334>
 80049ca:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4a69      	ldr	r2, [pc, #420]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	6213      	str	r3, [r2, #32]
 80049d6:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4a66      	ldr	r2, [pc, #408]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	6213      	str	r3, [r2, #32]
 80049e2:	e01c      	b.n	8004a1e <HAL_RCC_OscConfig+0x36e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d10c      	bne.n	8004a06 <HAL_RCC_OscConfig+0x356>
 80049ec:	4b61      	ldr	r3, [pc, #388]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4a60      	ldr	r2, [pc, #384]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	f043 0304 	orr.w	r3, r3, #4
 80049f6:	6213      	str	r3, [r2, #32]
 80049f8:	4b5e      	ldr	r3, [pc, #376]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6213      	str	r3, [r2, #32]
 8004a04:	e00b      	b.n	8004a1e <HAL_RCC_OscConfig+0x36e>
 8004a06:	4b5b      	ldr	r3, [pc, #364]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	4a5a      	ldr	r2, [pc, #360]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	6213      	str	r3, [r2, #32]
 8004a12:	4b58      	ldr	r3, [pc, #352]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	4a57      	ldr	r2, [pc, #348]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a18:	f023 0304 	bic.w	r3, r3, #4
 8004a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d015      	beq.n	8004a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a26:	f7fe fd07 	bl	8003438 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fe fd03 	bl	8003438 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e0b1      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a44:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ee      	beq.n	8004a2e <HAL_RCC_OscConfig+0x37e>
 8004a50:	e014      	b.n	8004a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a52:	f7fe fcf1 	bl	8003438 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a58:	e00a      	b.n	8004a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fe fced 	bl	8003438 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e09b      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a70:	4b40      	ldr	r3, [pc, #256]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ee      	bne.n	8004a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d105      	bne.n	8004a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a82:	4b3c      	ldr	r3, [pc, #240]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4a3b      	ldr	r2, [pc, #236]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8087 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a98:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d061      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d146      	bne.n	8004b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aac:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <HAL_RCC_OscConfig+0x4cc>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fe fcc1 	bl	8003438 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fe fcbd 	bl	8003438 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e06d      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d108      	bne.n	8004af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4921      	ldr	r1, [pc, #132]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af4:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a19      	ldr	r1, [r3, #32]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	430b      	orrs	r3, r1
 8004b06:	491b      	ldr	r1, [pc, #108]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <HAL_RCC_OscConfig+0x4cc>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fe fc91 	bl	8003438 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fe fc8d 	bl	8003438 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e03d      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x46a>
 8004b38:	e035      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <HAL_RCC_OscConfig+0x4cc>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fe fc7a 	bl	8003438 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fe fc76 	bl	8003438 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e026      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x498>
 8004b66:	e01e      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e019      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_OscConfig+0x500>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d106      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40021000 	.word	0x40021000

08004bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0d0      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b6a      	ldr	r3, [pc, #424]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d910      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b67      	ldr	r3, [pc, #412]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	4965      	ldr	r1, [pc, #404]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b63      	ldr	r3, [pc, #396]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c10:	4b59      	ldr	r3, [pc, #356]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a58      	ldr	r2, [pc, #352]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c28:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b50      	ldr	r3, [pc, #320]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	494d      	ldr	r1, [pc, #308]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d040      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b47      	ldr	r3, [pc, #284]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d115      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c72:	4b41      	ldr	r3, [pc, #260]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e073      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c82:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e06b      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c92:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f023 0203 	bic.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4936      	ldr	r1, [pc, #216]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca4:	f7fe fbc8 	bl	8003438 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fe fbc4 	bl	8003438 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e053      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 020c 	and.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d1eb      	bne.n	8004cac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d210      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 0207 	bic.w	r2, r3, #7
 8004cea:	4922      	ldr	r1, [pc, #136]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4916      	ldr	r1, [pc, #88]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	490e      	ldr	r1, [pc, #56]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d42:	f000 f821 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	490a      	ldr	r1, [pc, #40]	; (8004d7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d54:	5ccb      	ldrb	r3, [r1, r3]
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_RCC_ClockConfig+0x1cc>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCC_ClockConfig+0x1d0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fb26 	bl	80033b4 <HAL_InitTick>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40022000 	.word	0x40022000
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	080075b0 	.word	0x080075b0
 8004d80:	20000174 	.word	0x20000174
 8004d84:	20000178 	.word	0x20000178

08004d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004da2:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d002      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x30>
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x36>
 8004db6:	e027      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004db8:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dba:	613b      	str	r3, [r7, #16]
      break;
 8004dbc:	e027      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	0c9b      	lsrs	r3, r3, #18
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004dc8:	5cd3      	ldrb	r3, [r2, r3]
 8004dca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	0c5b      	lsrs	r3, r3, #17
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	4a11      	ldr	r2, [pc, #68]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dea:	fb03 f202 	mul.w	r2, r3, r2
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e004      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004dfc:	fb02 f303 	mul.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	613b      	str	r3, [r7, #16]
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e0a:	613b      	str	r3, [r7, #16]
      break;
 8004e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0e:	693b      	ldr	r3, [r7, #16]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	007a1200 	.word	0x007a1200
 8004e24:	080075c0 	.word	0x080075c0
 8004e28:	080075d0 	.word	0x080075d0
 8004e2c:	003d0900 	.word	0x003d0900

08004e30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <RCC_Delay+0x34>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <RCC_Delay+0x38>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	0a5b      	lsrs	r3, r3, #9
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e4c:	bf00      	nop
  }
  while (Delay --);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1e5a      	subs	r2, r3, #1
 8004e52:	60fa      	str	r2, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f9      	bne.n	8004e4c <RCC_Delay+0x1c>
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	20000174 	.word	0x20000174
 8004e68:	10624dd3 	.word	0x10624dd3

08004e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d07d      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8c:	4b4f      	ldr	r3, [pc, #316]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10d      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e98:	4b4c      	ldr	r3, [pc, #304]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4a4b      	ldr	r2, [pc, #300]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	61d3      	str	r3, [r2, #28]
 8004ea4:	4b49      	ldr	r3, [pc, #292]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb4:	4b46      	ldr	r3, [pc, #280]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d118      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec0:	4b43      	ldr	r3, [pc, #268]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a42      	ldr	r2, [pc, #264]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ecc:	f7fe fab4 	bl	8003438 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed4:	f7fe fab0 	bl	8003438 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e06d      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee6:	4b3a      	ldr	r3, [pc, #232]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d02e      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d027      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f20:	4b2c      	ldr	r3, [pc, #176]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f26:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d014      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fe fa7f 	bl	8003438 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	e00a      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fe fa7b 	bl	8003438 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e036      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ee      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4917      	ldr	r1, [pc, #92]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d105      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f90:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	490b      	ldr	r1, [pc, #44]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4904      	ldr	r1, [pc, #16]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	42420440 	.word	0x42420440

08004fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e041      	b.n	800506e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fe f886 	bl	8003110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fed0 	bl	8005dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e03a      	b.n	8005106 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a18      	ldr	r2, [pc, #96]	; (8005110 <HAL_TIM_Base_Start_IT+0x98>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00e      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0x58>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d009      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0x58>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <HAL_TIM_Base_Start_IT+0x9c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0x58>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a13      	ldr	r2, [pc, #76]	; (8005118 <HAL_TIM_Base_Start_IT+0xa0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d111      	bne.n	80050f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b06      	cmp	r3, #6
 80050e0:	d010      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f2:	e007      	b.n	8005104 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800

0800511c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e041      	b.n	80051b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f839 	bl	80051ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 fe2e 	bl	8005dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	e022      	b.n	800523e <HAL_TIM_PWM_Start_DMA+0x72>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d109      	bne.n	8005212 <HAL_TIM_PWM_Start_DMA+0x46>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e015      	b.n	800523e <HAL_TIM_PWM_Start_DMA+0x72>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d109      	bne.n	800522c <HAL_TIM_PWM_Start_DMA+0x60>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	e008      	b.n	800523e <HAL_TIM_PWM_Start_DMA+0x72>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
 8005244:	e153      	b.n	80054ee <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <HAL_TIM_PWM_Start_DMA+0x94>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e022      	b.n	80052a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b04      	cmp	r3, #4
 8005264:	d109      	bne.n	800527a <HAL_TIM_PWM_Start_DMA+0xae>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b01      	cmp	r3, #1
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e015      	b.n	80052a6 <HAL_TIM_PWM_Start_DMA+0xda>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d109      	bne.n	8005294 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e008      	b.n	80052a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d024      	beq.n	80052f4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_TIM_PWM_Start_DMA+0xea>
 80052b0:	887b      	ldrh	r3, [r7, #2]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e119      	b.n	80054ee <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start_DMA+0xfe>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c8:	e016      	b.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start_DMA+0x10e>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d8:	e00e      	b.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start_DMA+0x11e>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e8:	e006      	b.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f2:	e001      	b.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0fa      	b.n	80054ee <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	f200 80ae 	bhi.w	800545c <HAL_TIM_PWM_Start_DMA+0x290>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	0800533d 	.word	0x0800533d
 800530c:	0800545d 	.word	0x0800545d
 8005310:	0800545d 	.word	0x0800545d
 8005314:	0800545d 	.word	0x0800545d
 8005318:	08005385 	.word	0x08005385
 800531c:	0800545d 	.word	0x0800545d
 8005320:	0800545d 	.word	0x0800545d
 8005324:	0800545d 	.word	0x0800545d
 8005328:	080053cd 	.word	0x080053cd
 800532c:	0800545d 	.word	0x0800545d
 8005330:	0800545d 	.word	0x0800545d
 8005334:	0800545d 	.word	0x0800545d
 8005338:	08005415 	.word	0x08005415
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	4a6d      	ldr	r2, [pc, #436]	; (80054f8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005342:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	4a6c      	ldr	r2, [pc, #432]	; (80054fc <HAL_TIM_PWM_Start_DMA+0x330>)
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	4a6b      	ldr	r2, [pc, #428]	; (8005500 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005352:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3334      	adds	r3, #52	; 0x34
 8005360:	461a      	mov	r2, r3
 8005362:	887b      	ldrh	r3, [r7, #2]
 8005364:	f7fe fdca 	bl	8003efc <HAL_DMA_Start_IT>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e0bd      	b.n	80054ee <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005380:	60da      	str	r2, [r3, #12]
      break;
 8005382:	e06e      	b.n	8005462 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	4a5b      	ldr	r2, [pc, #364]	; (80054f8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	4a5a      	ldr	r2, [pc, #360]	; (80054fc <HAL_TIM_PWM_Start_DMA+0x330>)
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	4a59      	ldr	r2, [pc, #356]	; (8005500 <HAL_TIM_PWM_Start_DMA+0x334>)
 800539a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3338      	adds	r3, #56	; 0x38
 80053a8:	461a      	mov	r2, r3
 80053aa:	887b      	ldrh	r3, [r7, #2]
 80053ac:	f7fe fda6 	bl	8003efc <HAL_DMA_Start_IT>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e099      	b.n	80054ee <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053c8:	60da      	str	r2, [r3, #12]
      break;
 80053ca:	e04a      	b.n	8005462 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a49      	ldr	r2, [pc, #292]	; (80054f8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a48      	ldr	r2, [pc, #288]	; (80054fc <HAL_TIM_PWM_Start_DMA+0x330>)
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	4a47      	ldr	r2, [pc, #284]	; (8005500 <HAL_TIM_PWM_Start_DMA+0x334>)
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	333c      	adds	r3, #60	; 0x3c
 80053f0:	461a      	mov	r2, r3
 80053f2:	887b      	ldrh	r3, [r7, #2]
 80053f4:	f7fe fd82 	bl	8003efc <HAL_DMA_Start_IT>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e075      	b.n	80054ee <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005410:	60da      	str	r2, [r3, #12]
      break;
 8005412:	e026      	b.n	8005462 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	4a37      	ldr	r2, [pc, #220]	; (80054f8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800541a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	4a36      	ldr	r2, [pc, #216]	; (80054fc <HAL_TIM_PWM_Start_DMA+0x330>)
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	4a35      	ldr	r2, [pc, #212]	; (8005500 <HAL_TIM_PWM_Start_DMA+0x334>)
 800542a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3340      	adds	r3, #64	; 0x40
 8005438:	461a      	mov	r2, r3
 800543a:	887b      	ldrh	r3, [r7, #2]
 800543c:	f7fe fd5e 	bl	8003efc <HAL_DMA_Start_IT>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e051      	b.n	80054ee <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005458:	60da      	str	r2, [r3, #12]
      break;
 800545a:	e002      	b.n	8005462 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	75fb      	strb	r3, [r7, #23]
      break;
 8005460:	bf00      	nop
  }

  if (status == HAL_OK)
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d141      	bne.n	80054ec <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2201      	movs	r2, #1
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	4618      	mov	r0, r3
 8005472:	f000 ff23 	bl	80062bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a22      	ldr	r2, [pc, #136]	; (8005504 <HAL_TIM_PWM_Start_DMA+0x338>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d107      	bne.n	8005490 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800548e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00e      	beq.n	80054b8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a2:	d009      	beq.n	80054b8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a16      	ldr	r2, [pc, #88]	; (800550c <HAL_TIM_PWM_Start_DMA+0x340>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d111      	bne.n	80054dc <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d010      	beq.n	80054ec <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	e007      	b.n	80054ec <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	08005cab 	.word	0x08005cab
 80054fc:	08005d53 	.word	0x08005d53
 8005500:	08005c19 	.word	0x08005c19
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800

08005510 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b0c      	cmp	r3, #12
 8005522:	d855      	bhi.n	80055d0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	08005561 	.word	0x08005561
 8005530:	080055d1 	.word	0x080055d1
 8005534:	080055d1 	.word	0x080055d1
 8005538:	080055d1 	.word	0x080055d1
 800553c:	0800557d 	.word	0x0800557d
 8005540:	080055d1 	.word	0x080055d1
 8005544:	080055d1 	.word	0x080055d1
 8005548:	080055d1 	.word	0x080055d1
 800554c:	08005599 	.word	0x08005599
 8005550:	080055d1 	.word	0x080055d1
 8005554:	080055d1 	.word	0x080055d1
 8005558:	080055d1 	.word	0x080055d1
 800555c:	080055b5 	.word	0x080055b5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800556e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	4618      	mov	r0, r3
 8005576:	f7fe fd21 	bl	8003fbc <HAL_DMA_Abort_IT>
      break;
 800557a:	e02c      	b.n	80055d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fd13 	bl	8003fbc <HAL_DMA_Abort_IT>
      break;
 8005596:	e01e      	b.n	80055d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fe fd05 	bl	8003fbc <HAL_DMA_Abort_IT>
      break;
 80055b2:	e010      	b.n	80055d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fcf7 	bl	8003fbc <HAL_DMA_Abort_IT>
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
      break;
 80055d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d157      	bne.n	800568c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fe69 	bl	80062bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d117      	bne.n	8005624 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10f      	bne.n	8005624 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	f240 4344 	movw	r3, #1092	; 0x444
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005622:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1a      	ldr	r2, [r3, #32]
 800562a:	f241 1311 	movw	r3, #4369	; 0x1111
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10f      	bne.n	8005654 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a1a      	ldr	r2, [r3, #32]
 800563a:	f240 4344 	movw	r3, #1092	; 0x444
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <HAL_TIM_PWM_Stop_DMA+0x154>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005662:	e013      	b.n	800568c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b04      	cmp	r3, #4
 8005668:	d104      	bne.n	8005674 <HAL_TIM_PWM_Stop_DMA+0x164>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005672:	e00b      	b.n	800568c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b08      	cmp	r3, #8
 8005678:	d104      	bne.n	8005684 <HAL_TIM_PWM_Stop_DMA+0x174>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005682:	e003      	b.n	800568c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40012c00 	.word	0x40012c00

0800569c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d122      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d11b      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0202 	mvn.w	r2, #2
 80056c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fa76 	bl	8005bd0 <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa69 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fd f8e9 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d122      	bne.n	800574c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0204 	mvn.w	r2, #4
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa4c 	bl	8005bd0 <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa3f 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fd f8bf 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b08      	cmp	r3, #8
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b08      	cmp	r3, #8
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0208 	mvn.w	r2, #8
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa22 	bl	8005bd0 <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fa15 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fd f895 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d122      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0210 	mvn.w	r2, #16
 80057c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2208      	movs	r2, #8
 80057ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f9f8 	bl	8005bd0 <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9eb 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7fd f86b 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0201 	mvn.w	r2, #1
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fd f8d0 	bl	80029c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b80      	cmp	r3, #128	; 0x80
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fe14 	bl	8006474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d10e      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b40      	cmp	r3, #64	; 0x40
 8005866:	d107      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9be 	bl	8005bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b20      	cmp	r3, #32
 8005884:	d10e      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b20      	cmp	r3, #32
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0220 	mvn.w	r2, #32
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fddf 	bl	8006462 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0ae      	b.n	8005a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	f200 809f 	bhi.w	8005a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	08005915 	.word	0x08005915
 80058e4:	08005a19 	.word	0x08005a19
 80058e8:	08005a19 	.word	0x08005a19
 80058ec:	08005a19 	.word	0x08005a19
 80058f0:	08005955 	.word	0x08005955
 80058f4:	08005a19 	.word	0x08005a19
 80058f8:	08005a19 	.word	0x08005a19
 80058fc:	08005a19 	.word	0x08005a19
 8005900:	08005997 	.word	0x08005997
 8005904:	08005a19 	.word	0x08005a19
 8005908:	08005a19 	.word	0x08005a19
 800590c:	08005a19 	.word	0x08005a19
 8005910:	080059d7 	.word	0x080059d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fab0 	bl	8005e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0208 	orr.w	r2, r2, #8
 800592e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0204 	bic.w	r2, r2, #4
 800593e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6999      	ldr	r1, [r3, #24]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	619a      	str	r2, [r3, #24]
      break;
 8005952:	e064      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 faf6 	bl	8005f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800596e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6999      	ldr	r1, [r3, #24]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	021a      	lsls	r2, r3, #8
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	619a      	str	r2, [r3, #24]
      break;
 8005994:	e043      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fb3f 	bl	8006020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0208 	orr.w	r2, r2, #8
 80059b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0204 	bic.w	r2, r2, #4
 80059c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69d9      	ldr	r1, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	61da      	str	r2, [r3, #28]
      break;
 80059d4:	e023      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fb89 	bl	80060f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69d9      	ldr	r1, [r3, #28]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	021a      	lsls	r2, r3, #8
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	61da      	str	r2, [r3, #28]
      break;
 8005a16:	e002      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_TIM_ConfigClockSource+0x1c>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e0b4      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x186>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a84:	d03e      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0xd4>
 8005a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8a:	f200 8087 	bhi.w	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a92:	f000 8086 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x172>
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9a:	d87f      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b70      	cmp	r3, #112	; 0x70
 8005a9e:	d01a      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8005aa0:	2b70      	cmp	r3, #112	; 0x70
 8005aa2:	d87b      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b60      	cmp	r3, #96	; 0x60
 8005aa6:	d050      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x11a>
 8005aa8:	2b60      	cmp	r3, #96	; 0x60
 8005aaa:	d877      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b50      	cmp	r3, #80	; 0x50
 8005aae:	d03c      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0xfa>
 8005ab0:	2b50      	cmp	r3, #80	; 0x50
 8005ab2:	d873      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d058      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x13a>
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d86f      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	d064      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac0:	2b30      	cmp	r3, #48	; 0x30
 8005ac2:	d86b      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d060      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d867      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d05c      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d05a      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ad4:	e062      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ae6:	f000 fbca 	bl	800627e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	609a      	str	r2, [r3, #8]
      break;
 8005b02:	e04f      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b14:	f000 fbb3 	bl	800627e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b26:	609a      	str	r2, [r3, #8]
      break;
 8005b28:	e03c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 fb2a 	bl	8006190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2150      	movs	r1, #80	; 0x50
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb81 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005b48:	e02c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 fb48 	bl	80061ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2160      	movs	r1, #96	; 0x60
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fb71 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005b68:	e01c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 fb0a 	bl	8006190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2140      	movs	r1, #64	; 0x40
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fb61 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005b88:	e00c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f000 fb58 	bl	800624a <TIM_ITRx_SetConfig>
      break;
 8005b9a:	e003      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	e000      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr

08005be2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d107      	bne.n	8005c40 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c3e:	e02a      	b.n	8005c96 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d107      	bne.n	8005c5a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c58:	e01d      	b.n	8005c96 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d107      	bne.n	8005c74 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2204      	movs	r2, #4
 8005c68:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c72:	e010      	b.n	8005c96 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d107      	bne.n	8005c8e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2208      	movs	r2, #8
 8005c82:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c8c:	e003      	b.n	8005c96 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff ffb5 	bl	8005c06 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	771a      	strb	r2, [r3, #28]
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d10b      	bne.n	8005cda <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d136      	bne.n	8005d3e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd8:	e031      	b.n	8005d3e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d10b      	bne.n	8005cfc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d125      	bne.n	8005d3e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cfa:	e020      	b.n	8005d3e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d10b      	bne.n	8005d1e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2204      	movs	r2, #4
 8005d0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d114      	bne.n	8005d3e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1c:	e00f      	b.n	8005d3e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d10a      	bne.n	8005d3e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7fc fdc0 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	771a      	strb	r2, [r3, #28]
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d103      	bne.n	8005d72 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	771a      	strb	r2, [r3, #28]
 8005d70:	e019      	b.n	8005da6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d103      	bne.n	8005d84 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	771a      	strb	r2, [r3, #28]
 8005d82:	e010      	b.n	8005da6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d103      	bne.n	8005d96 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2204      	movs	r2, #4
 8005d92:	771a      	strb	r2, [r3, #28]
 8005d94:	e007      	b.n	8005da6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d102      	bne.n	8005da6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2208      	movs	r2, #8
 8005da4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff ff1b 	bl	8005be2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	771a      	strb	r2, [r3, #28]
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a29      	ldr	r2, [pc, #164]	; (8005e74 <TIM_Base_SetConfig+0xb8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00b      	beq.n	8005dec <TIM_Base_SetConfig+0x30>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dda:	d007      	beq.n	8005dec <TIM_Base_SetConfig+0x30>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a26      	ldr	r2, [pc, #152]	; (8005e78 <TIM_Base_SetConfig+0xbc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_Base_SetConfig+0x30>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a25      	ldr	r2, [pc, #148]	; (8005e7c <TIM_Base_SetConfig+0xc0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d108      	bne.n	8005dfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <TIM_Base_SetConfig+0xb8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00b      	beq.n	8005e1e <TIM_Base_SetConfig+0x62>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0c:	d007      	beq.n	8005e1e <TIM_Base_SetConfig+0x62>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <TIM_Base_SetConfig+0xbc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d003      	beq.n	8005e1e <TIM_Base_SetConfig+0x62>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <TIM_Base_SetConfig+0xc0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d108      	bne.n	8005e30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a07      	ldr	r2, [pc, #28]	; (8005e74 <TIM_Base_SetConfig+0xb8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d103      	bne.n	8005e64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	615a      	str	r2, [r3, #20]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800

08005e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f023 0201 	bic.w	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 0302 	bic.w	r3, r3, #2
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <TIM_OC1_SetConfig+0xc8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10c      	bne.n	8005ef6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0308 	bic.w	r3, r3, #8
 8005ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0304 	bic.w	r3, r3, #4
 8005ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <TIM_OC1_SetConfig+0xc8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40012c00 	.word	0x40012c00

08005f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f023 0210 	bic.w	r2, r3, #16
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0320 	bic.w	r3, r3, #32
 8005f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1d      	ldr	r2, [pc, #116]	; (800601c <TIM_OC2_SetConfig+0xd0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10d      	bne.n	8005fc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a14      	ldr	r2, [pc, #80]	; (800601c <TIM_OC2_SetConfig+0xd0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d113      	bne.n	8005ff8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr
 800601c:	40012c00 	.word	0x40012c00

08006020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <TIM_OC3_SetConfig+0xd0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d10d      	bne.n	800609a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <TIM_OC3_SetConfig+0xd0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d113      	bne.n	80060ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	621a      	str	r2, [r3, #32]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40012c00 	.word	0x40012c00

080060f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800613e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a0f      	ldr	r2, [pc, #60]	; (800618c <TIM_OC4_SetConfig+0x98>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d109      	bne.n	8006168 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	019b      	lsls	r3, r3, #6
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr
 800618c:	40012c00 	.word	0x40012c00

08006190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f023 0201 	bic.w	r2, r3, #1
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 030a 	bic.w	r3, r3, #10
 80061cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0210 	bic.w	r2, r3, #16
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	031b      	lsls	r3, r3, #12
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006228:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	f043 0307 	orr.w	r3, r3, #7
 800626c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr

0800627e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800627e:	b480      	push	{r7}
 8006280:	b087      	sub	sp, #28
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006298:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	021a      	lsls	r2, r3, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	609a      	str	r2, [r3, #8]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	2201      	movs	r2, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1a      	ldr	r2, [r3, #32]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006318:	2302      	movs	r3, #2
 800631a:	e046      	b.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d009      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a12      	ldr	r2, [pc, #72]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a10      	ldr	r2, [pc, #64]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d10c      	bne.n	8006398 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4313      	orrs	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800

080063c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063d8:	2302      	movs	r3, #2
 80063da:	e03d      	b.n	8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr

08006462 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <memset>:
 8006486:	4603      	mov	r3, r0
 8006488:	4402      	add	r2, r0
 800648a:	4293      	cmp	r3, r2
 800648c:	d100      	bne.n	8006490 <memset+0xa>
 800648e:	4770      	bx	lr
 8006490:	f803 1b01 	strb.w	r1, [r3], #1
 8006494:	e7f9      	b.n	800648a <memset+0x4>
	...

08006498 <__libc_init_array>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	2600      	movs	r6, #0
 800649c:	4d0c      	ldr	r5, [pc, #48]	; (80064d0 <__libc_init_array+0x38>)
 800649e:	4c0d      	ldr	r4, [pc, #52]	; (80064d4 <__libc_init_array+0x3c>)
 80064a0:	1b64      	subs	r4, r4, r5
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	42a6      	cmp	r6, r4
 80064a6:	d109      	bne.n	80064bc <__libc_init_array+0x24>
 80064a8:	f001 f876 	bl	8007598 <_init>
 80064ac:	2600      	movs	r6, #0
 80064ae:	4d0a      	ldr	r5, [pc, #40]	; (80064d8 <__libc_init_array+0x40>)
 80064b0:	4c0a      	ldr	r4, [pc, #40]	; (80064dc <__libc_init_array+0x44>)
 80064b2:	1b64      	subs	r4, r4, r5
 80064b4:	10a4      	asrs	r4, r4, #2
 80064b6:	42a6      	cmp	r6, r4
 80064b8:	d105      	bne.n	80064c6 <__libc_init_array+0x2e>
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c0:	4798      	blx	r3
 80064c2:	3601      	adds	r6, #1
 80064c4:	e7ee      	b.n	80064a4 <__libc_init_array+0xc>
 80064c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ca:	4798      	blx	r3
 80064cc:	3601      	adds	r6, #1
 80064ce:	e7f2      	b.n	80064b6 <__libc_init_array+0x1e>
 80064d0:	080077b0 	.word	0x080077b0
 80064d4:	080077b0 	.word	0x080077b0
 80064d8:	080077b0 	.word	0x080077b0
 80064dc:	080077b4 	.word	0x080077b4

080064e0 <tan>:
 80064e0:	b530      	push	{r4, r5, lr}
 80064e2:	4a12      	ldr	r2, [pc, #72]	; (800652c <tan+0x4c>)
 80064e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064e8:	4293      	cmp	r3, r2
 80064ea:	b087      	sub	sp, #28
 80064ec:	dc06      	bgt.n	80064fc <tan+0x1c>
 80064ee:	2301      	movs	r3, #1
 80064f0:	2200      	movs	r2, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2300      	movs	r3, #0
 80064f6:	f000 f81f 	bl	8006538 <__kernel_tan>
 80064fa:	e006      	b.n	800650a <tan+0x2a>
 80064fc:	4a0c      	ldr	r2, [pc, #48]	; (8006530 <tan+0x50>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	dd05      	ble.n	800650e <tan+0x2e>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	f7f9 fe27 	bl	8000158 <__aeabi_dsub>
 800650a:	b007      	add	sp, #28
 800650c:	bd30      	pop	{r4, r5, pc}
 800650e:	aa02      	add	r2, sp, #8
 8006510:	f000 fa0e 	bl	8006930 <__ieee754_rem_pio2>
 8006514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006518:	0040      	lsls	r0, r0, #1
 800651a:	f000 0002 	and.w	r0, r0, #2
 800651e:	f1c0 0001 	rsb	r0, r0, #1
 8006522:	9000      	str	r0, [sp, #0]
 8006524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006528:	e7e5      	b.n	80064f6 <tan+0x16>
 800652a:	bf00      	nop
 800652c:	3fe921fb 	.word	0x3fe921fb
 8006530:	7fefffff 	.word	0x7fefffff
 8006534:	00000000 	.word	0x00000000

08006538 <__kernel_tan>:
 8006538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	b08b      	sub	sp, #44	; 0x2c
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4bd9      	ldr	r3, [pc, #868]	; (80068a8 <__kernel_tan+0x370>)
 8006542:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006546:	429e      	cmp	r6, r3
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	4682      	mov	sl, r0
 800654e:	468b      	mov	fp, r1
 8006550:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006552:	9202      	str	r2, [sp, #8]
 8006554:	9107      	str	r1, [sp, #28]
 8006556:	dc58      	bgt.n	800660a <__kernel_tan+0xd2>
 8006558:	f7fa fa50 	bl	80009fc <__aeabi_d2iz>
 800655c:	4605      	mov	r5, r0
 800655e:	2800      	cmp	r0, #0
 8006560:	d178      	bne.n	8006654 <__kernel_tan+0x11c>
 8006562:	1c7b      	adds	r3, r7, #1
 8006564:	4323      	orrs	r3, r4
 8006566:	4333      	orrs	r3, r6
 8006568:	d110      	bne.n	800658c <__kernel_tan+0x54>
 800656a:	4620      	mov	r0, r4
 800656c:	4659      	mov	r1, fp
 800656e:	f000 fbd3 	bl	8006d18 <fabs>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	2000      	movs	r0, #0
 8006578:	49cc      	ldr	r1, [pc, #816]	; (80068ac <__kernel_tan+0x374>)
 800657a:	f7fa f8cf 	bl	800071c <__aeabi_ddiv>
 800657e:	4682      	mov	sl, r0
 8006580:	468b      	mov	fp, r1
 8006582:	4650      	mov	r0, sl
 8006584:	4659      	mov	r1, fp
 8006586:	b00b      	add	sp, #44	; 0x2c
 8006588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658c:	2f01      	cmp	r7, #1
 800658e:	d0f8      	beq.n	8006582 <__kernel_tan+0x4a>
 8006590:	4620      	mov	r0, r4
 8006592:	4659      	mov	r1, fp
 8006594:	9a02      	ldr	r2, [sp, #8]
 8006596:	9b00      	ldr	r3, [sp, #0]
 8006598:	f7f9 fde0 	bl	800015c <__adddf3>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	460f      	mov	r7, r1
 80065a2:	2000      	movs	r0, #0
 80065a4:	49c2      	ldr	r1, [pc, #776]	; (80068b0 <__kernel_tan+0x378>)
 80065a6:	f7fa f8b9 	bl	800071c <__aeabi_ddiv>
 80065aa:	462e      	mov	r6, r5
 80065ac:	4689      	mov	r9, r1
 80065ae:	4652      	mov	r2, sl
 80065b0:	465b      	mov	r3, fp
 80065b2:	4680      	mov	r8, r0
 80065b4:	462c      	mov	r4, r5
 80065b6:	4630      	mov	r0, r6
 80065b8:	460d      	mov	r5, r1
 80065ba:	4639      	mov	r1, r7
 80065bc:	f7f9 fdcc 	bl	8000158 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	9802      	ldr	r0, [sp, #8]
 80065c6:	9900      	ldr	r1, [sp, #0]
 80065c8:	f7f9 fdc6 	bl	8000158 <__aeabi_dsub>
 80065cc:	4632      	mov	r2, r6
 80065ce:	464b      	mov	r3, r9
 80065d0:	f7f9 ff7a 	bl	80004c8 <__aeabi_dmul>
 80065d4:	4632      	mov	r2, r6
 80065d6:	4682      	mov	sl, r0
 80065d8:	468b      	mov	fp, r1
 80065da:	464b      	mov	r3, r9
 80065dc:	4630      	mov	r0, r6
 80065de:	4639      	mov	r1, r7
 80065e0:	f7f9 ff72 	bl	80004c8 <__aeabi_dmul>
 80065e4:	2200      	movs	r2, #0
 80065e6:	4bb1      	ldr	r3, [pc, #708]	; (80068ac <__kernel_tan+0x374>)
 80065e8:	f7f9 fdb8 	bl	800015c <__adddf3>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4650      	mov	r0, sl
 80065f2:	4659      	mov	r1, fp
 80065f4:	f7f9 fdb2 	bl	800015c <__adddf3>
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	f7f9 ff64 	bl	80004c8 <__aeabi_dmul>
 8006600:	4622      	mov	r2, r4
 8006602:	462b      	mov	r3, r5
 8006604:	f7f9 fdaa 	bl	800015c <__adddf3>
 8006608:	e7b9      	b.n	800657e <__kernel_tan+0x46>
 800660a:	4baa      	ldr	r3, [pc, #680]	; (80068b4 <__kernel_tan+0x37c>)
 800660c:	429e      	cmp	r6, r3
 800660e:	dd21      	ble.n	8006654 <__kernel_tan+0x11c>
 8006610:	2900      	cmp	r1, #0
 8006612:	da06      	bge.n	8006622 <__kernel_tan+0xea>
 8006614:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006618:	469b      	mov	fp, r3
 800661a:	9b00      	ldr	r3, [sp, #0]
 800661c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	4652      	mov	r2, sl
 8006624:	a182      	add	r1, pc, #520	; (adr r1, 8006830 <__kernel_tan+0x2f8>)
 8006626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800662a:	465b      	mov	r3, fp
 800662c:	f7f9 fd94 	bl	8000158 <__aeabi_dsub>
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
 8006634:	a180      	add	r1, pc, #512	; (adr r1, 8006838 <__kernel_tan+0x300>)
 8006636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800663a:	9a02      	ldr	r2, [sp, #8]
 800663c:	9b00      	ldr	r3, [sp, #0]
 800663e:	f7f9 fd8b 	bl	8000158 <__aeabi_dsub>
 8006642:	462b      	mov	r3, r5
 8006644:	4622      	mov	r2, r4
 8006646:	f7f9 fd89 	bl	800015c <__adddf3>
 800664a:	2300      	movs	r3, #0
 800664c:	4682      	mov	sl, r0
 800664e:	468b      	mov	fp, r1
 8006650:	9302      	str	r3, [sp, #8]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4652      	mov	r2, sl
 8006656:	465b      	mov	r3, fp
 8006658:	4650      	mov	r0, sl
 800665a:	4659      	mov	r1, fp
 800665c:	f7f9 ff34 	bl	80004c8 <__aeabi_dmul>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4680      	mov	r8, r0
 8006666:	4689      	mov	r9, r1
 8006668:	f7f9 ff2e 	bl	80004c8 <__aeabi_dmul>
 800666c:	4642      	mov	r2, r8
 800666e:	4604      	mov	r4, r0
 8006670:	460d      	mov	r5, r1
 8006672:	464b      	mov	r3, r9
 8006674:	4650      	mov	r0, sl
 8006676:	4659      	mov	r1, fp
 8006678:	f7f9 ff26 	bl	80004c8 <__aeabi_dmul>
 800667c:	a370      	add	r3, pc, #448	; (adr r3, 8006840 <__kernel_tan+0x308>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006686:	4620      	mov	r0, r4
 8006688:	4629      	mov	r1, r5
 800668a:	f7f9 ff1d 	bl	80004c8 <__aeabi_dmul>
 800668e:	a36e      	add	r3, pc, #440	; (adr r3, 8006848 <__kernel_tan+0x310>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f7f9 fd62 	bl	800015c <__adddf3>
 8006698:	4622      	mov	r2, r4
 800669a:	462b      	mov	r3, r5
 800669c:	f7f9 ff14 	bl	80004c8 <__aeabi_dmul>
 80066a0:	a36b      	add	r3, pc, #428	; (adr r3, 8006850 <__kernel_tan+0x318>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 fd59 	bl	800015c <__adddf3>
 80066aa:	4622      	mov	r2, r4
 80066ac:	462b      	mov	r3, r5
 80066ae:	f7f9 ff0b 	bl	80004c8 <__aeabi_dmul>
 80066b2:	a369      	add	r3, pc, #420	; (adr r3, 8006858 <__kernel_tan+0x320>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f7f9 fd50 	bl	800015c <__adddf3>
 80066bc:	4622      	mov	r2, r4
 80066be:	462b      	mov	r3, r5
 80066c0:	f7f9 ff02 	bl	80004c8 <__aeabi_dmul>
 80066c4:	a366      	add	r3, pc, #408	; (adr r3, 8006860 <__kernel_tan+0x328>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f7f9 fd47 	bl	800015c <__adddf3>
 80066ce:	4622      	mov	r2, r4
 80066d0:	462b      	mov	r3, r5
 80066d2:	f7f9 fef9 	bl	80004c8 <__aeabi_dmul>
 80066d6:	a364      	add	r3, pc, #400	; (adr r3, 8006868 <__kernel_tan+0x330>)
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f7f9 fd3e 	bl	800015c <__adddf3>
 80066e0:	4642      	mov	r2, r8
 80066e2:	464b      	mov	r3, r9
 80066e4:	f7f9 fef0 	bl	80004c8 <__aeabi_dmul>
 80066e8:	a361      	add	r3, pc, #388	; (adr r3, 8006870 <__kernel_tan+0x338>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066f2:	4620      	mov	r0, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	f7f9 fee7 	bl	80004c8 <__aeabi_dmul>
 80066fa:	a35f      	add	r3, pc, #380	; (adr r3, 8006878 <__kernel_tan+0x340>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f7f9 fd2c 	bl	800015c <__adddf3>
 8006704:	4622      	mov	r2, r4
 8006706:	462b      	mov	r3, r5
 8006708:	f7f9 fede 	bl	80004c8 <__aeabi_dmul>
 800670c:	a35c      	add	r3, pc, #368	; (adr r3, 8006880 <__kernel_tan+0x348>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f7f9 fd23 	bl	800015c <__adddf3>
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	f7f9 fed5 	bl	80004c8 <__aeabi_dmul>
 800671e:	a35a      	add	r3, pc, #360	; (adr r3, 8006888 <__kernel_tan+0x350>)
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f7f9 fd1a 	bl	800015c <__adddf3>
 8006728:	4622      	mov	r2, r4
 800672a:	462b      	mov	r3, r5
 800672c:	f7f9 fecc 	bl	80004c8 <__aeabi_dmul>
 8006730:	a357      	add	r3, pc, #348	; (adr r3, 8006890 <__kernel_tan+0x358>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	f7f9 fd11 	bl	800015c <__adddf3>
 800673a:	4622      	mov	r2, r4
 800673c:	462b      	mov	r3, r5
 800673e:	f7f9 fec3 	bl	80004c8 <__aeabi_dmul>
 8006742:	a355      	add	r3, pc, #340	; (adr r3, 8006898 <__kernel_tan+0x360>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f7f9 fd08 	bl	800015c <__adddf3>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006754:	f7f9 fd02 	bl	800015c <__adddf3>
 8006758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800675c:	f7f9 feb4 	bl	80004c8 <__aeabi_dmul>
 8006760:	9a02      	ldr	r2, [sp, #8]
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	f7f9 fcfa 	bl	800015c <__adddf3>
 8006768:	4642      	mov	r2, r8
 800676a:	464b      	mov	r3, r9
 800676c:	f7f9 feac 	bl	80004c8 <__aeabi_dmul>
 8006770:	9a02      	ldr	r2, [sp, #8]
 8006772:	9b00      	ldr	r3, [sp, #0]
 8006774:	f7f9 fcf2 	bl	800015c <__adddf3>
 8006778:	a349      	add	r3, pc, #292	; (adr r3, 80068a0 <__kernel_tan+0x368>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006786:	f7f9 fe9f 	bl	80004c8 <__aeabi_dmul>
 800678a:	4622      	mov	r2, r4
 800678c:	462b      	mov	r3, r5
 800678e:	f7f9 fce5 	bl	800015c <__adddf3>
 8006792:	460b      	mov	r3, r1
 8006794:	e9cd 0100 	strd	r0, r1, [sp]
 8006798:	4602      	mov	r2, r0
 800679a:	4659      	mov	r1, fp
 800679c:	4650      	mov	r0, sl
 800679e:	f7f9 fcdd 	bl	800015c <__adddf3>
 80067a2:	4b44      	ldr	r3, [pc, #272]	; (80068b4 <__kernel_tan+0x37c>)
 80067a4:	4604      	mov	r4, r0
 80067a6:	429e      	cmp	r6, r3
 80067a8:	460d      	mov	r5, r1
 80067aa:	f340 8085 	ble.w	80068b8 <__kernel_tan+0x380>
 80067ae:	4638      	mov	r0, r7
 80067b0:	f7f9 fe20 	bl	80003f4 <__aeabi_i2d>
 80067b4:	4622      	mov	r2, r4
 80067b6:	4680      	mov	r8, r0
 80067b8:	4689      	mov	r9, r1
 80067ba:	462b      	mov	r3, r5
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7f9 fe82 	bl	80004c8 <__aeabi_dmul>
 80067c4:	4642      	mov	r2, r8
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	464b      	mov	r3, r9
 80067cc:	4620      	mov	r0, r4
 80067ce:	4629      	mov	r1, r5
 80067d0:	f7f9 fcc4 	bl	800015c <__adddf3>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7f9 ff9e 	bl	800071c <__aeabi_ddiv>
 80067e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067e4:	f7f9 fcb8 	bl	8000158 <__aeabi_dsub>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4650      	mov	r0, sl
 80067ee:	4659      	mov	r1, fp
 80067f0:	f7f9 fcb2 	bl	8000158 <__aeabi_dsub>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	f7f9 fcb0 	bl	800015c <__adddf3>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4640      	mov	r0, r8
 8006802:	4649      	mov	r1, r9
 8006804:	f7f9 fca8 	bl	8000158 <__aeabi_dsub>
 8006808:	9b07      	ldr	r3, [sp, #28]
 800680a:	4604      	mov	r4, r0
 800680c:	179b      	asrs	r3, r3, #30
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	f1c3 0001 	rsb	r0, r3, #1
 8006816:	460d      	mov	r5, r1
 8006818:	f7f9 fdec 	bl	80003f4 <__aeabi_i2d>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4620      	mov	r0, r4
 8006822:	4629      	mov	r1, r5
 8006824:	f7f9 fe50 	bl	80004c8 <__aeabi_dmul>
 8006828:	e6a9      	b.n	800657e <__kernel_tan+0x46>
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w
 8006830:	54442d18 	.word	0x54442d18
 8006834:	3fe921fb 	.word	0x3fe921fb
 8006838:	33145c07 	.word	0x33145c07
 800683c:	3c81a626 	.word	0x3c81a626
 8006840:	74bf7ad4 	.word	0x74bf7ad4
 8006844:	3efb2a70 	.word	0x3efb2a70
 8006848:	32f0a7e9 	.word	0x32f0a7e9
 800684c:	3f12b80f 	.word	0x3f12b80f
 8006850:	1a8d1068 	.word	0x1a8d1068
 8006854:	3f3026f7 	.word	0x3f3026f7
 8006858:	fee08315 	.word	0xfee08315
 800685c:	3f57dbc8 	.word	0x3f57dbc8
 8006860:	e96e8493 	.word	0xe96e8493
 8006864:	3f8226e3 	.word	0x3f8226e3
 8006868:	1bb341fe 	.word	0x1bb341fe
 800686c:	3faba1ba 	.word	0x3faba1ba
 8006870:	db605373 	.word	0xdb605373
 8006874:	bef375cb 	.word	0xbef375cb
 8006878:	a03792a6 	.word	0xa03792a6
 800687c:	3f147e88 	.word	0x3f147e88
 8006880:	f2f26501 	.word	0xf2f26501
 8006884:	3f4344d8 	.word	0x3f4344d8
 8006888:	c9560328 	.word	0xc9560328
 800688c:	3f6d6d22 	.word	0x3f6d6d22
 8006890:	8406d637 	.word	0x8406d637
 8006894:	3f9664f4 	.word	0x3f9664f4
 8006898:	1110fe7a 	.word	0x1110fe7a
 800689c:	3fc11111 	.word	0x3fc11111
 80068a0:	55555563 	.word	0x55555563
 80068a4:	3fd55555 	.word	0x3fd55555
 80068a8:	3e2fffff 	.word	0x3e2fffff
 80068ac:	3ff00000 	.word	0x3ff00000
 80068b0:	bff00000 	.word	0xbff00000
 80068b4:	3fe59427 	.word	0x3fe59427
 80068b8:	2f01      	cmp	r7, #1
 80068ba:	d031      	beq.n	8006920 <__kernel_tan+0x3e8>
 80068bc:	460f      	mov	r7, r1
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	2000      	movs	r0, #0
 80068c4:	4918      	ldr	r1, [pc, #96]	; (8006928 <__kernel_tan+0x3f0>)
 80068c6:	f7f9 ff29 	bl	800071c <__aeabi_ddiv>
 80068ca:	2600      	movs	r6, #0
 80068cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068d4:	4652      	mov	r2, sl
 80068d6:	465b      	mov	r3, fp
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7f9 fc3c 	bl	8000158 <__aeabi_dsub>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068e8:	f7f9 fc36 	bl	8000158 <__aeabi_dsub>
 80068ec:	4632      	mov	r2, r6
 80068ee:	462b      	mov	r3, r5
 80068f0:	f7f9 fdea 	bl	80004c8 <__aeabi_dmul>
 80068f4:	4632      	mov	r2, r6
 80068f6:	4682      	mov	sl, r0
 80068f8:	468b      	mov	fp, r1
 80068fa:	462b      	mov	r3, r5
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fde2 	bl	80004c8 <__aeabi_dmul>
 8006904:	2200      	movs	r2, #0
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <__kernel_tan+0x3f4>)
 8006908:	f7f9 fc28 	bl	800015c <__adddf3>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4650      	mov	r0, sl
 8006912:	4659      	mov	r1, fp
 8006914:	f7f9 fc22 	bl	800015c <__adddf3>
 8006918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800691c:	4634      	mov	r4, r6
 800691e:	e66d      	b.n	80065fc <__kernel_tan+0xc4>
 8006920:	4682      	mov	sl, r0
 8006922:	468b      	mov	fp, r1
 8006924:	e62d      	b.n	8006582 <__kernel_tan+0x4a>
 8006926:	bf00      	nop
 8006928:	bff00000 	.word	0xbff00000
 800692c:	3ff00000 	.word	0x3ff00000

08006930 <__ieee754_rem_pio2>:
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006934:	4614      	mov	r4, r2
 8006936:	4ac2      	ldr	r2, [pc, #776]	; (8006c40 <__ieee754_rem_pio2+0x310>)
 8006938:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800693c:	b08d      	sub	sp, #52	; 0x34
 800693e:	4592      	cmp	sl, r2
 8006940:	9104      	str	r1, [sp, #16]
 8006942:	dc07      	bgt.n	8006954 <__ieee754_rem_pio2+0x24>
 8006944:	2200      	movs	r2, #0
 8006946:	2300      	movs	r3, #0
 8006948:	e9c4 0100 	strd	r0, r1, [r4]
 800694c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006950:	2500      	movs	r5, #0
 8006952:	e024      	b.n	800699e <__ieee754_rem_pio2+0x6e>
 8006954:	4abb      	ldr	r2, [pc, #748]	; (8006c44 <__ieee754_rem_pio2+0x314>)
 8006956:	4592      	cmp	sl, r2
 8006958:	dc72      	bgt.n	8006a40 <__ieee754_rem_pio2+0x110>
 800695a:	9b04      	ldr	r3, [sp, #16]
 800695c:	4dba      	ldr	r5, [pc, #744]	; (8006c48 <__ieee754_rem_pio2+0x318>)
 800695e:	2b00      	cmp	r3, #0
 8006960:	a3a9      	add	r3, pc, #676	; (adr r3, 8006c08 <__ieee754_rem_pio2+0x2d8>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	dd36      	ble.n	80069d6 <__ieee754_rem_pio2+0xa6>
 8006968:	f7f9 fbf6 	bl	8000158 <__aeabi_dsub>
 800696c:	45aa      	cmp	sl, r5
 800696e:	4606      	mov	r6, r0
 8006970:	460f      	mov	r7, r1
 8006972:	d018      	beq.n	80069a6 <__ieee754_rem_pio2+0x76>
 8006974:	a3a6      	add	r3, pc, #664	; (adr r3, 8006c10 <__ieee754_rem_pio2+0x2e0>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f7f9 fbed 	bl	8000158 <__aeabi_dsub>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4630      	mov	r0, r6
 8006984:	e9c4 2300 	strd	r2, r3, [r4]
 8006988:	4639      	mov	r1, r7
 800698a:	f7f9 fbe5 	bl	8000158 <__aeabi_dsub>
 800698e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006c10 <__ieee754_rem_pio2+0x2e0>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f7f9 fbe0 	bl	8000158 <__aeabi_dsub>
 8006998:	2501      	movs	r5, #1
 800699a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800699e:	4628      	mov	r0, r5
 80069a0:	b00d      	add	sp, #52	; 0x34
 80069a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a6:	a39c      	add	r3, pc, #624	; (adr r3, 8006c18 <__ieee754_rem_pio2+0x2e8>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fbd4 	bl	8000158 <__aeabi_dsub>
 80069b0:	a39b      	add	r3, pc, #620	; (adr r3, 8006c20 <__ieee754_rem_pio2+0x2f0>)
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	4606      	mov	r6, r0
 80069b8:	460f      	mov	r7, r1
 80069ba:	f7f9 fbcd 	bl	8000158 <__aeabi_dsub>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4630      	mov	r0, r6
 80069c4:	e9c4 2300 	strd	r2, r3, [r4]
 80069c8:	4639      	mov	r1, r7
 80069ca:	f7f9 fbc5 	bl	8000158 <__aeabi_dsub>
 80069ce:	a394      	add	r3, pc, #592	; (adr r3, 8006c20 <__ieee754_rem_pio2+0x2f0>)
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	e7de      	b.n	8006994 <__ieee754_rem_pio2+0x64>
 80069d6:	f7f9 fbc1 	bl	800015c <__adddf3>
 80069da:	45aa      	cmp	sl, r5
 80069dc:	4606      	mov	r6, r0
 80069de:	460f      	mov	r7, r1
 80069e0:	d016      	beq.n	8006a10 <__ieee754_rem_pio2+0xe0>
 80069e2:	a38b      	add	r3, pc, #556	; (adr r3, 8006c10 <__ieee754_rem_pio2+0x2e0>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fbb8 	bl	800015c <__adddf3>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4630      	mov	r0, r6
 80069f2:	e9c4 2300 	strd	r2, r3, [r4]
 80069f6:	4639      	mov	r1, r7
 80069f8:	f7f9 fbae 	bl	8000158 <__aeabi_dsub>
 80069fc:	a384      	add	r3, pc, #528	; (adr r3, 8006c10 <__ieee754_rem_pio2+0x2e0>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f7f9 fbab 	bl	800015c <__adddf3>
 8006a06:	f04f 35ff 	mov.w	r5, #4294967295
 8006a0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a0e:	e7c6      	b.n	800699e <__ieee754_rem_pio2+0x6e>
 8006a10:	a381      	add	r3, pc, #516	; (adr r3, 8006c18 <__ieee754_rem_pio2+0x2e8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 fba1 	bl	800015c <__adddf3>
 8006a1a:	a381      	add	r3, pc, #516	; (adr r3, 8006c20 <__ieee754_rem_pio2+0x2f0>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	4606      	mov	r6, r0
 8006a22:	460f      	mov	r7, r1
 8006a24:	f7f9 fb9a 	bl	800015c <__adddf3>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	e9c4 2300 	strd	r2, r3, [r4]
 8006a32:	4639      	mov	r1, r7
 8006a34:	f7f9 fb90 	bl	8000158 <__aeabi_dsub>
 8006a38:	a379      	add	r3, pc, #484	; (adr r3, 8006c20 <__ieee754_rem_pio2+0x2f0>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	e7e0      	b.n	8006a02 <__ieee754_rem_pio2+0xd2>
 8006a40:	4a82      	ldr	r2, [pc, #520]	; (8006c4c <__ieee754_rem_pio2+0x31c>)
 8006a42:	4592      	cmp	sl, r2
 8006a44:	f300 80d4 	bgt.w	8006bf0 <__ieee754_rem_pio2+0x2c0>
 8006a48:	f000 f966 	bl	8006d18 <fabs>
 8006a4c:	a376      	add	r3, pc, #472	; (adr r3, 8006c28 <__ieee754_rem_pio2+0x2f8>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	4606      	mov	r6, r0
 8006a54:	460f      	mov	r7, r1
 8006a56:	f7f9 fd37 	bl	80004c8 <__aeabi_dmul>
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	4b7c      	ldr	r3, [pc, #496]	; (8006c50 <__ieee754_rem_pio2+0x320>)
 8006a5e:	f7f9 fb7d 	bl	800015c <__adddf3>
 8006a62:	f7f9 ffcb 	bl	80009fc <__aeabi_d2iz>
 8006a66:	4605      	mov	r5, r0
 8006a68:	f7f9 fcc4 	bl	80003f4 <__aeabi_i2d>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a74:	a364      	add	r3, pc, #400	; (adr r3, 8006c08 <__ieee754_rem_pio2+0x2d8>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fd25 	bl	80004c8 <__aeabi_dmul>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7f9 fb67 	bl	8000158 <__aeabi_dsub>
 8006a8a:	a361      	add	r3, pc, #388	; (adr r3, 8006c10 <__ieee754_rem_pio2+0x2e0>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	4680      	mov	r8, r0
 8006a92:	4689      	mov	r9, r1
 8006a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a98:	f7f9 fd16 	bl	80004c8 <__aeabi_dmul>
 8006a9c:	2d1f      	cmp	r5, #31
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	dc0e      	bgt.n	8006ac2 <__ieee754_rem_pio2+0x192>
 8006aa4:	4b6b      	ldr	r3, [pc, #428]	; (8006c54 <__ieee754_rem_pio2+0x324>)
 8006aa6:	1e6a      	subs	r2, r5, #1
 8006aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aac:	4553      	cmp	r3, sl
 8006aae:	d008      	beq.n	8006ac2 <__ieee754_rem_pio2+0x192>
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	f7f9 fb4e 	bl	8000158 <__aeabi_dsub>
 8006abc:	e9c4 0100 	strd	r0, r1, [r4]
 8006ac0:	e012      	b.n	8006ae8 <__ieee754_rem_pio2+0x1b8>
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4649      	mov	r1, r9
 8006aca:	f7f9 fb45 	bl	8000158 <__aeabi_dsub>
 8006ace:	ea4f 532a 	mov.w	r3, sl, asr #20
 8006ad2:	9305      	str	r3, [sp, #20]
 8006ad4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ad8:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	dc1f      	bgt.n	8006b20 <__ieee754_rem_pio2+0x1f0>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	e9c4 2300 	strd	r2, r3, [r4]
 8006ae8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8006aec:	4640      	mov	r0, r8
 8006aee:	4653      	mov	r3, sl
 8006af0:	4649      	mov	r1, r9
 8006af2:	f7f9 fb31 	bl	8000158 <__aeabi_dsub>
 8006af6:	4632      	mov	r2, r6
 8006af8:	463b      	mov	r3, r7
 8006afa:	f7f9 fb2d 	bl	8000158 <__aeabi_dsub>
 8006afe:	460b      	mov	r3, r1
 8006b00:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006b04:	9904      	ldr	r1, [sp, #16]
 8006b06:	4602      	mov	r2, r0
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	f6bf af48 	bge.w	800699e <__ieee754_rem_pio2+0x6e>
 8006b0e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8006b12:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006b16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b1a:	60e3      	str	r3, [r4, #12]
 8006b1c:	426d      	negs	r5, r5
 8006b1e:	e73e      	b.n	800699e <__ieee754_rem_pio2+0x6e>
 8006b20:	a33d      	add	r3, pc, #244	; (adr r3, 8006c18 <__ieee754_rem_pio2+0x2e8>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2a:	f7f9 fccd 	bl	80004c8 <__aeabi_dmul>
 8006b2e:	4606      	mov	r6, r0
 8006b30:	460f      	mov	r7, r1
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4640      	mov	r0, r8
 8006b38:	4649      	mov	r1, r9
 8006b3a:	f7f9 fb0d 	bl	8000158 <__aeabi_dsub>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4682      	mov	sl, r0
 8006b44:	468b      	mov	fp, r1
 8006b46:	4640      	mov	r0, r8
 8006b48:	4649      	mov	r1, r9
 8006b4a:	f7f9 fb05 	bl	8000158 <__aeabi_dsub>
 8006b4e:	4632      	mov	r2, r6
 8006b50:	463b      	mov	r3, r7
 8006b52:	f7f9 fb01 	bl	8000158 <__aeabi_dsub>
 8006b56:	a332      	add	r3, pc, #200	; (adr r3, 8006c20 <__ieee754_rem_pio2+0x2f0>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b64:	f7f9 fcb0 	bl	80004c8 <__aeabi_dmul>
 8006b68:	4632      	mov	r2, r6
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	f7f9 faf4 	bl	8000158 <__aeabi_dsub>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	4650      	mov	r0, sl
 8006b7a:	4659      	mov	r1, fp
 8006b7c:	f7f9 faec 	bl	8000158 <__aeabi_dsub>
 8006b80:	9a05      	ldr	r2, [sp, #20]
 8006b82:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b31      	cmp	r3, #49	; 0x31
 8006b8a:	dc06      	bgt.n	8006b9a <__ieee754_rem_pio2+0x26a>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	46d0      	mov	r8, sl
 8006b92:	46d9      	mov	r9, fp
 8006b94:	e9c4 2300 	strd	r2, r3, [r4]
 8006b98:	e7a6      	b.n	8006ae8 <__ieee754_rem_pio2+0x1b8>
 8006b9a:	a325      	add	r3, pc, #148	; (adr r3, 8006c30 <__ieee754_rem_pio2+0x300>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba4:	f7f9 fc90 	bl	80004c8 <__aeabi_dmul>
 8006ba8:	4606      	mov	r6, r0
 8006baa:	460f      	mov	r7, r1
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4650      	mov	r0, sl
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	f7f9 fad0 	bl	8000158 <__aeabi_dsub>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	4689      	mov	r9, r1
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	f7f9 fac8 	bl	8000158 <__aeabi_dsub>
 8006bc8:	4632      	mov	r2, r6
 8006bca:	463b      	mov	r3, r7
 8006bcc:	f7f9 fac4 	bl	8000158 <__aeabi_dsub>
 8006bd0:	a319      	add	r3, pc, #100	; (adr r3, 8006c38 <__ieee754_rem_pio2+0x308>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460f      	mov	r7, r1
 8006bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bde:	f7f9 fc73 	bl	80004c8 <__aeabi_dmul>
 8006be2:	4632      	mov	r2, r6
 8006be4:	463b      	mov	r3, r7
 8006be6:	f7f9 fab7 	bl	8000158 <__aeabi_dsub>
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	e75f      	b.n	8006ab0 <__ieee754_rem_pio2+0x180>
 8006bf0:	4a19      	ldr	r2, [pc, #100]	; (8006c58 <__ieee754_rem_pio2+0x328>)
 8006bf2:	4592      	cmp	sl, r2
 8006bf4:	dd32      	ble.n	8006c5c <__ieee754_rem_pio2+0x32c>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	f7f9 faad 	bl	8000158 <__aeabi_dsub>
 8006bfe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c02:	e9c4 0100 	strd	r0, r1, [r4]
 8006c06:	e6a3      	b.n	8006950 <__ieee754_rem_pio2+0x20>
 8006c08:	54400000 	.word	0x54400000
 8006c0c:	3ff921fb 	.word	0x3ff921fb
 8006c10:	1a626331 	.word	0x1a626331
 8006c14:	3dd0b461 	.word	0x3dd0b461
 8006c18:	1a600000 	.word	0x1a600000
 8006c1c:	3dd0b461 	.word	0x3dd0b461
 8006c20:	2e037073 	.word	0x2e037073
 8006c24:	3ba3198a 	.word	0x3ba3198a
 8006c28:	6dc9c883 	.word	0x6dc9c883
 8006c2c:	3fe45f30 	.word	0x3fe45f30
 8006c30:	2e000000 	.word	0x2e000000
 8006c34:	3ba3198a 	.word	0x3ba3198a
 8006c38:	252049c1 	.word	0x252049c1
 8006c3c:	397b839a 	.word	0x397b839a
 8006c40:	3fe921fb 	.word	0x3fe921fb
 8006c44:	4002d97b 	.word	0x4002d97b
 8006c48:	3ff921fb 	.word	0x3ff921fb
 8006c4c:	413921fb 	.word	0x413921fb
 8006c50:	3fe00000 	.word	0x3fe00000
 8006c54:	080075d4 	.word	0x080075d4
 8006c58:	7fefffff 	.word	0x7fefffff
 8006c5c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006c60:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006c64:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006c68:	460f      	mov	r7, r1
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	f7f9 fec6 	bl	80009fc <__aeabi_d2iz>
 8006c70:	f7f9 fbc0 	bl	80003f4 <__aeabi_i2d>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c80:	f7f9 fa6a 	bl	8000158 <__aeabi_dsub>
 8006c84:	2200      	movs	r2, #0
 8006c86:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <__ieee754_rem_pio2+0x3e0>)
 8006c88:	f7f9 fc1e 	bl	80004c8 <__aeabi_dmul>
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	4606      	mov	r6, r0
 8006c90:	f7f9 feb4 	bl	80009fc <__aeabi_d2iz>
 8006c94:	f7f9 fbae 	bl	80003f4 <__aeabi_i2d>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ca4:	f7f9 fa58 	bl	8000158 <__aeabi_dsub>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <__ieee754_rem_pio2+0x3e0>)
 8006cac:	f7f9 fc0c 	bl	80004c8 <__aeabi_dmul>
 8006cb0:	f04f 0803 	mov.w	r8, #3
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	2700      	movs	r7, #0
 8006cb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006cbc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	46c2      	mov	sl, r8
 8006cca:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cce:	f7f9 fe63 	bl	8000998 <__aeabi_dcmpeq>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d1f4      	bne.n	8006cc0 <__ieee754_rem_pio2+0x390>
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <__ieee754_rem_pio2+0x3e4>)
 8006cd8:	462a      	mov	r2, r5
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	2302      	movs	r3, #2
 8006cde:	4621      	mov	r1, r4
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	a806      	add	r0, sp, #24
 8006ce4:	4653      	mov	r3, sl
 8006ce6:	f000 f81b 	bl	8006d20 <__kernel_rem_pio2>
 8006cea:	9b04      	ldr	r3, [sp, #16]
 8006cec:	4605      	mov	r5, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f6bf ae55 	bge.w	800699e <__ieee754_rem_pio2+0x6e>
 8006cf4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006cf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cfc:	e9c4 2300 	strd	r2, r3, [r4]
 8006d00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006d0c:	e706      	b.n	8006b1c <__ieee754_rem_pio2+0x1ec>
 8006d0e:	bf00      	nop
 8006d10:	41700000 	.word	0x41700000
 8006d14:	08007654 	.word	0x08007654

08006d18 <fabs>:
 8006d18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4770      	bx	lr

08006d20 <__kernel_rem_pio2>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006d28:	9308      	str	r3, [sp, #32]
 8006d2a:	9106      	str	r1, [sp, #24]
 8006d2c:	4bb6      	ldr	r3, [pc, #728]	; (8007008 <__kernel_rem_pio2+0x2e8>)
 8006d2e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006d30:	f112 0f14 	cmn.w	r2, #20
 8006d34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d38:	bfa8      	it	ge
 8006d3a:	1ed4      	subge	r4, r2, #3
 8006d3c:	9302      	str	r3, [sp, #8]
 8006d3e:	9b08      	ldr	r3, [sp, #32]
 8006d40:	bfb8      	it	lt
 8006d42:	2400      	movlt	r4, #0
 8006d44:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d48:	9307      	str	r3, [sp, #28]
 8006d4a:	bfa4      	itt	ge
 8006d4c:	2318      	movge	r3, #24
 8006d4e:	fb94 f4f3 	sdivge	r4, r4, r3
 8006d52:	f06f 0317 	mvn.w	r3, #23
 8006d56:	fb04 3303 	mla	r3, r4, r3, r3
 8006d5a:	eb03 0b02 	add.w	fp, r3, r2
 8006d5e:	9a07      	ldr	r2, [sp, #28]
 8006d60:	9b02      	ldr	r3, [sp, #8]
 8006d62:	1aa7      	subs	r7, r4, r2
 8006d64:	eb03 0802 	add.w	r8, r3, r2
 8006d68:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006d70:	2200      	movs	r2, #0
 8006d72:	2300      	movs	r3, #0
 8006d74:	9009      	str	r0, [sp, #36]	; 0x24
 8006d76:	ae20      	add	r6, sp, #128	; 0x80
 8006d78:	4545      	cmp	r5, r8
 8006d7a:	dd14      	ble.n	8006da6 <__kernel_rem_pio2+0x86>
 8006d7c:	f04f 0800 	mov.w	r8, #0
 8006d80:	9a08      	ldr	r2, [sp, #32]
 8006d82:	ab20      	add	r3, sp, #128	; 0x80
 8006d84:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006d88:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8006d8c:	9b02      	ldr	r3, [sp, #8]
 8006d8e:	4598      	cmp	r8, r3
 8006d90:	dc35      	bgt.n	8006dfe <__kernel_rem_pio2+0xde>
 8006d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d94:	2200      	movs	r2, #0
 8006d96:	f1a3 0908 	sub.w	r9, r3, #8
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	462f      	mov	r7, r5
 8006d9e:	2600      	movs	r6, #0
 8006da0:	e9cd 2300 	strd	r2, r3, [sp]
 8006da4:	e01f      	b.n	8006de6 <__kernel_rem_pio2+0xc6>
 8006da6:	42ef      	cmn	r7, r5
 8006da8:	d40b      	bmi.n	8006dc2 <__kernel_rem_pio2+0xa2>
 8006daa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006dae:	e9cd 2300 	strd	r2, r3, [sp]
 8006db2:	f7f9 fb1f 	bl	80003f4 <__aeabi_i2d>
 8006db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dba:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006dbe:	3501      	adds	r5, #1
 8006dc0:	e7da      	b.n	8006d78 <__kernel_rem_pio2+0x58>
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	e7f8      	b.n	8006dba <__kernel_rem_pio2+0x9a>
 8006dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dcc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006dd0:	f7f9 fb7a 	bl	80004c8 <__aeabi_dmul>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ddc:	f7f9 f9be 	bl	800015c <__adddf3>
 8006de0:	e9cd 0100 	strd	r0, r1, [sp]
 8006de4:	3601      	adds	r6, #1
 8006de6:	9b07      	ldr	r3, [sp, #28]
 8006de8:	3f08      	subs	r7, #8
 8006dea:	429e      	cmp	r6, r3
 8006dec:	ddec      	ble.n	8006dc8 <__kernel_rem_pio2+0xa8>
 8006dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df2:	f108 0801 	add.w	r8, r8, #1
 8006df6:	e8ea 2302 	strd	r2, r3, [sl], #8
 8006dfa:	3508      	adds	r5, #8
 8006dfc:	e7c6      	b.n	8006d8c <__kernel_rem_pio2+0x6c>
 8006dfe:	9b02      	ldr	r3, [sp, #8]
 8006e00:	aa0c      	add	r2, sp, #48	; 0x30
 8006e02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e08:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006e0a:	9e02      	ldr	r6, [sp, #8]
 8006e0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006e10:	930a      	str	r3, [sp, #40]	; 0x28
 8006e12:	ab98      	add	r3, sp, #608	; 0x260
 8006e14:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e18:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006e1c:	ab70      	add	r3, sp, #448	; 0x1c0
 8006e1e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8006e22:	46d0      	mov	r8, sl
 8006e24:	46b1      	mov	r9, r6
 8006e26:	af0c      	add	r7, sp, #48	; 0x30
 8006e28:	9700      	str	r7, [sp, #0]
 8006e2a:	f1b9 0f00 	cmp.w	r9, #0
 8006e2e:	f1a8 0808 	sub.w	r8, r8, #8
 8006e32:	dc70      	bgt.n	8006f16 <__kernel_rem_pio2+0x1f6>
 8006e34:	465a      	mov	r2, fp
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f000 fab1 	bl	80073a0 <scalbn>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006e44:	4604      	mov	r4, r0
 8006e46:	460d      	mov	r5, r1
 8006e48:	f7f9 fb3e 	bl	80004c8 <__aeabi_dmul>
 8006e4c:	f000 fb24 	bl	8007498 <floor>
 8006e50:	2200      	movs	r2, #0
 8006e52:	4b6e      	ldr	r3, [pc, #440]	; (800700c <__kernel_rem_pio2+0x2ec>)
 8006e54:	f7f9 fb38 	bl	80004c8 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7f9 f97a 	bl	8000158 <__aeabi_dsub>
 8006e64:	460d      	mov	r5, r1
 8006e66:	4604      	mov	r4, r0
 8006e68:	f7f9 fdc8 	bl	80009fc <__aeabi_d2iz>
 8006e6c:	9004      	str	r0, [sp, #16]
 8006e6e:	f7f9 fac1 	bl	80003f4 <__aeabi_i2d>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4620      	mov	r0, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 f96d 	bl	8000158 <__aeabi_dsub>
 8006e7e:	f1bb 0f00 	cmp.w	fp, #0
 8006e82:	4680      	mov	r8, r0
 8006e84:	4689      	mov	r9, r1
 8006e86:	dd6f      	ble.n	8006f68 <__kernel_rem_pio2+0x248>
 8006e88:	1e71      	subs	r1, r6, #1
 8006e8a:	ab0c      	add	r3, sp, #48	; 0x30
 8006e8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e90:	9c04      	ldr	r4, [sp, #16]
 8006e92:	f1cb 0018 	rsb	r0, fp, #24
 8006e96:	fa43 f200 	asr.w	r2, r3, r0
 8006e9a:	4414      	add	r4, r2
 8006e9c:	4082      	lsls	r2, r0
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	aa0c      	add	r2, sp, #48	; 0x30
 8006ea2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006ea6:	f1cb 0217 	rsb	r2, fp, #23
 8006eaa:	9404      	str	r4, [sp, #16]
 8006eac:	4113      	asrs	r3, r2
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	9b00      	ldr	r3, [sp, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	dd66      	ble.n	8006f84 <__kernel_rem_pio2+0x264>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	4296      	cmp	r6, r2
 8006ec6:	f300 80ad 	bgt.w	8007024 <__kernel_rem_pio2+0x304>
 8006eca:	f1bb 0f00 	cmp.w	fp, #0
 8006ece:	dd07      	ble.n	8006ee0 <__kernel_rem_pio2+0x1c0>
 8006ed0:	f1bb 0f01 	cmp.w	fp, #1
 8006ed4:	f000 80b5 	beq.w	8007042 <__kernel_rem_pio2+0x322>
 8006ed8:	f1bb 0f02 	cmp.w	fp, #2
 8006edc:	f000 80bb 	beq.w	8007056 <__kernel_rem_pio2+0x336>
 8006ee0:	9b00      	ldr	r3, [sp, #0]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d14e      	bne.n	8006f84 <__kernel_rem_pio2+0x264>
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	464b      	mov	r3, r9
 8006eea:	2000      	movs	r0, #0
 8006eec:	4948      	ldr	r1, [pc, #288]	; (8007010 <__kernel_rem_pio2+0x2f0>)
 8006eee:	f7f9 f933 	bl	8000158 <__aeabi_dsub>
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	4689      	mov	r9, r1
 8006ef6:	2c00      	cmp	r4, #0
 8006ef8:	d044      	beq.n	8006f84 <__kernel_rem_pio2+0x264>
 8006efa:	465a      	mov	r2, fp
 8006efc:	2000      	movs	r0, #0
 8006efe:	4944      	ldr	r1, [pc, #272]	; (8007010 <__kernel_rem_pio2+0x2f0>)
 8006f00:	f000 fa4e 	bl	80073a0 <scalbn>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	f7f9 f924 	bl	8000158 <__aeabi_dsub>
 8006f10:	4680      	mov	r8, r0
 8006f12:	4689      	mov	r9, r1
 8006f14:	e036      	b.n	8006f84 <__kernel_rem_pio2+0x264>
 8006f16:	2200      	movs	r2, #0
 8006f18:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <__kernel_rem_pio2+0x2f4>)
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	f7f9 fad3 	bl	80004c8 <__aeabi_dmul>
 8006f22:	f7f9 fd6b 	bl	80009fc <__aeabi_d2iz>
 8006f26:	f7f9 fa65 	bl	80003f4 <__aeabi_i2d>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f32:	2200      	movs	r2, #0
 8006f34:	4b38      	ldr	r3, [pc, #224]	; (8007018 <__kernel_rem_pio2+0x2f8>)
 8006f36:	f7f9 fac7 	bl	80004c8 <__aeabi_dmul>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 f909 	bl	8000158 <__aeabi_dsub>
 8006f46:	f7f9 fd59 	bl	80009fc <__aeabi_d2iz>
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f50:	f843 0b04 	str.w	r0, [r3], #4
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006f5e:	f7f9 f8fd 	bl	800015c <__adddf3>
 8006f62:	4604      	mov	r4, r0
 8006f64:	460d      	mov	r5, r1
 8006f66:	e760      	b.n	8006e2a <__kernel_rem_pio2+0x10a>
 8006f68:	d105      	bne.n	8006f76 <__kernel_rem_pio2+0x256>
 8006f6a:	1e73      	subs	r3, r6, #1
 8006f6c:	aa0c      	add	r2, sp, #48	; 0x30
 8006f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f72:	15db      	asrs	r3, r3, #23
 8006f74:	e79b      	b.n	8006eae <__kernel_rem_pio2+0x18e>
 8006f76:	2200      	movs	r2, #0
 8006f78:	4b28      	ldr	r3, [pc, #160]	; (800701c <__kernel_rem_pio2+0x2fc>)
 8006f7a:	f7f9 fd2b 	bl	80009d4 <__aeabi_dcmpge>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d13e      	bne.n	8007000 <__kernel_rem_pio2+0x2e0>
 8006f82:	9000      	str	r0, [sp, #0]
 8006f84:	2200      	movs	r2, #0
 8006f86:	2300      	movs	r3, #0
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7f9 fd04 	bl	8000998 <__aeabi_dcmpeq>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	f000 80b2 	beq.w	80070fa <__kernel_rem_pio2+0x3da>
 8006f96:	1e74      	subs	r4, r6, #1
 8006f98:	4623      	mov	r3, r4
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	9902      	ldr	r1, [sp, #8]
 8006f9e:	428b      	cmp	r3, r1
 8006fa0:	da60      	bge.n	8007064 <__kernel_rem_pio2+0x344>
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	d075      	beq.n	8007092 <__kernel_rem_pio2+0x372>
 8006fa6:	ab0c      	add	r3, sp, #48	; 0x30
 8006fa8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fac:	f1ab 0b18 	sub.w	fp, fp, #24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80a0 	beq.w	80070f6 <__kernel_rem_pio2+0x3d6>
 8006fb6:	465a      	mov	r2, fp
 8006fb8:	2000      	movs	r0, #0
 8006fba:	4915      	ldr	r1, [pc, #84]	; (8007010 <__kernel_rem_pio2+0x2f0>)
 8006fbc:	f000 f9f0 	bl	80073a0 <scalbn>
 8006fc0:	46a2      	mov	sl, r4
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	ab70      	add	r3, sp, #448	; 0x1c0
 8006fcc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8007014 <__kernel_rem_pio2+0x2f4>
 8006fd0:	00e5      	lsls	r5, r4, #3
 8006fd2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006fd6:	f1ba 0f00 	cmp.w	sl, #0
 8006fda:	f280 80c4 	bge.w	8007166 <__kernel_rem_pio2+0x446>
 8006fde:	4626      	mov	r6, r4
 8006fe0:	2e00      	cmp	r6, #0
 8006fe2:	f2c0 80f6 	blt.w	80071d2 <__kernel_rem_pio2+0x4b2>
 8006fe6:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <__kernel_rem_pio2+0x300>)
 8006fe8:	f04f 0a00 	mov.w	sl, #0
 8006fec:	9307      	str	r3, [sp, #28]
 8006fee:	ab70      	add	r3, sp, #448	; 0x1c0
 8006ff0:	f04f 0b00 	mov.w	fp, #0
 8006ff4:	f04f 0800 	mov.w	r8, #0
 8006ff8:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006ffc:	1ba7      	subs	r7, r4, r6
 8006ffe:	e0dc      	b.n	80071ba <__kernel_rem_pio2+0x49a>
 8007000:	2302      	movs	r3, #2
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	e757      	b.n	8006eb6 <__kernel_rem_pio2+0x196>
 8007006:	bf00      	nop
 8007008:	080077a0 	.word	0x080077a0
 800700c:	40200000 	.word	0x40200000
 8007010:	3ff00000 	.word	0x3ff00000
 8007014:	3e700000 	.word	0x3e700000
 8007018:	41700000 	.word	0x41700000
 800701c:	3fe00000 	.word	0x3fe00000
 8007020:	08007760 	.word	0x08007760
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	b944      	cbnz	r4, 800703a <__kernel_rem_pio2+0x31a>
 8007028:	b11b      	cbz	r3, 8007032 <__kernel_rem_pio2+0x312>
 800702a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	2301      	movs	r3, #1
 8007032:	461c      	mov	r4, r3
 8007034:	3201      	adds	r2, #1
 8007036:	3704      	adds	r7, #4
 8007038:	e744      	b.n	8006ec4 <__kernel_rem_pio2+0x1a4>
 800703a:	1acb      	subs	r3, r1, r3
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	4623      	mov	r3, r4
 8007040:	e7f7      	b.n	8007032 <__kernel_rem_pio2+0x312>
 8007042:	1e72      	subs	r2, r6, #1
 8007044:	ab0c      	add	r3, sp, #48	; 0x30
 8007046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800704e:	a90c      	add	r1, sp, #48	; 0x30
 8007050:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007054:	e744      	b.n	8006ee0 <__kernel_rem_pio2+0x1c0>
 8007056:	1e72      	subs	r2, r6, #1
 8007058:	ab0c      	add	r3, sp, #48	; 0x30
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007062:	e7f4      	b.n	800704e <__kernel_rem_pio2+0x32e>
 8007064:	a90c      	add	r1, sp, #48	; 0x30
 8007066:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800706a:	3b01      	subs	r3, #1
 800706c:	430a      	orrs	r2, r1
 800706e:	e795      	b.n	8006f9c <__kernel_rem_pio2+0x27c>
 8007070:	3301      	adds	r3, #1
 8007072:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007076:	2900      	cmp	r1, #0
 8007078:	d0fa      	beq.n	8007070 <__kernel_rem_pio2+0x350>
 800707a:	9a08      	ldr	r2, [sp, #32]
 800707c:	a920      	add	r1, sp, #128	; 0x80
 800707e:	18b2      	adds	r2, r6, r2
 8007080:	f106 0801 	add.w	r8, r6, #1
 8007084:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007088:	18f4      	adds	r4, r6, r3
 800708a:	4544      	cmp	r4, r8
 800708c:	da04      	bge.n	8007098 <__kernel_rem_pio2+0x378>
 800708e:	4626      	mov	r6, r4
 8007090:	e6bf      	b.n	8006e12 <__kernel_rem_pio2+0xf2>
 8007092:	2301      	movs	r3, #1
 8007094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007096:	e7ec      	b.n	8007072 <__kernel_rem_pio2+0x352>
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	f04f 0900 	mov.w	r9, #0
 800709e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80070a2:	f7f9 f9a7 	bl	80003f4 <__aeabi_i2d>
 80070a6:	2600      	movs	r6, #0
 80070a8:	2700      	movs	r7, #0
 80070aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ac:	e9c5 0100 	strd	r0, r1, [r5]
 80070b0:	3b08      	subs	r3, #8
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	9504      	str	r5, [sp, #16]
 80070b6:	9b07      	ldr	r3, [sp, #28]
 80070b8:	4599      	cmp	r9, r3
 80070ba:	dd05      	ble.n	80070c8 <__kernel_rem_pio2+0x3a8>
 80070bc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80070c0:	f108 0801 	add.w	r8, r8, #1
 80070c4:	3508      	adds	r5, #8
 80070c6:	e7e0      	b.n	800708a <__kernel_rem_pio2+0x36a>
 80070c8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80070cc:	9900      	ldr	r1, [sp, #0]
 80070ce:	f109 0901 	add.w	r9, r9, #1
 80070d2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80070d6:	9100      	str	r1, [sp, #0]
 80070d8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80070dc:	f8cd c010 	str.w	ip, [sp, #16]
 80070e0:	f7f9 f9f2 	bl	80004c8 <__aeabi_dmul>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 f836 	bl	800015c <__adddf3>
 80070f0:	4606      	mov	r6, r0
 80070f2:	460f      	mov	r7, r1
 80070f4:	e7df      	b.n	80070b6 <__kernel_rem_pio2+0x396>
 80070f6:	3c01      	subs	r4, #1
 80070f8:	e755      	b.n	8006fa6 <__kernel_rem_pio2+0x286>
 80070fa:	f1cb 0200 	rsb	r2, fp, #0
 80070fe:	4640      	mov	r0, r8
 8007100:	4649      	mov	r1, r9
 8007102:	f000 f94d 	bl	80073a0 <scalbn>
 8007106:	2200      	movs	r2, #0
 8007108:	4ba3      	ldr	r3, [pc, #652]	; (8007398 <__kernel_rem_pio2+0x678>)
 800710a:	4604      	mov	r4, r0
 800710c:	460d      	mov	r5, r1
 800710e:	f7f9 fc61 	bl	80009d4 <__aeabi_dcmpge>
 8007112:	b1f8      	cbz	r0, 8007154 <__kernel_rem_pio2+0x434>
 8007114:	2200      	movs	r2, #0
 8007116:	4ba1      	ldr	r3, [pc, #644]	; (800739c <__kernel_rem_pio2+0x67c>)
 8007118:	4620      	mov	r0, r4
 800711a:	4629      	mov	r1, r5
 800711c:	f7f9 f9d4 	bl	80004c8 <__aeabi_dmul>
 8007120:	f7f9 fc6c 	bl	80009fc <__aeabi_d2iz>
 8007124:	4607      	mov	r7, r0
 8007126:	f7f9 f965 	bl	80003f4 <__aeabi_i2d>
 800712a:	2200      	movs	r2, #0
 800712c:	4b9a      	ldr	r3, [pc, #616]	; (8007398 <__kernel_rem_pio2+0x678>)
 800712e:	f7f9 f9cb 	bl	80004c8 <__aeabi_dmul>
 8007132:	460b      	mov	r3, r1
 8007134:	4602      	mov	r2, r0
 8007136:	4629      	mov	r1, r5
 8007138:	4620      	mov	r0, r4
 800713a:	f7f9 f80d 	bl	8000158 <__aeabi_dsub>
 800713e:	f7f9 fc5d 	bl	80009fc <__aeabi_d2iz>
 8007142:	1c74      	adds	r4, r6, #1
 8007144:	ab0c      	add	r3, sp, #48	; 0x30
 8007146:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800714a:	f10b 0b18 	add.w	fp, fp, #24
 800714e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8007152:	e730      	b.n	8006fb6 <__kernel_rem_pio2+0x296>
 8007154:	4620      	mov	r0, r4
 8007156:	4629      	mov	r1, r5
 8007158:	f7f9 fc50 	bl	80009fc <__aeabi_d2iz>
 800715c:	ab0c      	add	r3, sp, #48	; 0x30
 800715e:	4634      	mov	r4, r6
 8007160:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007164:	e727      	b.n	8006fb6 <__kernel_rem_pio2+0x296>
 8007166:	ab0c      	add	r3, sp, #48	; 0x30
 8007168:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800716c:	f7f9 f942 	bl	80003f4 <__aeabi_i2d>
 8007170:	4632      	mov	r2, r6
 8007172:	463b      	mov	r3, r7
 8007174:	f7f9 f9a8 	bl	80004c8 <__aeabi_dmul>
 8007178:	4642      	mov	r2, r8
 800717a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800717e:	464b      	mov	r3, r9
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 f9a0 	bl	80004c8 <__aeabi_dmul>
 8007188:	f10a 3aff 	add.w	sl, sl, #4294967295
 800718c:	4606      	mov	r6, r0
 800718e:	460f      	mov	r7, r1
 8007190:	e721      	b.n	8006fd6 <__kernel_rem_pio2+0x2b6>
 8007192:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007196:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800719a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800719e:	f8cd c01c 	str.w	ip, [sp, #28]
 80071a2:	f7f9 f991 	bl	80004c8 <__aeabi_dmul>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4650      	mov	r0, sl
 80071ac:	4659      	mov	r1, fp
 80071ae:	f7f8 ffd5 	bl	800015c <__adddf3>
 80071b2:	4682      	mov	sl, r0
 80071b4:	468b      	mov	fp, r1
 80071b6:	f108 0801 	add.w	r8, r8, #1
 80071ba:	9b02      	ldr	r3, [sp, #8]
 80071bc:	4598      	cmp	r8, r3
 80071be:	dc01      	bgt.n	80071c4 <__kernel_rem_pio2+0x4a4>
 80071c0:	45b8      	cmp	r8, r7
 80071c2:	dde6      	ble.n	8007192 <__kernel_rem_pio2+0x472>
 80071c4:	ab48      	add	r3, sp, #288	; 0x120
 80071c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80071ca:	e9c7 ab00 	strd	sl, fp, [r7]
 80071ce:	3e01      	subs	r6, #1
 80071d0:	e706      	b.n	8006fe0 <__kernel_rem_pio2+0x2c0>
 80071d2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	dc09      	bgt.n	80071ec <__kernel_rem_pio2+0x4cc>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	dc32      	bgt.n	8007242 <__kernel_rem_pio2+0x522>
 80071dc:	d058      	beq.n	8007290 <__kernel_rem_pio2+0x570>
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	f003 0007 	and.w	r0, r3, #7
 80071e4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ec:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d1f5      	bne.n	80071de <__kernel_rem_pio2+0x4be>
 80071f2:	ab48      	add	r3, sp, #288	; 0x120
 80071f4:	441d      	add	r5, r3
 80071f6:	46aa      	mov	sl, r5
 80071f8:	46a3      	mov	fp, r4
 80071fa:	f1bb 0f00 	cmp.w	fp, #0
 80071fe:	dc74      	bgt.n	80072ea <__kernel_rem_pio2+0x5ca>
 8007200:	46aa      	mov	sl, r5
 8007202:	46a3      	mov	fp, r4
 8007204:	f1bb 0f01 	cmp.w	fp, #1
 8007208:	f300 808e 	bgt.w	8007328 <__kernel_rem_pio2+0x608>
 800720c:	2700      	movs	r7, #0
 800720e:	463e      	mov	r6, r7
 8007210:	2c01      	cmp	r4, #1
 8007212:	f300 80a8 	bgt.w	8007366 <__kernel_rem_pio2+0x646>
 8007216:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800721a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800721e:	9b00      	ldr	r3, [sp, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f040 80aa 	bne.w	800737a <__kernel_rem_pio2+0x65a>
 8007226:	4603      	mov	r3, r0
 8007228:	462a      	mov	r2, r5
 800722a:	9806      	ldr	r0, [sp, #24]
 800722c:	e9c0 2300 	strd	r2, r3, [r0]
 8007230:	4622      	mov	r2, r4
 8007232:	460b      	mov	r3, r1
 8007234:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007238:	463a      	mov	r2, r7
 800723a:	4633      	mov	r3, r6
 800723c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007240:	e7cd      	b.n	80071de <__kernel_rem_pio2+0x4be>
 8007242:	2000      	movs	r0, #0
 8007244:	46a0      	mov	r8, r4
 8007246:	4601      	mov	r1, r0
 8007248:	ab48      	add	r3, sp, #288	; 0x120
 800724a:	441d      	add	r5, r3
 800724c:	f1b8 0f00 	cmp.w	r8, #0
 8007250:	da38      	bge.n	80072c4 <__kernel_rem_pio2+0x5a4>
 8007252:	9b00      	ldr	r3, [sp, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d03c      	beq.n	80072d2 <__kernel_rem_pio2+0x5b2>
 8007258:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800725c:	4602      	mov	r2, r0
 800725e:	462b      	mov	r3, r5
 8007260:	9d06      	ldr	r5, [sp, #24]
 8007262:	2601      	movs	r6, #1
 8007264:	e9c5 2300 	strd	r2, r3, [r5]
 8007268:	460b      	mov	r3, r1
 800726a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800726e:	f7f8 ff73 	bl	8000158 <__aeabi_dsub>
 8007272:	4684      	mov	ip, r0
 8007274:	460f      	mov	r7, r1
 8007276:	ad48      	add	r5, sp, #288	; 0x120
 8007278:	42b4      	cmp	r4, r6
 800727a:	da2c      	bge.n	80072d6 <__kernel_rem_pio2+0x5b6>
 800727c:	9b00      	ldr	r3, [sp, #0]
 800727e:	b10b      	cbz	r3, 8007284 <__kernel_rem_pio2+0x564>
 8007280:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007284:	4662      	mov	r2, ip
 8007286:	463b      	mov	r3, r7
 8007288:	9906      	ldr	r1, [sp, #24]
 800728a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800728e:	e7a6      	b.n	80071de <__kernel_rem_pio2+0x4be>
 8007290:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007292:	ab48      	add	r3, sp, #288	; 0x120
 8007294:	4637      	mov	r7, r6
 8007296:	441d      	add	r5, r3
 8007298:	2c00      	cmp	r4, #0
 800729a:	da09      	bge.n	80072b0 <__kernel_rem_pio2+0x590>
 800729c:	9b00      	ldr	r3, [sp, #0]
 800729e:	b10b      	cbz	r3, 80072a4 <__kernel_rem_pio2+0x584>
 80072a0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80072a4:	4632      	mov	r2, r6
 80072a6:	463b      	mov	r3, r7
 80072a8:	9906      	ldr	r1, [sp, #24]
 80072aa:	e9c1 2300 	strd	r2, r3, [r1]
 80072ae:	e796      	b.n	80071de <__kernel_rem_pio2+0x4be>
 80072b0:	4630      	mov	r0, r6
 80072b2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80072b6:	4639      	mov	r1, r7
 80072b8:	f7f8 ff50 	bl	800015c <__adddf3>
 80072bc:	3c01      	subs	r4, #1
 80072be:	4606      	mov	r6, r0
 80072c0:	460f      	mov	r7, r1
 80072c2:	e7e9      	b.n	8007298 <__kernel_rem_pio2+0x578>
 80072c4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80072c8:	f7f8 ff48 	bl	800015c <__adddf3>
 80072cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80072d0:	e7bc      	b.n	800724c <__kernel_rem_pio2+0x52c>
 80072d2:	460d      	mov	r5, r1
 80072d4:	e7c2      	b.n	800725c <__kernel_rem_pio2+0x53c>
 80072d6:	4660      	mov	r0, ip
 80072d8:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80072dc:	4639      	mov	r1, r7
 80072de:	f7f8 ff3d 	bl	800015c <__adddf3>
 80072e2:	3601      	adds	r6, #1
 80072e4:	4684      	mov	ip, r0
 80072e6:	460f      	mov	r7, r1
 80072e8:	e7c6      	b.n	8007278 <__kernel_rem_pio2+0x558>
 80072ea:	e9da 6700 	ldrd	r6, r7, [sl]
 80072ee:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80072f2:	4632      	mov	r2, r6
 80072f4:	463b      	mov	r3, r7
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	f7f8 ff2f 	bl	800015c <__adddf3>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f8 ff25 	bl	8000158 <__aeabi_dsub>
 800730e:	4632      	mov	r2, r6
 8007310:	463b      	mov	r3, r7
 8007312:	f7f8 ff23 	bl	800015c <__adddf3>
 8007316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800731a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800731e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007322:	e9ca 2300 	strd	r2, r3, [sl]
 8007326:	e768      	b.n	80071fa <__kernel_rem_pio2+0x4da>
 8007328:	e9da 8900 	ldrd	r8, r9, [sl]
 800732c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007330:	4642      	mov	r2, r8
 8007332:	464b      	mov	r3, r9
 8007334:	4630      	mov	r0, r6
 8007336:	4639      	mov	r1, r7
 8007338:	f7f8 ff10 	bl	800015c <__adddf3>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007344:	4630      	mov	r0, r6
 8007346:	4639      	mov	r1, r7
 8007348:	f7f8 ff06 	bl	8000158 <__aeabi_dsub>
 800734c:	4642      	mov	r2, r8
 800734e:	464b      	mov	r3, r9
 8007350:	f7f8 ff04 	bl	800015c <__adddf3>
 8007354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007358:	e86a 0102 	strd	r0, r1, [sl], #-8
 800735c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007360:	e9ca 2300 	strd	r2, r3, [sl]
 8007364:	e74e      	b.n	8007204 <__kernel_rem_pio2+0x4e4>
 8007366:	4638      	mov	r0, r7
 8007368:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800736c:	4631      	mov	r1, r6
 800736e:	f7f8 fef5 	bl	800015c <__adddf3>
 8007372:	3c01      	subs	r4, #1
 8007374:	4607      	mov	r7, r0
 8007376:	460e      	mov	r6, r1
 8007378:	e74a      	b.n	8007210 <__kernel_rem_pio2+0x4f0>
 800737a:	9b06      	ldr	r3, [sp, #24]
 800737c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007380:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007384:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007388:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800738c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007390:	601d      	str	r5, [r3, #0]
 8007392:	615e      	str	r6, [r3, #20]
 8007394:	e723      	b.n	80071de <__kernel_rem_pio2+0x4be>
 8007396:	bf00      	nop
 8007398:	41700000 	.word	0x41700000
 800739c:	3e700000 	.word	0x3e700000

080073a0 <scalbn>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	4616      	mov	r6, r2
 80073a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80073a8:	4604      	mov	r4, r0
 80073aa:	460d      	mov	r5, r1
 80073ac:	460b      	mov	r3, r1
 80073ae:	b992      	cbnz	r2, 80073d6 <scalbn+0x36>
 80073b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073b4:	4303      	orrs	r3, r0
 80073b6:	d03c      	beq.n	8007432 <scalbn+0x92>
 80073b8:	4b31      	ldr	r3, [pc, #196]	; (8007480 <scalbn+0xe0>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	f7f9 f884 	bl	80004c8 <__aeabi_dmul>
 80073c0:	4b30      	ldr	r3, [pc, #192]	; (8007484 <scalbn+0xe4>)
 80073c2:	4604      	mov	r4, r0
 80073c4:	429e      	cmp	r6, r3
 80073c6:	460d      	mov	r5, r1
 80073c8:	da0f      	bge.n	80073ea <scalbn+0x4a>
 80073ca:	a329      	add	r3, pc, #164	; (adr r3, 8007470 <scalbn+0xd0>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f7f9 f87a 	bl	80004c8 <__aeabi_dmul>
 80073d4:	e006      	b.n	80073e4 <scalbn+0x44>
 80073d6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80073da:	42ba      	cmp	r2, r7
 80073dc:	d109      	bne.n	80073f2 <scalbn+0x52>
 80073de:	4602      	mov	r2, r0
 80073e0:	f7f8 febc 	bl	800015c <__adddf3>
 80073e4:	4604      	mov	r4, r0
 80073e6:	460d      	mov	r5, r1
 80073e8:	e023      	b.n	8007432 <scalbn+0x92>
 80073ea:	460b      	mov	r3, r1
 80073ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80073f0:	3a36      	subs	r2, #54	; 0x36
 80073f2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80073f6:	428e      	cmp	r6, r1
 80073f8:	dd0e      	ble.n	8007418 <scalbn+0x78>
 80073fa:	a31f      	add	r3, pc, #124	; (adr r3, 8007478 <scalbn+0xd8>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007404:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007408:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800740c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007410:	481d      	ldr	r0, [pc, #116]	; (8007488 <scalbn+0xe8>)
 8007412:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007416:	e7db      	b.n	80073d0 <scalbn+0x30>
 8007418:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800741c:	4432      	add	r2, r6
 800741e:	428a      	cmp	r2, r1
 8007420:	dceb      	bgt.n	80073fa <scalbn+0x5a>
 8007422:	2a00      	cmp	r2, #0
 8007424:	dd08      	ble.n	8007438 <scalbn+0x98>
 8007426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800742a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800742e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007432:	4620      	mov	r0, r4
 8007434:	4629      	mov	r1, r5
 8007436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007438:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800743c:	da0c      	bge.n	8007458 <scalbn+0xb8>
 800743e:	a30c      	add	r3, pc, #48	; (adr r3, 8007470 <scalbn+0xd0>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007448:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800744c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007450:	480e      	ldr	r0, [pc, #56]	; (800748c <scalbn+0xec>)
 8007452:	f041 011f 	orr.w	r1, r1, #31
 8007456:	e7bb      	b.n	80073d0 <scalbn+0x30>
 8007458:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800745c:	3236      	adds	r2, #54	; 0x36
 800745e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007462:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007466:	4620      	mov	r0, r4
 8007468:	4629      	mov	r1, r5
 800746a:	2200      	movs	r2, #0
 800746c:	4b08      	ldr	r3, [pc, #32]	; (8007490 <scalbn+0xf0>)
 800746e:	e7af      	b.n	80073d0 <scalbn+0x30>
 8007470:	c2f8f359 	.word	0xc2f8f359
 8007474:	01a56e1f 	.word	0x01a56e1f
 8007478:	8800759c 	.word	0x8800759c
 800747c:	7e37e43c 	.word	0x7e37e43c
 8007480:	43500000 	.word	0x43500000
 8007484:	ffff3cb0 	.word	0xffff3cb0
 8007488:	8800759c 	.word	0x8800759c
 800748c:	c2f8f359 	.word	0xc2f8f359
 8007490:	3c900000 	.word	0x3c900000
 8007494:	00000000 	.word	0x00000000

08007498 <floor>:
 8007498:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800749c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80074a4:	2e13      	cmp	r6, #19
 80074a6:	460b      	mov	r3, r1
 80074a8:	4607      	mov	r7, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	4605      	mov	r5, r0
 80074ae:	dc32      	bgt.n	8007516 <floor+0x7e>
 80074b0:	2e00      	cmp	r6, #0
 80074b2:	da14      	bge.n	80074de <floor+0x46>
 80074b4:	a334      	add	r3, pc, #208	; (adr r3, 8007588 <floor+0xf0>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f8 fe4f 	bl	800015c <__adddf3>
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	f7f9 fa91 	bl	80009e8 <__aeabi_dcmpgt>
 80074c6:	b138      	cbz	r0, 80074d8 <floor+0x40>
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	da56      	bge.n	800757a <floor+0xe2>
 80074cc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80074d0:	4325      	orrs	r5, r4
 80074d2:	d055      	beq.n	8007580 <floor+0xe8>
 80074d4:	2500      	movs	r5, #0
 80074d6:	4c2e      	ldr	r4, [pc, #184]	; (8007590 <floor+0xf8>)
 80074d8:	4623      	mov	r3, r4
 80074da:	462f      	mov	r7, r5
 80074dc:	e025      	b.n	800752a <floor+0x92>
 80074de:	4a2d      	ldr	r2, [pc, #180]	; (8007594 <floor+0xfc>)
 80074e0:	fa42 f806 	asr.w	r8, r2, r6
 80074e4:	ea01 0208 	and.w	r2, r1, r8
 80074e8:	4302      	orrs	r2, r0
 80074ea:	d01e      	beq.n	800752a <floor+0x92>
 80074ec:	a326      	add	r3, pc, #152	; (adr r3, 8007588 <floor+0xf0>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f8 fe33 	bl	800015c <__adddf3>
 80074f6:	2200      	movs	r2, #0
 80074f8:	2300      	movs	r3, #0
 80074fa:	f7f9 fa75 	bl	80009e8 <__aeabi_dcmpgt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d0ea      	beq.n	80074d8 <floor+0x40>
 8007502:	2c00      	cmp	r4, #0
 8007504:	bfbe      	ittt	lt
 8007506:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800750a:	4133      	asrlt	r3, r6
 800750c:	18e4      	addlt	r4, r4, r3
 800750e:	2500      	movs	r5, #0
 8007510:	ea24 0408 	bic.w	r4, r4, r8
 8007514:	e7e0      	b.n	80074d8 <floor+0x40>
 8007516:	2e33      	cmp	r6, #51	; 0x33
 8007518:	dd0b      	ble.n	8007532 <floor+0x9a>
 800751a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800751e:	d104      	bne.n	800752a <floor+0x92>
 8007520:	4602      	mov	r2, r0
 8007522:	f7f8 fe1b 	bl	800015c <__adddf3>
 8007526:	4607      	mov	r7, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4638      	mov	r0, r7
 800752c:	4619      	mov	r1, r3
 800752e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007532:	f04f 38ff 	mov.w	r8, #4294967295
 8007536:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800753a:	fa28 f802 	lsr.w	r8, r8, r2
 800753e:	ea10 0f08 	tst.w	r0, r8
 8007542:	d0f2      	beq.n	800752a <floor+0x92>
 8007544:	a310      	add	r3, pc, #64	; (adr r3, 8007588 <floor+0xf0>)
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	f7f8 fe07 	bl	800015c <__adddf3>
 800754e:	2200      	movs	r2, #0
 8007550:	2300      	movs	r3, #0
 8007552:	f7f9 fa49 	bl	80009e8 <__aeabi_dcmpgt>
 8007556:	2800      	cmp	r0, #0
 8007558:	d0be      	beq.n	80074d8 <floor+0x40>
 800755a:	2c00      	cmp	r4, #0
 800755c:	da0a      	bge.n	8007574 <floor+0xdc>
 800755e:	2e14      	cmp	r6, #20
 8007560:	d101      	bne.n	8007566 <floor+0xce>
 8007562:	3401      	adds	r4, #1
 8007564:	e006      	b.n	8007574 <floor+0xdc>
 8007566:	2301      	movs	r3, #1
 8007568:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800756c:	40b3      	lsls	r3, r6
 800756e:	441d      	add	r5, r3
 8007570:	42af      	cmp	r7, r5
 8007572:	d8f6      	bhi.n	8007562 <floor+0xca>
 8007574:	ea25 0508 	bic.w	r5, r5, r8
 8007578:	e7ae      	b.n	80074d8 <floor+0x40>
 800757a:	2500      	movs	r5, #0
 800757c:	462c      	mov	r4, r5
 800757e:	e7ab      	b.n	80074d8 <floor+0x40>
 8007580:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007584:	e7a8      	b.n	80074d8 <floor+0x40>
 8007586:	bf00      	nop
 8007588:	8800759c 	.word	0x8800759c
 800758c:	7e37e43c 	.word	0x7e37e43c
 8007590:	bff00000 	.word	0xbff00000
 8007594:	000fffff 	.word	0x000fffff

08007598 <_init>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr

080075a4 <_fini>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr
