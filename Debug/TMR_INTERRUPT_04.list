
TMR_INTERRUPT_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c00  08002c00  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c00  08002c00  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c00  08002c00  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c04  08002c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08002c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000016c  08002d74  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08002d74  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b2b  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001922  00000000  00000000  00029cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000151c  00000000  00000000  0002ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afe5  00000000  00000000  0002df5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089236  00000000  00000000  00038f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b8c  00000000  00000000  000c21c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000016c 	.word	0x2000016c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ba8 	.word	0x08002ba8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000170 	.word	0x20000170
 8000148:	08002ba8 	.word	0x08002ba8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000150:	f000 fc60 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f868 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f99a 	bl	8000490 <MX_GPIO_Init>
  MX_TIM4_Init();
 800015c:	f000 f94a 	bl	80003f4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000160:	f000 f8fa 	bl	8000358 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000164:	f000 f8ba 	bl	80002dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim4);
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <main+0xb8>)
 800016a:	f002 f943 	bl	80023f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <main+0xbc>)
 8000170:	f002 f940 	bl	80023f4 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOC, DIG1, 0);
 8000174:	2200      	movs	r2, #0
 8000176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017a:	4824      	ldr	r0, [pc, #144]	; (800020c <main+0xc0>)
 800017c:	f001 fb6a 	bl	8001854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG2, 0);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000186:	4821      	ldr	r0, [pc, #132]	; (800020c <main+0xc0>)
 8000188:	f001 fb64 	bl	8001854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG3, 0);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000192:	481e      	ldr	r0, [pc, #120]	; (800020c <main+0xc0>)
 8000194:	f001 fb5e 	bl	8001854 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000198:	481d      	ldr	r0, [pc, #116]	; (8000210 <main+0xc4>)
 800019a:	f000 fd75 	bl	8000c88 <HAL_ADC_Start>
  /* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		HAL_ADC_PollForConversion(&hadc1, 1000);
 800019e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001a2:	481b      	ldr	r0, [pc, #108]	; (8000210 <main+0xc4>)
 80001a4:	f000 fe1e 	bl	8000de4 <HAL_ADC_PollForConversion>
		readValue = HAL_ADC_GetValue(&hadc1);
 80001a8:	4819      	ldr	r0, [pc, #100]	; (8000210 <main+0xc4>)
 80001aa:	f000 ff21 	bl	8000ff0 <HAL_ADC_GetValue>
 80001ae:	4603      	mov	r3, r0
 80001b0:	b29a      	uxth	r2, r3
 80001b2:	4b18      	ldr	r3, [pc, #96]	; (8000214 <main+0xc8>)
 80001b4:	801a      	strh	r2, [r3, #0]

		var = AnalogHandler(readValue);
 80001b6:	4b17      	ldr	r3, [pc, #92]	; (8000214 <main+0xc8>)
 80001b8:	881b      	ldrh	r3, [r3, #0]
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f9ca 	bl	8000554 <AnalogHandler>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4a15      	ldr	r2, [pc, #84]	; (8000218 <main+0xcc>)
 80001c4:	6013      	str	r3, [r2, #0]

		DigitExtract(var);
 80001c6:	4b14      	ldr	r3, [pc, #80]	; (8000218 <main+0xcc>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 faa2 	bl	8000714 <DigitExtract>
		Display(unid, 1);
 80001d0:	4b12      	ldr	r3, [pc, #72]	; (800021c <main+0xd0>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2101      	movs	r1, #1
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 f9e0 	bl	800059c <Display>
		Display(dez, 2);
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <main+0xd4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2102      	movs	r1, #2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f9da 	bl	800059c <Display>
		if(cent==0){
 80001e8:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <main+0xd8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d102      	bne.n	80001f6 <main+0xaa>
			cent=10;
 80001f0:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <main+0xd8>)
 80001f2:	220a      	movs	r2, #10
 80001f4:	601a      	str	r2, [r3, #0]
		}
		Display(cent, 3);
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <main+0xd8>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2103      	movs	r1, #3
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f9cd 	bl	800059c <Display>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000202:	e7cc      	b.n	800019e <main+0x52>
 8000204:	20000200 	.word	0x20000200
 8000208:	200001b8 	.word	0x200001b8
 800020c:	40011000 	.word	0x40011000
 8000210:	20000188 	.word	0x20000188
 8000214:	20000260 	.word	0x20000260
 8000218:	20000248 	.word	0x20000248
 800021c:	20000250 	.word	0x20000250
 8000220:	20000254 	.word	0x20000254
 8000224:	20000258 	.word	0x20000258

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fcae 	bl	8002b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fb00 	bl	8001884 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 fab3 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fd6c 	bl	8001d88 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 fa9d 	bl	80007f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ba:	2302      	movs	r3, #2
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fed9 	bl	800207c <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d0:	f000 fa90 	bl	80007f4 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	; 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_ADC1_Init+0x74>)
 80002ee:	4a19      	ldr	r2, [pc, #100]	; (8000354 <MX_ADC1_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_ADC1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_ADC1_Init+0x74>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_ADC1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_ADC1_Init+0x74>)
 8000306:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_ADC1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_ADC1_Init+0x74>)
 8000314:	2201      	movs	r2, #1
 8000316:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <MX_ADC1_Init+0x74>)
 800031a:	f000 fbdd 	bl	8000ad8 <HAL_ADC_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000324:	f000 fa66 	bl	80007f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000328:	2309      	movs	r3, #9
 800032a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_ADC1_Init+0x74>)
 800033a:	f000 fe65 	bl	8001008 <HAL_ADC_ConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000344:	f000 fa56 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000188 	.word	0x20000188
 8000354:	40012400 	.word	0x40012400

08000358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036c:	463b      	mov	r3, r7
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_TIM3_Init+0x94>)
 8000376:	4a1e      	ldr	r2, [pc, #120]	; (80003f0 <MX_TIM3_Init+0x98>)
 8000378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <MX_TIM3_Init+0x94>)
 800037c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_TIM3_Init+0x94>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_TIM3_Init+0x94>)
 800038a:	2201      	movs	r2, #1
 800038c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <MX_TIM3_Init+0x94>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_TIM3_Init+0x94>)
 8000396:	2200      	movs	r2, #0
 8000398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800039a:	4814      	ldr	r0, [pc, #80]	; (80003ec <MX_TIM3_Init+0x94>)
 800039c:	f001 ffda 	bl	8002354 <HAL_TIM_Base_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80003a6:	f000 fa25 	bl	80007f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	4619      	mov	r1, r3
 80003b6:	480d      	ldr	r0, [pc, #52]	; (80003ec <MX_TIM3_Init+0x94>)
 80003b8:	f002 f976 	bl	80026a8 <HAL_TIM_ConfigClockSource>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 fa17 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4619      	mov	r1, r3
 80003d2:	4806      	ldr	r0, [pc, #24]	; (80003ec <MX_TIM3_Init+0x94>)
 80003d4:	f002 fb4c 	bl	8002a70 <HAL_TIMEx_MasterConfigSynchronization>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80003de:	f000 fa09 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200001b8 	.word	0x200001b8
 80003f0:	40000400 	.word	0x40000400

080003f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000408:	463b      	mov	r3, r7
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <MX_TIM4_Init+0x94>)
 8000412:	4a1e      	ldr	r2, [pc, #120]	; (800048c <MX_TIM4_Init+0x98>)
 8000414:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_TIM4_Init+0x94>)
 8000418:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800041c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <MX_TIM4_Init+0x94>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_TIM4_Init+0x94>)
 8000426:	2201      	movs	r2, #1
 8000428:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <MX_TIM4_Init+0x94>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_TIM4_Init+0x94>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000436:	4814      	ldr	r0, [pc, #80]	; (8000488 <MX_TIM4_Init+0x94>)
 8000438:	f001 ff8c 	bl	8002354 <HAL_TIM_Base_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f9d7 	bl	80007f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800044c:	f107 0308 	add.w	r3, r7, #8
 8000450:	4619      	mov	r1, r3
 8000452:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_TIM4_Init+0x94>)
 8000454:	f002 f928 	bl	80026a8 <HAL_TIM_ConfigClockSource>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800045e:	f000 f9c9 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000462:	2300      	movs	r3, #0
 8000464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800046a:	463b      	mov	r3, r7
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_TIM4_Init+0x94>)
 8000470:	f002 fafe 	bl	8002a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800047a:	f000 f9bb 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000200 	.word	0x20000200
 800048c:	40000800 	.word	0x40000800

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a27      	ldr	r2, [pc, #156]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b25      	ldr	r3, [pc, #148]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004bc:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a21      	ldr	r2, [pc, #132]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0320 	and.w	r3, r3, #32
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b19      	ldr	r3, [pc, #100]	; (8000548 <MX_GPIO_Init+0xb8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80004f2:	4816      	ldr	r0, [pc, #88]	; (800054c <MX_GPIO_Init+0xbc>)
 80004f4:	f001 f9ae 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80004fe:	4814      	ldr	r0, [pc, #80]	; (8000550 <MX_GPIO_Init+0xc0>)
 8000500:	f001 f9a8 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
 8000504:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <MX_GPIO_Init+0xbc>)
 800051e:	f001 f815 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : SHCP_pin_Pin STCP_pin_Pin DS_pin_Pin */
  GPIO_InitStruct.Pin = SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin;
 8000522:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2302      	movs	r3, #2
 8000532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_GPIO_Init+0xc0>)
 800053c:	f001 f806 	bl	800154c <HAL_GPIO_Init>

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	40011000 	.word	0x40011000
 8000550:	40010c00 	.word	0x40010c00

08000554 <AnalogHandler>:

/* USER CODE BEGIN 4 */

int AnalogHandler(int Value){
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

	Value = Value*100/4095;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2264      	movs	r2, #100	; 0x64
 8000560:	fb02 f303 	mul.w	r3, r2, r3
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <AnalogHandler+0x44>)
 8000566:	fb82 1203 	smull	r1, r2, r2, r3
 800056a:	441a      	add	r2, r3
 800056c:	12d2      	asrs	r2, r2, #11
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	607b      	str	r3, [r7, #4]

	if ( Value > 100){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b64      	cmp	r3, #100	; 0x64
 8000578:	dd02      	ble.n	8000580 <AnalogHandler+0x2c>
		Value = 100;
 800057a:	2364      	movs	r3, #100	; 0x64
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	e004      	b.n	800058a <AnalogHandler+0x36>
	}else if ( Value < 0){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b00      	cmp	r3, #0
 8000584:	da01      	bge.n	800058a <AnalogHandler+0x36>
		Value = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
	}

	return Value;
 800058a:	687b      	ldr	r3, [r7, #4]

}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	80080081 	.word	0x80080081

0800059c <Display>:

//void Display(struct display_data *handle){
void Display(int value, int digit) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]

	/* Versão com delay*/


	downcounter=100;while(downcounter>0){};
 80005a6:	4b57      	ldr	r3, [pc, #348]	; (8000704 <Display+0x168>)
 80005a8:	2264      	movs	r2, #100	; 0x64
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	bf00      	nop
 80005ae:	4b55      	ldr	r3, [pc, #340]	; (8000704 <Display+0x168>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dcfb      	bgt.n	80005ae <Display+0x12>
		HAL_GPIO_WritePin(GPIOB, STCP_pin, 0); // INICIO DA MENSAGEM
 80005b6:	2200      	movs	r2, #0
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4853      	ldr	r0, [pc, #332]	; (8000708 <Display+0x16c>)
 80005bc:	f001 f94a 	bl	8001854 <HAL_GPIO_WritePin>
//		HAL_Delay(0.05);

	for (int index = 7; index >= 0; index--) {
 80005c0:	2307      	movs	r3, #7
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e03b      	b.n	800063e <Display+0xa2>


			HAL_GPIO_WritePin(GPIOB, SHCP_pin, 0); //CLOCK LOW
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005cc:	484e      	ldr	r0, [pc, #312]	; (8000708 <Display+0x16c>)
 80005ce:	f001 f941 	bl	8001854 <HAL_GPIO_WritePin>
			downcounter=10;while(downcounter>0);
 80005d2:	4b4c      	ldr	r3, [pc, #304]	; (8000704 <Display+0x168>)
 80005d4:	220a      	movs	r2, #10
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	bf00      	nop
 80005da:	4b4a      	ldr	r3, [pc, #296]	; (8000704 <Display+0x168>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dcfb      	bgt.n	80005da <Display+0x3e>
			//HAL_Delay(0.01);

			if (digits[value][index] == 1) {
 80005e2:	494a      	ldr	r1, [pc, #296]	; (800070c <Display+0x170>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	00da      	lsls	r2, r3, #3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d105      	bne.n	8000600 <Display+0x64>
				HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 80005f4:	2201      	movs	r2, #1
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4843      	ldr	r0, [pc, #268]	; (8000708 <Display+0x16c>)
 80005fa:	f001 f92b 	bl	8001854 <HAL_GPIO_WritePin>
 80005fe:	e00d      	b.n	800061c <Display+0x80>
			}

			else if (digits[value][index] == 0) {
 8000600:	4942      	ldr	r1, [pc, #264]	; (800070c <Display+0x170>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	00da      	lsls	r2, r3, #3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d104      	bne.n	800061c <Display+0x80>
				HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8000612:	2200      	movs	r2, #0
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	483c      	ldr	r0, [pc, #240]	; (8000708 <Display+0x16c>)
 8000618:	f001 f91c 	bl	8001854 <HAL_GPIO_WritePin>
			}
			HAL_GPIO_WritePin(GPIOB, SHCP_pin, 1); //CLOCK HIGH
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000622:	4839      	ldr	r0, [pc, #228]	; (8000708 <Display+0x16c>)
 8000624:	f001 f916 	bl	8001854 <HAL_GPIO_WritePin>
			downcounter=10;while(downcounter>0);
 8000628:	4b36      	ldr	r3, [pc, #216]	; (8000704 <Display+0x168>)
 800062a:	220a      	movs	r2, #10
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	bf00      	nop
 8000630:	4b34      	ldr	r3, [pc, #208]	; (8000704 <Display+0x168>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	dcfb      	bgt.n	8000630 <Display+0x94>
	for (int index = 7; index >= 0; index--) {
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3b01      	subs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	dac0      	bge.n	80005c6 <Display+0x2a>
			//HAL_Delay(0.01);
	}

	HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);  // fim da mensagem (SEND ou LATCH)
 8000644:	2201      	movs	r2, #1
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	482f      	ldr	r0, [pc, #188]	; (8000708 <Display+0x16c>)
 800064a:	f001 f903 	bl	8001854 <HAL_GPIO_WritePin>

	if (digit == 1) {
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d11a      	bne.n	800068a <Display+0xee>
		HAL_GPIO_WritePin(GPIOC, DIG1, 0);			//HAL_Delay(.1);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	482d      	ldr	r0, [pc, #180]	; (8000710 <Display+0x174>)
 800065c:	f001 f8fa 	bl	8001854 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, DIG2, 0);			//HAL_Delay(.1);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000666:	482a      	ldr	r0, [pc, #168]	; (8000710 <Display+0x174>)
 8000668:	f001 f8f4 	bl	8001854 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, DIG3, 1);			//HAL_Delay(.1);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000672:	4827      	ldr	r0, [pc, #156]	; (8000710 <Display+0x174>)
 8000674:	f001 f8ee 	bl	8001854 <HAL_GPIO_WritePin>
		downcounter=10;while(downcounter>0);
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <Display+0x168>)
 800067a:	220a      	movs	r2, #10
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	bf00      	nop
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <Display+0x168>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	dcfb      	bgt.n	8000680 <Display+0xe4>
			HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
		}
	}
		 */

}
 8000688:	e037      	b.n	80006fa <Display+0x15e>
	} else if (digit == 2) {
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d11a      	bne.n	80006c6 <Display+0x12a>
		HAL_GPIO_WritePin(GPIOC, DIG1, 0);			//HAL_Delay(.1);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <Display+0x174>)
 8000698:	f001 f8dc 	bl	8001854 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, DIG2, 1);			//HAL_Delay(.1);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	481b      	ldr	r0, [pc, #108]	; (8000710 <Display+0x174>)
 80006a4:	f001 f8d6 	bl	8001854 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, DIG3, 0);			//HAL_Delay(.1);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ae:	4818      	ldr	r0, [pc, #96]	; (8000710 <Display+0x174>)
 80006b0:	f001 f8d0 	bl	8001854 <HAL_GPIO_WritePin>
		downcounter=10;while(downcounter>0);
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <Display+0x168>)
 80006b6:	220a      	movs	r2, #10
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	bf00      	nop
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <Display+0x168>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dcfb      	bgt.n	80006bc <Display+0x120>
}
 80006c4:	e019      	b.n	80006fa <Display+0x15e>
		HAL_GPIO_WritePin(GPIOC, DIG1, 1);			//HAL_Delay(.1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	4810      	ldr	r0, [pc, #64]	; (8000710 <Display+0x174>)
 80006ce:	f001 f8c1 	bl	8001854 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, DIG2, 0);			//HAL_Delay(.1);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <Display+0x174>)
 80006da:	f001 f8bb 	bl	8001854 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, DIG3, 0);			//HAL_Delay(.1);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e4:	480a      	ldr	r0, [pc, #40]	; (8000710 <Display+0x174>)
 80006e6:	f001 f8b5 	bl	8001854 <HAL_GPIO_WritePin>
		downcounter=10;while(downcounter>0);
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <Display+0x168>)
 80006ec:	220a      	movs	r2, #10
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	bf00      	nop
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <Display+0x168>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	dcfb      	bgt.n	80006f2 <Display+0x156>
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000025c 	.word	0x2000025c
 8000708:	40010c00 	.word	0x40010c00
 800070c:	20000000 	.word	0x20000000
 8000710:	40011000 	.word	0x40011000

08000714 <DigitExtract>:



void DigitExtract(int num) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

//	int unid, dez, cent;
	unid = num % 10;
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <DigitExtract+0x6c>)
 8000720:	fb83 2301 	smull	r2, r3, r3, r1
 8000724:	109a      	asrs	r2, r3, #2
 8000726:	17cb      	asrs	r3, r1, #31
 8000728:	1ad2      	subs	r2, r2, r3
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	1aca      	subs	r2, r1, r3
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <DigitExtract+0x70>)
 8000736:	601a      	str	r2, [r3, #0]
	num = num / 10;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a11      	ldr	r2, [pc, #68]	; (8000780 <DigitExtract+0x6c>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	1092      	asrs	r2, r2, #2
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	607b      	str	r3, [r7, #4]
	dez = num % 10;
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <DigitExtract+0x6c>)
 800074c:	fb83 2301 	smull	r2, r3, r3, r1
 8000750:	109a      	asrs	r2, r3, #2
 8000752:	17cb      	asrs	r3, r1, #31
 8000754:	1ad2      	subs	r2, r2, r3
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	1aca      	subs	r2, r1, r3
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <DigitExtract+0x74>)
 8000762:	601a      	str	r2, [r3, #0]
	cent = num / 10;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <DigitExtract+0x6c>)
 8000768:	fb82 1203 	smull	r1, r2, r2, r3
 800076c:	1092      	asrs	r2, r2, #2
 800076e:	17db      	asrs	r3, r3, #31
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	4a06      	ldr	r2, [pc, #24]	; (800078c <DigitExtract+0x78>)
 8000774:	6013      	str	r3, [r2, #0]

}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	66666667 	.word	0x66666667
 8000784:	20000250 	.word	0x20000250
 8000788:	20000254 	.word	0x20000254
 800078c:	20000258 	.word	0x20000258

08000790 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) //frequencia do timer é de 5 kHz, st=200us
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d10d      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x2e>
	{

		//atualizar a contagem a cada 1000 ms
		if (idx < 501) {
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007aa:	dc05      	bgt.n	80007b8 <HAL_TIM_PeriodElapsedCallback+0x28>

			idx++;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	e002      	b.n	80007be <HAL_TIM_PeriodElapsedCallback+0x2e>

			if (var > 500) {
			//	var = 0;
			}

			idx = 1;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
//			}
//		}

	}

	if (htim->Instance == TIM3) //frequencia do timer é de 50 kHz, time=20us
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d108      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x4a>
	{

		if (downcounter > 0) {
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dd04      	ble.n	80007da <HAL_TIM_PeriodElapsedCallback+0x4a>
			downcounter--;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007d8:	6013      	str	r3, [r2, #0]
		}

	}

}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	40000800 	.word	0x40000800
 80007e8:	2000024c 	.word	0x2000024c
 80007ec:	40000400 	.word	0x40000400
 80007f0:	2000025c 	.word	0x2000025c

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_MspInit+0x40>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <HAL_MspInit+0x40>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <HAL_MspInit+0x40>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_MspInit+0x40>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_MspInit+0x40>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_MspInit+0x40>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <HAL_ADC_MspInit+0x6c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d121      	bne.n	80008a8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_ADC_MspInit+0x70>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <HAL_ADC_MspInit+0x70>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_ADC_MspInit+0x70>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_ADC_MspInit+0x70>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <HAL_ADC_MspInit+0x70>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_ADC_MspInit+0x70>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000894:	2302      	movs	r3, #2
 8000896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_ADC_MspInit+0x74>)
 80008a4:	f000 fe52 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40012400 	.word	0x40012400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010c00 	.word	0x40010c00

080008bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <HAL_TIM_Base_MspInit+0x78>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d114      	bne.n	80008f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <HAL_TIM_Base_MspInit+0x7c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_TIM_Base_MspInit+0x7c>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_TIM_Base_MspInit+0x7c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	201d      	movs	r0, #29
 80008ec:	f000 fdf7 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008f0:	201d      	movs	r0, #29
 80008f2:	f000 fe10 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008f6:	e018      	b.n	800092a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0f      	ldr	r2, [pc, #60]	; (800093c <HAL_TIM_Base_MspInit+0x80>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d113      	bne.n	800092a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_TIM_Base_MspInit+0x7c>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <HAL_TIM_Base_MspInit+0x7c>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_TIM_Base_MspInit+0x7c>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	201e      	movs	r0, #30
 8000920:	f000 fddd 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000924:	201e      	movs	r0, #30
 8000926:	f000 fdf6 	bl	8001516 <HAL_NVIC_EnableIRQ>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40000400 	.word	0x40000400
 8000938:	40021000 	.word	0x40021000
 800093c:	40000800 	.word	0x40000800

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <HardFault_Handler+0x4>

08000952 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <MemManage_Handler+0x4>

08000958 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <BusFault_Handler+0x4>

0800095e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f888 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <TIM3_IRQHandler+0x10>)
 800099a:	f001 fd7d 	bl	8002498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200001b8 	.word	0x200001b8

080009a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <TIM4_IRQHandler+0x10>)
 80009ae:	f001 fd73 	bl	8002498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000200 	.word	0x20000200

080009bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c8:	f7ff fff8 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ce:	490c      	ldr	r1, [pc, #48]	; (8000a00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009e4:	4c09      	ldr	r4, [pc, #36]	; (8000a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f002 f8ad 	bl	8002b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fba9 	bl	800014c <main>
  bx lr
 80009fa:	4770      	bx	lr
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000a04:	08002c08 	.word	0x08002c08
  ldr r2, =_sbss
 8000a08:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000a0c:	20000268 	.word	0x20000268

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x28>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 fd4f 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff fee6 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fd67 	bl	8001532 <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 fd2f 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000160 	.word	0x20000160
 8000a98:	20000168 	.word	0x20000168
 8000a9c:	20000164 	.word	0x20000164

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000168 	.word	0x20000168
 8000ac0:	20000264 	.word	0x20000264

08000ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000264 	.word	0x20000264

08000ad8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e0be      	b.n	8000c78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d109      	bne.n	8000b1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fe94 	bl	8000844 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fbc5 	bl	80012ac <ADC_ConversionStop_Disable>
 8000b22:	4603      	mov	r3, r0
 8000b24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8099 	bne.w	8000c66 <HAL_ADC_Init+0x18e>
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8095 	bne.w	8000c66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b44:	f023 0302 	bic.w	r3, r3, #2
 8000b48:	f043 0202 	orr.w	r2, r3, #2
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7b1b      	ldrb	r3, [r3, #12]
 8000b5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b70:	d003      	beq.n	8000b7a <HAL_ADC_Init+0xa2>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d102      	bne.n	8000b80 <HAL_ADC_Init+0xa8>
 8000b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7e:	e000      	b.n	8000b82 <HAL_ADC_Init+0xaa>
 8000b80:	2300      	movs	r3, #0
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7d1b      	ldrb	r3, [r3, #20]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d119      	bne.n	8000bc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7b1b      	ldrb	r3, [r3, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	035a      	lsls	r2, r3, #13
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	e00b      	b.n	8000bc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	f043 0220 	orr.w	r2, r3, #32
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	f043 0201 	orr.w	r2, r3, #1
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <HAL_ADC_Init+0x1a8>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	6812      	ldr	r2, [r2, #0]
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf4:	d003      	beq.n	8000bfe <HAL_ADC_Init+0x126>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d104      	bne.n	8000c08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	051b      	lsls	r3, r3, #20
 8000c06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_ADC_Init+0x1ac>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d10b      	bne.n	8000c44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	f023 0303 	bic.w	r3, r3, #3
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c42:	e018      	b.n	8000c76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	f023 0312 	bic.w	r3, r3, #18
 8000c4c:	f043 0210 	orr.w	r2, r3, #16
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	f043 0201 	orr.w	r2, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c64:	e007      	b.n	8000c76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	f043 0210 	orr.w	r2, r3, #16
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	ffe1f7fd 	.word	0xffe1f7fd
 8000c84:	ff1f0efe 	.word	0xff1f0efe

08000c88 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Start+0x1a>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e098      	b.n	8000dd4 <HAL_ADC_Start+0x14c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 faa4 	bl	80011f8 <ADC_Enable>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8087 	bne.w	8000dca <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a41      	ldr	r2, [pc, #260]	; (8000ddc <HAL_ADC_Start+0x154>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d105      	bne.n	8000ce6 <HAL_ADC_Start+0x5e>
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_ADC_Start+0x158>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d115      	bne.n	8000d12 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d026      	beq.n	8000d4e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d10:	e01d      	b.n	8000d4e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <HAL_ADC_Start+0x158>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d004      	beq.n	8000d32 <HAL_ADC_Start+0xaa>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <HAL_ADC_Start+0x154>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10d      	bne.n	8000d4e <HAL_ADC_Start+0xc6>
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_ADC_Start+0x158>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d007      	beq.n	8000d4e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	f023 0206 	bic.w	r2, r3, #6
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d66:	e002      	b.n	8000d6e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f06f 0202 	mvn.w	r2, #2
 8000d7e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d8a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d8e:	d113      	bne.n	8000db8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <HAL_ADC_Start+0x154>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d105      	bne.n	8000da6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_ADC_Start+0x158>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d108      	bne.n	8000db8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	e00c      	b.n	8000dd2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	e003      	b.n	8000dd2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40012800 	.word	0x40012800
 8000de0:	40012400 	.word	0x40012400

08000de4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000dfa:	f7ff fe63 	bl	8000ac4 <HAL_GetTick>
 8000dfe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f043 0220 	orr.w	r2, r3, #32
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e0d3      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d131      	bne.n	8000e98 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d12a      	bne.n	8000e98 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e42:	e021      	b.n	8000e88 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4a:	d01d      	beq.n	8000e88 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <HAL_ADC_PollForConversion+0x7e>
 8000e52:	f7ff fe37 	bl	8000ac4 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d212      	bcs.n	8000e88 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10b      	bne.n	8000e88 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	f043 0204 	orr.w	r2, r3, #4
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e0a2      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0d6      	beq.n	8000e44 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e96:	e070      	b.n	8000f7a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e98:	4b4f      	ldr	r3, [pc, #316]	; (8000fd8 <HAL_ADC_PollForConversion+0x1f4>)
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f001 f9a3 	bl	80021e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6919      	ldr	r1, [r3, #16]
 8000eae:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <HAL_ADC_PollForConversion+0x1f8>)
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d118      	bne.n	8000ee8 <HAL_ADC_PollForConversion+0x104>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68d9      	ldr	r1, [r3, #12]
 8000ebc:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <HAL_ADC_PollForConversion+0x1fc>)
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d111      	bne.n	8000ee8 <HAL_ADC_PollForConversion+0x104>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6919      	ldr	r1, [r3, #16]
 8000eca:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <HAL_ADC_PollForConversion+0x200>)
 8000ecc:	400b      	ands	r3, r1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d108      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x100>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68d9      	ldr	r1, [r3, #12]
 8000ed8:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <HAL_ADC_PollForConversion+0x204>)
 8000eda:	400b      	ands	r3, r1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x100>
 8000ee0:	2314      	movs	r3, #20
 8000ee2:	e020      	b.n	8000f26 <HAL_ADC_PollForConversion+0x142>
 8000ee4:	2329      	movs	r3, #41	; 0x29
 8000ee6:	e01e      	b.n	8000f26 <HAL_ADC_PollForConversion+0x142>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6919      	ldr	r1, [r3, #16]
 8000eee:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <HAL_ADC_PollForConversion+0x200>)
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <HAL_ADC_PollForConversion+0x120>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68d9      	ldr	r1, [r3, #12]
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_ADC_PollForConversion+0x204>)
 8000efe:	400b      	ands	r3, r1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00d      	beq.n	8000f20 <HAL_ADC_PollForConversion+0x13c>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6919      	ldr	r1, [r3, #16]
 8000f0a:	4b38      	ldr	r3, [pc, #224]	; (8000fec <HAL_ADC_PollForConversion+0x208>)
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <HAL_ADC_PollForConversion+0x140>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68d9      	ldr	r1, [r3, #12]
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <HAL_ADC_PollForConversion+0x208>)
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_ADC_PollForConversion+0x140>
 8000f20:	2354      	movs	r3, #84	; 0x54
 8000f22:	e000      	b.n	8000f26 <HAL_ADC_PollForConversion+0x142>
 8000f24:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f2c:	e021      	b.n	8000f72 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d01a      	beq.n	8000f6c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <HAL_ADC_PollForConversion+0x168>
 8000f3c:	f7ff fdc2 	bl	8000ac4 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d20f      	bcs.n	8000f6c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d90b      	bls.n	8000f6c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	f043 0204 	orr.w	r2, r3, #4
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e030      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d8d9      	bhi.n	8000f2e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f06f 0212 	mvn.w	r2, #18
 8000f82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f9e:	d115      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d111      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d105      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f043 0201 	orr.w	r2, r3, #1
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd90      	pop	{r4, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000160 	.word	0x20000160
 8000fdc:	24924924 	.word	0x24924924
 8000fe0:	00924924 	.word	0x00924924
 8000fe4:	12492492 	.word	0x12492492
 8000fe8:	00492492 	.word	0x00492492
 8000fec:	00249249 	.word	0x00249249

08000ff0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x20>
 8001024:	2302      	movs	r3, #2
 8001026:	e0dc      	b.n	80011e2 <HAL_ADC_ConfigChannel+0x1da>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b06      	cmp	r3, #6
 8001036:	d81c      	bhi.n	8001072 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	3b05      	subs	r3, #5
 800104a:	221f      	movs	r2, #31
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	4019      	ands	r1, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	3b05      	subs	r3, #5
 8001064:	fa00 f203 	lsl.w	r2, r0, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
 8001070:	e03c      	b.n	80010ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b0c      	cmp	r3, #12
 8001078:	d81c      	bhi.n	80010b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	3b23      	subs	r3, #35	; 0x23
 800108c:	221f      	movs	r2, #31
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	4019      	ands	r1, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	3b23      	subs	r3, #35	; 0x23
 80010a6:	fa00 f203 	lsl.w	r2, r0, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
 80010b2:	e01b      	b.n	80010ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b41      	subs	r3, #65	; 0x41
 80010c6:	221f      	movs	r2, #31
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4019      	ands	r1, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b41      	subs	r3, #65	; 0x41
 80010e0:	fa00 f203 	lsl.w	r2, r0, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d91c      	bls.n	800112e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d9      	ldr	r1, [r3, #12]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	3b1e      	subs	r3, #30
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	4019      	ands	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	3b1e      	subs	r3, #30
 8001120:	fa00 f203 	lsl.w	r2, r0, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	e019      	b.n	8001162 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6919      	ldr	r1, [r3, #16]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	2207      	movs	r2, #7
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	4019      	ands	r1, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	fa00 f203 	lsl.w	r2, r0, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b10      	cmp	r3, #16
 8001168:	d003      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800116e:	2b11      	cmp	r3, #17
 8001170:	d132      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_ADC_ConfigChannel+0x1e4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d125      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d126      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001198:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d11a      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	0c9a      	lsrs	r2, r3, #18
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b8:	e002      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f9      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x1b2>
 80011c6:	e007      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f043 0220 	orr.w	r2, r3, #32
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	40012400 	.word	0x40012400
 80011f0:	20000160 	.word	0x20000160
 80011f4:	431bde83 	.word	0x431bde83

080011f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b01      	cmp	r3, #1
 8001214:	d040      	beq.n	8001298 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <ADC_Enable+0xac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <ADC_Enable+0xb0>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	0c9b      	lsrs	r3, r3, #18
 8001232:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001234:	e002      	b.n	800123c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001242:	f7ff fc3f 	bl	8000ac4 <HAL_GetTick>
 8001246:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001248:	e01f      	b.n	800128a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800124a:	f7ff fc3b 	bl	8000ac4 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d918      	bls.n	800128a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b01      	cmp	r3, #1
 8001264:	d011      	beq.n	800128a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	f043 0210 	orr.w	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e007      	b.n	800129a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	d1d8      	bne.n	800124a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000160 	.word	0x20000160
 80012a8:	431bde83 	.word	0x431bde83

080012ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d12e      	bne.n	8001324 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012d6:	f7ff fbf5 	bl	8000ac4 <HAL_GetTick>
 80012da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012dc:	e01b      	b.n	8001316 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012de:	f7ff fbf1 	bl	8000ac4 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d914      	bls.n	8001316 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d10d      	bne.n	8001316 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	f043 0210 	orr.w	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e007      	b.n	8001326 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d0dc      	beq.n	80012de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <__NVIC_EnableIRQ+0x34>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff90 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff2d 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff42 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff35 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b08b      	sub	sp, #44	; 0x2c
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e169      	b.n	8001834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001560:	2201      	movs	r2, #1
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 8158 	bne.w	800182e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a9a      	ldr	r2, [pc, #616]	; (80017ec <HAL_GPIO_Init+0x2a0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d05e      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 8001588:	4a98      	ldr	r2, [pc, #608]	; (80017ec <HAL_GPIO_Init+0x2a0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d875      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 800158e:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <HAL_GPIO_Init+0x2a4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d058      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 8001594:	4a96      	ldr	r2, [pc, #600]	; (80017f0 <HAL_GPIO_Init+0x2a4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d86f      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 800159a:	4a96      	ldr	r2, [pc, #600]	; (80017f4 <HAL_GPIO_Init+0x2a8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d052      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015a0:	4a94      	ldr	r2, [pc, #592]	; (80017f4 <HAL_GPIO_Init+0x2a8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d869      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015a6:	4a94      	ldr	r2, [pc, #592]	; (80017f8 <HAL_GPIO_Init+0x2ac>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d04c      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015ac:	4a92      	ldr	r2, [pc, #584]	; (80017f8 <HAL_GPIO_Init+0x2ac>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d863      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015b2:	4a92      	ldr	r2, [pc, #584]	; (80017fc <HAL_GPIO_Init+0x2b0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d046      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015b8:	4a90      	ldr	r2, [pc, #576]	; (80017fc <HAL_GPIO_Init+0x2b0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d85d      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d82a      	bhi.n	8001618 <HAL_GPIO_Init+0xcc>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d859      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <HAL_GPIO_Init+0x80>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	08001647 	.word	0x08001647
 80015d0:	08001621 	.word	0x08001621
 80015d4:	08001633 	.word	0x08001633
 80015d8:	08001675 	.word	0x08001675
 80015dc:	0800167b 	.word	0x0800167b
 80015e0:	0800167b 	.word	0x0800167b
 80015e4:	0800167b 	.word	0x0800167b
 80015e8:	0800167b 	.word	0x0800167b
 80015ec:	0800167b 	.word	0x0800167b
 80015f0:	0800167b 	.word	0x0800167b
 80015f4:	0800167b 	.word	0x0800167b
 80015f8:	0800167b 	.word	0x0800167b
 80015fc:	0800167b 	.word	0x0800167b
 8001600:	0800167b 	.word	0x0800167b
 8001604:	0800167b 	.word	0x0800167b
 8001608:	0800167b 	.word	0x0800167b
 800160c:	0800167b 	.word	0x0800167b
 8001610:	08001629 	.word	0x08001629
 8001614:	0800163d 	.word	0x0800163d
 8001618:	4a79      	ldr	r2, [pc, #484]	; (8001800 <HAL_GPIO_Init+0x2b4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800161e:	e02c      	b.n	800167a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e029      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	3304      	adds	r3, #4
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e024      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	3308      	adds	r3, #8
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e01f      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	330c      	adds	r3, #12
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	e01a      	b.n	800167c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164e:	2304      	movs	r3, #4
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e013      	b.n	800167c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	611a      	str	r2, [r3, #16]
          break;
 8001666:	e009      	b.n	800167c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	615a      	str	r2, [r3, #20]
          break;
 8001672:	e003      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x130>
          break;
 800167a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d801      	bhi.n	8001686 <HAL_GPIO_Init+0x13a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	e001      	b.n	800168a <HAL_GPIO_Init+0x13e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	; 0xff
 8001690:	d802      	bhi.n	8001698 <HAL_GPIO_Init+0x14c>
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x152>
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	3b08      	subs	r3, #8
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	210f      	movs	r1, #15
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	401a      	ands	r2, r3
 80016b0:	6a39      	ldr	r1, [r7, #32]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80b1 	beq.w	800182e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_GPIO_Init+0x2b8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <HAL_GPIO_Init+0x2b8>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_GPIO_Init+0x2b8>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e4:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_GPIO_Init+0x2bc>)
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a40      	ldr	r2, [pc, #256]	; (800180c <HAL_GPIO_Init+0x2c0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d013      	beq.n	8001738 <HAL_GPIO_Init+0x1ec>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3f      	ldr	r2, [pc, #252]	; (8001810 <HAL_GPIO_Init+0x2c4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00d      	beq.n	8001734 <HAL_GPIO_Init+0x1e8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3e      	ldr	r2, [pc, #248]	; (8001814 <HAL_GPIO_Init+0x2c8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d007      	beq.n	8001730 <HAL_GPIO_Init+0x1e4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3d      	ldr	r2, [pc, #244]	; (8001818 <HAL_GPIO_Init+0x2cc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_GPIO_Init+0x1e0>
 8001728:	2303      	movs	r3, #3
 800172a:	e006      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 800172c:	2304      	movs	r3, #4
 800172e:	e004      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001730:	2302      	movs	r3, #2
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001738:	2300      	movs	r3, #0
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174a:	492f      	ldr	r1, [pc, #188]	; (8001808 <HAL_GPIO_Init+0x2bc>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_GPIO_Init+0x2d0>)
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	492c      	ldr	r1, [pc, #176]	; (800181c <HAL_GPIO_Init+0x2d0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_GPIO_Init+0x2d0>)
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4928      	ldr	r1, [pc, #160]	; (800181c <HAL_GPIO_Init+0x2d0>)
 800177c:	4013      	ands	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_GPIO_Init+0x2d0>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4922      	ldr	r1, [pc, #136]	; (800181c <HAL_GPIO_Init+0x2d0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_GPIO_Init+0x2d0>)
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	491e      	ldr	r1, [pc, #120]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4918      	ldr	r1, [pc, #96]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4914      	ldr	r1, [pc, #80]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d021      	beq.n	8001820 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_GPIO_Init+0x2d0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e021      	b.n	800182e <HAL_GPIO_Init+0x2e2>
 80017ea:	bf00      	nop
 80017ec:	10320000 	.word	0x10320000
 80017f0:	10310000 	.word	0x10310000
 80017f4:	10220000 	.word	0x10220000
 80017f8:	10210000 	.word	0x10210000
 80017fc:	10120000 	.word	0x10120000
 8001800:	10110000 	.word	0x10110000
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000
 800180c:	40010800 	.word	0x40010800
 8001810:	40010c00 	.word	0x40010c00
 8001814:	40011000 	.word	0x40011000
 8001818:	40011400 	.word	0x40011400
 800181c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	43db      	mvns	r3, r3
 8001828:	4909      	ldr	r1, [pc, #36]	; (8001850 <HAL_GPIO_Init+0x304>)
 800182a:	4013      	ands	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	f47f ae8e 	bne.w	8001560 <HAL_GPIO_Init+0x14>
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	372c      	adds	r7, #44	; 0x2c
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e272      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	4b92      	ldr	r3, [pc, #584]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00c      	beq.n	80018ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b0:	4b8f      	ldr	r3, [pc, #572]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d112      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
 80018bc:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d10b      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x12c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d168      	bne.n	80019b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e24c      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x76>
 80018ec:	4b80      	ldr	r3, [pc, #512]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a7f      	ldr	r2, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e02e      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x98>
 8001902:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7a      	ldr	r2, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b78      	ldr	r3, [pc, #480]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a77      	ldr	r2, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e01d      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0xbc>
 8001926:	4b72      	ldr	r3, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a71      	ldr	r2, [pc, #452]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b6f      	ldr	r3, [pc, #444]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6e      	ldr	r2, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 8001940:	4b6b      	ldr	r3, [pc, #428]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a67      	ldr	r2, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff f8b0 	bl	8000ac4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f8ac 	bl	8000ac4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e200      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b5d      	ldr	r3, [pc, #372]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0xe4>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f89c 	bl	8000ac4 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f898 	bl	8000ac4 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1ec      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x10c>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d11c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
 80019d6:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e1c0      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4939      	ldr	r1, [pc, #228]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	e03a      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f851 	bl	8000ac4 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff f84d 	bl	8000ac4 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e1a1      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4927      	ldr	r1, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f830 	bl	8000ac4 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff f82c 	bl	8000ac4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e180      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03a      	beq.n	8001b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d019      	beq.n	8001ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f810 	bl	8000ac4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f80c 	bl	8000ac4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e160      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f000 faba 	bl	8002040 <RCC_Delay>
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad4:	f7fe fff6 	bl	8000ac4 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7fe fff2 	bl	8000ac4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d908      	bls.n	8001afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e146      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	42420000 	.word	0x42420000
 8001af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b92      	ldr	r3, [pc, #584]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e9      	bne.n	8001adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a6 	beq.w	8001c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b8b      	ldr	r3, [pc, #556]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b88      	ldr	r3, [pc, #544]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a87      	ldr	r2, [pc, #540]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b85      	ldr	r3, [pc, #532]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7e      	ldr	r2, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7fe ffb3 	bl	8000ac4 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7fe ffaf 	bl	8000ac4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e103      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	4b75      	ldr	r3, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e02d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x334>
 8001b9e:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x356>
 8001bc0:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a60      	ldr	r2, [pc, #384]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b5e      	ldr	r3, [pc, #376]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a5d      	ldr	r2, [pc, #372]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bda:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a5a      	ldr	r2, [pc, #360]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a57      	ldr	r2, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7fe ff63 	bl	8000ac4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe ff5f 	bl	8000ac4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0b1      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x37e>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7fe ff4d 	bl	8000ac4 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe ff49 	bl	8000ac4 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e09b      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4b3c      	ldr	r3, [pc, #240]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8087 	beq.w	8001d7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d061      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d146      	bne.n	8001d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe ff1d 	bl	8000ac4 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe ff19 	bl	8000ac4 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e06d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4921      	ldr	r1, [pc, #132]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a19      	ldr	r1, [r3, #32]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	491b      	ldr	r1, [pc, #108]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe feed 	bl	8000ac4 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe fee9 	bl	8000ac4 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e03d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x46a>
 8001d0c:	e035      	b.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe fed6 	bl	8000ac4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe fed2 	bl	8000ac4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e026      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x498>
 8001d3a:	e01e      	b.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e019      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x500>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d0      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4965      	ldr	r1, [pc, #404]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a58      	ldr	r2, [pc, #352]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d040      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e073      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06b      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4936      	ldr	r1, [pc, #216]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fe24 	bl	8000ac4 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7fe fe20 	bl	8000ac4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e053      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d210      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4922      	ldr	r1, [pc, #136]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1cc>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1d0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fd82 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08002bc0 	.word	0x08002bc0
 8001f54:	20000160 	.word	0x20000160
 8001f58:	20000164 	.word	0x20000164

08001f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x30>
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0x36>
 8001f8a:	e027      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	e027      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	0c5b      	lsrs	r3, r3, #17
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fbe:	fb03 f202 	mul.w	r2, r3, r2
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e004      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	613b      	str	r3, [r7, #16]
      break;
 8001fda:	e002      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fde:	613b      	str	r3, [r7, #16]
      break;
 8001fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe2:	693b      	ldr	r3, [r7, #16]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	007a1200 	.word	0x007a1200
 8001ff8:	08002bd8 	.word	0x08002bd8
 8001ffc:	08002be8 	.word	0x08002be8
 8002000:	003d0900 	.word	0x003d0900

08002004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_RCC_GetHCLKFreq+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	20000160 	.word	0x20000160

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800201c:	f7ff fff2 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	0adb      	lsrs	r3, r3, #11
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	; (800203c <HAL_RCC_GetPCLK2Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08002bd0 	.word	0x08002bd0

08002040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <RCC_Delay+0x34>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <RCC_Delay+0x38>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0a5b      	lsrs	r3, r3, #9
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800205c:	bf00      	nop
  }
  while (Delay --);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	60fa      	str	r2, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f9      	bne.n	800205c <RCC_Delay+0x1c>
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	20000160 	.word	0x20000160
 8002078:	10624dd3 	.word	0x10624dd3

0800207c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d07d      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209c:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	4a4b      	ldr	r2, [pc, #300]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	61d3      	str	r3, [r2, #28]
 80020b4:	4b49      	ldr	r3, [pc, #292]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d118      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020dc:	f7fe fcf2 	bl	8000ac4 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	e008      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e4:	f7fe fcee 	bl	8000ac4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e06d      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002102:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d02e      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d027      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002128:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002130:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d014      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7fe fcbd 	bl	8000ac4 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fcb9 	bl	8000ac4 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e036      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ee      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4917      	ldr	r1, [pc, #92]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	4313      	orrs	r3, r2
 8002180:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002192:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	490b      	ldr	r1, [pc, #44]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4904      	ldr	r1, [pc, #16]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42420440 	.word	0x42420440

080021e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b10      	cmp	r3, #16
 800220e:	f200 808a 	bhi.w	8002326 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d045      	beq.n	80022a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d075      	beq.n	800230a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800221e:	e082      	b.n	8002326 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002220:	4b46      	ldr	r3, [pc, #280]	; (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002226:	4b45      	ldr	r3, [pc, #276]	; (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d07b      	beq.n	800232a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a41      	ldr	r2, [pc, #260]	; (8002340 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d015      	beq.n	8002276 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800224a:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	0c5b      	lsrs	r3, r3, #17
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002264:	4a38      	ldr	r2, [pc, #224]	; (8002348 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fbb2 f2f3 	udiv	r2, r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	e004      	b.n	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4a34      	ldr	r2, [pc, #208]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228c:	d102      	bne.n	8002294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	61bb      	str	r3, [r7, #24]
      break;
 8002292:	e04a      	b.n	800232a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4a2d      	ldr	r2, [pc, #180]	; (8002350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	61bb      	str	r3, [r7, #24]
      break;
 80022a2:	e042      	b.n	800232a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b4:	d108      	bne.n	80022c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80022c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	e01f      	b.n	8002308 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d2:	d109      	bne.n	80022e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80022e0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	e00f      	b.n	8002308 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022f2:	d11c      	bne.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d016      	beq.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002300:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002304:	61bb      	str	r3, [r7, #24]
      break;
 8002306:	e012      	b.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002308:	e011      	b.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800230a:	f7ff fe85 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0b9b      	lsrs	r3, r3, #14
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	61bb      	str	r3, [r7, #24]
      break;
 8002324:	e004      	b.n	8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002326:	bf00      	nop
 8002328:	e002      	b.n	8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800232a:	bf00      	nop
 800232c:	e000      	b.n	8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800232e:	bf00      	nop
    }
  }
  return (frequency);
 8002330:	69bb      	ldr	r3, [r7, #24]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	08002bec 	.word	0x08002bec
 8002344:	08002bfc 	.word	0x08002bfc
 8002348:	007a1200 	.word	0x007a1200
 800234c:	003d0900 	.word	0x003d0900
 8002350:	aaaaaaab 	.word	0xaaaaaaab

08002354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e041      	b.n	80023ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fa9e 	bl	80008bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f000 fa74 	bl	8002880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d001      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e03a      	b.n	8002482 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_TIM_Base_Start_IT+0x98>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00e      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x58>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d009      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x58>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_TIM_Base_Start_IT+0x9c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x58>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a13      	ldr	r2, [pc, #76]	; (8002494 <HAL_TIM_Base_Start_IT+0xa0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d111      	bne.n	8002470 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d010      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	e007      	b.n	8002480 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800

08002498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d122      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d11b      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0202 	mvn.w	r2, #2
 80024c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f9b4 	bl	8002848 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f9a7 	bl	8002836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f9b6 	bl	800285a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d122      	bne.n	8002548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d11b      	bne.n	8002548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0204 	mvn.w	r2, #4
 8002518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f98a 	bl	8002848 <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f97d 	bl	8002836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f98c 	bl	800285a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b08      	cmp	r3, #8
 8002554:	d122      	bne.n	800259c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b08      	cmp	r3, #8
 8002562:	d11b      	bne.n	800259c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0208 	mvn.w	r2, #8
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2204      	movs	r2, #4
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f960 	bl	8002848 <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f953 	bl	8002836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f962 	bl	800285a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d122      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d11b      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0210 	mvn.w	r2, #16
 80025c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2208      	movs	r2, #8
 80025c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f936 	bl	8002848 <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f929 	bl	8002836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f938 	bl	800285a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0201 	mvn.w	r2, #1
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe f8ba 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b80      	cmp	r3, #128	; 0x80
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa7b 	bl	8002b3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	d107      	bne.n	8002674 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8fc 	bl	800286c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b20      	cmp	r3, #32
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b20      	cmp	r3, #32
 800268e:	d107      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0220 	mvn.w	r2, #32
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa46 	bl	8002b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e0b4      	b.n	800282e <HAL_TIM_ConfigClockSource+0x186>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fc:	d03e      	beq.n	800277c <HAL_TIM_ConfigClockSource+0xd4>
 80026fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002702:	f200 8087 	bhi.w	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270a:	f000 8086 	beq.w	800281a <HAL_TIM_ConfigClockSource+0x172>
 800270e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002712:	d87f      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b70      	cmp	r3, #112	; 0x70
 8002716:	d01a      	beq.n	800274e <HAL_TIM_ConfigClockSource+0xa6>
 8002718:	2b70      	cmp	r3, #112	; 0x70
 800271a:	d87b      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b60      	cmp	r3, #96	; 0x60
 800271e:	d050      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d877      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b50      	cmp	r3, #80	; 0x50
 8002726:	d03c      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002728:	2b50      	cmp	r3, #80	; 0x50
 800272a:	d873      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d058      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d86f      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b30      	cmp	r3, #48	; 0x30
 8002736:	d064      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b30      	cmp	r3, #48	; 0x30
 800273a:	d86b      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b20      	cmp	r3, #32
 800273e:	d060      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002740:	2b20      	cmp	r3, #32
 8002742:	d867      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d05c      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	2b10      	cmp	r3, #16
 800274a:	d05a      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	e062      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f000 f968 	bl	8002a32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002770:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
      break;
 800277a:	e04f      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f000 f951 	bl	8002a32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800279e:	609a      	str	r2, [r3, #8]
      break;
 80027a0:	e03c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f000 f8c8 	bl	8002944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2150      	movs	r1, #80	; 0x50
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f91f 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 80027c0:	e02c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f8e6 	bl	80029a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2160      	movs	r1, #96	; 0x60
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f90f 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 80027e0:	e01c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f8a8 	bl	8002944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2140      	movs	r1, #64	; 0x40
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f8ff 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 8002800:	e00c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f000 f8f6 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 8002812:	e003      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e000      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800281a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
	...

08002880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a29      	ldr	r2, [pc, #164]	; (8002938 <TIM_Base_SetConfig+0xb8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00b      	beq.n	80028b0 <TIM_Base_SetConfig+0x30>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d007      	beq.n	80028b0 <TIM_Base_SetConfig+0x30>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a26      	ldr	r2, [pc, #152]	; (800293c <TIM_Base_SetConfig+0xbc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0x30>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a25      	ldr	r2, [pc, #148]	; (8002940 <TIM_Base_SetConfig+0xc0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <TIM_Base_SetConfig+0xb8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00b      	beq.n	80028e2 <TIM_Base_SetConfig+0x62>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d007      	beq.n	80028e2 <TIM_Base_SetConfig+0x62>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <TIM_Base_SetConfig+0xbc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d003      	beq.n	80028e2 <TIM_Base_SetConfig+0x62>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a18      	ldr	r2, [pc, #96]	; (8002940 <TIM_Base_SetConfig+0xc0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a07      	ldr	r2, [pc, #28]	; (8002938 <TIM_Base_SetConfig+0xb8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40000400 	.word	0x40000400
 8002940:	40000800 	.word	0x40000800

08002944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f023 0201 	bic.w	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f023 030a 	bic.w	r3, r3, #10
 8002980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0210 	bic.w	r2, r3, #16
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	031b      	lsls	r3, r3, #12
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	621a      	str	r2, [r3, #32]
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f043 0307 	orr.w	r3, r3, #7
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b087      	sub	sp, #28
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	021a      	lsls	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	609a      	str	r2, [r3, #8]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e046      	b.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad4:	d009      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10c      	bne.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800

08002b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <__libc_init_array>:
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	2600      	movs	r6, #0
 8002b54:	4d0c      	ldr	r5, [pc, #48]	; (8002b88 <__libc_init_array+0x38>)
 8002b56:	4c0d      	ldr	r4, [pc, #52]	; (8002b8c <__libc_init_array+0x3c>)
 8002b58:	1b64      	subs	r4, r4, r5
 8002b5a:	10a4      	asrs	r4, r4, #2
 8002b5c:	42a6      	cmp	r6, r4
 8002b5e:	d109      	bne.n	8002b74 <__libc_init_array+0x24>
 8002b60:	f000 f822 	bl	8002ba8 <_init>
 8002b64:	2600      	movs	r6, #0
 8002b66:	4d0a      	ldr	r5, [pc, #40]	; (8002b90 <__libc_init_array+0x40>)
 8002b68:	4c0a      	ldr	r4, [pc, #40]	; (8002b94 <__libc_init_array+0x44>)
 8002b6a:	1b64      	subs	r4, r4, r5
 8002b6c:	10a4      	asrs	r4, r4, #2
 8002b6e:	42a6      	cmp	r6, r4
 8002b70:	d105      	bne.n	8002b7e <__libc_init_array+0x2e>
 8002b72:	bd70      	pop	{r4, r5, r6, pc}
 8002b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b78:	4798      	blx	r3
 8002b7a:	3601      	adds	r6, #1
 8002b7c:	e7ee      	b.n	8002b5c <__libc_init_array+0xc>
 8002b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b82:	4798      	blx	r3
 8002b84:	3601      	adds	r6, #1
 8002b86:	e7f2      	b.n	8002b6e <__libc_init_array+0x1e>
 8002b88:	08002c00 	.word	0x08002c00
 8002b8c:	08002c00 	.word	0x08002c00
 8002b90:	08002c00 	.word	0x08002c00
 8002b94:	08002c04 	.word	0x08002c04

08002b98 <memset>:
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4402      	add	r2, r0
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d100      	bne.n	8002ba2 <memset+0xa>
 8002ba0:	4770      	bx	lr
 8002ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba6:	e7f9      	b.n	8002b9c <memset+0x4>

08002ba8 <_init>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

08002bb4 <_fini>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	bf00      	nop
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr
