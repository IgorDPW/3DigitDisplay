
TMR_INTERRUPT_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007660  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007770  08007770  00017770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007988  08007988  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08007988  08007988  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007988  08007988  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000180  08007b10  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08007b10  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2e7  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c87  00000000  00000000  0002a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d3  00000000  00000000  0002ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020a3  00000000  00000000  0002d59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb6a  00000000  00000000  0002f63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cee0  00000000  00000000  0003c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003314  00000000  00000000  000c9088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000cc39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08007758 	.word	0x08007758

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08007758 	.word	0x08007758

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f002 faca 	bl	80032e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f852 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 fa44 	bl	80011e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d58:	f000 fa24 	bl	80011a4 <MX_DMA_Init>
  MX_TIM4_Init();
 8000d5c:	f000 f9d4 	bl	8001108 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000d60:	f000 f984 	bl	800106c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d64:	f000 f8a4 	bl	8000eb0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d68:	f000 f8e0 	bl	8000f2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim4);
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <main+0x94>)
 8000d6e:	f004 fa65 	bl	800523c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000d72:	481b      	ldr	r0, [pc, #108]	; (8000de0 <main+0x98>)
 8000d74:	f004 fa62 	bl	800523c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	4819      	ldr	r0, [pc, #100]	; (8000de4 <main+0x9c>)
 8000d80:	f003 fc5a 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG2, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8a:	4816      	ldr	r0, [pc, #88]	; (8000de4 <main+0x9c>)
 8000d8c:	f003 fc54 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DIG3, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <main+0x9c>)
 8000d98:	f003 fc4e 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <main+0xa0>)
 8000d9e:	f002 fbff 	bl	80035a0 <HAL_ADC_Start>

	 WS2512_Send();
 8000da2:	f002 f89b 	bl	8002edc <WS2512_Send>

	 counter_timer4=0;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <main+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//downcounter_timer4=1000;

		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000dac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <main+0xa0>)
 8000db2:	f002 fca3 	bl	80036fc <HAL_ADC_PollForConversion>
		readValue = HAL_ADC_GetValue(&hadc1);
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <main+0xa0>)
 8000db8:	f002 fda6 	bl	8003908 <HAL_ADC_GetValue>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <main+0xa8>)
 8000dc2:	801a      	strh	r2, [r3, #0]

//		var = AnalogHandler(readValue);

		LEDHandler(var);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <main+0xac>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fb05 	bl	80013d8 <LEDHandler>
		DigitExtract(var);
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <main+0xac>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fdbc 	bl	8002950 <DigitExtract>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000dd8:	e7e8      	b.n	8000dac <main+0x64>
 8000dda:	bf00      	nop
 8000ddc:	2000025c 	.word	0x2000025c
 8000de0:	20000214 	.word	0x20000214
 8000de4:	40011000 	.word	0x40011000
 8000de8:	2000019c 	.word	0x2000019c
 8000dec:	20000310 	.word	0x20000310
 8000df0:	200003b8 	.word	0x200003b8
 8000df4:	200002f0 	.word	0x200002f0

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e02:	2228      	movs	r2, #40	; 0x28
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 fc1f 	bl	800664a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e36:	2301      	movs	r3, #1
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fc3c 	bl	80046cc <HAL_RCC_OscConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e5a:	f002 f8ad 	bl	8002fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fea8 	bl	8004bd0 <HAL_RCC_ClockConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e86:	f002 f897 	bl	8002fb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 f814 	bl	8004ec4 <HAL_RCCEx_PeriphCLKConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ea2:	f002 f889 	bl	8002fb8 <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	; 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <MX_ADC1_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000eda:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ede:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000eee:	f002 fa7f 	bl	80033f0 <HAL_ADC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ef8:	f002 f85e 	bl	8002fb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000efc:	2309      	movs	r3, #9
 8000efe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_ADC1_Init+0x74>)
 8000f0e:	f002 fd07 	bl	8003920 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f18:	f002 f84e 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000019c 	.word	0x2000019c
 8000f28:	40012400 	.word	0x40012400

08000f2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b096      	sub	sp, #88	; 0x58
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	615a      	str	r2, [r3, #20]
 8000f5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2220      	movs	r2, #32
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 fb70 	bl	800664a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f6a:	4b3e      	ldr	r3, [pc, #248]	; (8001064 <MX_TIM1_Init+0x138>)
 8000f6c:	4a3e      	ldr	r2, [pc, #248]	; (8001068 <MX_TIM1_Init+0x13c>)
 8000f6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f70:	4b3c      	ldr	r3, [pc, #240]	; (8001064 <MX_TIM1_Init+0x138>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <MX_TIM1_Init+0x138>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000f7c:	4b39      	ldr	r3, [pc, #228]	; (8001064 <MX_TIM1_Init+0x138>)
 8000f7e:	2259      	movs	r2, #89	; 0x59
 8000f80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b38      	ldr	r3, [pc, #224]	; (8001064 <MX_TIM1_Init+0x138>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f88:	4b36      	ldr	r3, [pc, #216]	; (8001064 <MX_TIM1_Init+0x138>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b35      	ldr	r3, [pc, #212]	; (8001064 <MX_TIM1_Init+0x138>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f94:	4833      	ldr	r0, [pc, #204]	; (8001064 <MX_TIM1_Init+0x138>)
 8000f96:	f004 f901 	bl	800519c <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fa0:	f002 f80a 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000faa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fae:	4619      	mov	r1, r3
 8000fb0:	482c      	ldr	r0, [pc, #176]	; (8001064 <MX_TIM1_Init+0x138>)
 8000fb2:	f004 fe1f 	bl	8005bf4 <HAL_TIM_ConfigClockSource>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000fbc:	f001 fffc 	bl	8002fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc0:	4828      	ldr	r0, [pc, #160]	; (8001064 <MX_TIM1_Init+0x138>)
 8000fc2:	f004 f98d 	bl	80052e0 <HAL_TIM_PWM_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000fcc:	f001 fff4 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4821      	ldr	r0, [pc, #132]	; (8001064 <MX_TIM1_Init+0x138>)
 8000fe0:	f005 fa72 	bl	80064c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000fea:	f001 ffe5 	bl	8002fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2360      	movs	r3, #96	; 0x60
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	4814      	ldr	r0, [pc, #80]	; (8001064 <MX_TIM1_Init+0x138>)
 8001014:	f004 fd2c 	bl	8005a70 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800101e:	f001 ffcb 	bl	8002fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <MX_TIM1_Init+0x138>)
 8001046:	f005 fa9d 	bl	8006584 <HAL_TIMEx_ConfigBreakDeadTime>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001050:	f001 ffb2 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <MX_TIM1_Init+0x138>)
 8001056:	f002 f895 	bl	8003184 <HAL_TIM_MspPostInit>

}
 800105a:	bf00      	nop
 800105c:	3758      	adds	r7, #88	; 0x58
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001cc 	.word	0x200001cc
 8001068:	40012c00 	.word	0x40012c00

0800106c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_TIM3_Init+0x94>)
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <MX_TIM3_Init+0x98>)
 800108c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_TIM3_Init+0x94>)
 8001090:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001094:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_TIM3_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_TIM3_Init+0x94>)
 800109e:	2201      	movs	r2, #1
 80010a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_TIM3_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_TIM3_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ae:	4814      	ldr	r0, [pc, #80]	; (8001100 <MX_TIM3_Init+0x94>)
 80010b0:	f004 f874 	bl	800519c <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010ba:	f001 ff7d 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_TIM3_Init+0x94>)
 80010cc:	f004 fd92 	bl	8005bf4 <HAL_TIM_ConfigClockSource>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010d6:	f001 ff6f 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_TIM3_Init+0x94>)
 80010e8:	f005 f9ee 	bl	80064c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010f2:	f001 ff61 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000214 	.word	0x20000214
 8001104:	40000400 	.word	0x40000400

08001108 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_TIM4_Init+0x94>)
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <MX_TIM4_Init+0x98>)
 8001128:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_TIM4_Init+0x94>)
 800112c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001130:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_TIM4_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_TIM4_Init+0x94>)
 800113a:	2201      	movs	r2, #1
 800113c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_TIM4_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_TIM4_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_TIM4_Init+0x94>)
 800114c:	f004 f826 	bl	800519c <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001156:	f001 ff2f 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4619      	mov	r1, r3
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_TIM4_Init+0x94>)
 8001168:	f004 fd44 	bl	8005bf4 <HAL_TIM_ConfigClockSource>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001172:	f001 ff21 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_TIM4_Init+0x94>)
 8001184:	f005 f9a0 	bl	80064c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800118e:	f001 ff13 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000025c 	.word	0x2000025c
 80011a0:	40000800 	.word	0x40000800

080011a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_DMA_Init+0x38>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <MX_DMA_Init+0x38>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_DMA_Init+0x38>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	200c      	movs	r0, #12
 80011c8:	f002 fe15 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011cc:	200c      	movs	r0, #12
 80011ce:	f002 fe2e 	bl	8003e2e <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f4:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <MX_GPIO_Init+0xf8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <MX_GPIO_Init+0xf8>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <MX_GPIO_Init+0xf8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MX_GPIO_Init+0xf8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <MX_GPIO_Init+0xf8>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0xf8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_GPIO_Init+0xf8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800125a:	4820      	ldr	r0, [pc, #128]	; (80012dc <MX_GPIO_Init+0xfc>)
 800125c:	f003 f9ec 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <MX_GPIO_Init+0x100>)
 8001268:	f003 f9e6 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
 800126c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2302      	movs	r3, #2
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	4815      	ldr	r0, [pc, #84]	; (80012dc <MX_GPIO_Init+0xfc>)
 8001286:	f003 f853 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128a:	2301      	movs	r3, #1
 800128c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_GPIO_Init+0x104>)
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4810      	ldr	r0, [pc, #64]	; (80012e0 <MX_GPIO_Init+0x100>)
 800129e:	f003 f847 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHCP_pin_Pin STCP_pin_Pin DS_pin_Pin */
  GPIO_InitStruct.Pin = SHCP_pin_Pin|STCP_pin_Pin|DS_pin_Pin;
 80012a2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80012a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MX_GPIO_Init+0x100>)
 80012bc:	f003 f838 	bl	8004330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2006      	movs	r0, #6
 80012c6:	f002 fd96 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012ca:	2006      	movs	r0, #6
 80012cc:	f002 fdaf 	bl	8003e2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	10110000 	.word	0x10110000

080012e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]

	currentMillis = HAL_GetTick();
 80012f2:	f002 f84f 	bl	8003394 <HAL_GetTick>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80012fa:	6013      	str	r3, [r2, #0]

	if ((currentMillis - previousMillis) > 200) {
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2bc8      	cmp	r3, #200	; 0xc8
 8001308:	d956      	bls.n	80013b8 <HAL_GPIO_EXTI_Callback+0xd0>

		//brilho = brilho + 5;

		switch(color){
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b04      	cmp	r3, #4
 8001310:	d84d      	bhi.n	80013ae <HAL_GPIO_EXTI_Callback+0xc6>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <HAL_GPIO_EXTI_Callback+0x30>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	0800132d 	.word	0x0800132d
 800131c:	08001347 	.word	0x08001347
 8001320:	08001361 	.word	0x08001361
 8001324:	0800137b 	.word	0x0800137b
 8001328:	08001395 	.word	0x08001395

		case branco:
			Red=255;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_GPIO_EXTI_Callback+0xe4>)
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	601a      	str	r2, [r3, #0]
			Green=255;
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001334:	22ff      	movs	r2, #255	; 0xff
 8001336:	601a      	str	r2, [r3, #0]
			Blue=255;
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_GPIO_EXTI_Callback+0xec>)
 800133a:	22ff      	movs	r2, #255	; 0xff
 800133c:	601a      	str	r2, [r3, #0]

			color=verde;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

		break;
 8001344:	e034      	b.n	80013b0 <HAL_GPIO_EXTI_Callback+0xc8>

		case verde:
			Red=0;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
			Green=255;
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_GPIO_EXTI_Callback+0xe8>)
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	601a      	str	r2, [r3, #0]
			Blue=0;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

			color=amarelo;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800135a:	2202      	movs	r2, #2
 800135c:	601a      	str	r2, [r3, #0]
		break;
 800135e:	e027      	b.n	80013b0 <HAL_GPIO_EXTI_Callback+0xc8>

		case amarelo:
			Red=255;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001362:	22ff      	movs	r2, #255	; 0xff
 8001364:	601a      	str	r2, [r3, #0]
			Green=255;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	601a      	str	r2, [r3, #0]
			Blue=0;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_GPIO_EXTI_Callback+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

			color=vermelho;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001374:	2203      	movs	r2, #3
 8001376:	601a      	str	r2, [r3, #0]
			break;
 8001378:	e01a      	b.n	80013b0 <HAL_GPIO_EXTI_Callback+0xc8>

		case vermelho:
			Red=255;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_GPIO_EXTI_Callback+0xe4>)
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	601a      	str	r2, [r3, #0]
			Green=0;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
			Blue=0;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

			color = azul;
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800138e:	2204      	movs	r2, #4
 8001390:	601a      	str	r2, [r3, #0]
			break;
 8001392:	e00d      	b.n	80013b0 <HAL_GPIO_EXTI_Callback+0xc8>

		case azul:
		Red=0;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
		Green=0;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_GPIO_EXTI_Callback+0xe8>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
		Blue=255;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_GPIO_EXTI_Callback+0xec>)
 80013a2:	22ff      	movs	r2, #255	; 0xff
 80013a4:	601a      	str	r2, [r3, #0]

		color=branco;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

		break;
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_EXTI_Callback+0xc8>

		default:
			break;
 80013ae:	bf00      	nop
//			brilho = 1;
//		}



		previousMillis = currentMillis;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_GPIO_EXTI_Callback+0xdc>)
 80013b6:	6013      	str	r3, [r2, #0]

	}
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200002ec 	.word	0x200002ec
 80013c4:	200002e8 	.word	0x200002e8
 80013c8:	20000314 	.word	0x20000314
 80013cc:	20000008 	.word	0x20000008
 80013d0:	2000000c 	.word	0x2000000c
 80013d4:	20000010 	.word	0x20000010

080013d8 <LEDHandler>:


//TODO Documentar método
void LEDHandler(int Value) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]


	//brilho = Value * MAX_Brightness / 100;

	//lógica para acionamento sequencial
	if (Value == 0 ) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d16b      	bne.n	80014be <LEDHandler+0xe6>
		Set_LED(0, 0, 0, 0);
 80013e6:	2300      	movs	r3, #0
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2000      	movs	r0, #0
 80013ee:	f001 fa83 	bl	80028f8 <Set_LED>
		Set_LED(1, 0, 0, 0);
 80013f2:	2300      	movs	r3, #0
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2001      	movs	r0, #1
 80013fa:	f001 fa7d 	bl	80028f8 <Set_LED>
		Set_LED(2, 0, 0, 0);
 80013fe:	2300      	movs	r3, #0
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	2002      	movs	r0, #2
 8001406:	f001 fa77 	bl	80028f8 <Set_LED>
		Set_LED(3, 0, 0, 0);
 800140a:	2300      	movs	r3, #0
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2003      	movs	r0, #3
 8001412:	f001 fa71 	bl	80028f8 <Set_LED>
		Set_LED(4, 0, 0, 0);
 8001416:	2300      	movs	r3, #0
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2004      	movs	r0, #4
 800141e:	f001 fa6b 	bl	80028f8 <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001422:	2300      	movs	r3, #0
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2005      	movs	r0, #5
 800142a:	f001 fa65 	bl	80028f8 <Set_LED>
		Set_LED(6, 0, 0, 0);
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2006      	movs	r0, #6
 8001436:	f001 fa5f 	bl	80028f8 <Set_LED>
		Set_LED(7, 0, 0, 0);
 800143a:	2300      	movs	r3, #0
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2007      	movs	r0, #7
 8001442:	f001 fa59 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001446:	2300      	movs	r3, #0
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2008      	movs	r0, #8
 800144e:	f001 fa53 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001452:	2300      	movs	r3, #0
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2009      	movs	r0, #9
 800145a:	f001 fa4d 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 800145e:	2300      	movs	r3, #0
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	200a      	movs	r0, #10
 8001466:	f001 fa47 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	200b      	movs	r0, #11
 8001472:	f001 fa41 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	200c      	movs	r0, #12
 800147e:	f001 fa3b 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001482:	2300      	movs	r3, #0
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	200d      	movs	r0, #13
 800148a:	f001 fa35 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	200e      	movs	r0, #14
 8001496:	f001 fa2f 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 800149a:	2300      	movs	r3, #0
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	200f      	movs	r0, #15
 80014a2:	f001 fa29 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80014a6:	2300      	movs	r3, #0
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2010      	movs	r0, #16
 80014ae:	f001 fa23 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80014b2:	2300      	movs	r3, #0
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2011      	movs	r0, #17
 80014ba:	f001 fa1d 	bl	80028f8 <Set_LED>

	}
	if (Value >= 1 && Value < 6) {
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dd73      	ble.n	80015ac <LEDHandler+0x1d4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	dc70      	bgt.n	80015ac <LEDHandler+0x1d4>
		Set_LED(0, Red, Green, Blue);
 80014ca:	4bb8      	ldr	r3, [pc, #736]	; (80017ac <LEDHandler+0x3d4>)
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	4bb8      	ldr	r3, [pc, #736]	; (80017b0 <LEDHandler+0x3d8>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4bb8      	ldr	r3, [pc, #736]	; (80017b4 <LEDHandler+0x3dc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2000      	movs	r0, #0
 80014d8:	f001 fa0e 	bl	80028f8 <Set_LED>
		Set_LED(1, 0, 0, 0);
 80014dc:	2300      	movs	r3, #0
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2001      	movs	r0, #1
 80014e4:	f001 fa08 	bl	80028f8 <Set_LED>
		Set_LED(2, 0, 0, 0);
 80014e8:	2300      	movs	r3, #0
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2002      	movs	r0, #2
 80014f0:	f001 fa02 	bl	80028f8 <Set_LED>
		Set_LED(3, 0, 0, 0);
 80014f4:	2300      	movs	r3, #0
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2003      	movs	r0, #3
 80014fc:	f001 f9fc 	bl	80028f8 <Set_LED>
		Set_LED(4, 0, 0, 0);
 8001500:	2300      	movs	r3, #0
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2004      	movs	r0, #4
 8001508:	f001 f9f6 	bl	80028f8 <Set_LED>
		Set_LED(5, 0, 0, 0);
 800150c:	2300      	movs	r3, #0
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2005      	movs	r0, #5
 8001514:	f001 f9f0 	bl	80028f8 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001518:	2300      	movs	r3, #0
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2006      	movs	r0, #6
 8001520:	f001 f9ea 	bl	80028f8 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001524:	2300      	movs	r3, #0
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2007      	movs	r0, #7
 800152c:	f001 f9e4 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2008      	movs	r0, #8
 8001538:	f001 f9de 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 800153c:	2300      	movs	r3, #0
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2009      	movs	r0, #9
 8001544:	f001 f9d8 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001548:	2300      	movs	r3, #0
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	200a      	movs	r0, #10
 8001550:	f001 f9d2 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	200b      	movs	r0, #11
 800155c:	f001 f9cc 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001560:	2300      	movs	r3, #0
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	200c      	movs	r0, #12
 8001568:	f001 f9c6 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 800156c:	2300      	movs	r3, #0
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	200d      	movs	r0, #13
 8001574:	f001 f9c0 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001578:	2300      	movs	r3, #0
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	200e      	movs	r0, #14
 8001580:	f001 f9ba 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001584:	2300      	movs	r3, #0
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	200f      	movs	r0, #15
 800158c:	f001 f9b4 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001590:	2300      	movs	r3, #0
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2010      	movs	r0, #16
 8001598:	f001 f9ae 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 800159c:	2300      	movs	r3, #0
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2011      	movs	r0, #17
 80015a4:	f001 f9a8 	bl	80028f8 <Set_LED>
 80015a8:	f001 b957 	b.w	800285a <LEDHandler+0x1482>



	} else if (Value >= 6 && Value < 12) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	dd76      	ble.n	80016a0 <LEDHandler+0x2c8>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0b      	cmp	r3, #11
 80015b6:	dc73      	bgt.n	80016a0 <LEDHandler+0x2c8>
		Set_LED(0, Red, Green, Blue);
 80015b8:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <LEDHandler+0x3d4>)
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <LEDHandler+0x3d8>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <LEDHandler+0x3dc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2000      	movs	r0, #0
 80015c6:	f001 f997 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <LEDHandler+0x3d4>)
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	4b78      	ldr	r3, [pc, #480]	; (80017b0 <LEDHandler+0x3d8>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <LEDHandler+0x3dc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2001      	movs	r0, #1
 80015d8:	f001 f98e 	bl	80028f8 <Set_LED>
		Set_LED(2, 0, 0, 0);
 80015dc:	2300      	movs	r3, #0
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2002      	movs	r0, #2
 80015e4:	f001 f988 	bl	80028f8 <Set_LED>
		Set_LED(3, 0, 0, 0);
 80015e8:	2300      	movs	r3, #0
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2003      	movs	r0, #3
 80015f0:	f001 f982 	bl	80028f8 <Set_LED>
		Set_LED(4, 0, 0, 0);
 80015f4:	2300      	movs	r3, #0
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2004      	movs	r0, #4
 80015fc:	f001 f97c 	bl	80028f8 <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2005      	movs	r0, #5
 8001608:	f001 f976 	bl	80028f8 <Set_LED>
		Set_LED(6, 0, 0, 0);
 800160c:	2300      	movs	r3, #0
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2006      	movs	r0, #6
 8001614:	f001 f970 	bl	80028f8 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001618:	2300      	movs	r3, #0
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2007      	movs	r0, #7
 8001620:	f001 f96a 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001624:	2300      	movs	r3, #0
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2008      	movs	r0, #8
 800162c:	f001 f964 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001630:	2300      	movs	r3, #0
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2009      	movs	r0, #9
 8001638:	f001 f95e 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 800163c:	2300      	movs	r3, #0
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	200a      	movs	r0, #10
 8001644:	f001 f958 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001648:	2300      	movs	r3, #0
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	200b      	movs	r0, #11
 8001650:	f001 f952 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001654:	2300      	movs	r3, #0
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	200c      	movs	r0, #12
 800165c:	f001 f94c 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001660:	2300      	movs	r3, #0
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	200d      	movs	r0, #13
 8001668:	f001 f946 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 800166c:	2300      	movs	r3, #0
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	200e      	movs	r0, #14
 8001674:	f001 f940 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001678:	2300      	movs	r3, #0
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	200f      	movs	r0, #15
 8001680:	f001 f93a 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001684:	2300      	movs	r3, #0
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2010      	movs	r0, #16
 800168c:	f001 f934 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001690:	2300      	movs	r3, #0
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2011      	movs	r0, #17
 8001698:	f001 f92e 	bl	80028f8 <Set_LED>
 800169c:	f001 b8dd 	b.w	800285a <LEDHandler+0x1482>

	} else if (Value >= 12 && Value < 18) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b0b      	cmp	r3, #11
 80016a4:	f340 8088 	ble.w	80017b8 <LEDHandler+0x3e0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b11      	cmp	r3, #17
 80016ac:	f300 8084 	bgt.w	80017b8 <LEDHandler+0x3e0>
		Set_LED(0, Red, Green, Blue);
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <LEDHandler+0x3d4>)
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <LEDHandler+0x3d8>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <LEDHandler+0x3dc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2000      	movs	r0, #0
 80016be:	f001 f91b 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80016c2:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <LEDHandler+0x3d4>)
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <LEDHandler+0x3d8>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <LEDHandler+0x3dc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2001      	movs	r0, #1
 80016d0:	f001 f912 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80016d4:	4b35      	ldr	r3, [pc, #212]	; (80017ac <LEDHandler+0x3d4>)
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <LEDHandler+0x3d8>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <LEDHandler+0x3dc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2002      	movs	r0, #2
 80016e2:	f001 f909 	bl	80028f8 <Set_LED>
		Set_LED(3, 0, 0, 0);
 80016e6:	2300      	movs	r3, #0
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2003      	movs	r0, #3
 80016ee:	f001 f903 	bl	80028f8 <Set_LED>
		Set_LED(3, 0, 0, 0);
 80016f2:	2300      	movs	r3, #0
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2003      	movs	r0, #3
 80016fa:	f001 f8fd 	bl	80028f8 <Set_LED>
		Set_LED(4, 0, 0, 0);
 80016fe:	2300      	movs	r3, #0
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2004      	movs	r0, #4
 8001706:	f001 f8f7 	bl	80028f8 <Set_LED>
		Set_LED(5, 0, 0, 0);
 800170a:	2300      	movs	r3, #0
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2005      	movs	r0, #5
 8001712:	f001 f8f1 	bl	80028f8 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001716:	2300      	movs	r3, #0
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2006      	movs	r0, #6
 800171e:	f001 f8eb 	bl	80028f8 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001722:	2300      	movs	r3, #0
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2007      	movs	r0, #7
 800172a:	f001 f8e5 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 800172e:	2300      	movs	r3, #0
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2008      	movs	r0, #8
 8001736:	f001 f8df 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 800173a:	2300      	movs	r3, #0
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2009      	movs	r0, #9
 8001742:	f001 f8d9 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001746:	2300      	movs	r3, #0
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	200a      	movs	r0, #10
 800174e:	f001 f8d3 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001752:	2300      	movs	r3, #0
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	200b      	movs	r0, #11
 800175a:	f001 f8cd 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 800175e:	2300      	movs	r3, #0
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	200c      	movs	r0, #12
 8001766:	f001 f8c7 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 800176a:	2300      	movs	r3, #0
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	200d      	movs	r0, #13
 8001772:	f001 f8c1 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001776:	2300      	movs	r3, #0
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	200e      	movs	r0, #14
 800177e:	f001 f8bb 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001782:	2300      	movs	r3, #0
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	200f      	movs	r0, #15
 800178a:	f001 f8b5 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 800178e:	2300      	movs	r3, #0
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	2010      	movs	r0, #16
 8001796:	f001 f8af 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 800179a:	2300      	movs	r3, #0
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2011      	movs	r0, #17
 80017a2:	f001 f8a9 	bl	80028f8 <Set_LED>
 80017a6:	f001 b858 	b.w	800285a <LEDHandler+0x1482>
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	20000010 	.word	0x20000010

	} else if (Value >= 18 && Value < 24) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b11      	cmp	r3, #17
 80017bc:	dd7c      	ble.n	80018b8 <LEDHandler+0x4e0>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b17      	cmp	r3, #23
 80017c2:	dc79      	bgt.n	80018b8 <LEDHandler+0x4e0>
		Set_LED(0, Red, Green, Blue);
 80017c4:	4bc2      	ldr	r3, [pc, #776]	; (8001ad0 <LEDHandler+0x6f8>)
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	4bc2      	ldr	r3, [pc, #776]	; (8001ad4 <LEDHandler+0x6fc>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4bc2      	ldr	r3, [pc, #776]	; (8001ad8 <LEDHandler+0x700>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2000      	movs	r0, #0
 80017d2:	f001 f891 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80017d6:	4bbe      	ldr	r3, [pc, #760]	; (8001ad0 <LEDHandler+0x6f8>)
 80017d8:	6819      	ldr	r1, [r3, #0]
 80017da:	4bbe      	ldr	r3, [pc, #760]	; (8001ad4 <LEDHandler+0x6fc>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4bbe      	ldr	r3, [pc, #760]	; (8001ad8 <LEDHandler+0x700>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2001      	movs	r0, #1
 80017e4:	f001 f888 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80017e8:	4bb9      	ldr	r3, [pc, #740]	; (8001ad0 <LEDHandler+0x6f8>)
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	4bb9      	ldr	r3, [pc, #740]	; (8001ad4 <LEDHandler+0x6fc>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4bb9      	ldr	r3, [pc, #740]	; (8001ad8 <LEDHandler+0x700>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2002      	movs	r0, #2
 80017f6:	f001 f87f 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80017fa:	4bb5      	ldr	r3, [pc, #724]	; (8001ad0 <LEDHandler+0x6f8>)
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	4bb5      	ldr	r3, [pc, #724]	; (8001ad4 <LEDHandler+0x6fc>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4bb5      	ldr	r3, [pc, #724]	; (8001ad8 <LEDHandler+0x700>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2003      	movs	r0, #3
 8001808:	f001 f876 	bl	80028f8 <Set_LED>
		Set_LED(4, 0, 0, 0);
 800180c:	2300      	movs	r3, #0
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2004      	movs	r0, #4
 8001814:	f001 f870 	bl	80028f8 <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001818:	2300      	movs	r3, #0
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2005      	movs	r0, #5
 8001820:	f001 f86a 	bl	80028f8 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001824:	2300      	movs	r3, #0
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2006      	movs	r0, #6
 800182c:	f001 f864 	bl	80028f8 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001830:	2300      	movs	r3, #0
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2007      	movs	r0, #7
 8001838:	f001 f85e 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 800183c:	2300      	movs	r3, #0
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2008      	movs	r0, #8
 8001844:	f001 f858 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001848:	2300      	movs	r3, #0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2009      	movs	r0, #9
 8001850:	f001 f852 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001854:	2300      	movs	r3, #0
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	200a      	movs	r0, #10
 800185c:	f001 f84c 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001860:	2300      	movs	r3, #0
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	200b      	movs	r0, #11
 8001868:	f001 f846 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 800186c:	2300      	movs	r3, #0
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	200c      	movs	r0, #12
 8001874:	f001 f840 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001878:	2300      	movs	r3, #0
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	200d      	movs	r0, #13
 8001880:	f001 f83a 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001884:	2300      	movs	r3, #0
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	200e      	movs	r0, #14
 800188c:	f001 f834 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001890:	2300      	movs	r3, #0
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	200f      	movs	r0, #15
 8001898:	f001 f82e 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 800189c:	2300      	movs	r3, #0
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2010      	movs	r0, #16
 80018a4:	f001 f828 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80018a8:	2300      	movs	r3, #0
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2011      	movs	r0, #17
 80018b0:	f001 f822 	bl	80028f8 <Set_LED>
 80018b4:	f000 bfd1 	b.w	800285a <LEDHandler+0x1482>

	} else if (Value >= 24 && Value < 30) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b17      	cmp	r3, #23
 80018bc:	dd7f      	ble.n	80019be <LEDHandler+0x5e6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b1d      	cmp	r3, #29
 80018c2:	dc7c      	bgt.n	80019be <LEDHandler+0x5e6>
		Set_LED(0, Red, Green, Blue);
 80018c4:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <LEDHandler+0x6f8>)
 80018c6:	6819      	ldr	r1, [r3, #0]
 80018c8:	4b82      	ldr	r3, [pc, #520]	; (8001ad4 <LEDHandler+0x6fc>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b82      	ldr	r3, [pc, #520]	; (8001ad8 <LEDHandler+0x700>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2000      	movs	r0, #0
 80018d2:	f001 f811 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80018d6:	4b7e      	ldr	r3, [pc, #504]	; (8001ad0 <LEDHandler+0x6f8>)
 80018d8:	6819      	ldr	r1, [r3, #0]
 80018da:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <LEDHandler+0x6fc>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <LEDHandler+0x700>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2001      	movs	r0, #1
 80018e4:	f001 f808 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80018e8:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <LEDHandler+0x6f8>)
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <LEDHandler+0x6fc>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <LEDHandler+0x700>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2002      	movs	r0, #2
 80018f6:	f000 ffff 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80018fa:	4b75      	ldr	r3, [pc, #468]	; (8001ad0 <LEDHandler+0x6f8>)
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	4b75      	ldr	r3, [pc, #468]	; (8001ad4 <LEDHandler+0x6fc>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b75      	ldr	r3, [pc, #468]	; (8001ad8 <LEDHandler+0x700>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2003      	movs	r0, #3
 8001908:	f000 fff6 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 800190c:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <LEDHandler+0x6f8>)
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <LEDHandler+0x6fc>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <LEDHandler+0x700>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2004      	movs	r0, #4
 800191a:	f000 ffed 	bl	80028f8 <Set_LED>
		Set_LED(5, 0, 0, 0);
 800191e:	2300      	movs	r3, #0
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2005      	movs	r0, #5
 8001926:	f000 ffe7 	bl	80028f8 <Set_LED>
		Set_LED(6, 0, 0, 0);
 800192a:	2300      	movs	r3, #0
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2006      	movs	r0, #6
 8001932:	f000 ffe1 	bl	80028f8 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001936:	2300      	movs	r3, #0
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2007      	movs	r0, #7
 800193e:	f000 ffdb 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001942:	2300      	movs	r3, #0
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2008      	movs	r0, #8
 800194a:	f000 ffd5 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 800194e:	2300      	movs	r3, #0
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2009      	movs	r0, #9
 8001956:	f000 ffcf 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 800195a:	2300      	movs	r3, #0
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	200a      	movs	r0, #10
 8001962:	f000 ffc9 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001966:	2300      	movs	r3, #0
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	200b      	movs	r0, #11
 800196e:	f000 ffc3 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001972:	2300      	movs	r3, #0
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	200c      	movs	r0, #12
 800197a:	f000 ffbd 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	200d      	movs	r0, #13
 8001986:	f000 ffb7 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 800198a:	2300      	movs	r3, #0
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	200e      	movs	r0, #14
 8001992:	f000 ffb1 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	200f      	movs	r0, #15
 800199e:	f000 ffab 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80019a2:	2300      	movs	r3, #0
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	2010      	movs	r0, #16
 80019aa:	f000 ffa5 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80019ae:	2300      	movs	r3, #0
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2011      	movs	r0, #17
 80019b6:	f000 ff9f 	bl	80028f8 <Set_LED>
 80019ba:	f000 bf4e 	b.w	800285a <LEDHandler+0x1482>

	} else if (Value >= 30 && Value < 36) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b1d      	cmp	r3, #29
 80019c2:	f340 808b 	ble.w	8001adc <LEDHandler+0x704>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b23      	cmp	r3, #35	; 0x23
 80019ca:	f300 8087 	bgt.w	8001adc <LEDHandler+0x704>
		Set_LED(0, Red, Green, Blue);
 80019ce:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <LEDHandler+0x6f8>)
 80019d0:	6819      	ldr	r1, [r3, #0]
 80019d2:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <LEDHandler+0x6fc>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <LEDHandler+0x700>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 ff8c 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80019e0:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <LEDHandler+0x6f8>)
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <LEDHandler+0x6fc>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <LEDHandler+0x700>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2001      	movs	r0, #1
 80019ee:	f000 ff83 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <LEDHandler+0x6f8>)
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <LEDHandler+0x6fc>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <LEDHandler+0x700>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2002      	movs	r0, #2
 8001a00:	f000 ff7a 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <LEDHandler+0x6f8>)
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <LEDHandler+0x6fc>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <LEDHandler+0x700>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 ff71 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <LEDHandler+0x6f8>)
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <LEDHandler+0x6fc>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <LEDHandler+0x700>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2004      	movs	r0, #4
 8001a24:	f000 ff68 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <LEDHandler+0x6f8>)
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <LEDHandler+0x6fc>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <LEDHandler+0x700>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2005      	movs	r0, #5
 8001a36:	f000 ff5f 	bl	80028f8 <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2006      	movs	r0, #6
 8001a42:	f000 ff59 	bl	80028f8 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001a46:	2300      	movs	r3, #0
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2007      	movs	r0, #7
 8001a4e:	f000 ff53 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001a52:	2300      	movs	r3, #0
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2008      	movs	r0, #8
 8001a5a:	f000 ff4d 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2009      	movs	r0, #9
 8001a66:	f000 ff47 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	200a      	movs	r0, #10
 8001a72:	f000 ff41 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	200b      	movs	r0, #11
 8001a7e:	f000 ff3b 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001a82:	2300      	movs	r3, #0
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	200c      	movs	r0, #12
 8001a8a:	f000 ff35 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	200d      	movs	r0, #13
 8001a96:	f000 ff2f 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	200e      	movs	r0, #14
 8001aa2:	f000 ff29 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	200f      	movs	r0, #15
 8001aae:	f000 ff23 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2010      	movs	r0, #16
 8001aba:	f000 ff1d 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2011      	movs	r0, #17
 8001ac6:	f000 ff17 	bl	80028f8 <Set_LED>
 8001aca:	f000 bec6 	b.w	800285a <LEDHandler+0x1482>
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	20000010 	.word	0x20000010

	} else if (Value >= 36 && Value < 42) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b23      	cmp	r3, #35	; 0x23
 8001ae0:	f340 8087 	ble.w	8001bf2 <LEDHandler+0x81a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b29      	cmp	r3, #41	; 0x29
 8001ae8:	f300 8083 	bgt.w	8001bf2 <LEDHandler+0x81a>
		Set_LED(0, Red, Green, Blue);
 8001aec:	4b88      	ldr	r3, [pc, #544]	; (8001d10 <LEDHandler+0x938>)
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <LEDHandler+0x93c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <LEDHandler+0x940>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2000      	movs	r0, #0
 8001afa:	f000 fefd 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001afe:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <LEDHandler+0x938>)
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <LEDHandler+0x93c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b84      	ldr	r3, [pc, #528]	; (8001d18 <LEDHandler+0x940>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 fef4 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001b10:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <LEDHandler+0x938>)
 8001b12:	6819      	ldr	r1, [r3, #0]
 8001b14:	4b7f      	ldr	r3, [pc, #508]	; (8001d14 <LEDHandler+0x93c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b7f      	ldr	r3, [pc, #508]	; (8001d18 <LEDHandler+0x940>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f000 feeb 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001b22:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <LEDHandler+0x938>)
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	4b7b      	ldr	r3, [pc, #492]	; (8001d14 <LEDHandler+0x93c>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b7b      	ldr	r3, [pc, #492]	; (8001d18 <LEDHandler+0x940>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2003      	movs	r0, #3
 8001b30:	f000 fee2 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001b34:	4b76      	ldr	r3, [pc, #472]	; (8001d10 <LEDHandler+0x938>)
 8001b36:	6819      	ldr	r1, [r3, #0]
 8001b38:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <LEDHandler+0x93c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b76      	ldr	r3, [pc, #472]	; (8001d18 <LEDHandler+0x940>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2004      	movs	r0, #4
 8001b42:	f000 fed9 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001b46:	4b72      	ldr	r3, [pc, #456]	; (8001d10 <LEDHandler+0x938>)
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	4b72      	ldr	r3, [pc, #456]	; (8001d14 <LEDHandler+0x93c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <LEDHandler+0x940>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2005      	movs	r0, #5
 8001b54:	f000 fed0 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001b58:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <LEDHandler+0x938>)
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	4b6d      	ldr	r3, [pc, #436]	; (8001d14 <LEDHandler+0x93c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <LEDHandler+0x940>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2006      	movs	r0, #6
 8001b66:	f000 fec7 	bl	80028f8 <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2007      	movs	r0, #7
 8001b72:	f000 fec1 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001b76:	2300      	movs	r3, #0
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2008      	movs	r0, #8
 8001b7e:	f000 febb 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001b82:	2300      	movs	r3, #0
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2009      	movs	r0, #9
 8001b8a:	f000 feb5 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	200a      	movs	r0, #10
 8001b96:	f000 feaf 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	200b      	movs	r0, #11
 8001ba2:	f000 fea9 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	200c      	movs	r0, #12
 8001bae:	f000 fea3 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	200d      	movs	r0, #13
 8001bba:	f000 fe9d 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	200e      	movs	r0, #14
 8001bc6:	f000 fe97 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	200f      	movs	r0, #15
 8001bd2:	f000 fe91 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2010      	movs	r0, #16
 8001bde:	f000 fe8b 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2011      	movs	r0, #17
 8001bea:	f000 fe85 	bl	80028f8 <Set_LED>
 8001bee:	f000 be34 	b.w	800285a <LEDHandler+0x1482>

	} else if (Value >= 42 && Value < 48) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b29      	cmp	r3, #41	; 0x29
 8001bf6:	f340 8091 	ble.w	8001d1c <LEDHandler+0x944>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b2f      	cmp	r3, #47	; 0x2f
 8001bfe:	f300 808d 	bgt.w	8001d1c <LEDHandler+0x944>
		Set_LED(0, Red, Green, Blue);
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <LEDHandler+0x938>)
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <LEDHandler+0x93c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <LEDHandler+0x940>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 fe72 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001c14:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <LEDHandler+0x938>)
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <LEDHandler+0x93c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <LEDHandler+0x940>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2001      	movs	r0, #1
 8001c22:	f000 fe69 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <LEDHandler+0x938>)
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <LEDHandler+0x93c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <LEDHandler+0x940>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2002      	movs	r0, #2
 8001c34:	f000 fe60 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <LEDHandler+0x938>)
 8001c3a:	6819      	ldr	r1, [r3, #0]
 8001c3c:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <LEDHandler+0x93c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <LEDHandler+0x940>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 fe57 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <LEDHandler+0x938>)
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <LEDHandler+0x93c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <LEDHandler+0x940>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2004      	movs	r0, #4
 8001c58:	f000 fe4e 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <LEDHandler+0x938>)
 8001c5e:	6819      	ldr	r1, [r3, #0]
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <LEDHandler+0x93c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <LEDHandler+0x940>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2005      	movs	r0, #5
 8001c6a:	f000 fe45 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <LEDHandler+0x938>)
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <LEDHandler+0x93c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <LEDHandler+0x940>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2006      	movs	r0, #6
 8001c7c:	f000 fe3c 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <LEDHandler+0x938>)
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <LEDHandler+0x93c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <LEDHandler+0x940>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2007      	movs	r0, #7
 8001c8e:	f000 fe33 	bl	80028f8 <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2008      	movs	r0, #8
 8001c9a:	f000 fe2d 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2009      	movs	r0, #9
 8001ca6:	f000 fe27 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001caa:	2300      	movs	r3, #0
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	200a      	movs	r0, #10
 8001cb2:	f000 fe21 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	200b      	movs	r0, #11
 8001cbe:	f000 fe1b 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	200c      	movs	r0, #12
 8001cca:	f000 fe15 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	200d      	movs	r0, #13
 8001cd6:	f000 fe0f 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	200e      	movs	r0, #14
 8001ce2:	f000 fe09 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	200f      	movs	r0, #15
 8001cee:	f000 fe03 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2010      	movs	r0, #16
 8001cfa:	f000 fdfd 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	2011      	movs	r0, #17
 8001d06:	f000 fdf7 	bl	80028f8 <Set_LED>
 8001d0a:	f000 bda6 	b.w	800285a <LEDHandler+0x1482>
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	20000010 	.word	0x20000010

	} else if (Value >= 48 && Value < 54) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b2f      	cmp	r3, #47	; 0x2f
 8001d20:	f340 808d 	ble.w	8001e3e <LEDHandler+0xa66>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b35      	cmp	r3, #53	; 0x35
 8001d28:	f300 8089 	bgt.w	8001e3e <LEDHandler+0xa66>
		Set_LED(0, Red, Green, Blue);
 8001d2c:	4b8e      	ldr	r3, [pc, #568]	; (8001f68 <LEDHandler+0xb90>)
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	4b8e      	ldr	r3, [pc, #568]	; (8001f6c <LEDHandler+0xb94>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b8e      	ldr	r3, [pc, #568]	; (8001f70 <LEDHandler+0xb98>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f000 fddd 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001d3e:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <LEDHandler+0xb90>)
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	4b8a      	ldr	r3, [pc, #552]	; (8001f6c <LEDHandler+0xb94>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b8a      	ldr	r3, [pc, #552]	; (8001f70 <LEDHandler+0xb98>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f000 fdd4 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001d50:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <LEDHandler+0xb90>)
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <LEDHandler+0xb94>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b85      	ldr	r3, [pc, #532]	; (8001f70 <LEDHandler+0xb98>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f000 fdcb 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001d62:	4b81      	ldr	r3, [pc, #516]	; (8001f68 <LEDHandler+0xb90>)
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	4b81      	ldr	r3, [pc, #516]	; (8001f6c <LEDHandler+0xb94>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <LEDHandler+0xb98>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 fdc2 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001d74:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <LEDHandler+0xb90>)
 8001d76:	6819      	ldr	r1, [r3, #0]
 8001d78:	4b7c      	ldr	r3, [pc, #496]	; (8001f6c <LEDHandler+0xb94>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <LEDHandler+0xb98>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2004      	movs	r0, #4
 8001d82:	f000 fdb9 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001d86:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <LEDHandler+0xb90>)
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	4b78      	ldr	r3, [pc, #480]	; (8001f6c <LEDHandler+0xb94>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <LEDHandler+0xb98>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2005      	movs	r0, #5
 8001d94:	f000 fdb0 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001d98:	4b73      	ldr	r3, [pc, #460]	; (8001f68 <LEDHandler+0xb90>)
 8001d9a:	6819      	ldr	r1, [r3, #0]
 8001d9c:	4b73      	ldr	r3, [pc, #460]	; (8001f6c <LEDHandler+0xb94>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <LEDHandler+0xb98>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2006      	movs	r0, #6
 8001da6:	f000 fda7 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8001daa:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <LEDHandler+0xb90>)
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <LEDHandler+0xb94>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <LEDHandler+0xb98>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2007      	movs	r0, #7
 8001db8:	f000 fd9e 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <LEDHandler+0xb90>)
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	4b6a      	ldr	r3, [pc, #424]	; (8001f6c <LEDHandler+0xb94>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <LEDHandler+0xb98>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2008      	movs	r0, #8
 8001dca:	f000 fd95 	bl	80028f8 <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2009      	movs	r0, #9
 8001dd6:	f000 fd8f 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	200a      	movs	r0, #10
 8001de2:	f000 fd89 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001de6:	2300      	movs	r3, #0
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	200b      	movs	r0, #11
 8001dee:	f000 fd83 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001df2:	2300      	movs	r3, #0
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	200c      	movs	r0, #12
 8001dfa:	f000 fd7d 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	200d      	movs	r0, #13
 8001e06:	f000 fd77 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	200e      	movs	r0, #14
 8001e12:	f000 fd71 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001e16:	2300      	movs	r3, #0
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	200f      	movs	r0, #15
 8001e1e:	f000 fd6b 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001e22:	2300      	movs	r3, #0
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2010      	movs	r0, #16
 8001e2a:	f000 fd65 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	2011      	movs	r0, #17
 8001e36:	f000 fd5f 	bl	80028f8 <Set_LED>
 8001e3a:	f000 bd0e 	b.w	800285a <LEDHandler+0x1482>

	} else if (Value >= 54 && Value < 60) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b35      	cmp	r3, #53	; 0x35
 8001e42:	f340 8097 	ble.w	8001f74 <LEDHandler+0xb9c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b3b      	cmp	r3, #59	; 0x3b
 8001e4a:	f300 8093 	bgt.w	8001f74 <LEDHandler+0xb9c>
		Set_LED(0, Red, Green, Blue);
 8001e4e:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <LEDHandler+0xb90>)
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <LEDHandler+0xb94>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <LEDHandler+0xb98>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 fd4c 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001e60:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <LEDHandler+0xb90>)
 8001e62:	6819      	ldr	r1, [r3, #0]
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <LEDHandler+0xb94>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <LEDHandler+0xb98>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f000 fd43 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <LEDHandler+0xb90>)
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <LEDHandler+0xb94>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <LEDHandler+0xb98>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f000 fd3a 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001e84:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <LEDHandler+0xb90>)
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <LEDHandler+0xb94>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <LEDHandler+0xb98>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 fd31 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001e96:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <LEDHandler+0xb90>)
 8001e98:	6819      	ldr	r1, [r3, #0]
 8001e9a:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <LEDHandler+0xb94>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <LEDHandler+0xb98>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2004      	movs	r0, #4
 8001ea4:	f000 fd28 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <LEDHandler+0xb90>)
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <LEDHandler+0xb94>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <LEDHandler+0xb98>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2005      	movs	r0, #5
 8001eb6:	f000 fd1f 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <LEDHandler+0xb90>)
 8001ebc:	6819      	ldr	r1, [r3, #0]
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <LEDHandler+0xb94>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <LEDHandler+0xb98>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2006      	movs	r0, #6
 8001ec8:	f000 fd16 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8001ecc:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <LEDHandler+0xb90>)
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <LEDHandler+0xb94>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <LEDHandler+0xb98>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2007      	movs	r0, #7
 8001eda:	f000 fd0d 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <LEDHandler+0xb90>)
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <LEDHandler+0xb94>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <LEDHandler+0xb98>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2008      	movs	r0, #8
 8001eec:	f000 fd04 	bl	80028f8 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <LEDHandler+0xb90>)
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <LEDHandler+0xb94>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <LEDHandler+0xb98>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2009      	movs	r0, #9
 8001efe:	f000 fcfb 	bl	80028f8 <Set_LED>
		Set_LED(10, 0, 0, 0);
 8001f02:	2300      	movs	r3, #0
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	200a      	movs	r0, #10
 8001f0a:	f000 fcf5 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	200b      	movs	r0, #11
 8001f16:	f000 fcef 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	200c      	movs	r0, #12
 8001f22:	f000 fce9 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8001f26:	2300      	movs	r3, #0
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	200d      	movs	r0, #13
 8001f2e:	f000 fce3 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8001f32:	2300      	movs	r3, #0
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	200e      	movs	r0, #14
 8001f3a:	f000 fcdd 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2200      	movs	r2, #0
 8001f42:	2100      	movs	r1, #0
 8001f44:	200f      	movs	r0, #15
 8001f46:	f000 fcd7 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2010      	movs	r0, #16
 8001f52:	f000 fcd1 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8001f56:	2300      	movs	r3, #0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2011      	movs	r0, #17
 8001f5e:	f000 fccb 	bl	80028f8 <Set_LED>
 8001f62:	f000 bc7a 	b.w	800285a <LEDHandler+0x1482>
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	20000010 	.word	0x20000010
	} else if (Value >= 60 && Value < 66) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b3b      	cmp	r3, #59	; 0x3b
 8001f78:	f340 8092 	ble.w	80020a0 <LEDHandler+0xcc8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b41      	cmp	r3, #65	; 0x41
 8001f80:	f300 808e 	bgt.w	80020a0 <LEDHandler+0xcc8>
		Set_LED(0, Red, Green, Blue);
 8001f84:	4b93      	ldr	r3, [pc, #588]	; (80021d4 <LEDHandler+0xdfc>)
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	4b93      	ldr	r3, [pc, #588]	; (80021d8 <LEDHandler+0xe00>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b93      	ldr	r3, [pc, #588]	; (80021dc <LEDHandler+0xe04>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 fcb1 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8001f96:	4b8f      	ldr	r3, [pc, #572]	; (80021d4 <LEDHandler+0xdfc>)
 8001f98:	6819      	ldr	r1, [r3, #0]
 8001f9a:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <LEDHandler+0xe00>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b8f      	ldr	r3, [pc, #572]	; (80021dc <LEDHandler+0xe04>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f000 fca8 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8001fa8:	4b8a      	ldr	r3, [pc, #552]	; (80021d4 <LEDHandler+0xdfc>)
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	4b8a      	ldr	r3, [pc, #552]	; (80021d8 <LEDHandler+0xe00>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <LEDHandler+0xe04>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f000 fc9f 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8001fba:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <LEDHandler+0xdfc>)
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	4b86      	ldr	r3, [pc, #536]	; (80021d8 <LEDHandler+0xe00>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b86      	ldr	r3, [pc, #536]	; (80021dc <LEDHandler+0xe04>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	f000 fc96 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8001fcc:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <LEDHandler+0xdfc>)
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <LEDHandler+0xe00>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b81      	ldr	r3, [pc, #516]	; (80021dc <LEDHandler+0xe04>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2004      	movs	r0, #4
 8001fda:	f000 fc8d 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <LEDHandler+0xdfc>)
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	4b7d      	ldr	r3, [pc, #500]	; (80021d8 <LEDHandler+0xe00>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b7d      	ldr	r3, [pc, #500]	; (80021dc <LEDHandler+0xe04>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2005      	movs	r0, #5
 8001fec:	f000 fc84 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <LEDHandler+0xdfc>)
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <LEDHandler+0xe00>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b78      	ldr	r3, [pc, #480]	; (80021dc <LEDHandler+0xe04>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2006      	movs	r0, #6
 8001ffe:	f000 fc7b 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8002002:	4b74      	ldr	r3, [pc, #464]	; (80021d4 <LEDHandler+0xdfc>)
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	4b74      	ldr	r3, [pc, #464]	; (80021d8 <LEDHandler+0xe00>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b74      	ldr	r3, [pc, #464]	; (80021dc <LEDHandler+0xe04>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2007      	movs	r0, #7
 8002010:	f000 fc72 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002014:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <LEDHandler+0xdfc>)
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <LEDHandler+0xe00>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <LEDHandler+0xe04>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2008      	movs	r0, #8
 8002022:	f000 fc69 	bl	80028f8 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002026:	4b6b      	ldr	r3, [pc, #428]	; (80021d4 <LEDHandler+0xdfc>)
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <LEDHandler+0xe00>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <LEDHandler+0xe04>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2009      	movs	r0, #9
 8002034:	f000 fc60 	bl	80028f8 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <LEDHandler+0xdfc>)
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	4b66      	ldr	r3, [pc, #408]	; (80021d8 <LEDHandler+0xe00>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <LEDHandler+0xe04>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	200a      	movs	r0, #10
 8002046:	f000 fc57 	bl	80028f8 <Set_LED>
		Set_LED(11, 0, 0, 0);
 800204a:	2300      	movs	r3, #0
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	200b      	movs	r0, #11
 8002052:	f000 fc51 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8002056:	2300      	movs	r3, #0
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	200c      	movs	r0, #12
 800205e:	f000 fc4b 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8002062:	2300      	movs	r3, #0
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	200d      	movs	r0, #13
 800206a:	f000 fc45 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 800206e:	2300      	movs	r3, #0
 8002070:	2200      	movs	r2, #0
 8002072:	2100      	movs	r1, #0
 8002074:	200e      	movs	r0, #14
 8002076:	f000 fc3f 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 800207a:	2300      	movs	r3, #0
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	200f      	movs	r0, #15
 8002082:	f000 fc39 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 8002086:	2300      	movs	r3, #0
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2010      	movs	r0, #16
 800208e:	f000 fc33 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002092:	2300      	movs	r3, #0
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	2011      	movs	r0, #17
 800209a:	f000 fc2d 	bl	80028f8 <Set_LED>
 800209e:	e3dc      	b.n	800285a <LEDHandler+0x1482>
	} else if (Value >= 66 && Value < 72) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b41      	cmp	r3, #65	; 0x41
 80020a4:	f340 809c 	ble.w	80021e0 <LEDHandler+0xe08>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b47      	cmp	r3, #71	; 0x47
 80020ac:	f300 8098 	bgt.w	80021e0 <LEDHandler+0xe08>
		Set_LED(0, Red, Green, Blue);
 80020b0:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <LEDHandler+0xdfc>)
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <LEDHandler+0xe00>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b48      	ldr	r3, [pc, #288]	; (80021dc <LEDHandler+0xe04>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2000      	movs	r0, #0
 80020be:	f000 fc1b 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <LEDHandler+0xdfc>)
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <LEDHandler+0xe00>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b44      	ldr	r3, [pc, #272]	; (80021dc <LEDHandler+0xe04>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2001      	movs	r0, #1
 80020d0:	f000 fc12 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <LEDHandler+0xdfc>)
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <LEDHandler+0xe00>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <LEDHandler+0xe04>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2002      	movs	r0, #2
 80020e2:	f000 fc09 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <LEDHandler+0xdfc>)
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <LEDHandler+0xe00>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <LEDHandler+0xe04>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2003      	movs	r0, #3
 80020f4:	f000 fc00 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <LEDHandler+0xdfc>)
 80020fa:	6819      	ldr	r1, [r3, #0]
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <LEDHandler+0xe00>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <LEDHandler+0xe04>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2004      	movs	r0, #4
 8002106:	f000 fbf7 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 800210a:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <LEDHandler+0xdfc>)
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <LEDHandler+0xe00>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b32      	ldr	r3, [pc, #200]	; (80021dc <LEDHandler+0xe04>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2005      	movs	r0, #5
 8002118:	f000 fbee 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <LEDHandler+0xdfc>)
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <LEDHandler+0xe00>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <LEDHandler+0xe04>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2006      	movs	r0, #6
 800212a:	f000 fbe5 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <LEDHandler+0xdfc>)
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <LEDHandler+0xe00>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <LEDHandler+0xe04>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2007      	movs	r0, #7
 800213c:	f000 fbdc 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <LEDHandler+0xdfc>)
 8002142:	6819      	ldr	r1, [r3, #0]
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <LEDHandler+0xe00>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <LEDHandler+0xe04>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2008      	movs	r0, #8
 800214e:	f000 fbd3 	bl	80028f8 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <LEDHandler+0xdfc>)
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <LEDHandler+0xe00>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <LEDHandler+0xe04>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2009      	movs	r0, #9
 8002160:	f000 fbca 	bl	80028f8 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <LEDHandler+0xdfc>)
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <LEDHandler+0xe00>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <LEDHandler+0xe04>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	200a      	movs	r0, #10
 8002172:	f000 fbc1 	bl	80028f8 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <LEDHandler+0xdfc>)
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <LEDHandler+0xe00>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <LEDHandler+0xe04>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	200b      	movs	r0, #11
 8002184:	f000 fbb8 	bl	80028f8 <Set_LED>
		Set_LED(12, 0, 0, 0);
 8002188:	2300      	movs	r3, #0
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	200c      	movs	r0, #12
 8002190:	f000 fbb2 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 8002194:	2300      	movs	r3, #0
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	200d      	movs	r0, #13
 800219c:	f000 fbac 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 80021a0:	2300      	movs	r3, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	200e      	movs	r0, #14
 80021a8:	f000 fba6 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80021ac:	2300      	movs	r3, #0
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	200f      	movs	r0, #15
 80021b4:	f000 fba0 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80021b8:	2300      	movs	r3, #0
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2010      	movs	r0, #16
 80021c0:	f000 fb9a 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80021c4:	2300      	movs	r3, #0
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2011      	movs	r0, #17
 80021cc:	f000 fb94 	bl	80028f8 <Set_LED>
 80021d0:	e343      	b.n	800285a <LEDHandler+0x1482>
 80021d2:	bf00      	nop
 80021d4:	20000008 	.word	0x20000008
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	20000010 	.word	0x20000010
	} else if (Value >= 72 && Value < 78) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b47      	cmp	r3, #71	; 0x47
 80021e4:	f340 8098 	ble.w	8002318 <LEDHandler+0xf40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b4d      	cmp	r3, #77	; 0x4d
 80021ec:	f300 8094 	bgt.w	8002318 <LEDHandler+0xf40>
		Set_LED(0, Red, Green, Blue);
 80021f0:	4b99      	ldr	r3, [pc, #612]	; (8002458 <LEDHandler+0x1080>)
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	4b99      	ldr	r3, [pc, #612]	; (800245c <LEDHandler+0x1084>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b99      	ldr	r3, [pc, #612]	; (8002460 <LEDHandler+0x1088>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2000      	movs	r0, #0
 80021fe:	f000 fb7b 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8002202:	4b95      	ldr	r3, [pc, #596]	; (8002458 <LEDHandler+0x1080>)
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	4b95      	ldr	r3, [pc, #596]	; (800245c <LEDHandler+0x1084>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b95      	ldr	r3, [pc, #596]	; (8002460 <LEDHandler+0x1088>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2001      	movs	r0, #1
 8002210:	f000 fb72 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002214:	4b90      	ldr	r3, [pc, #576]	; (8002458 <LEDHandler+0x1080>)
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	4b90      	ldr	r3, [pc, #576]	; (800245c <LEDHandler+0x1084>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b90      	ldr	r3, [pc, #576]	; (8002460 <LEDHandler+0x1088>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2002      	movs	r0, #2
 8002222:	f000 fb69 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8002226:	4b8c      	ldr	r3, [pc, #560]	; (8002458 <LEDHandler+0x1080>)
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	4b8c      	ldr	r3, [pc, #560]	; (800245c <LEDHandler+0x1084>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b8c      	ldr	r3, [pc, #560]	; (8002460 <LEDHandler+0x1088>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2003      	movs	r0, #3
 8002234:	f000 fb60 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002238:	4b87      	ldr	r3, [pc, #540]	; (8002458 <LEDHandler+0x1080>)
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	4b87      	ldr	r3, [pc, #540]	; (800245c <LEDHandler+0x1084>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b87      	ldr	r3, [pc, #540]	; (8002460 <LEDHandler+0x1088>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2004      	movs	r0, #4
 8002246:	f000 fb57 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 800224a:	4b83      	ldr	r3, [pc, #524]	; (8002458 <LEDHandler+0x1080>)
 800224c:	6819      	ldr	r1, [r3, #0]
 800224e:	4b83      	ldr	r3, [pc, #524]	; (800245c <LEDHandler+0x1084>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b83      	ldr	r3, [pc, #524]	; (8002460 <LEDHandler+0x1088>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2005      	movs	r0, #5
 8002258:	f000 fb4e 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 800225c:	4b7e      	ldr	r3, [pc, #504]	; (8002458 <LEDHandler+0x1080>)
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <LEDHandler+0x1084>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b7e      	ldr	r3, [pc, #504]	; (8002460 <LEDHandler+0x1088>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2006      	movs	r0, #6
 800226a:	f000 fb45 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800226e:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <LEDHandler+0x1080>)
 8002270:	6819      	ldr	r1, [r3, #0]
 8002272:	4b7a      	ldr	r3, [pc, #488]	; (800245c <LEDHandler+0x1084>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b7a      	ldr	r3, [pc, #488]	; (8002460 <LEDHandler+0x1088>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2007      	movs	r0, #7
 800227c:	f000 fb3c 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002280:	4b75      	ldr	r3, [pc, #468]	; (8002458 <LEDHandler+0x1080>)
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <LEDHandler+0x1084>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b75      	ldr	r3, [pc, #468]	; (8002460 <LEDHandler+0x1088>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2008      	movs	r0, #8
 800228e:	f000 fb33 	bl	80028f8 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002292:	4b71      	ldr	r3, [pc, #452]	; (8002458 <LEDHandler+0x1080>)
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	4b71      	ldr	r3, [pc, #452]	; (800245c <LEDHandler+0x1084>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b71      	ldr	r3, [pc, #452]	; (8002460 <LEDHandler+0x1088>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2009      	movs	r0, #9
 80022a0:	f000 fb2a 	bl	80028f8 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 80022a4:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <LEDHandler+0x1080>)
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	4b6c      	ldr	r3, [pc, #432]	; (800245c <LEDHandler+0x1084>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <LEDHandler+0x1088>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	200a      	movs	r0, #10
 80022b2:	f000 fb21 	bl	80028f8 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80022b6:	4b68      	ldr	r3, [pc, #416]	; (8002458 <LEDHandler+0x1080>)
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	4b68      	ldr	r3, [pc, #416]	; (800245c <LEDHandler+0x1084>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b68      	ldr	r3, [pc, #416]	; (8002460 <LEDHandler+0x1088>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	200b      	movs	r0, #11
 80022c4:	f000 fb18 	bl	80028f8 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 80022c8:	4b63      	ldr	r3, [pc, #396]	; (8002458 <LEDHandler+0x1080>)
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	4b63      	ldr	r3, [pc, #396]	; (800245c <LEDHandler+0x1084>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b63      	ldr	r3, [pc, #396]	; (8002460 <LEDHandler+0x1088>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	200c      	movs	r0, #12
 80022d6:	f000 fb0f 	bl	80028f8 <Set_LED>
		Set_LED(13, 0, 0, 0);
 80022da:	2300      	movs	r3, #0
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	200d      	movs	r0, #13
 80022e2:	f000 fb09 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 80022e6:	2300      	movs	r3, #0
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	200e      	movs	r0, #14
 80022ee:	f000 fb03 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 80022f2:	2300      	movs	r3, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	200f      	movs	r0, #15
 80022fa:	f000 fafd 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80022fe:	2300      	movs	r3, #0
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	2010      	movs	r0, #16
 8002306:	f000 faf7 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 800230a:	2300      	movs	r3, #0
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	2011      	movs	r0, #17
 8002312:	f000 faf1 	bl	80028f8 <Set_LED>
 8002316:	e2a0      	b.n	800285a <LEDHandler+0x1482>
	} else if (Value >= 78 && Value < 84) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b4d      	cmp	r3, #77	; 0x4d
 800231c:	f340 80a2 	ble.w	8002464 <LEDHandler+0x108c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b53      	cmp	r3, #83	; 0x53
 8002324:	f300 809e 	bgt.w	8002464 <LEDHandler+0x108c>
		Set_LED(0, Red, Green, Blue);
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <LEDHandler+0x1080>)
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	4b4b      	ldr	r3, [pc, #300]	; (800245c <LEDHandler+0x1084>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b4b      	ldr	r3, [pc, #300]	; (8002460 <LEDHandler+0x1088>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2000      	movs	r0, #0
 8002336:	f000 fadf 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <LEDHandler+0x1080>)
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <LEDHandler+0x1084>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <LEDHandler+0x1088>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2001      	movs	r0, #1
 8002348:	f000 fad6 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 800234c:	4b42      	ldr	r3, [pc, #264]	; (8002458 <LEDHandler+0x1080>)
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	4b42      	ldr	r3, [pc, #264]	; (800245c <LEDHandler+0x1084>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b42      	ldr	r3, [pc, #264]	; (8002460 <LEDHandler+0x1088>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2002      	movs	r0, #2
 800235a:	f000 facd 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 800235e:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <LEDHandler+0x1080>)
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	4b3e      	ldr	r3, [pc, #248]	; (800245c <LEDHandler+0x1084>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <LEDHandler+0x1088>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2003      	movs	r0, #3
 800236c:	f000 fac4 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002370:	4b39      	ldr	r3, [pc, #228]	; (8002458 <LEDHandler+0x1080>)
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	4b39      	ldr	r3, [pc, #228]	; (800245c <LEDHandler+0x1084>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <LEDHandler+0x1088>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2004      	movs	r0, #4
 800237e:	f000 fabb 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8002382:	4b35      	ldr	r3, [pc, #212]	; (8002458 <LEDHandler+0x1080>)
 8002384:	6819      	ldr	r1, [r3, #0]
 8002386:	4b35      	ldr	r3, [pc, #212]	; (800245c <LEDHandler+0x1084>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b35      	ldr	r3, [pc, #212]	; (8002460 <LEDHandler+0x1088>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2005      	movs	r0, #5
 8002390:	f000 fab2 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8002394:	4b30      	ldr	r3, [pc, #192]	; (8002458 <LEDHandler+0x1080>)
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	4b30      	ldr	r3, [pc, #192]	; (800245c <LEDHandler+0x1084>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <LEDHandler+0x1088>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2006      	movs	r0, #6
 80023a2:	f000 faa9 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <LEDHandler+0x1080>)
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	4b2c      	ldr	r3, [pc, #176]	; (800245c <LEDHandler+0x1084>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <LEDHandler+0x1088>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2007      	movs	r0, #7
 80023b4:	f000 faa0 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <LEDHandler+0x1080>)
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <LEDHandler+0x1084>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <LEDHandler+0x1088>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2008      	movs	r0, #8
 80023c6:	f000 fa97 	bl	80028f8 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 80023ca:	4b23      	ldr	r3, [pc, #140]	; (8002458 <LEDHandler+0x1080>)
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <LEDHandler+0x1084>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <LEDHandler+0x1088>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2009      	movs	r0, #9
 80023d8:	f000 fa8e 	bl	80028f8 <Set_LED>
		Set_LED(10,Red, Green, Blue);
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <LEDHandler+0x1080>)
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <LEDHandler+0x1084>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <LEDHandler+0x1088>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	200a      	movs	r0, #10
 80023ea:	f000 fa85 	bl	80028f8 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <LEDHandler+0x1080>)
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <LEDHandler+0x1084>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <LEDHandler+0x1088>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	200b      	movs	r0, #11
 80023fc:	f000 fa7c 	bl	80028f8 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <LEDHandler+0x1080>)
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <LEDHandler+0x1084>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <LEDHandler+0x1088>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	200c      	movs	r0, #12
 800240e:	f000 fa73 	bl	80028f8 <Set_LED>
		Set_LED(13, Red, Green, Blue);
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <LEDHandler+0x1080>)
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <LEDHandler+0x1084>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <LEDHandler+0x1088>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	200d      	movs	r0, #13
 8002420:	f000 fa6a 	bl	80028f8 <Set_LED>
		Set_LED(14, 0, 0, 0);
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	200e      	movs	r0, #14
 800242c:	f000 fa64 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8002430:	2300      	movs	r3, #0
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	200f      	movs	r0, #15
 8002438:	f000 fa5e 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 800243c:	2300      	movs	r3, #0
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2010      	movs	r0, #16
 8002444:	f000 fa58 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 8002448:	2300      	movs	r3, #0
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2011      	movs	r0, #17
 8002450:	f000 fa52 	bl	80028f8 <Set_LED>
 8002454:	e201      	b.n	800285a <LEDHandler+0x1482>
 8002456:	bf00      	nop
 8002458:	20000008 	.word	0x20000008
 800245c:	2000000c 	.word	0x2000000c
 8002460:	20000010 	.word	0x20000010
	} else if (Value >= 84 && Value < 90) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b53      	cmp	r3, #83	; 0x53
 8002468:	f340 80a4 	ble.w	80025b4 <LEDHandler+0x11dc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b59      	cmp	r3, #89	; 0x59
 8002470:	f300 80a0 	bgt.w	80025b4 <LEDHandler+0x11dc>
		Set_LED(0, Red, Green, Blue);
 8002474:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <LEDHandler+0x11d0>)
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <LEDHandler+0x11d4>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <LEDHandler+0x11d8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2000      	movs	r0, #0
 8002482:	f000 fa39 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 8002486:	4b48      	ldr	r3, [pc, #288]	; (80025a8 <LEDHandler+0x11d0>)
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	4b48      	ldr	r3, [pc, #288]	; (80025ac <LEDHandler+0x11d4>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <LEDHandler+0x11d8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2001      	movs	r0, #1
 8002494:	f000 fa30 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <LEDHandler+0x11d0>)
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	4b43      	ldr	r3, [pc, #268]	; (80025ac <LEDHandler+0x11d4>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <LEDHandler+0x11d8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2002      	movs	r0, #2
 80024a6:	f000 fa27 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <LEDHandler+0x11d0>)
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <LEDHandler+0x11d4>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <LEDHandler+0x11d8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2003      	movs	r0, #3
 80024b8:	f000 fa1e 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <LEDHandler+0x11d0>)
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <LEDHandler+0x11d4>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <LEDHandler+0x11d8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2004      	movs	r0, #4
 80024ca:	f000 fa15 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <LEDHandler+0x11d0>)
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <LEDHandler+0x11d4>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <LEDHandler+0x11d8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2005      	movs	r0, #5
 80024dc:	f000 fa0c 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <LEDHandler+0x11d0>)
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <LEDHandler+0x11d4>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <LEDHandler+0x11d8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2006      	movs	r0, #6
 80024ee:	f000 fa03 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <LEDHandler+0x11d0>)
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <LEDHandler+0x11d4>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <LEDHandler+0x11d8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2007      	movs	r0, #7
 8002500:	f000 f9fa 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <LEDHandler+0x11d0>)
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <LEDHandler+0x11d4>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <LEDHandler+0x11d8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2008      	movs	r0, #8
 8002512:	f000 f9f1 	bl	80028f8 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <LEDHandler+0x11d0>)
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <LEDHandler+0x11d4>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <LEDHandler+0x11d8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2009      	movs	r0, #9
 8002524:	f000 f9e8 	bl	80028f8 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <LEDHandler+0x11d0>)
 800252a:	6819      	ldr	r1, [r3, #0]
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <LEDHandler+0x11d4>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <LEDHandler+0x11d8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	200a      	movs	r0, #10
 8002536:	f000 f9df 	bl	80028f8 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <LEDHandler+0x11d0>)
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <LEDHandler+0x11d4>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <LEDHandler+0x11d8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	200b      	movs	r0, #11
 8002548:	f000 f9d6 	bl	80028f8 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <LEDHandler+0x11d0>)
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <LEDHandler+0x11d4>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <LEDHandler+0x11d8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	200c      	movs	r0, #12
 800255a:	f000 f9cd 	bl	80028f8 <Set_LED>
		Set_LED(13, Red, Green, Blue);
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <LEDHandler+0x11d0>)
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <LEDHandler+0x11d4>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <LEDHandler+0x11d8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	200d      	movs	r0, #13
 800256c:	f000 f9c4 	bl	80028f8 <Set_LED>
		Set_LED(14, Red, Green, Blue);
 8002570:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <LEDHandler+0x11d0>)
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <LEDHandler+0x11d4>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <LEDHandler+0x11d8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	200e      	movs	r0, #14
 800257e:	f000 f9bb 	bl	80028f8 <Set_LED>
		Set_LED(15, 0, 0, 0);
 8002582:	2300      	movs	r3, #0
 8002584:	2200      	movs	r2, #0
 8002586:	2100      	movs	r1, #0
 8002588:	200f      	movs	r0, #15
 800258a:	f000 f9b5 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 800258e:	2300      	movs	r3, #0
 8002590:	2200      	movs	r2, #0
 8002592:	2100      	movs	r1, #0
 8002594:	2010      	movs	r0, #16
 8002596:	f000 f9af 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 800259a:	2300      	movs	r3, #0
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	2011      	movs	r0, #17
 80025a2:	f000 f9a9 	bl	80028f8 <Set_LED>
 80025a6:	e158      	b.n	800285a <LEDHandler+0x1482>
 80025a8:	20000008 	.word	0x20000008
 80025ac:	2000000c 	.word	0x2000000c
 80025b0:	20000010 	.word	0x20000010
	} else if (Value >= 90 && Value < 96) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b59      	cmp	r3, #89	; 0x59
 80025b8:	f340 80a8 	ble.w	800270c <LEDHandler+0x1334>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b5f      	cmp	r3, #95	; 0x5f
 80025c0:	f300 80a4 	bgt.w	800270c <LEDHandler+0x1334>
		Set_LED(0, Red, Green, Blue);
 80025c4:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <LEDHandler+0x1328>)
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <LEDHandler+0x132c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b4e      	ldr	r3, [pc, #312]	; (8002708 <LEDHandler+0x1330>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2000      	movs	r0, #0
 80025d2:	f000 f991 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <LEDHandler+0x1328>)
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <LEDHandler+0x132c>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <LEDHandler+0x1330>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2001      	movs	r0, #1
 80025e4:	f000 f988 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 80025e8:	4b45      	ldr	r3, [pc, #276]	; (8002700 <LEDHandler+0x1328>)
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	4b45      	ldr	r3, [pc, #276]	; (8002704 <LEDHandler+0x132c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b45      	ldr	r3, [pc, #276]	; (8002708 <LEDHandler+0x1330>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2002      	movs	r0, #2
 80025f6:	f000 f97f 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <LEDHandler+0x1328>)
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <LEDHandler+0x132c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <LEDHandler+0x1330>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2003      	movs	r0, #3
 8002608:	f000 f976 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 800260c:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <LEDHandler+0x1328>)
 800260e:	6819      	ldr	r1, [r3, #0]
 8002610:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <LEDHandler+0x132c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b3c      	ldr	r3, [pc, #240]	; (8002708 <LEDHandler+0x1330>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2004      	movs	r0, #4
 800261a:	f000 f96d 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <LEDHandler+0x1328>)
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <LEDHandler+0x132c>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <LEDHandler+0x1330>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2005      	movs	r0, #5
 800262c:	f000 f964 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <LEDHandler+0x1328>)
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	4b33      	ldr	r3, [pc, #204]	; (8002704 <LEDHandler+0x132c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b33      	ldr	r3, [pc, #204]	; (8002708 <LEDHandler+0x1330>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2006      	movs	r0, #6
 800263e:	f000 f95b 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 8002642:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <LEDHandler+0x1328>)
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <LEDHandler+0x132c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <LEDHandler+0x1330>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2007      	movs	r0, #7
 8002650:	f000 f952 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <LEDHandler+0x1328>)
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <LEDHandler+0x132c>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <LEDHandler+0x1330>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2008      	movs	r0, #8
 8002662:	f000 f949 	bl	80028f8 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <LEDHandler+0x1328>)
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <LEDHandler+0x132c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <LEDHandler+0x1330>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2009      	movs	r0, #9
 8002674:	f000 f940 	bl	80028f8 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <LEDHandler+0x1328>)
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <LEDHandler+0x132c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <LEDHandler+0x1330>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	200a      	movs	r0, #10
 8002686:	f000 f937 	bl	80028f8 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <LEDHandler+0x1328>)
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <LEDHandler+0x132c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <LEDHandler+0x1330>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	200b      	movs	r0, #11
 8002698:	f000 f92e 	bl	80028f8 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <LEDHandler+0x1328>)
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <LEDHandler+0x132c>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <LEDHandler+0x1330>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	200c      	movs	r0, #12
 80026aa:	f000 f925 	bl	80028f8 <Set_LED>
		Set_LED(13, Red, Green, Blue);
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <LEDHandler+0x1328>)
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <LEDHandler+0x132c>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b14      	ldr	r3, [pc, #80]	; (8002708 <LEDHandler+0x1330>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	200d      	movs	r0, #13
 80026bc:	f000 f91c 	bl	80028f8 <Set_LED>
		Set_LED(14, Red, Green, Blue);
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <LEDHandler+0x1328>)
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <LEDHandler+0x132c>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <LEDHandler+0x1330>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	200e      	movs	r0, #14
 80026ce:	f000 f913 	bl	80028f8 <Set_LED>
		Set_LED(15, Red, Green, Blue);
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <LEDHandler+0x1328>)
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <LEDHandler+0x132c>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <LEDHandler+0x1330>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	200f      	movs	r0, #15
 80026e0:	f000 f90a 	bl	80028f8 <Set_LED>
		Set_LED(16, 0, 0, 0);
 80026e4:	2300      	movs	r3, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	2010      	movs	r0, #16
 80026ec:	f000 f904 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 80026f0:	2300      	movs	r3, #0
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	2011      	movs	r0, #17
 80026f8:	f000 f8fe 	bl	80028f8 <Set_LED>
 80026fc:	e0ad      	b.n	800285a <LEDHandler+0x1482>
 80026fe:	bf00      	nop
 8002700:	20000008 	.word	0x20000008
 8002704:	2000000c 	.word	0x2000000c
 8002708:	20000010 	.word	0x20000010
	} else if (Value >= 96 && Value < 101) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b5f      	cmp	r3, #95	; 0x5f
 8002710:	f340 80a3 	ble.w	800285a <LEDHandler+0x1482>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	f300 809f 	bgt.w	800285a <LEDHandler+0x1482>
		Set_LED(0, Red, Green, Blue);
 800271c:	4b56      	ldr	r3, [pc, #344]	; (8002878 <LEDHandler+0x14a0>)
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	4b56      	ldr	r3, [pc, #344]	; (800287c <LEDHandler+0x14a4>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b56      	ldr	r3, [pc, #344]	; (8002880 <LEDHandler+0x14a8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2000      	movs	r0, #0
 800272a:	f000 f8e5 	bl	80028f8 <Set_LED>
		Set_LED(1, Red, Green, Blue);
 800272e:	4b52      	ldr	r3, [pc, #328]	; (8002878 <LEDHandler+0x14a0>)
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	4b52      	ldr	r3, [pc, #328]	; (800287c <LEDHandler+0x14a4>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b52      	ldr	r3, [pc, #328]	; (8002880 <LEDHandler+0x14a8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2001      	movs	r0, #1
 800273c:	f000 f8dc 	bl	80028f8 <Set_LED>
		Set_LED(2, Red, Green, Blue);
 8002740:	4b4d      	ldr	r3, [pc, #308]	; (8002878 <LEDHandler+0x14a0>)
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <LEDHandler+0x14a4>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b4d      	ldr	r3, [pc, #308]	; (8002880 <LEDHandler+0x14a8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2002      	movs	r0, #2
 800274e:	f000 f8d3 	bl	80028f8 <Set_LED>
		Set_LED(3, Red, Green, Blue);
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <LEDHandler+0x14a0>)
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	4b49      	ldr	r3, [pc, #292]	; (800287c <LEDHandler+0x14a4>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b49      	ldr	r3, [pc, #292]	; (8002880 <LEDHandler+0x14a8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2003      	movs	r0, #3
 8002760:	f000 f8ca 	bl	80028f8 <Set_LED>
		Set_LED(4, Red, Green, Blue);
 8002764:	4b44      	ldr	r3, [pc, #272]	; (8002878 <LEDHandler+0x14a0>)
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	4b44      	ldr	r3, [pc, #272]	; (800287c <LEDHandler+0x14a4>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b44      	ldr	r3, [pc, #272]	; (8002880 <LEDHandler+0x14a8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2004      	movs	r0, #4
 8002772:	f000 f8c1 	bl	80028f8 <Set_LED>
		Set_LED(5, Red, Green, Blue);
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <LEDHandler+0x14a0>)
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	4b40      	ldr	r3, [pc, #256]	; (800287c <LEDHandler+0x14a4>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b40      	ldr	r3, [pc, #256]	; (8002880 <LEDHandler+0x14a8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2005      	movs	r0, #5
 8002784:	f000 f8b8 	bl	80028f8 <Set_LED>
		Set_LED(6, Red, Green, Blue);
 8002788:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <LEDHandler+0x14a0>)
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <LEDHandler+0x14a4>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <LEDHandler+0x14a8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2006      	movs	r0, #6
 8002796:	f000 f8af 	bl	80028f8 <Set_LED>
		Set_LED(7, Red, Green, Blue);
 800279a:	4b37      	ldr	r3, [pc, #220]	; (8002878 <LEDHandler+0x14a0>)
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <LEDHandler+0x14a4>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b37      	ldr	r3, [pc, #220]	; (8002880 <LEDHandler+0x14a8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2007      	movs	r0, #7
 80027a8:	f000 f8a6 	bl	80028f8 <Set_LED>
		Set_LED(8, Red, Green, Blue);
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <LEDHandler+0x14a0>)
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	4b32      	ldr	r3, [pc, #200]	; (800287c <LEDHandler+0x14a4>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b32      	ldr	r3, [pc, #200]	; (8002880 <LEDHandler+0x14a8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2008      	movs	r0, #8
 80027ba:	f000 f89d 	bl	80028f8 <Set_LED>
		Set_LED(9, Red, Green, Blue);
 80027be:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <LEDHandler+0x14a0>)
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	4b2e      	ldr	r3, [pc, #184]	; (800287c <LEDHandler+0x14a4>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <LEDHandler+0x14a8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2009      	movs	r0, #9
 80027cc:	f000 f894 	bl	80028f8 <Set_LED>
		Set_LED(10, Red, Green, Blue);
 80027d0:	4b29      	ldr	r3, [pc, #164]	; (8002878 <LEDHandler+0x14a0>)
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <LEDHandler+0x14a4>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <LEDHandler+0x14a8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	200a      	movs	r0, #10
 80027de:	f000 f88b 	bl	80028f8 <Set_LED>
		Set_LED(11, Red, Green, Blue);
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <LEDHandler+0x14a0>)
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	4b25      	ldr	r3, [pc, #148]	; (800287c <LEDHandler+0x14a4>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b25      	ldr	r3, [pc, #148]	; (8002880 <LEDHandler+0x14a8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	200b      	movs	r0, #11
 80027f0:	f000 f882 	bl	80028f8 <Set_LED>
		Set_LED(12, Red, Green, Blue);
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <LEDHandler+0x14a0>)
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <LEDHandler+0x14a4>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <LEDHandler+0x14a8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	200c      	movs	r0, #12
 8002802:	f000 f879 	bl	80028f8 <Set_LED>
		Set_LED(13, Red, Green, Blue);
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <LEDHandler+0x14a0>)
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <LEDHandler+0x14a4>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <LEDHandler+0x14a8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	200d      	movs	r0, #13
 8002814:	f000 f870 	bl	80028f8 <Set_LED>
		Set_LED(14, Red, Green, Blue);
 8002818:	4b17      	ldr	r3, [pc, #92]	; (8002878 <LEDHandler+0x14a0>)
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <LEDHandler+0x14a4>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <LEDHandler+0x14a8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	200e      	movs	r0, #14
 8002826:	f000 f867 	bl	80028f8 <Set_LED>
		Set_LED(15, Red, Green, Blue);
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <LEDHandler+0x14a0>)
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <LEDHandler+0x14a4>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <LEDHandler+0x14a8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	200f      	movs	r0, #15
 8002838:	f000 f85e 	bl	80028f8 <Set_LED>
		Set_LED(16, Red, Green, Blue);
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <LEDHandler+0x14a0>)
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <LEDHandler+0x14a4>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <LEDHandler+0x14a8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2010      	movs	r0, #16
 800284a:	f000 f855 	bl	80028f8 <Set_LED>
		Set_LED(17, 0, 0, 0);
 800284e:	2300      	movs	r3, #0
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	2011      	movs	r0, #17
 8002856:	f000 f84f 	bl	80028f8 <Set_LED>
	}


	Set_Brightness(brilho);
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <LEDHandler+0x14ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fabe 	bl	8002de0 <Set_Brightness>
	WS2512_Send();
 8002864:	f000 fb3a 	bl	8002edc <WS2512_Send>
	HAL_Delay(50);
 8002868:	2032      	movs	r0, #50	; 0x32
 800286a:	f000 fd9d 	bl	80033a8 <HAL_Delay>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000008 	.word	0x20000008
 800287c:	2000000c 	.word	0x2000000c
 8002880:	20000010 	.word	0x20000010
 8002884:	20000004 	.word	0x20000004

08002888 <AnalogHandler>:

//TODO Documentar método
int AnalogHandler(int Value){
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

	Value = Value*100/4095;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2264      	movs	r2, #100	; 0x64
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <AnalogHandler+0x44>)
 800289a:	fb82 1203 	smull	r1, r2, r2, r3
 800289e:	441a      	add	r2, r3
 80028a0:	12d2      	asrs	r2, r2, #11
 80028a2:	17db      	asrs	r3, r3, #31
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	607b      	str	r3, [r7, #4]

	if ( Value > 100){
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	dd02      	ble.n	80028b4 <AnalogHandler+0x2c>
		Value = 100;
 80028ae:	2364      	movs	r3, #100	; 0x64
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	e004      	b.n	80028be <AnalogHandler+0x36>
	}else if ( Value < 0){
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da01      	bge.n	80028be <AnalogHandler+0x36>
		Value = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
	}

	return Value;
 80028be:	687b      	ldr	r3, [r7, #4]

}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	80080081 	.word	0x80080081

080028d0 <HAL_TIM_PWM_PulseFinishedCallback>:

//TODO Documentar método
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80028d8:	2100      	movs	r1, #0
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80028dc:	f002 fefa 	bl	80056d4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200001cc 	.word	0x200001cc
 80028f4:	200003bc 	.word	0x200003bc

080028f8 <Set_LED>:

//TODO Documentar método
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	b2d9      	uxtb	r1, r3
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <Set_LED+0x54>)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	b2d9      	uxtb	r1, r3
 8002916:	4a0d      	ldr	r2, [pc, #52]	; (800294c <Set_LED+0x54>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	460a      	mov	r2, r1
 8002920:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	b2d9      	uxtb	r1, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <Set_LED+0x54>)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	460a      	mov	r2, r1
 8002930:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2d9      	uxtb	r1, r3
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <Set_LED+0x54>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	460a      	mov	r2, r1
 8002940:	70da      	strb	r2, [r3, #3]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	20000318 	.word	0x20000318

08002950 <DigitExtract>:
//	downcounter = 100;while (downcounter > 0);
}



void DigitExtract(int num) {
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

//	int unid, dez, cent;
	unid = num % 10;
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <DigitExtract+0x6c>)
 800295c:	fb83 2301 	smull	r2, r3, r3, r1
 8002960:	109a      	asrs	r2, r3, #2
 8002962:	17cb      	asrs	r3, r1, #31
 8002964:	1ad2      	subs	r2, r2, r3
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	1aca      	subs	r2, r1, r3
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <DigitExtract+0x70>)
 8002972:	601a      	str	r2, [r3, #0]
	num = num / 10;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <DigitExtract+0x6c>)
 8002978:	fb82 1203 	smull	r1, r2, r2, r3
 800297c:	1092      	asrs	r2, r2, #2
 800297e:	17db      	asrs	r3, r3, #31
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	607b      	str	r3, [r7, #4]
	dez = num % 10;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <DigitExtract+0x6c>)
 8002988:	fb83 2301 	smull	r2, r3, r3, r1
 800298c:	109a      	asrs	r2, r3, #2
 800298e:	17cb      	asrs	r3, r1, #31
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	1aca      	subs	r2, r1, r3
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <DigitExtract+0x74>)
 800299e:	601a      	str	r2, [r3, #0]
	cent = num / 10;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <DigitExtract+0x6c>)
 80029a4:	fb82 1203 	smull	r1, r2, r2, r3
 80029a8:	1092      	asrs	r2, r2, #2
 80029aa:	17db      	asrs	r3, r3, #31
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <DigitExtract+0x78>)
 80029b0:	6013      	str	r3, [r2, #0]

}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	66666667 	.word	0x66666667
 80029c0:	200002f8 	.word	0x200002f8
 80029c4:	200002fc 	.word	0x200002fc
 80029c8:	20000300 	.word	0x20000300

080029cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) //frequencia do timer4 é de 5 kHz, st=200us
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4aa4      	ldr	r2, [pc, #656]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_PeriodElapsedCallback+0x58>
	{

		if (idx < 250) {		//atualizar a contagem a cada 500 ms
 80029de:	4ba4      	ldr	r3, [pc, #656]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2bf9      	cmp	r3, #249	; 0xf9
 80029e4:	dc05      	bgt.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x26>

			idx++;
 80029e6:	4ba2      	ldr	r3, [pc, #648]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	4aa0      	ldr	r2, [pc, #640]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e00a      	b.n	8002a08 <HAL_TIM_PeriodElapsedCallback+0x3c>
		} else {

			var = AnalogHandler(readValue);		//atualização do valor do sinal analógico
 80029f2:	4ba0      	ldr	r3, [pc, #640]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff46 	bl	8002888 <AnalogHandler>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a9e      	ldr	r2, [pc, #632]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002a00:	6013      	str	r3, [r2, #0]

			idx = 1;
 8002a02:	4b9b      	ldr	r3, [pc, #620]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
		}

		if (downcounter_timer4 > 0) {
 8002a08:	4b9c      	ldr	r3, [pc, #624]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	dd04      	ble.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x4e>
			downcounter_timer4--;
 8002a10:	4b9a      	ldr	r3, [pc, #616]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	4a99      	ldr	r2, [pc, #612]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a18:	6013      	str	r3, [r2, #0]
		}

		counter_timer4++;
 8002a1a:	4b99      	ldr	r3, [pc, #612]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	4a97      	ldr	r2, [pc, #604]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a22:	6013      	str	r3, [r2, #0]
	}

	if (htim->Instance == TIM3) { //frequencia do timer3 é de 50 kHz, time=20us
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a96      	ldr	r2, [pc, #600]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	f040 81c3 	bne.w	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3ea>

		if (downcounter > 0) {
 8002a30:	4b95      	ldr	r3, [pc, #596]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	dd05      	ble.n	8002a44 <HAL_TIM_PeriodElapsedCallback+0x78>
			downcounter--;
 8002a38:	4b93      	ldr	r3, [pc, #588]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	4a92      	ldr	r2, [pc, #584]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a40:	6013      	str	r3, [r2, #0]
			fsm++;

		}
	}

}
 8002a42:	e1b8      	b.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3ea>
			switch (fsm) {
 8002a44:	4b91      	ldr	r3, [pc, #580]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f240 2255 	movw	r2, #597	; 0x255
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	f000 8197 	beq.w	8002d80 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 8002a52:	f240 2255 	movw	r2, #597	; 0x255
 8002a56:	4293      	cmp	r3, r2
 8002a58:	f300 81a2 	bgt.w	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002a5c:	f240 2253 	movw	r2, #595	; 0x253
 8002a60:	4293      	cmp	r3, r2
 8002a62:	f000 8181 	beq.w	8002d68 <HAL_TIM_PeriodElapsedCallback+0x39c>
 8002a66:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8002a6a:	f280 8199 	bge.w	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002a6e:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 8002a72:	f300 8195 	bgt.w	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002a76:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8002a7a:	da11      	bge.n	8002aa0 <HAL_TIM_PeriodElapsedCallback+0xd4>
 8002a7c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002a80:	f000 8126 	beq.w	8002cd0 <HAL_TIM_PeriodElapsedCallback+0x304>
 8002a84:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002a88:	f300 818a 	bgt.w	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002a8c:	2be7      	cmp	r3, #231	; 0xe7
 8002a8e:	f300 8187 	bgt.w	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002a92:	2bd7      	cmp	r3, #215	; 0xd7
 8002a94:	da2a      	bge.n	8002aec <HAL_TIM_PeriodElapsedCallback+0x120>
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	dc6d      	bgt.n	8002b76 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da4a      	bge.n	8002b34 <HAL_TIM_PeriodElapsedCallback+0x168>
 8002a9e:	e17f      	b.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002aa0:	f5a3 73d7 	sub.w	r3, r3, #430	; 0x1ae
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002aae:	401a      	ands	r2, r3
 8002ab0:	2a00      	cmp	r2, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2201      	movne	r2, #1
 8002ab6:	2200      	moveq	r2, #0
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	2a00      	cmp	r2, #0
 8002abc:	f040 8135 	bne.w	8002d2a <HAL_TIM_PeriodElapsedCallback+0x35e>
 8002ac0:	f245 5255 	movw	r2, #21845	; 0x5555
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2201      	movne	r2, #1
 8002acc:	2200      	moveq	r2, #0
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	2a00      	cmp	r2, #0
 8002ad2:	f040 8109 	bne.w	8002ce8 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 812b 	bne.w	8002d40 <HAL_TIM_PeriodElapsedCallback+0x374>
 8002aea:	e159      	b.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002aec:	3bd7      	subs	r3, #215	; 0xd7
 8002aee:	2201      	movs	r2, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002af8:	401a      	ands	r2, r3
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	bf14      	ite	ne
 8002afe:	2201      	movne	r2, #1
 8002b00:	2200      	moveq	r2, #0
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	f040 80a6 	bne.w	8002c56 <HAL_TIM_PeriodElapsedCallback+0x28a>
 8002b0a:	f245 5255 	movw	r2, #21845	; 0x5555
 8002b0e:	401a      	ands	r2, r3
 8002b10:	2a00      	cmp	r2, #0
 8002b12:	bf14      	ite	ne
 8002b14:	2201      	movne	r2, #1
 8002b16:	2200      	moveq	r2, #0
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	d17a      	bne.n	8002c14 <HAL_TIM_PeriodElapsedCallback+0x248>
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 80bb 	bne.w	8002ca8 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8002b32:	e135      	b.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002b34:	461a      	mov	r2, r3
 8002b36:	2301      	movs	r3, #1
 8002b38:	4093      	lsls	r3, r2
 8002b3a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002b3e:	401a      	ands	r2, r3
 8002b40:	2a00      	cmp	r2, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2201      	movne	r2, #1
 8002b46:	2200      	moveq	r2, #0
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	2a00      	cmp	r2, #0
 8002b4c:	d137      	bne.n	8002bbe <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8002b4e:	f245 5255 	movw	r2, #21845	; 0x5555
 8002b52:	401a      	ands	r2, r3
 8002b54:	2a00      	cmp	r2, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2201      	movne	r2, #1
 8002b5a:	2200      	moveq	r2, #0
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8002b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d12f      	bne.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x208>
 8002b74:	e114      	b.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002b76:	2ba5      	cmp	r3, #165	; 0xa5
 8002b78:	d040      	beq.n	8002bfc <HAL_TIM_PeriodElapsedCallback+0x230>
 8002b7a:	e111      	b.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2140      	movs	r1, #64	; 0x40
 8002b80:	4843      	ldr	r0, [pc, #268]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b82:	f001 fd59 	bl	8004638 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b8a:	4841      	ldr	r0, [pc, #260]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b8c:	f001 fd6c 	bl	8004668 <HAL_GPIO_TogglePin>
				if (digits[cent][myIndex] == 1) {
 8002b90:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4940      	ldr	r1, [pc, #256]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002b9a:	00d2      	lsls	r2, r2, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_TIM_PeriodElapsedCallback+0x1e6>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	4839      	ldr	r0, [pc, #228]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bac:	f001 fd44 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002bb0:	e0fc      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	4836      	ldr	r0, [pc, #216]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bb8:	f001 fd3e 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002bbc:	e0f6      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				myIndex--;
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002bc6:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bcc:	4830      	ldr	r0, [pc, #192]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bce:	f001 fd4b 	bl	8004668 <HAL_GPIO_TogglePin>
				break;
 8002bd2:	e0eb      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bd8:	482d      	ldr	r0, [pc, #180]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bda:	f001 fd45 	bl	8004668 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 8002bde:	2201      	movs	r2, #1
 8002be0:	2140      	movs	r1, #64	; 0x40
 8002be2:	482b      	ldr	r0, [pc, #172]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002be4:	f001 fd28 	bl	8004638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 1);
 8002be8:	2201      	movs	r2, #1
 8002bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bee:	482c      	ldr	r0, [pc, #176]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002bf0:	f001 fd22 	bl	8004638 <HAL_GPIO_WritePin>
				myIndex = 7;
 8002bf4:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	601a      	str	r2, [r3, #0]
				break;
 8002bfa:	e0d7      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002bfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c00:	4823      	ldr	r0, [pc, #140]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c02:	f001 fd31 	bl	8004668 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG1, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c0c:	4824      	ldr	r0, [pc, #144]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002c0e:	f001 fd13 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002c12:	e0cb      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002c14:	2200      	movs	r2, #0
 8002c16:	2140      	movs	r1, #64	; 0x40
 8002c18:	481d      	ldr	r0, [pc, #116]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c1a:	f001 fd0d 	bl	8004638 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c22:	481b      	ldr	r0, [pc, #108]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c24:	f001 fd20 	bl	8004668 <HAL_GPIO_TogglePin>
				if (digits[dez][myIndex] == 1) {
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	491a      	ldr	r1, [pc, #104]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002c32:	00d2      	lsls	r2, r2, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <HAL_TIM_PeriodElapsedCallback+0x27e>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8002c3e:	2201      	movs	r2, #1
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	4813      	ldr	r0, [pc, #76]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c44:	f001 fcf8 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002c48:	e0b0      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	4810      	ldr	r0, [pc, #64]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c50:	f001 fcf2 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002c54:	e0aa      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				myIndex--;
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002c5e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c64:	480a      	ldr	r0, [pc, #40]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c66:	f001 fcff 	bl	8004668 <HAL_GPIO_TogglePin>
				break;
 8002c6a:	e09f      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	200002f4 	.word	0x200002f4
 8002c74:	200003b8 	.word	0x200003b8
 8002c78:	200002f0 	.word	0x200002f0
 8002c7c:	2000030c 	.word	0x2000030c
 8002c80:	20000310 	.word	0x20000310
 8002c84:	40000400 	.word	0x40000400
 8002c88:	20000308 	.word	0x20000308
 8002c8c:	20000304 	.word	0x20000304
 8002c90:	40010c00 	.word	0x40010c00
 8002c94:	20000300 	.word	0x20000300
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	20000014 	.word	0x20000014
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	200002fc 	.word	0x200002fc
				myIndex = 7;
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002caa:	2207      	movs	r2, #7
 8002cac:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cb2:	4844      	ldr	r0, [pc, #272]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002cb4:	f001 fcd8 	bl	8004668 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 8002cb8:	2201      	movs	r2, #1
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	4841      	ldr	r0, [pc, #260]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002cbe:	f001 fcbb 	bl	8004638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 1);
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cc8:	483f      	ldr	r0, [pc, #252]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002cca:	f001 fcb5 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002cce:	e06d      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cd4:	483b      	ldr	r0, [pc, #236]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002cd6:	f001 fcc7 	bl	8004668 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG2, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ce0:	4839      	ldr	r0, [pc, #228]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002ce2:	f001 fca9 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002ce6:	e061      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 0);		//inicio da mensagem
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	4835      	ldr	r0, [pc, #212]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002cee:	f001 fca3 	bl	8004638 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cf6:	4833      	ldr	r0, [pc, #204]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002cf8:	f001 fcb6 	bl	8004668 <HAL_GPIO_TogglePin>
				if (digits[unid][myIndex] == 1) {
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4932      	ldr	r1, [pc, #200]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002d06:	00d2      	lsls	r2, r2, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <HAL_TIM_PeriodElapsedCallback+0x352>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 1); //data HIGH
 8002d12:	2201      	movs	r2, #1
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	482b      	ldr	r0, [pc, #172]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002d18:	f001 fc8e 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002d1c:	e046      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
					HAL_GPIO_WritePin(GPIOB, DS_pin, 0); //data LOW
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2180      	movs	r1, #128	; 0x80
 8002d22:	4828      	ldr	r0, [pc, #160]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002d24:	f001 fc88 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002d28:	e040      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				myIndex--;
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002d32:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002d34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d38:	4822      	ldr	r0, [pc, #136]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002d3a:	f001 fc95 	bl	8004668 <HAL_GPIO_TogglePin>
				break;
 8002d3e:	e035      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d44:	481f      	ldr	r0, [pc, #124]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002d46:	f001 fc8f 	bl	8004668 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOB, STCP_pin, 1);		//FIM da mensagem
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	2140      	movs	r1, #64	; 0x40
 8002d4e:	481d      	ldr	r0, [pc, #116]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002d50:	f001 fc72 	bl	8004638 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 1);
 8002d54:	2201      	movs	r2, #1
 8002d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d5a:	481b      	ldr	r0, [pc, #108]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002d5c:	f001 fc6c 	bl	8004638 <HAL_GPIO_WritePin>
				myIndex = 7;
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002d62:	2207      	movs	r2, #7
 8002d64:	601a      	str	r2, [r3, #0]
				break;
 8002d66:	e021      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d6c:	4815      	ldr	r0, [pc, #84]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002d6e:	f001 fc7b 	bl	8004668 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOC, DIG3, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d78:	4813      	ldr	r0, [pc, #76]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002d7a:	f001 fc5d 	bl	8004638 <HAL_GPIO_WritePin>
				break;
 8002d7e:	e015      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);		//CLOCK
 8002d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d84:	480f      	ldr	r0, [pc, #60]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002d86:	f001 fc6f 	bl	8004668 <HAL_GPIO_TogglePin>
				downcounter = 50;		//tempo morto de 1ms
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002d8c:	2232      	movs	r2, #50	; 0x32
 8002d8e:	601a      	str	r2, [r3, #0]
				fsm = -1;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d92:	f04f 32ff 	mov.w	r2, #4294967295
 8002d96:	601a      	str	r2, [r3, #0]
				myIndex = 7;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	601a      	str	r2, [r3, #0]
				break;
 8002d9e:	e005      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x3e0>
				HAL_GPIO_TogglePin(GPIOB, SHCP_pin);	//CLOCK
 8002da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da4:	4807      	ldr	r0, [pc, #28]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002da6:	f001 fc5f 	bl	8004668 <HAL_GPIO_TogglePin>
				break;
 8002daa:	bf00      	nop
			fsm++;
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002db4:	6013      	str	r3, [r2, #0]
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	40010c00 	.word	0x40010c00
 8002dc8:	40011000 	.word	0x40011000
 8002dcc:	200002f8 	.word	0x200002f8
 8002dd0:	20000014 	.word	0x20000014
 8002dd4:	20000308 	.word	0x20000308
 8002dd8:	20000304 	.word	0x20000304
 8002ddc:	00000000 	.word	0x00000000

08002de0 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness) // 0~45 linearização do brilho
{
 8002de0:	b5b0      	push	{r4, r5, r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b2d      	cmp	r3, #45	; 0x2d
 8002dec:	dd01      	ble.n	8002df2 <Set_Brightness+0x12>
		brightness = 45;
 8002dee:	232d      	movs	r3, #45	; 0x2d
 8002df0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e05f      	b.n	8002eb8 <Set_Brightness+0xd8>
		LED_Mod[i][0] = LED_Data[i][0];
 8002df8:	4a35      	ldr	r2, [pc, #212]	; (8002ed0 <Set_Brightness+0xf0>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002e00:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <Set_Brightness+0xf4>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8002e08:	2301      	movs	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	e04e      	b.n	8002eac <Set_Brightness+0xcc>
			float angle = 90 - brightness; // em graus
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd ff43 	bl	8000ca0 <__aeabi_i2f>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	60fb      	str	r3, [r7, #12]
			angle = angle * PI / 180; //em radianos
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7fd fafa 	bl	8000418 <__aeabi_f2d>
 8002e24:	a328      	add	r3, pc, #160	; (adr r3, 8002ec8 <Set_Brightness+0xe8>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f7fd fb4d 	bl	80004c8 <__aeabi_dmul>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <Set_Brightness+0xf8>)
 8002e3c:	f7fd fc6e 	bl	800071c <__aeabi_ddiv>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	f7fd fe20 	bl	8000a8c <__aeabi_d2f>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8002e50:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <Set_Brightness+0xf0>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	441a      	add	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fac8 	bl	80003f4 <__aeabi_i2d>
 8002e64:	4604      	mov	r4, r0
 8002e66:	460d      	mov	r5, r1
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7fd fad5 	bl	8000418 <__aeabi_f2d>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f003 fc15 	bl	80066a4 <tan>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4620      	mov	r0, r4
 8002e80:	4629      	mov	r1, r5
 8002e82:	f7fd fc4b 	bl	800071c <__aeabi_ddiv>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f7fd fddd 	bl	8000a4c <__aeabi_d2uiz>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b2d9      	uxtb	r1, r3
 8002e96:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <Set_Brightness+0xf4>)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	ddad      	ble.n	8002e0e <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b13      	cmp	r3, #19
 8002ebc:	dd9c      	ble.n	8002df8 <Set_Brightness+0x18>
		}
	}
}
 8002ebe:	bf00      	nop
 8002ec0:	bf00      	nop
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec8:	53c8d4f1 	.word	0x53c8d4f1
 8002ecc:	400921fb 	.word	0x400921fb
 8002ed0:	20000318 	.word	0x20000318
 8002ed4:	20000368 	.word	0x20000368
 8002ed8:	40668000 	.word	0x40668000

08002edc <WS2512_Send>:

#endif

uint16_t pwmData[(24*MAX_LED+50)];

void WS2512_Send(void) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
//	{
//		pwmData[indx] = 0;
//		indx++;
//	}

	for (int i = 0; i < MAX_LED; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	e036      	b.n	8002f5a <WS2512_Send+0x7e>
	{
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8002eec:	4a2e      	ldr	r2, [pc, #184]	; (8002fa8 <WS2512_Send+0xcc>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	492b      	ldr	r1, [pc, #172]	; (8002fa8 <WS2512_Send+0xcc>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	789b      	ldrb	r3, [r3, #2]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	431a      	orrs	r2, r3
 8002f06:	4928      	ldr	r1, [pc, #160]	; (8002fa8 <WS2512_Send+0xcc>)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	78db      	ldrb	r3, [r3, #3]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	607b      	str	r3, [r7, #4]

		for (int i = 23; i >= 0; i--) {
 8002f14:	2317      	movs	r3, #23
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e019      	b.n	8002f4e <WS2512_Send+0x72>
			if (color & (1 << i)) {
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <WS2512_Send+0x5c>
				pwmData[indx] = 60;		// pulso alto, 2/3 de 90, aprox 68%
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <WS2512_Send+0xd0>)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	213c      	movs	r1, #60	; 0x3c
 8002f32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002f36:	e004      	b.n	8002f42 <WS2512_Send+0x66>
			}

			else
				pwmData[indx] = 30;	// pulso baixo, 1/3 de 90, aprox 32%
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <WS2512_Send+0xd0>)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	211e      	movs	r1, #30
 8002f3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dae2      	bge.n	8002f1a <WS2512_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3301      	adds	r3, #1
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b13      	cmp	r3, #19
 8002f5e:	ddc5      	ble.n	8002eec <WS2512_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++)//intervalor de tempo de 50us antes da próxima msg
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	e00a      	b.n	8002f7c <WS2512_Send+0xa0>
			{
		pwmData[indx] = 0;
 8002f66:	4a11      	ldr	r2, [pc, #68]	; (8002fac <WS2512_Send+0xd0>)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3301      	adds	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++)//intervalor de tempo de 50us antes da próxima msg
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b31      	cmp	r3, #49	; 0x31
 8002f80:	ddf1      	ble.n	8002f66 <WS2512_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <WS2512_Send+0xd0>)
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <WS2512_Send+0xd4>)
 8002f8c:	f002 fa00 	bl	8005390 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8002f90:	bf00      	nop
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <WS2512_Send+0xd8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0fb      	beq.n	8002f92 <WS2512_Send+0xb6>
	};
	datasentflag = 0;
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <WS2512_Send+0xd8>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000368 	.word	0x20000368
 8002fac:	200003c0 	.word	0x200003c0
 8002fb0:	200001cc 	.word	0x200001cc
 8002fb4:	200003bc 	.word	0x200003bc

08002fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_MspInit+0x40>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <HAL_MspInit+0x40>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6193      	str	r3, [r2, #24]
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_MspInit+0x40>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_MspInit+0x40>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <HAL_MspInit+0x40>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	61d3      	str	r3, [r2, #28]
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_MspInit+0x40>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 0310 	add.w	r3, r7, #16
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a14      	ldr	r2, [pc, #80]	; (8003074 <HAL_ADC_MspInit+0x6c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d121      	bne.n	800306c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_ADC_MspInit+0x70>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_ADC_MspInit+0x70>)
 800302e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003032:	6193      	str	r3, [r2, #24]
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_ADC_MspInit+0x70>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_ADC_MspInit+0x70>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a0c      	ldr	r2, [pc, #48]	; (8003078 <HAL_ADC_MspInit+0x70>)
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	6193      	str	r3, [r2, #24]
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_ADC_MspInit+0x70>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003058:	2302      	movs	r3, #2
 800305a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800305c:	2303      	movs	r3, #3
 800305e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	4619      	mov	r1, r3
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <HAL_ADC_MspInit+0x74>)
 8003068:	f001 f962 	bl	8004330 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800306c:	bf00      	nop
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40012400 	.word	0x40012400
 8003078:	40021000 	.word	0x40021000
 800307c:	40010c00 	.word	0x40010c00

08003080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a37      	ldr	r2, [pc, #220]	; (800316c <HAL_TIM_Base_MspInit+0xec>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d134      	bne.n	80030fc <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003092:	4b37      	ldr	r3, [pc, #220]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	4a36      	ldr	r2, [pc, #216]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 8003098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800309c:	6193      	str	r3, [r2, #24]
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80030aa:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030ac:	4a32      	ldr	r2, [pc, #200]	; (8003178 <HAL_TIM_Base_MspInit+0xf8>)
 80030ae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b0:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030b2:	2210      	movs	r2, #16
 80030b4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b6:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030c2:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80030de:	4825      	ldr	r0, [pc, #148]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030e0:	f000 fec0 	bl	8003e64 <HAL_DMA_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80030ea:	f7ff ff65 	bl	8002fb8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a20      	ldr	r2, [pc, #128]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
 80030f4:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <HAL_TIM_Base_MspInit+0xf4>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030fa:	e032      	b.n	8003162 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1e      	ldr	r2, [pc, #120]	; (800317c <HAL_TIM_Base_MspInit+0xfc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d114      	bne.n	8003130 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	61d3      	str	r3, [r2, #28]
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	201d      	movs	r0, #29
 8003124:	f000 fe67 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003128:	201d      	movs	r0, #29
 800312a:	f000 fe80 	bl	8003e2e <HAL_NVIC_EnableIRQ>
}
 800312e:	e018      	b.n	8003162 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM4)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_TIM_Base_MspInit+0x100>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d113      	bne.n	8003162 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	61d3      	str	r3, [r2, #28]
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_TIM_Base_MspInit+0xf0>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	201e      	movs	r0, #30
 8003158:	f000 fe4d 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800315c:	201e      	movs	r0, #30
 800315e:	f000 fe66 	bl	8003e2e <HAL_NVIC_EnableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40021000 	.word	0x40021000
 8003174:	200002a4 	.word	0x200002a4
 8003178:	4002001c 	.word	0x4002001c
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800

08003184 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <HAL_TIM_MspPostInit+0x5c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d118      	bne.n	80031d6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_TIM_MspPostInit+0x60>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <HAL_TIM_MspPostInit+0x60>)
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	6193      	str	r3, [r2, #24]
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_TIM_MspPostInit+0x60>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2302      	movs	r3, #2
 80031c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0310 	add.w	r3, r7, #16
 80031ce:	4619      	mov	r1, r3
 80031d0:	4805      	ldr	r0, [pc, #20]	; (80031e8 <HAL_TIM_MspPostInit+0x64>)
 80031d2:	f001 f8ad 	bl	8004330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80031d6:	bf00      	nop
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40010800 	.word	0x40010800

080031ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <HardFault_Handler+0x4>

080031fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003202:	e7fe      	b.n	8003202 <MemManage_Handler+0x4>

08003204 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003208:	e7fe      	b.n	8003208 <BusFault_Handler+0x4>

0800320a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320e:	e7fe      	b.n	800320e <UsageFault_Handler+0x4>

08003210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003238:	f000 f89a 	bl	8003370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}

08003240 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003244:	2001      	movs	r0, #1
 8003246:	f001 fa29 	bl	800469c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <DMA1_Channel2_IRQHandler+0x10>)
 8003256:	f000 ff37 	bl	80040c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200002a4 	.word	0x200002a4

08003264 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <TIM3_IRQHandler+0x10>)
 800326a:	f002 faf9 	bl	8005860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000214 	.word	0x20000214

08003278 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <TIM4_IRQHandler+0x10>)
 800327e:	f002 faef 	bl	8005860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	2000025c 	.word	0x2000025c

0800328c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003298:	f7ff fff8 	bl	800328c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800329c:	480b      	ldr	r0, [pc, #44]	; (80032cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800329e:	490c      	ldr	r1, [pc, #48]	; (80032d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032a0:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a4:	e002      	b.n	80032ac <LoopCopyDataInit>

080032a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032aa:	3304      	adds	r3, #4

080032ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b0:	d3f9      	bcc.n	80032a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80032b4:	4c09      	ldr	r4, [pc, #36]	; (80032dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b8:	e001      	b.n	80032be <LoopFillZerobss>

080032ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032bc:	3204      	adds	r2, #4

080032be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c0:	d3fb      	bcc.n	80032ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032c2:	f003 f9cb 	bl	800665c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032c6:	f7fd fd3f 	bl	8000d48 <main>
  bx lr
 80032ca:	4770      	bx	lr
  ldr r0, =_sdata
 80032cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80032d4:	08007990 	.word	0x08007990
  ldr r2, =_sbss
 80032d8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80032dc:	200007e8 	.word	0x200007e8

080032e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032e0:	e7fe      	b.n	80032e0 <ADC1_2_IRQHandler>
	...

080032e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_Init+0x28>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <HAL_Init+0x28>)
 80032ee:	f043 0310 	orr.w	r3, r3, #16
 80032f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f4:	2003      	movs	r0, #3
 80032f6:	f000 fd73 	bl	8003de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fa:	200f      	movs	r0, #15
 80032fc:	f000 f808 	bl	8003310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003300:	f7ff fe60 	bl	8002fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40022000 	.word	0x40022000

08003310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_InitTick+0x54>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_InitTick+0x58>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003326:	fbb3 f3f1 	udiv	r3, r3, r1
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd8b 	bl	8003e4a <HAL_SYSTICK_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00e      	b.n	800335c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d80a      	bhi.n	800335a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003344:	2200      	movs	r2, #0
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f000 fd53 	bl	8003df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <HAL_InitTick+0x5c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000174 	.word	0x20000174
 8003368:	2000017c 	.word	0x2000017c
 800336c:	20000178 	.word	0x20000178

08003370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_IncTick+0x1c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_IncTick+0x20>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4413      	add	r3, r2
 8003380:	4a03      	ldr	r2, [pc, #12]	; (8003390 <HAL_IncTick+0x20>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	2000017c 	.word	0x2000017c
 8003390:	200007e4 	.word	0x200007e4

08003394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return uwTick;
 8003398:	4b02      	ldr	r3, [pc, #8]	; (80033a4 <HAL_GetTick+0x10>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	200007e4 	.word	0x200007e4

080033a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b0:	f7ff fff0 	bl	8003394 <HAL_GetTick>
 80033b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d005      	beq.n	80033ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_Delay+0x44>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ce:	bf00      	nop
 80033d0:	f7ff ffe0 	bl	8003394 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d8f7      	bhi.n	80033d0 <HAL_Delay+0x28>
  {
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	2000017c 	.word	0x2000017c

080033f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0be      	b.n	8003590 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff fdea 	bl	8003008 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fbc5 	bl	8003bc4 <ADC_ConversionStop_Disable>
 800343a:	4603      	mov	r3, r0
 800343c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 8099 	bne.w	800357e <HAL_ADC_Init+0x18e>
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 8095 	bne.w	800357e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	f043 0202 	orr.w	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003470:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7b1b      	ldrb	r3, [r3, #12]
 8003476:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003478:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4313      	orrs	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003488:	d003      	beq.n	8003492 <HAL_ADC_Init+0xa2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_ADC_Init+0xa8>
 8003492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003496:	e000      	b.n	800349a <HAL_ADC_Init+0xaa>
 8003498:	2300      	movs	r3, #0
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7d1b      	ldrb	r3, [r3, #20]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d119      	bne.n	80034dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7b1b      	ldrb	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	035a      	lsls	r2, r3, #13
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	e00b      	b.n	80034dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_ADC_Init+0x1a8>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	430b      	orrs	r3, r1
 8003502:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350c:	d003      	beq.n	8003516 <HAL_ADC_Init+0x126>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d104      	bne.n	8003520 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	3b01      	subs	r3, #1
 800351c:	051b      	lsls	r3, r3, #20
 800351e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	430a      	orrs	r2, r1
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_ADC_Init+0x1ac>)
 800353c:	4013      	ands	r3, r2
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	d10b      	bne.n	800355c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800355a:	e018      	b.n	800358e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f023 0312 	bic.w	r3, r3, #18
 8003564:	f043 0210 	orr.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800357c:	e007      	b.n	800358e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	f043 0210 	orr.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	ffe1f7fd 	.word	0xffe1f7fd
 800359c:	ff1f0efe 	.word	0xff1f0efe

080035a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_Start+0x1a>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e098      	b.n	80036ec <HAL_ADC_Start+0x14c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 faa4 	bl	8003b10 <ADC_Enable>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 8087 	bne.w	80036e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a41      	ldr	r2, [pc, #260]	; (80036f4 <HAL_ADC_Start+0x154>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d105      	bne.n	80035fe <HAL_ADC_Start+0x5e>
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <HAL_ADC_Start+0x158>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d115      	bne.n	800362a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d026      	beq.n	8003666 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003620:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003628:	e01d      	b.n	8003666 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2f      	ldr	r2, [pc, #188]	; (80036f8 <HAL_ADC_Start+0x158>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_ADC_Start+0xaa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <HAL_ADC_Start+0x154>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10d      	bne.n	8003666 <HAL_ADC_Start+0xc6>
 800364a:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <HAL_ADC_Start+0x158>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800365e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d006      	beq.n	8003680 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	f023 0206 	bic.w	r2, r3, #6
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
 800367e:	e002      	b.n	8003686 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f06f 0202 	mvn.w	r2, #2
 8003696:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036a6:	d113      	bne.n	80036d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036ac:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_ADC_Start+0x154>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d105      	bne.n	80036be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_ADC_Start+0x158>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	e00c      	b.n	80036ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	e003      	b.n	80036ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40012800 	.word	0x40012800
 80036f8:	40012400 	.word	0x40012400

080036fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003712:	f7ff fe3f 	bl	8003394 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0d3      	b.n	80038e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d131      	bne.n	80037b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003756:	2b00      	cmp	r3, #0
 8003758:	d12a      	bne.n	80037b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800375a:	e021      	b.n	80037a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d01d      	beq.n	80037a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <HAL_ADC_PollForConversion+0x7e>
 800376a:	f7ff fe13 	bl	8003394 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d212      	bcs.n	80037a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	f043 0204 	orr.w	r2, r3, #4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0a2      	b.n	80038e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0d6      	beq.n	800375c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80037ae:	e070      	b.n	8003892 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_ADC_PollForConversion+0x1f4>)
 80037b2:	681c      	ldr	r4, [r3, #0]
 80037b4:	2002      	movs	r0, #2
 80037b6:	f001 fc3b 	bl	8005030 <HAL_RCCEx_GetPeriphCLKFreq>
 80037ba:	4603      	mov	r3, r0
 80037bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6919      	ldr	r1, [r3, #16]
 80037c6:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <HAL_ADC_PollForConversion+0x1f8>)
 80037c8:	400b      	ands	r3, r1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <HAL_ADC_PollForConversion+0x104>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68d9      	ldr	r1, [r3, #12]
 80037d4:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <HAL_ADC_PollForConversion+0x1fc>)
 80037d6:	400b      	ands	r3, r1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d111      	bne.n	8003800 <HAL_ADC_PollForConversion+0x104>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6919      	ldr	r1, [r3, #16]
 80037e2:	4b46      	ldr	r3, [pc, #280]	; (80038fc <HAL_ADC_PollForConversion+0x200>)
 80037e4:	400b      	ands	r3, r1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d108      	bne.n	80037fc <HAL_ADC_PollForConversion+0x100>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68d9      	ldr	r1, [r3, #12]
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_ADC_PollForConversion+0x204>)
 80037f2:	400b      	ands	r3, r1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_PollForConversion+0x100>
 80037f8:	2314      	movs	r3, #20
 80037fa:	e020      	b.n	800383e <HAL_ADC_PollForConversion+0x142>
 80037fc:	2329      	movs	r3, #41	; 0x29
 80037fe:	e01e      	b.n	800383e <HAL_ADC_PollForConversion+0x142>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_ADC_PollForConversion+0x200>)
 8003808:	400b      	ands	r3, r1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_ADC_PollForConversion+0x120>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68d9      	ldr	r1, [r3, #12]
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_ADC_PollForConversion+0x204>)
 8003816:	400b      	ands	r3, r1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <HAL_ADC_PollForConversion+0x13c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6919      	ldr	r1, [r3, #16]
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <HAL_ADC_PollForConversion+0x208>)
 8003824:	400b      	ands	r3, r1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d108      	bne.n	800383c <HAL_ADC_PollForConversion+0x140>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68d9      	ldr	r1, [r3, #12]
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_ADC_PollForConversion+0x208>)
 8003832:	400b      	ands	r3, r1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_PollForConversion+0x140>
 8003838:	2354      	movs	r3, #84	; 0x54
 800383a:	e000      	b.n	800383e <HAL_ADC_PollForConversion+0x142>
 800383c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003844:	e021      	b.n	800388a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d01a      	beq.n	8003884 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_ADC_PollForConversion+0x168>
 8003854:	f7ff fd9e 	bl	8003394 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d20f      	bcs.n	8003884 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	429a      	cmp	r2, r3
 800386a:	d90b      	bls.n	8003884 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e030      	b.n	80038e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3301      	adds	r3, #1
 8003888:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	429a      	cmp	r2, r3
 8003890:	d8d9      	bhi.n	8003846 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0212 	mvn.w	r2, #18
 800389a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80038b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80038b6:	d115      	bne.n	80038e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d111      	bne.n	80038e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000174 	.word	0x20000174
 80038f4:	24924924 	.word	0x24924924
 80038f8:	00924924 	.word	0x00924924
 80038fc:	12492492 	.word	0x12492492
 8003900:	00492492 	.word	0x00492492
 8003904:	00249249 	.word	0x00249249

08003908 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x20>
 800393c:	2302      	movs	r3, #2
 800393e:	e0dc      	b.n	8003afa <HAL_ADC_ConfigChannel+0x1da>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b06      	cmp	r3, #6
 800394e:	d81c      	bhi.n	800398a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	3b05      	subs	r3, #5
 8003962:	221f      	movs	r2, #31
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	4019      	ands	r1, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	3b05      	subs	r3, #5
 800397c:	fa00 f203 	lsl.w	r2, r0, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	635a      	str	r2, [r3, #52]	; 0x34
 8003988:	e03c      	b.n	8003a04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d81c      	bhi.n	80039cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	3b23      	subs	r3, #35	; 0x23
 80039a4:	221f      	movs	r2, #31
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	4019      	ands	r1, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	3b23      	subs	r3, #35	; 0x23
 80039be:	fa00 f203 	lsl.w	r2, r0, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
 80039ca:	e01b      	b.n	8003a04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	3b41      	subs	r3, #65	; 0x41
 80039de:	221f      	movs	r2, #31
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	4019      	ands	r1, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	3b41      	subs	r3, #65	; 0x41
 80039f8:	fa00 f203 	lsl.w	r2, r0, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b09      	cmp	r3, #9
 8003a0a:	d91c      	bls.n	8003a46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68d9      	ldr	r1, [r3, #12]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3b1e      	subs	r3, #30
 8003a1e:	2207      	movs	r2, #7
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	4019      	ands	r1, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6898      	ldr	r0, [r3, #8]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	3b1e      	subs	r3, #30
 8003a38:	fa00 f203 	lsl.w	r2, r0, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	60da      	str	r2, [r3, #12]
 8003a44:	e019      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6919      	ldr	r1, [r3, #16]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	2207      	movs	r2, #7
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	4019      	ands	r1, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6898      	ldr	r0, [r3, #8]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d003      	beq.n	8003a8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a86:	2b11      	cmp	r3, #17
 8003a88:	d132      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d125      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d126      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ab0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d11a      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_ADC_ConfigChannel+0x1e8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <HAL_ADC_ConfigChannel+0x1ec>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	0c9a      	lsrs	r2, r3, #18
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ad0:	e002      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f9      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x1b2>
 8003ade:	e007      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40012400 	.word	0x40012400
 8003b08:	20000174 	.word	0x20000174
 8003b0c:	431bde83 	.word	0x431bde83

08003b10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d040      	beq.n	8003bb0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b3e:	4b1f      	ldr	r3, [pc, #124]	; (8003bbc <ADC_Enable+0xac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <ADC_Enable+0xb0>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	0c9b      	lsrs	r3, r3, #18
 8003b4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b4c:	e002      	b.n	8003b54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f9      	bne.n	8003b4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b5a:	f7ff fc1b 	bl	8003394 <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b60:	e01f      	b.n	8003ba2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b62:	f7ff fc17 	bl	8003394 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d918      	bls.n	8003ba2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d011      	beq.n	8003ba2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	f043 0210 	orr.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e007      	b.n	8003bb2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d1d8      	bne.n	8003b62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000174 	.word	0x20000174
 8003bc0:	431bde83 	.word	0x431bde83

08003bc4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d12e      	bne.n	8003c3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bee:	f7ff fbd1 	bl	8003394 <HAL_GetTick>
 8003bf2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bf4:	e01b      	b.n	8003c2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bf6:	f7ff fbcd 	bl	8003394 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d914      	bls.n	8003c2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10d      	bne.n	8003c2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	f043 0210 	orr.w	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f043 0201 	orr.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e007      	b.n	8003c3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d0dc      	beq.n	8003bf6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7a:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	60d3      	str	r3, [r2, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 0307 	and.w	r3, r3, #7
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0b      	blt.n	8003cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4906      	ldr	r1, [pc, #24]	; (8003ce0 <__NVIC_EnableIRQ+0x34>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	e000e100 	.word	0xe000e100

08003ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	6039      	str	r1, [r7, #0]
 8003cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	db0a      	blt.n	8003d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	490c      	ldr	r1, [pc, #48]	; (8003d30 <__NVIC_SetPriority+0x4c>)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	0112      	lsls	r2, r2, #4
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	440b      	add	r3, r1
 8003d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d0c:	e00a      	b.n	8003d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4908      	ldr	r1, [pc, #32]	; (8003d34 <__NVIC_SetPriority+0x50>)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	3b04      	subs	r3, #4
 8003d1c:	0112      	lsls	r2, r2, #4
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	440b      	add	r3, r1
 8003d22:	761a      	strb	r2, [r3, #24]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b089      	sub	sp, #36	; 0x24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f1c3 0307 	rsb	r3, r3, #7
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf28      	it	cs
 8003d56:	2304      	movcs	r3, #4
 8003d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d902      	bls.n	8003d68 <NVIC_EncodePriority+0x30>
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3b03      	subs	r3, #3
 8003d66:	e000      	b.n	8003d6a <NVIC_EncodePriority+0x32>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d80:	f04f 31ff 	mov.w	r1, #4294967295
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	43d9      	mvns	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	4313      	orrs	r3, r2
         );
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3724      	adds	r7, #36	; 0x24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dac:	d301      	bcc.n	8003db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dae:	2301      	movs	r3, #1
 8003db0:	e00f      	b.n	8003dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003db2:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <SysTick_Config+0x40>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dba:	210f      	movs	r1, #15
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	f7ff ff90 	bl	8003ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <SysTick_Config+0x40>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <SysTick_Config+0x40>)
 8003dcc:	2207      	movs	r2, #7
 8003dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	e000e010 	.word	0xe000e010

08003de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff2d 	bl	8003c48 <__NVIC_SetPriorityGrouping>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e08:	f7ff ff42 	bl	8003c90 <__NVIC_GetPriorityGrouping>
 8003e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ff90 	bl	8003d38 <NVIC_EncodePriority>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff5f 	bl	8003ce4 <__NVIC_SetPriority>
}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff35 	bl	8003cac <__NVIC_EnableIRQ>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ffa2 	bl	8003d9c <SysTick_Config>
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e043      	b.n	8003f02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_DMA_Init+0xa8>)
 8003e82:	4413      	add	r3, r2
 8003e84:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <HAL_DMA_Init+0xac>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	009a      	lsls	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_DMA_Init+0xb0>)
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003eae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003eb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	bffdfff8 	.word	0xbffdfff8
 8003f10:	cccccccd 	.word	0xcccccccd
 8003f14:	40020000 	.word	0x40020000

08003f18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_DMA_Start_IT+0x20>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e04b      	b.n	8003fd0 <HAL_DMA_Start_IT+0xb8>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d13a      	bne.n	8003fc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f9af 	bl	80042d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 020e 	orr.w	r2, r2, #14
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e00f      	b.n	8003fb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0204 	bic.w	r2, r2, #4
 8003f9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 020a 	orr.w	r2, r2, #10
 8003fae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	e005      	b.n	8003fce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d005      	beq.n	8003ffc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	e051      	b.n	80040a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 020e 	bic.w	r2, r2, #14
 800400a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <HAL_DMA_Abort_IT+0xd4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d029      	beq.n	800407a <HAL_DMA_Abort_IT+0xa2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <HAL_DMA_Abort_IT+0xd8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <HAL_DMA_Abort_IT+0x9e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <HAL_DMA_Abort_IT+0xdc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01a      	beq.n	8004070 <HAL_DMA_Abort_IT+0x98>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <HAL_DMA_Abort_IT+0xe0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d012      	beq.n	800406a <HAL_DMA_Abort_IT+0x92>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <HAL_DMA_Abort_IT+0xe4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00a      	beq.n	8004064 <HAL_DMA_Abort_IT+0x8c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <HAL_DMA_Abort_IT+0xe8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d102      	bne.n	800405e <HAL_DMA_Abort_IT+0x86>
 8004058:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800405c:	e00e      	b.n	800407c <HAL_DMA_Abort_IT+0xa4>
 800405e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004062:	e00b      	b.n	800407c <HAL_DMA_Abort_IT+0xa4>
 8004064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004068:	e008      	b.n	800407c <HAL_DMA_Abort_IT+0xa4>
 800406a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406e:	e005      	b.n	800407c <HAL_DMA_Abort_IT+0xa4>
 8004070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004074:	e002      	b.n	800407c <HAL_DMA_Abort_IT+0xa4>
 8004076:	2310      	movs	r3, #16
 8004078:	e000      	b.n	800407c <HAL_DMA_Abort_IT+0xa4>
 800407a:	2301      	movs	r3, #1
 800407c:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <HAL_DMA_Abort_IT+0xec>)
 800407e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
    } 
  }
  return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40020008 	.word	0x40020008
 80040b0:	4002001c 	.word	0x4002001c
 80040b4:	40020030 	.word	0x40020030
 80040b8:	40020044 	.word	0x40020044
 80040bc:	40020058 	.word	0x40020058
 80040c0:	4002006c 	.word	0x4002006c
 80040c4:	40020000 	.word	0x40020000

080040c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	2204      	movs	r2, #4
 80040e6:	409a      	lsls	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d04f      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc8>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d04a      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0204 	bic.w	r2, r2, #4
 8004116:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a66      	ldr	r2, [pc, #408]	; (80042b8 <HAL_DMA_IRQHandler+0x1f0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d029      	beq.n	8004176 <HAL_DMA_IRQHandler+0xae>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a65      	ldr	r2, [pc, #404]	; (80042bc <HAL_DMA_IRQHandler+0x1f4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d022      	beq.n	8004172 <HAL_DMA_IRQHandler+0xaa>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_DMA_IRQHandler+0x1f8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01a      	beq.n	800416c <HAL_DMA_IRQHandler+0xa4>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a62      	ldr	r2, [pc, #392]	; (80042c4 <HAL_DMA_IRQHandler+0x1fc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d012      	beq.n	8004166 <HAL_DMA_IRQHandler+0x9e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a60      	ldr	r2, [pc, #384]	; (80042c8 <HAL_DMA_IRQHandler+0x200>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00a      	beq.n	8004160 <HAL_DMA_IRQHandler+0x98>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a5f      	ldr	r2, [pc, #380]	; (80042cc <HAL_DMA_IRQHandler+0x204>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d102      	bne.n	800415a <HAL_DMA_IRQHandler+0x92>
 8004154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004158:	e00e      	b.n	8004178 <HAL_DMA_IRQHandler+0xb0>
 800415a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800415e:	e00b      	b.n	8004178 <HAL_DMA_IRQHandler+0xb0>
 8004160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004164:	e008      	b.n	8004178 <HAL_DMA_IRQHandler+0xb0>
 8004166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800416a:	e005      	b.n	8004178 <HAL_DMA_IRQHandler+0xb0>
 800416c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004170:	e002      	b.n	8004178 <HAL_DMA_IRQHandler+0xb0>
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	e000      	b.n	8004178 <HAL_DMA_IRQHandler+0xb0>
 8004176:	2304      	movs	r3, #4
 8004178:	4a55      	ldr	r2, [pc, #340]	; (80042d0 <HAL_DMA_IRQHandler+0x208>)
 800417a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8094 	beq.w	80042ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800418e:	e08e      	b.n	80042ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	2202      	movs	r2, #2
 8004196:	409a      	lsls	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d056      	beq.n	800424e <HAL_DMA_IRQHandler+0x186>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d051      	beq.n	800424e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 020a 	bic.w	r2, r2, #10
 80041c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a38      	ldr	r2, [pc, #224]	; (80042b8 <HAL_DMA_IRQHandler+0x1f0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d029      	beq.n	800422e <HAL_DMA_IRQHandler+0x166>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a37      	ldr	r2, [pc, #220]	; (80042bc <HAL_DMA_IRQHandler+0x1f4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d022      	beq.n	800422a <HAL_DMA_IRQHandler+0x162>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a35      	ldr	r2, [pc, #212]	; (80042c0 <HAL_DMA_IRQHandler+0x1f8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01a      	beq.n	8004224 <HAL_DMA_IRQHandler+0x15c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <HAL_DMA_IRQHandler+0x1fc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d012      	beq.n	800421e <HAL_DMA_IRQHandler+0x156>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <HAL_DMA_IRQHandler+0x200>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00a      	beq.n	8004218 <HAL_DMA_IRQHandler+0x150>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a31      	ldr	r2, [pc, #196]	; (80042cc <HAL_DMA_IRQHandler+0x204>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d102      	bne.n	8004212 <HAL_DMA_IRQHandler+0x14a>
 800420c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004210:	e00e      	b.n	8004230 <HAL_DMA_IRQHandler+0x168>
 8004212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004216:	e00b      	b.n	8004230 <HAL_DMA_IRQHandler+0x168>
 8004218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421c:	e008      	b.n	8004230 <HAL_DMA_IRQHandler+0x168>
 800421e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004222:	e005      	b.n	8004230 <HAL_DMA_IRQHandler+0x168>
 8004224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004228:	e002      	b.n	8004230 <HAL_DMA_IRQHandler+0x168>
 800422a:	2320      	movs	r3, #32
 800422c:	e000      	b.n	8004230 <HAL_DMA_IRQHandler+0x168>
 800422e:	2302      	movs	r3, #2
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <HAL_DMA_IRQHandler+0x208>)
 8004232:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d034      	beq.n	80042ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800424c:	e02f      	b.n	80042ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2208      	movs	r2, #8
 8004254:	409a      	lsls	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d028      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x1e8>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d023      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020e 	bic.w	r2, r2, #14
 8004276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	2101      	movs	r1, #1
 8004282:	fa01 f202 	lsl.w	r2, r1, r2
 8004286:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d004      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
    }
  }
  return;
 80042ae:	bf00      	nop
 80042b0:	bf00      	nop
}
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40020008 	.word	0x40020008
 80042bc:	4002001c 	.word	0x4002001c
 80042c0:	40020030 	.word	0x40020030
 80042c4:	40020044 	.word	0x40020044
 80042c8:	40020058 	.word	0x40020058
 80042cc:	4002006c 	.word	0x4002006c
 80042d0:	40020000 	.word	0x40020000

080042d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d108      	bne.n	8004314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004312:	e007      	b.n	8004324 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr
	...

08004330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004330:	b480      	push	{r7}
 8004332:	b08b      	sub	sp, #44	; 0x2c
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800433a:	2300      	movs	r3, #0
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004342:	e169      	b.n	8004618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004344:	2201      	movs	r2, #1
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	429a      	cmp	r2, r3
 800435e:	f040 8158 	bne.w	8004612 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4a9a      	ldr	r2, [pc, #616]	; (80045d0 <HAL_GPIO_Init+0x2a0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d05e      	beq.n	800442a <HAL_GPIO_Init+0xfa>
 800436c:	4a98      	ldr	r2, [pc, #608]	; (80045d0 <HAL_GPIO_Init+0x2a0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d875      	bhi.n	800445e <HAL_GPIO_Init+0x12e>
 8004372:	4a98      	ldr	r2, [pc, #608]	; (80045d4 <HAL_GPIO_Init+0x2a4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d058      	beq.n	800442a <HAL_GPIO_Init+0xfa>
 8004378:	4a96      	ldr	r2, [pc, #600]	; (80045d4 <HAL_GPIO_Init+0x2a4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d86f      	bhi.n	800445e <HAL_GPIO_Init+0x12e>
 800437e:	4a96      	ldr	r2, [pc, #600]	; (80045d8 <HAL_GPIO_Init+0x2a8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d052      	beq.n	800442a <HAL_GPIO_Init+0xfa>
 8004384:	4a94      	ldr	r2, [pc, #592]	; (80045d8 <HAL_GPIO_Init+0x2a8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d869      	bhi.n	800445e <HAL_GPIO_Init+0x12e>
 800438a:	4a94      	ldr	r2, [pc, #592]	; (80045dc <HAL_GPIO_Init+0x2ac>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d04c      	beq.n	800442a <HAL_GPIO_Init+0xfa>
 8004390:	4a92      	ldr	r2, [pc, #584]	; (80045dc <HAL_GPIO_Init+0x2ac>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d863      	bhi.n	800445e <HAL_GPIO_Init+0x12e>
 8004396:	4a92      	ldr	r2, [pc, #584]	; (80045e0 <HAL_GPIO_Init+0x2b0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d046      	beq.n	800442a <HAL_GPIO_Init+0xfa>
 800439c:	4a90      	ldr	r2, [pc, #576]	; (80045e0 <HAL_GPIO_Init+0x2b0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d85d      	bhi.n	800445e <HAL_GPIO_Init+0x12e>
 80043a2:	2b12      	cmp	r3, #18
 80043a4:	d82a      	bhi.n	80043fc <HAL_GPIO_Init+0xcc>
 80043a6:	2b12      	cmp	r3, #18
 80043a8:	d859      	bhi.n	800445e <HAL_GPIO_Init+0x12e>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <HAL_GPIO_Init+0x80>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	0800442b 	.word	0x0800442b
 80043b4:	08004405 	.word	0x08004405
 80043b8:	08004417 	.word	0x08004417
 80043bc:	08004459 	.word	0x08004459
 80043c0:	0800445f 	.word	0x0800445f
 80043c4:	0800445f 	.word	0x0800445f
 80043c8:	0800445f 	.word	0x0800445f
 80043cc:	0800445f 	.word	0x0800445f
 80043d0:	0800445f 	.word	0x0800445f
 80043d4:	0800445f 	.word	0x0800445f
 80043d8:	0800445f 	.word	0x0800445f
 80043dc:	0800445f 	.word	0x0800445f
 80043e0:	0800445f 	.word	0x0800445f
 80043e4:	0800445f 	.word	0x0800445f
 80043e8:	0800445f 	.word	0x0800445f
 80043ec:	0800445f 	.word	0x0800445f
 80043f0:	0800445f 	.word	0x0800445f
 80043f4:	0800440d 	.word	0x0800440d
 80043f8:	08004421 	.word	0x08004421
 80043fc:	4a79      	ldr	r2, [pc, #484]	; (80045e4 <HAL_GPIO_Init+0x2b4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004402:	e02c      	b.n	800445e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	623b      	str	r3, [r7, #32]
          break;
 800440a:	e029      	b.n	8004460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	3304      	adds	r3, #4
 8004412:	623b      	str	r3, [r7, #32]
          break;
 8004414:	e024      	b.n	8004460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	3308      	adds	r3, #8
 800441c:	623b      	str	r3, [r7, #32]
          break;
 800441e:	e01f      	b.n	8004460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	330c      	adds	r3, #12
 8004426:	623b      	str	r3, [r7, #32]
          break;
 8004428:	e01a      	b.n	8004460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004432:	2304      	movs	r3, #4
 8004434:	623b      	str	r3, [r7, #32]
          break;
 8004436:	e013      	b.n	8004460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004440:	2308      	movs	r3, #8
 8004442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	611a      	str	r2, [r3, #16]
          break;
 800444a:	e009      	b.n	8004460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800444c:	2308      	movs	r3, #8
 800444e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	615a      	str	r2, [r3, #20]
          break;
 8004456:	e003      	b.n	8004460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004458:	2300      	movs	r3, #0
 800445a:	623b      	str	r3, [r7, #32]
          break;
 800445c:	e000      	b.n	8004460 <HAL_GPIO_Init+0x130>
          break;
 800445e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2bff      	cmp	r3, #255	; 0xff
 8004464:	d801      	bhi.n	800446a <HAL_GPIO_Init+0x13a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	e001      	b.n	800446e <HAL_GPIO_Init+0x13e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3304      	adds	r3, #4
 800446e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2bff      	cmp	r3, #255	; 0xff
 8004474:	d802      	bhi.n	800447c <HAL_GPIO_Init+0x14c>
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	e002      	b.n	8004482 <HAL_GPIO_Init+0x152>
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	3b08      	subs	r3, #8
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	210f      	movs	r1, #15
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	401a      	ands	r2, r3
 8004494:	6a39      	ldr	r1, [r7, #32]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	431a      	orrs	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80b1 	beq.w	8004612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044b0:	4b4d      	ldr	r3, [pc, #308]	; (80045e8 <HAL_GPIO_Init+0x2b8>)
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4a4c      	ldr	r2, [pc, #304]	; (80045e8 <HAL_GPIO_Init+0x2b8>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6193      	str	r3, [r2, #24]
 80044bc:	4b4a      	ldr	r3, [pc, #296]	; (80045e8 <HAL_GPIO_Init+0x2b8>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044c8:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_GPIO_Init+0x2bc>)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	220f      	movs	r2, #15
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4013      	ands	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a40      	ldr	r2, [pc, #256]	; (80045f0 <HAL_GPIO_Init+0x2c0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_GPIO_Init+0x1ec>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3f      	ldr	r2, [pc, #252]	; (80045f4 <HAL_GPIO_Init+0x2c4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00d      	beq.n	8004518 <HAL_GPIO_Init+0x1e8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3e      	ldr	r2, [pc, #248]	; (80045f8 <HAL_GPIO_Init+0x2c8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <HAL_GPIO_Init+0x1e4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3d      	ldr	r2, [pc, #244]	; (80045fc <HAL_GPIO_Init+0x2cc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_GPIO_Init+0x1e0>
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <HAL_GPIO_Init+0x1ee>
 8004510:	2304      	movs	r3, #4
 8004512:	e004      	b.n	800451e <HAL_GPIO_Init+0x1ee>
 8004514:	2302      	movs	r3, #2
 8004516:	e002      	b.n	800451e <HAL_GPIO_Init+0x1ee>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_GPIO_Init+0x1ee>
 800451c:	2300      	movs	r3, #0
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	f002 0203 	and.w	r2, r2, #3
 8004524:	0092      	lsls	r2, r2, #2
 8004526:	4093      	lsls	r3, r2
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800452e:	492f      	ldr	r1, [pc, #188]	; (80045ec <HAL_GPIO_Init+0x2bc>)
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	3302      	adds	r3, #2
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	492c      	ldr	r1, [pc, #176]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]
 8004554:	e006      	b.n	8004564 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004556:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	43db      	mvns	r3, r3
 800455e:	4928      	ldr	r1, [pc, #160]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 8004560:	4013      	ands	r3, r2
 8004562:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d006      	beq.n	800457e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004570:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4922      	ldr	r1, [pc, #136]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4313      	orrs	r3, r2
 800457a:	60cb      	str	r3, [r1, #12]
 800457c:	e006      	b.n	800458c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	43db      	mvns	r3, r3
 8004586:	491e      	ldr	r1, [pc, #120]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 8004588:	4013      	ands	r3, r2
 800458a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4918      	ldr	r1, [pc, #96]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
 80045a4:	e006      	b.n	80045b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045a6:	4b16      	ldr	r3, [pc, #88]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	4914      	ldr	r1, [pc, #80]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d021      	beq.n	8004604 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	490e      	ldr	r1, [pc, #56]	; (8004600 <HAL_GPIO_Init+0x2d0>)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
 80045cc:	e021      	b.n	8004612 <HAL_GPIO_Init+0x2e2>
 80045ce:	bf00      	nop
 80045d0:	10320000 	.word	0x10320000
 80045d4:	10310000 	.word	0x10310000
 80045d8:	10220000 	.word	0x10220000
 80045dc:	10210000 	.word	0x10210000
 80045e0:	10120000 	.word	0x10120000
 80045e4:	10110000 	.word	0x10110000
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40010800 	.word	0x40010800
 80045f4:	40010c00 	.word	0x40010c00
 80045f8:	40011000 	.word	0x40011000
 80045fc:	40011400 	.word	0x40011400
 8004600:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_GPIO_Init+0x304>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	43db      	mvns	r3, r3
 800460c:	4909      	ldr	r1, [pc, #36]	; (8004634 <HAL_GPIO_Init+0x304>)
 800460e:	4013      	ands	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	3301      	adds	r3, #1
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	f47f ae8e 	bne.w	8004344 <HAL_GPIO_Init+0x14>
  }
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	372c      	adds	r7, #44	; 0x2c
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	40010400 	.word	0x40010400

08004638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]
 8004644:	4613      	mov	r3, r2
 8004646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004648:	787b      	ldrb	r3, [r7, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004654:	e003      	b.n	800465e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	041a      	lsls	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4013      	ands	r3, r2
 8004680:	041a      	lsls	r2, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	43d9      	mvns	r1, r3
 8004686:	887b      	ldrh	r3, [r7, #2]
 8004688:	400b      	ands	r3, r1
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	611a      	str	r2, [r3, #16]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
	...

0800469c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046b2:	4a05      	ldr	r2, [pc, #20]	; (80046c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fe14 	bl	80012e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40010400 	.word	0x40010400

080046cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e272      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8087 	beq.w	80047fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046ec:	4b92      	ldr	r3, [pc, #584]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d00c      	beq.n	8004712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046f8:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b08      	cmp	r3, #8
 8004702:	d112      	bne.n	800472a <HAL_RCC_OscConfig+0x5e>
 8004704:	4b8c      	ldr	r3, [pc, #560]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d10b      	bne.n	800472a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004712:	4b89      	ldr	r3, [pc, #548]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d06c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x12c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d168      	bne.n	80047f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e24c      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x76>
 8004734:	4b80      	ldr	r3, [pc, #512]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7f      	ldr	r2, [pc, #508]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800473a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e02e      	b.n	80047a0 <HAL_RCC_OscConfig+0xd4>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x98>
 800474a:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a7a      	ldr	r2, [pc, #488]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b78      	ldr	r3, [pc, #480]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a77      	ldr	r2, [pc, #476]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800475c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e01d      	b.n	80047a0 <HAL_RCC_OscConfig+0xd4>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0xbc>
 800476e:	4b72      	ldr	r3, [pc, #456]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a71      	ldr	r2, [pc, #452]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b6f      	ldr	r3, [pc, #444]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a6e      	ldr	r2, [pc, #440]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_OscConfig+0xd4>
 8004788:	4b6b      	ldr	r3, [pc, #428]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a6a      	ldr	r2, [pc, #424]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800478e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b68      	ldr	r3, [pc, #416]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a67      	ldr	r2, [pc, #412]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800479a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d013      	beq.n	80047d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fe fdf4 	bl	8003394 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fe fdf0 	bl	8003394 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e200      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b5d      	ldr	r3, [pc, #372]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0xe4>
 80047ce:	e014      	b.n	80047fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe fde0 	bl	8003394 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fe fddc 	bl	8003394 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1ec      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	4b53      	ldr	r3, [pc, #332]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x10c>
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d063      	beq.n	80048ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004806:	4b4c      	ldr	r3, [pc, #304]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b08      	cmp	r3, #8
 800481c:	d11c      	bne.n	8004858 <HAL_RCC_OscConfig+0x18c>
 800481e:	4b46      	ldr	r3, [pc, #280]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d116      	bne.n	8004858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	4b43      	ldr	r3, [pc, #268]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_RCC_OscConfig+0x176>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e1c0      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4939      	ldr	r1, [pc, #228]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	e03a      	b.n	80048ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004860:	4b36      	ldr	r3, [pc, #216]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004866:	f7fe fd95 	bl	8003394 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486e:	f7fe fd91 	bl	8003394 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e1a1      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004880:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4927      	ldr	r1, [pc, #156]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe fd74 	bl	8003394 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fe fd70 	bl	8003394 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e180      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d03a      	beq.n	8004950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e8:	f7fe fd54 	bl	8003394 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fe fd50 	bl	8003394 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e160      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004902:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <HAL_RCC_OscConfig+0x26c>)
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800490e:	2001      	movs	r0, #1
 8004910:	f000 faba 	bl	8004e88 <RCC_Delay>
 8004914:	e01c      	b.n	8004950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491c:	f7fe fd3a 	bl	8003394 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004922:	e00f      	b.n	8004944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004924:	f7fe fd36 	bl	8003394 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d908      	bls.n	8004944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e146      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	42420000 	.word	0x42420000
 8004940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004944:	4b92      	ldr	r3, [pc, #584]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e9      	bne.n	8004924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a6 	beq.w	8004aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004962:	4b8b      	ldr	r3, [pc, #556]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	4b88      	ldr	r3, [pc, #544]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	4a87      	ldr	r2, [pc, #540]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	61d3      	str	r3, [r2, #28]
 800497a:	4b85      	ldr	r3, [pc, #532]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b82      	ldr	r3, [pc, #520]	; (8004b94 <HAL_RCC_OscConfig+0x4c8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b7f      	ldr	r3, [pc, #508]	; (8004b94 <HAL_RCC_OscConfig+0x4c8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7e      	ldr	r2, [pc, #504]	; (8004b94 <HAL_RCC_OscConfig+0x4c8>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fe fcf7 	bl	8003394 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fe fcf3 	bl	8003394 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b64      	cmp	r3, #100	; 0x64
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e103      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	4b75      	ldr	r3, [pc, #468]	; (8004b94 <HAL_RCC_OscConfig+0x4c8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x312>
 80049d0:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4a6e      	ldr	r2, [pc, #440]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6213      	str	r3, [r2, #32]
 80049dc:	e02d      	b.n	8004a3a <HAL_RCC_OscConfig+0x36e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x334>
 80049e6:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	4a69      	ldr	r2, [pc, #420]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	6213      	str	r3, [r2, #32]
 80049f2:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	4a66      	ldr	r2, [pc, #408]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	6213      	str	r3, [r2, #32]
 80049fe:	e01c      	b.n	8004a3a <HAL_RCC_OscConfig+0x36e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCC_OscConfig+0x356>
 8004a08:	4b61      	ldr	r3, [pc, #388]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4a60      	ldr	r2, [pc, #384]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	f043 0304 	orr.w	r3, r3, #4
 8004a12:	6213      	str	r3, [r2, #32]
 8004a14:	4b5e      	ldr	r3, [pc, #376]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	4a5d      	ldr	r2, [pc, #372]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6213      	str	r3, [r2, #32]
 8004a20:	e00b      	b.n	8004a3a <HAL_RCC_OscConfig+0x36e>
 8004a22:	4b5b      	ldr	r3, [pc, #364]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4a5a      	ldr	r2, [pc, #360]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6213      	str	r3, [r2, #32]
 8004a2e:	4b58      	ldr	r3, [pc, #352]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	4a57      	ldr	r2, [pc, #348]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d015      	beq.n	8004a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fe fca7 	bl	8003394 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fe fca3 	bl	8003394 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e0b1      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a60:	4b4b      	ldr	r3, [pc, #300]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ee      	beq.n	8004a4a <HAL_RCC_OscConfig+0x37e>
 8004a6c:	e014      	b.n	8004a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6e:	f7fe fc91 	bl	8003394 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fe fc8d 	bl	8003394 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e09b      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8c:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ee      	bne.n	8004a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9e:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	4a3b      	ldr	r2, [pc, #236]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8087 	beq.w	8004bc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab4:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d061      	beq.n	8004b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d146      	bne.n	8004b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b33      	ldr	r3, [pc, #204]	; (8004b98 <HAL_RCC_OscConfig+0x4cc>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fe fc61 	bl	8003394 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fe fc5d 	bl	8003394 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e06d      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae8:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f0      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afc:	d108      	bne.n	8004b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	4921      	ldr	r1, [pc, #132]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b10:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a19      	ldr	r1, [r3, #32]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	430b      	orrs	r3, r1
 8004b22:	491b      	ldr	r1, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <HAL_RCC_OscConfig+0x4cc>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fe fc31 	bl	8003394 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fe fc2d 	bl	8003394 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e03d      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b48:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x46a>
 8004b54:	e035      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <HAL_RCC_OscConfig+0x4cc>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5c:	f7fe fc1a 	bl	8003394 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b64:	f7fe fc16 	bl	8003394 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e026      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x498>
 8004b82:	e01e      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e019      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40007000 	.word	0x40007000
 8004b98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_OscConfig+0x500>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0d0      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be4:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d910      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b67      	ldr	r3, [pc, #412]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 0207 	bic.w	r2, r3, #7
 8004bfa:	4965      	ldr	r1, [pc, #404]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0b8      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c2c:	4b59      	ldr	r3, [pc, #356]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a58      	ldr	r2, [pc, #352]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c44:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a52      	ldr	r2, [pc, #328]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	4b50      	ldr	r3, [pc, #320]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	494d      	ldr	r1, [pc, #308]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d040      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d115      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e07f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8e:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e073      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9e:	4b3d      	ldr	r3, [pc, #244]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e06b      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cae:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f023 0203 	bic.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4936      	ldr	r1, [pc, #216]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc0:	f7fe fb68 	bl	8003394 <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc8:	f7fe fb64 	bl	8003394 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e053      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	4b2d      	ldr	r3, [pc, #180]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 020c 	and.w	r2, r3, #12
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d1eb      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d210      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 0207 	bic.w	r2, r3, #7
 8004d06:	4922      	ldr	r1, [pc, #136]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e032      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4916      	ldr	r1, [pc, #88]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	490e      	ldr	r1, [pc, #56]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d5e:	f000 f821 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004d62:	4602      	mov	r2, r0
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	490a      	ldr	r1, [pc, #40]	; (8004d98 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	5ccb      	ldrb	r3, [r1, r3]
 8004d72:	fa22 f303 	lsr.w	r3, r2, r3
 8004d76:	4a09      	ldr	r2, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1cc>)
 8004d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1d0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fac6 	bl	8003310 <HAL_InitTick>

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40022000 	.word	0x40022000
 8004d94:	40021000 	.word	0x40021000
 8004d98:	08007770 	.word	0x08007770
 8004d9c:	20000174 	.word	0x20000174
 8004da0:	20000178 	.word	0x20000178

08004da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d002      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x30>
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x36>
 8004dd2:	e027      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004dd6:	613b      	str	r3, [r7, #16]
      break;
 8004dd8:	e027      	b.n	8004e2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	0c9b      	lsrs	r3, r3, #18
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004de4:	5cd3      	ldrb	r3, [r2, r3]
 8004de6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d010      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	0c5b      	lsrs	r3, r3, #17
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dfe:	5cd3      	ldrb	r3, [r2, r3]
 8004e00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a0d      	ldr	r2, [pc, #52]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004e06:	fb03 f202 	mul.w	r2, r3, r2
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e004      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e18:	fb02 f303 	mul.w	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	613b      	str	r3, [r7, #16]
      break;
 8004e22:	e002      	b.n	8004e2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004e26:	613b      	str	r3, [r7, #16]
      break;
 8004e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2a:	693b      	ldr	r3, [r7, #16]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	007a1200 	.word	0x007a1200
 8004e40:	08007788 	.word	0x08007788
 8004e44:	08007798 	.word	0x08007798
 8004e48:	003d0900 	.word	0x003d0900

08004e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e50:	4b02      	ldr	r3, [pc, #8]	; (8004e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	20000174 	.word	0x20000174

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e64:	f7ff fff2 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	0adb      	lsrs	r3, r3, #11
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4903      	ldr	r1, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	08007780 	.word	0x08007780

08004e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <RCC_Delay+0x34>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <RCC_Delay+0x38>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	0a5b      	lsrs	r3, r3, #9
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ea4:	bf00      	nop
  }
  while (Delay --);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	60fa      	str	r2, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f9      	bne.n	8004ea4 <RCC_Delay+0x1c>
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	20000174 	.word	0x20000174
 8004ec0:	10624dd3 	.word	0x10624dd3

08004ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d07d      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee4:	4b4f      	ldr	r3, [pc, #316]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef0:	4b4c      	ldr	r3, [pc, #304]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	4a4b      	ldr	r2, [pc, #300]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efa:	61d3      	str	r3, [r2, #28]
 8004efc:	4b49      	ldr	r3, [pc, #292]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0c:	4b46      	ldr	r3, [pc, #280]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d118      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f18:	4b43      	ldr	r3, [pc, #268]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a42      	ldr	r2, [pc, #264]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f24:	f7fe fa36 	bl	8003394 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2a:	e008      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2c:	f7fe fa32 	bl	8003394 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e06d      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b3a      	ldr	r3, [pc, #232]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f4a:	4b36      	ldr	r3, [pc, #216]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d02e      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d027      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f68:	4b2e      	ldr	r3, [pc, #184]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f72:	4b2e      	ldr	r3, [pc, #184]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f78:	4b2c      	ldr	r3, [pc, #176]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f7e:	4a29      	ldr	r2, [pc, #164]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d014      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8e:	f7fe fa01 	bl	8003394 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fe f9fd 	bl	8003394 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e036      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ee      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4917      	ldr	r1, [pc, #92]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d105      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	490b      	ldr	r1, [pc, #44]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d008      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	4904      	ldr	r1, [pc, #16]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005014:	4313      	orrs	r3, r2
 8005016:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
 8005028:	40007000 	.word	0x40007000
 800502c:	42420440 	.word	0x42420440

08005030 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b10      	cmp	r3, #16
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b10      	cmp	r3, #16
 8005056:	f200 808a 	bhi.w	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d045      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d075      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005066:	e082      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005068:	4b46      	ldr	r3, [pc, #280]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800506e:	4b45      	ldr	r3, [pc, #276]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d07b      	beq.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	0c9b      	lsrs	r3, r3, #18
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	4a41      	ldr	r2, [pc, #260]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005084:	5cd3      	ldrb	r3, [r2, r3]
 8005086:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d015      	beq.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005092:	4b3c      	ldr	r3, [pc, #240]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	0c5b      	lsrs	r3, r3, #17
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	4a3b      	ldr	r2, [pc, #236]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800509e:	5cd3      	ldrb	r3, [r2, r3]
 80050a0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80050ac:	4a38      	ldr	r2, [pc, #224]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	e004      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4a34      	ldr	r2, [pc, #208]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80050c8:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d4:	d102      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	61bb      	str	r3, [r7, #24]
      break;
 80050da:	e04a      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4a2d      	ldr	r2, [pc, #180]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	61bb      	str	r3, [r7, #24]
      break;
 80050ea:	e042      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fc:	d108      	bne.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	e01f      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511a:	d109      	bne.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005128:	f649 4340 	movw	r3, #40000	; 0x9c40
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e00f      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513a:	d11c      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d016      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005148:	f24f 4324 	movw	r3, #62500	; 0xf424
 800514c:	61bb      	str	r3, [r7, #24]
      break;
 800514e:	e012      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005150:	e011      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005152:	f7ff fe85 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 8005156:	4602      	mov	r2, r0
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	0b9b      	lsrs	r3, r3, #14
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	3301      	adds	r3, #1
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	61bb      	str	r3, [r7, #24]
      break;
 800516c:	e004      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800516e:	bf00      	nop
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005176:	bf00      	nop
    }
  }
  return (frequency);
 8005178:	69bb      	ldr	r3, [r7, #24]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
 8005188:	0800779c 	.word	0x0800779c
 800518c:	080077ac 	.word	0x080077ac
 8005190:	007a1200 	.word	0x007a1200
 8005194:	003d0900 	.word	0x003d0900
 8005198:	aaaaaaab 	.word	0xaaaaaaab

0800519c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e041      	b.n	8005232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fd ff5c 	bl	8003080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f000 fed0 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d001      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e03a      	b.n	80052ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_TIM_Base_Start_IT+0x98>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00e      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x58>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527e:	d009      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x58>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x58>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a13      	ldr	r2, [pc, #76]	; (80052dc <HAL_TIM_Base_Start_IT+0xa0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d111      	bne.n	80052b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d010      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b6:	e007      	b.n	80052c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800

080052e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e041      	b.n	8005376 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f839 	bl	800537e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3304      	adds	r3, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4610      	mov	r0, r2
 8005320:	f000 fe2e 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <HAL_TIM_PWM_Start_DMA+0x2c>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e022      	b.n	8005402 <HAL_TIM_PWM_Start_DMA+0x72>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d109      	bne.n	80053d6 <HAL_TIM_PWM_Start_DMA+0x46>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	e015      	b.n	8005402 <HAL_TIM_PWM_Start_DMA+0x72>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d109      	bne.n	80053f0 <HAL_TIM_PWM_Start_DMA+0x60>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e008      	b.n	8005402 <HAL_TIM_PWM_Start_DMA+0x72>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005406:	2302      	movs	r3, #2
 8005408:	e153      	b.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_TIM_PWM_Start_DMA+0x94>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e022      	b.n	800546a <HAL_TIM_PWM_Start_DMA+0xda>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d109      	bne.n	800543e <HAL_TIM_PWM_Start_DMA+0xae>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e015      	b.n	800546a <HAL_TIM_PWM_Start_DMA+0xda>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d109      	bne.n	8005458 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e008      	b.n	800546a <HAL_TIM_PWM_Start_DMA+0xda>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d024      	beq.n	80054b8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_TIM_PWM_Start_DMA+0xea>
 8005474:	887b      	ldrh	r3, [r7, #2]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e119      	b.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start_DMA+0xfe>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800548c:	e016      	b.n	80054bc <HAL_TIM_PWM_Start_DMA+0x12c>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start_DMA+0x10e>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549c:	e00e      	b.n	80054bc <HAL_TIM_PWM_Start_DMA+0x12c>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start_DMA+0x11e>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ac:	e006      	b.n	80054bc <HAL_TIM_PWM_Start_DMA+0x12c>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054b6:	e001      	b.n	80054bc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0fa      	b.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	f200 80ae 	bhi.w	8005620 <HAL_TIM_PWM_Start_DMA+0x290>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	08005501 	.word	0x08005501
 80054d0:	08005621 	.word	0x08005621
 80054d4:	08005621 	.word	0x08005621
 80054d8:	08005621 	.word	0x08005621
 80054dc:	08005549 	.word	0x08005549
 80054e0:	08005621 	.word	0x08005621
 80054e4:	08005621 	.word	0x08005621
 80054e8:	08005621 	.word	0x08005621
 80054ec:	08005591 	.word	0x08005591
 80054f0:	08005621 	.word	0x08005621
 80054f4:	08005621 	.word	0x08005621
 80054f8:	08005621 	.word	0x08005621
 80054fc:	080055d9 	.word	0x080055d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	4a6d      	ldr	r2, [pc, #436]	; (80056bc <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005506:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	4a6c      	ldr	r2, [pc, #432]	; (80056c0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800550e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	4a6b      	ldr	r2, [pc, #428]	; (80056c4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005516:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3334      	adds	r3, #52	; 0x34
 8005524:	461a      	mov	r2, r3
 8005526:	887b      	ldrh	r3, [r7, #2]
 8005528:	f7fe fcf6 	bl	8003f18 <HAL_DMA_Start_IT>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e0bd      	b.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005544:	60da      	str	r2, [r3, #12]
      break;
 8005546:	e06e      	b.n	8005626 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	4a5b      	ldr	r2, [pc, #364]	; (80056bc <HAL_TIM_PWM_Start_DMA+0x32c>)
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	4a5a      	ldr	r2, [pc, #360]	; (80056c0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	4a59      	ldr	r2, [pc, #356]	; (80056c4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800555e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3338      	adds	r3, #56	; 0x38
 800556c:	461a      	mov	r2, r3
 800556e:	887b      	ldrh	r3, [r7, #2]
 8005570:	f7fe fcd2 	bl	8003f18 <HAL_DMA_Start_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e099      	b.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800558c:	60da      	str	r2, [r3, #12]
      break;
 800558e:	e04a      	b.n	8005626 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	4a49      	ldr	r2, [pc, #292]	; (80056bc <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	4a48      	ldr	r2, [pc, #288]	; (80056c0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800559e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	4a47      	ldr	r2, [pc, #284]	; (80056c4 <HAL_TIM_PWM_Start_DMA+0x334>)
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	333c      	adds	r3, #60	; 0x3c
 80055b4:	461a      	mov	r2, r3
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	f7fe fcae 	bl	8003f18 <HAL_DMA_Start_IT>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e075      	b.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d4:	60da      	str	r2, [r3, #12]
      break;
 80055d6:	e026      	b.n	8005626 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	4a37      	ldr	r2, [pc, #220]	; (80056bc <HAL_TIM_PWM_Start_DMA+0x32c>)
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	4a36      	ldr	r2, [pc, #216]	; (80056c0 <HAL_TIM_PWM_Start_DMA+0x330>)
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	4a35      	ldr	r2, [pc, #212]	; (80056c4 <HAL_TIM_PWM_Start_DMA+0x334>)
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3340      	adds	r3, #64	; 0x40
 80055fc:	461a      	mov	r2, r3
 80055fe:	887b      	ldrh	r3, [r7, #2]
 8005600:	f7fe fc8a 	bl	8003f18 <HAL_DMA_Start_IT>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e051      	b.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800561c:	60da      	str	r2, [r3, #12]
      break;
 800561e:	e002      	b.n	8005626 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	75fb      	strb	r3, [r7, #23]
      break;
 8005624:	bf00      	nop
  }

  if (status == HAL_OK)
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d141      	bne.n	80056b0 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2201      	movs	r2, #1
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 ff23 	bl	8006480 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a22      	ldr	r2, [pc, #136]	; (80056c8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d107      	bne.n	8005654 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005652:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <HAL_TIM_PWM_Start_DMA+0x338>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00e      	beq.n	800567c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005666:	d009      	beq.n	800567c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <HAL_TIM_PWM_Start_DMA+0x33c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d111      	bne.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b06      	cmp	r3, #6
 800568c:	d010      	beq.n	80056b0 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569e:	e007      	b.n	80056b0 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	08005e6f 	.word	0x08005e6f
 80056c0:	08005f17 	.word	0x08005f17
 80056c4:	08005ddd 	.word	0x08005ddd
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800

080056d4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	d855      	bhi.n	8005794 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005725 	.word	0x08005725
 80056f4:	08005795 	.word	0x08005795
 80056f8:	08005795 	.word	0x08005795
 80056fc:	08005795 	.word	0x08005795
 8005700:	08005741 	.word	0x08005741
 8005704:	08005795 	.word	0x08005795
 8005708:	08005795 	.word	0x08005795
 800570c:	08005795 	.word	0x08005795
 8005710:	0800575d 	.word	0x0800575d
 8005714:	08005795 	.word	0x08005795
 8005718:	08005795 	.word	0x08005795
 800571c:	08005795 	.word	0x08005795
 8005720:	08005779 	.word	0x08005779
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005732:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe fc4d 	bl	8003fd8 <HAL_DMA_Abort_IT>
      break;
 800573e:	e02c      	b.n	800579a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe fc3f 	bl	8003fd8 <HAL_DMA_Abort_IT>
      break;
 800575a:	e01e      	b.n	800579a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800576a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe fc31 	bl	8003fd8 <HAL_DMA_Abort_IT>
      break;
 8005776:	e010      	b.n	800579a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005786:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe fc23 	bl	8003fd8 <HAL_DMA_Abort_IT>
      break;
 8005792:	e002      	b.n	800579a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      break;
 8005798:	bf00      	nop
  }

  if (status == HAL_OK)
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d157      	bne.n	8005850 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2200      	movs	r2, #0
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fe69 	bl	8006480 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2a      	ldr	r2, [pc, #168]	; (800585c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d117      	bne.n	80057e8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a1a      	ldr	r2, [r3, #32]
 80057be:	f241 1311 	movw	r3, #4369	; 0x1111
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10f      	bne.n	80057e8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6a1a      	ldr	r2, [r3, #32]
 80057ce:	f240 4344 	movw	r3, #1092	; 0x444
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a1a      	ldr	r2, [r3, #32]
 80057ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10f      	bne.n	8005818 <HAL_TIM_PWM_Stop_DMA+0x144>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6a1a      	ldr	r2, [r3, #32]
 80057fe:	f240 4344 	movw	r3, #1092	; 0x444
 8005802:	4013      	ands	r3, r2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <HAL_TIM_PWM_Stop_DMA+0x154>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005826:	e013      	b.n	8005850 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d104      	bne.n	8005838 <HAL_TIM_PWM_Stop_DMA+0x164>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005836:	e00b      	b.n	8005850 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b08      	cmp	r3, #8
 800583c:	d104      	bne.n	8005848 <HAL_TIM_PWM_Stop_DMA+0x174>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005846:	e003      	b.n	8005850 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40012c00 	.word	0x40012c00

08005860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b02      	cmp	r3, #2
 8005874:	d122      	bne.n	80058bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0202 	mvn.w	r2, #2
 800588c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa76 	bl	8005d94 <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa69 	bl	8005d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fd f80d 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d122      	bne.n	8005910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0204 	mvn.w	r2, #4
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa4c 	bl	8005d94 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fa3f 	bl	8005d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fc ffe3 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b08      	cmp	r3, #8
 800591c:	d122      	bne.n	8005964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b08      	cmp	r3, #8
 800592a:	d11b      	bne.n	8005964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0208 	mvn.w	r2, #8
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2204      	movs	r2, #4
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa22 	bl	8005d94 <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa15 	bl	8005d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fc ffb9 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b10      	cmp	r3, #16
 8005970:	d122      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b10      	cmp	r3, #16
 800597e:	d11b      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0210 	mvn.w	r2, #16
 8005988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2208      	movs	r2, #8
 800598e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9f8 	bl	8005d94 <HAL_TIM_IC_CaptureCallback>
 80059a4:	e005      	b.n	80059b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f9eb 	bl	8005d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fc ff8f 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10e      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d107      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0201 	mvn.w	r2, #1
 80059dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fc fff4 	bl	80029cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ee:	2b80      	cmp	r3, #128	; 0x80
 80059f0:	d10e      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d107      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fe14 	bl	8006638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d10e      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d107      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9be 	bl	8005db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d10e      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d107      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0220 	mvn.w	r2, #32
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fddf 	bl	8006626 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e0ae      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	f200 809f 	bhi.w	8005bdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ad9 	.word	0x08005ad9
 8005aa8:	08005bdd 	.word	0x08005bdd
 8005aac:	08005bdd 	.word	0x08005bdd
 8005ab0:	08005bdd 	.word	0x08005bdd
 8005ab4:	08005b19 	.word	0x08005b19
 8005ab8:	08005bdd 	.word	0x08005bdd
 8005abc:	08005bdd 	.word	0x08005bdd
 8005ac0:	08005bdd 	.word	0x08005bdd
 8005ac4:	08005b5b 	.word	0x08005b5b
 8005ac8:	08005bdd 	.word	0x08005bdd
 8005acc:	08005bdd 	.word	0x08005bdd
 8005ad0:	08005bdd 	.word	0x08005bdd
 8005ad4:	08005b9b 	.word	0x08005b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fab0 	bl	8006044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0208 	orr.w	r2, r2, #8
 8005af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0204 	bic.w	r2, r2, #4
 8005b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6999      	ldr	r1, [r3, #24]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	619a      	str	r2, [r3, #24]
      break;
 8005b16:	e064      	b.n	8005be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 faf6 	bl	8006110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6999      	ldr	r1, [r3, #24]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	021a      	lsls	r2, r3, #8
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	619a      	str	r2, [r3, #24]
      break;
 8005b58:	e043      	b.n	8005be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fb3f 	bl	80061e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0208 	orr.w	r2, r2, #8
 8005b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0204 	bic.w	r2, r2, #4
 8005b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69d9      	ldr	r1, [r3, #28]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	61da      	str	r2, [r3, #28]
      break;
 8005b98:	e023      	b.n	8005be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fb89 	bl	80062b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69d9      	ldr	r1, [r3, #28]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	021a      	lsls	r2, r3, #8
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	61da      	str	r2, [r3, #28]
      break;
 8005bda:	e002      	b.n	8005be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
      break;
 8005be0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_TIM_ConfigClockSource+0x1c>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e0b4      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x186>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c48:	d03e      	beq.n	8005cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4e:	f200 8087 	bhi.w	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c56:	f000 8086 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x172>
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5e:	d87f      	bhi.n	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b70      	cmp	r3, #112	; 0x70
 8005c62:	d01a      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0xa6>
 8005c64:	2b70      	cmp	r3, #112	; 0x70
 8005c66:	d87b      	bhi.n	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b60      	cmp	r3, #96	; 0x60
 8005c6a:	d050      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x11a>
 8005c6c:	2b60      	cmp	r3, #96	; 0x60
 8005c6e:	d877      	bhi.n	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b50      	cmp	r3, #80	; 0x50
 8005c72:	d03c      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0xfa>
 8005c74:	2b50      	cmp	r3, #80	; 0x50
 8005c76:	d873      	bhi.n	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d058      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x13a>
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d86f      	bhi.n	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b30      	cmp	r3, #48	; 0x30
 8005c82:	d064      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x15a>
 8005c84:	2b30      	cmp	r3, #48	; 0x30
 8005c86:	d86b      	bhi.n	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d060      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x15a>
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d867      	bhi.n	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d05c      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x15a>
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d05a      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x15a>
 8005c98:	e062      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005caa:	f000 fbca 	bl	8006442 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	609a      	str	r2, [r3, #8]
      break;
 8005cc6:	e04f      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cd8:	f000 fbb3 	bl	8006442 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cea:	609a      	str	r2, [r3, #8]
      break;
 8005cec:	e03c      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 fb2a 	bl	8006354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2150      	movs	r1, #80	; 0x50
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fb81 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 8005d0c:	e02c      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 fb48 	bl	80063b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2160      	movs	r1, #96	; 0x60
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fb71 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e01c      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f000 fb0a 	bl	8006354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2140      	movs	r1, #64	; 0x40
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fb61 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 8005d4c:	e00c      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f000 fb58 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 8005d5e:	e003      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
      break;
 8005d64:	e000      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d107      	bne.n	8005e04 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e02:	e02a      	b.n	8005e5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d107      	bne.n	8005e1e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2202      	movs	r2, #2
 8005e12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1c:	e01d      	b.n	8005e5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d107      	bne.n	8005e38 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e36:	e010      	b.n	8005e5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d107      	bne.n	8005e52 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2208      	movs	r2, #8
 8005e46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e50:	e003      	b.n	8005e5a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff ffb5 	bl	8005dca <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	771a      	strb	r2, [r3, #28]
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d10b      	bne.n	8005e9e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d136      	bne.n	8005f02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e9c:	e031      	b.n	8005f02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d10b      	bne.n	8005ec0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d125      	bne.n	8005f02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ebe:	e020      	b.n	8005f02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d10b      	bne.n	8005ee2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d114      	bne.n	8005f02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee0:	e00f      	b.n	8005f02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d10a      	bne.n	8005f02 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7fc fce4 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	771a      	strb	r2, [r3, #28]
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d103      	bne.n	8005f36 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	771a      	strb	r2, [r3, #28]
 8005f34:	e019      	b.n	8005f6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d103      	bne.n	8005f48 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2202      	movs	r2, #2
 8005f44:	771a      	strb	r2, [r3, #28]
 8005f46:	e010      	b.n	8005f6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d103      	bne.n	8005f5a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2204      	movs	r2, #4
 8005f56:	771a      	strb	r2, [r3, #28]
 8005f58:	e007      	b.n	8005f6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d102      	bne.n	8005f6a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2208      	movs	r2, #8
 8005f68:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff ff1b 	bl	8005da6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	771a      	strb	r2, [r3, #28]
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a29      	ldr	r2, [pc, #164]	; (8006038 <TIM_Base_SetConfig+0xb8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_Base_SetConfig+0x30>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9e:	d007      	beq.n	8005fb0 <TIM_Base_SetConfig+0x30>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a26      	ldr	r2, [pc, #152]	; (800603c <TIM_Base_SetConfig+0xbc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0x30>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a25      	ldr	r2, [pc, #148]	; (8006040 <TIM_Base_SetConfig+0xc0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d108      	bne.n	8005fc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <TIM_Base_SetConfig+0xb8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00b      	beq.n	8005fe2 <TIM_Base_SetConfig+0x62>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d007      	beq.n	8005fe2 <TIM_Base_SetConfig+0x62>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a19      	ldr	r2, [pc, #100]	; (800603c <TIM_Base_SetConfig+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_Base_SetConfig+0x62>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a18      	ldr	r2, [pc, #96]	; (8006040 <TIM_Base_SetConfig+0xc0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d108      	bne.n	8005ff4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a07      	ldr	r2, [pc, #28]	; (8006038 <TIM_Base_SetConfig+0xb8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d103      	bne.n	8006028 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	615a      	str	r2, [r3, #20]
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800

08006044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f023 0201 	bic.w	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f023 0302 	bic.w	r3, r3, #2
 800608c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a1c      	ldr	r2, [pc, #112]	; (800610c <TIM_OC1_SetConfig+0xc8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10c      	bne.n	80060ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0308 	bic.w	r3, r3, #8
 80060a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f023 0304 	bic.w	r3, r3, #4
 80060b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a13      	ldr	r2, [pc, #76]	; (800610c <TIM_OC1_SetConfig+0xc8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d111      	bne.n	80060e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	621a      	str	r2, [r3, #32]
}
 8006100:	bf00      	nop
 8006102:	371c      	adds	r7, #28
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40012c00 	.word	0x40012c00

08006110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f023 0210 	bic.w	r2, r3, #16
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0320 	bic.w	r3, r3, #32
 800615a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a1d      	ldr	r2, [pc, #116]	; (80061e0 <TIM_OC2_SetConfig+0xd0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d10d      	bne.n	800618c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a14      	ldr	r2, [pc, #80]	; (80061e0 <TIM_OC2_SetConfig+0xd0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d113      	bne.n	80061bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800619a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	40012c00 	.word	0x40012c00

080061e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0303 	bic.w	r3, r3, #3
 800621a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800622c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <TIM_OC3_SetConfig+0xd0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d10d      	bne.n	800625e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800625c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a14      	ldr	r2, [pc, #80]	; (80062b4 <TIM_OC3_SetConfig+0xd0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d113      	bne.n	800628e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800626c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	621a      	str	r2, [r3, #32]
}
 80062a8:	bf00      	nop
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40012c00 	.word	0x40012c00

080062b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	021b      	lsls	r3, r3, #8
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	031b      	lsls	r3, r3, #12
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <TIM_OC4_SetConfig+0x98>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d109      	bne.n	800632c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800631e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	019b      	lsls	r3, r3, #6
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr
 8006350:	40012c00 	.word	0x40012c00

08006354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f023 0201 	bic.w	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800637e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f023 030a 	bic.w	r3, r3, #10
 8006390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0210 	bic.w	r2, r3, #16
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	031b      	lsls	r3, r3, #12
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	621a      	str	r2, [r3, #32]
}
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr

0800640e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	f043 0307 	orr.w	r3, r3, #7
 8006430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	609a      	str	r2, [r3, #8]
}
 8006438:	bf00      	nop
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006442:	b480      	push	{r7}
 8006444:	b087      	sub	sp, #28
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800645c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	021a      	lsls	r2, r3, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	431a      	orrs	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4313      	orrs	r3, r2
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	609a      	str	r2, [r3, #8]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2201      	movs	r2, #1
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1a      	ldr	r2, [r3, #32]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	43db      	mvns	r3, r3
 80064a2:	401a      	ands	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1a      	ldr	r2, [r3, #32]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
 80064b8:	431a      	orrs	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
}
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064dc:	2302      	movs	r3, #2
 80064de:	e046      	b.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a16      	ldr	r2, [pc, #88]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d009      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a12      	ldr	r2, [pc, #72]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a10      	ldr	r2, [pc, #64]	; (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d10c      	bne.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	4313      	orrs	r3, r2
 8006552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800

08006584 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800659c:	2302      	movs	r3, #2
 800659e:	e03d      	b.n	800661c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr

0800664a <memset>:
 800664a:	4603      	mov	r3, r0
 800664c:	4402      	add	r2, r0
 800664e:	4293      	cmp	r3, r2
 8006650:	d100      	bne.n	8006654 <memset+0xa>
 8006652:	4770      	bx	lr
 8006654:	f803 1b01 	strb.w	r1, [r3], #1
 8006658:	e7f9      	b.n	800664e <memset+0x4>
	...

0800665c <__libc_init_array>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	2600      	movs	r6, #0
 8006660:	4d0c      	ldr	r5, [pc, #48]	; (8006694 <__libc_init_array+0x38>)
 8006662:	4c0d      	ldr	r4, [pc, #52]	; (8006698 <__libc_init_array+0x3c>)
 8006664:	1b64      	subs	r4, r4, r5
 8006666:	10a4      	asrs	r4, r4, #2
 8006668:	42a6      	cmp	r6, r4
 800666a:	d109      	bne.n	8006680 <__libc_init_array+0x24>
 800666c:	f001 f874 	bl	8007758 <_init>
 8006670:	2600      	movs	r6, #0
 8006672:	4d0a      	ldr	r5, [pc, #40]	; (800669c <__libc_init_array+0x40>)
 8006674:	4c0a      	ldr	r4, [pc, #40]	; (80066a0 <__libc_init_array+0x44>)
 8006676:	1b64      	subs	r4, r4, r5
 8006678:	10a4      	asrs	r4, r4, #2
 800667a:	42a6      	cmp	r6, r4
 800667c:	d105      	bne.n	800668a <__libc_init_array+0x2e>
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	f855 3b04 	ldr.w	r3, [r5], #4
 8006684:	4798      	blx	r3
 8006686:	3601      	adds	r6, #1
 8006688:	e7ee      	b.n	8006668 <__libc_init_array+0xc>
 800668a:	f855 3b04 	ldr.w	r3, [r5], #4
 800668e:	4798      	blx	r3
 8006690:	3601      	adds	r6, #1
 8006692:	e7f2      	b.n	800667a <__libc_init_array+0x1e>
 8006694:	08007988 	.word	0x08007988
 8006698:	08007988 	.word	0x08007988
 800669c:	08007988 	.word	0x08007988
 80066a0:	0800798c 	.word	0x0800798c

080066a4 <tan>:
 80066a4:	b530      	push	{r4, r5, lr}
 80066a6:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <tan+0x4c>)
 80066a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066ac:	4293      	cmp	r3, r2
 80066ae:	b087      	sub	sp, #28
 80066b0:	dc06      	bgt.n	80066c0 <tan+0x1c>
 80066b2:	2301      	movs	r3, #1
 80066b4:	2200      	movs	r2, #0
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	2300      	movs	r3, #0
 80066ba:	f000 f81d 	bl	80066f8 <__kernel_tan>
 80066be:	e006      	b.n	80066ce <tan+0x2a>
 80066c0:	4a0c      	ldr	r2, [pc, #48]	; (80066f4 <tan+0x50>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	dd05      	ble.n	80066d2 <tan+0x2e>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	f7f9 fd45 	bl	8000158 <__aeabi_dsub>
 80066ce:	b007      	add	sp, #28
 80066d0:	bd30      	pop	{r4, r5, pc}
 80066d2:	aa02      	add	r2, sp, #8
 80066d4:	f000 fa0c 	bl	8006af0 <__ieee754_rem_pio2>
 80066d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066dc:	0040      	lsls	r0, r0, #1
 80066de:	f000 0002 	and.w	r0, r0, #2
 80066e2:	f1c0 0001 	rsb	r0, r0, #1
 80066e6:	9000      	str	r0, [sp, #0]
 80066e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ec:	e7e5      	b.n	80066ba <tan+0x16>
 80066ee:	bf00      	nop
 80066f0:	3fe921fb 	.word	0x3fe921fb
 80066f4:	7fefffff 	.word	0x7fefffff

080066f8 <__kernel_tan>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	b08b      	sub	sp, #44	; 0x2c
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	4bd9      	ldr	r3, [pc, #868]	; (8006a68 <__kernel_tan+0x370>)
 8006702:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006706:	429e      	cmp	r6, r3
 8006708:	4604      	mov	r4, r0
 800670a:	460d      	mov	r5, r1
 800670c:	4682      	mov	sl, r0
 800670e:	468b      	mov	fp, r1
 8006710:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006712:	9202      	str	r2, [sp, #8]
 8006714:	9107      	str	r1, [sp, #28]
 8006716:	dc58      	bgt.n	80067ca <__kernel_tan+0xd2>
 8006718:	f7fa f970 	bl	80009fc <__aeabi_d2iz>
 800671c:	4605      	mov	r5, r0
 800671e:	2800      	cmp	r0, #0
 8006720:	d178      	bne.n	8006814 <__kernel_tan+0x11c>
 8006722:	1c7b      	adds	r3, r7, #1
 8006724:	4323      	orrs	r3, r4
 8006726:	4333      	orrs	r3, r6
 8006728:	d110      	bne.n	800674c <__kernel_tan+0x54>
 800672a:	4620      	mov	r0, r4
 800672c:	4659      	mov	r1, fp
 800672e:	f000 fbd3 	bl	8006ed8 <fabs>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	2000      	movs	r0, #0
 8006738:	49cc      	ldr	r1, [pc, #816]	; (8006a6c <__kernel_tan+0x374>)
 800673a:	f7f9 ffef 	bl	800071c <__aeabi_ddiv>
 800673e:	4682      	mov	sl, r0
 8006740:	468b      	mov	fp, r1
 8006742:	4650      	mov	r0, sl
 8006744:	4659      	mov	r1, fp
 8006746:	b00b      	add	sp, #44	; 0x2c
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	2f01      	cmp	r7, #1
 800674e:	d0f8      	beq.n	8006742 <__kernel_tan+0x4a>
 8006750:	4620      	mov	r0, r4
 8006752:	4659      	mov	r1, fp
 8006754:	9a02      	ldr	r2, [sp, #8]
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	f7f9 fd00 	bl	800015c <__adddf3>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	460f      	mov	r7, r1
 8006762:	2000      	movs	r0, #0
 8006764:	49c2      	ldr	r1, [pc, #776]	; (8006a70 <__kernel_tan+0x378>)
 8006766:	f7f9 ffd9 	bl	800071c <__aeabi_ddiv>
 800676a:	462e      	mov	r6, r5
 800676c:	4689      	mov	r9, r1
 800676e:	4652      	mov	r2, sl
 8006770:	465b      	mov	r3, fp
 8006772:	4680      	mov	r8, r0
 8006774:	462c      	mov	r4, r5
 8006776:	4630      	mov	r0, r6
 8006778:	460d      	mov	r5, r1
 800677a:	4639      	mov	r1, r7
 800677c:	f7f9 fcec 	bl	8000158 <__aeabi_dsub>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	9802      	ldr	r0, [sp, #8]
 8006786:	9900      	ldr	r1, [sp, #0]
 8006788:	f7f9 fce6 	bl	8000158 <__aeabi_dsub>
 800678c:	4632      	mov	r2, r6
 800678e:	464b      	mov	r3, r9
 8006790:	f7f9 fe9a 	bl	80004c8 <__aeabi_dmul>
 8006794:	4632      	mov	r2, r6
 8006796:	4682      	mov	sl, r0
 8006798:	468b      	mov	fp, r1
 800679a:	464b      	mov	r3, r9
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f7f9 fe92 	bl	80004c8 <__aeabi_dmul>
 80067a4:	2200      	movs	r2, #0
 80067a6:	4bb1      	ldr	r3, [pc, #708]	; (8006a6c <__kernel_tan+0x374>)
 80067a8:	f7f9 fcd8 	bl	800015c <__adddf3>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4650      	mov	r0, sl
 80067b2:	4659      	mov	r1, fp
 80067b4:	f7f9 fcd2 	bl	800015c <__adddf3>
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	f7f9 fe84 	bl	80004c8 <__aeabi_dmul>
 80067c0:	4622      	mov	r2, r4
 80067c2:	462b      	mov	r3, r5
 80067c4:	f7f9 fcca 	bl	800015c <__adddf3>
 80067c8:	e7b9      	b.n	800673e <__kernel_tan+0x46>
 80067ca:	4baa      	ldr	r3, [pc, #680]	; (8006a74 <__kernel_tan+0x37c>)
 80067cc:	429e      	cmp	r6, r3
 80067ce:	dd21      	ble.n	8006814 <__kernel_tan+0x11c>
 80067d0:	2900      	cmp	r1, #0
 80067d2:	da06      	bge.n	80067e2 <__kernel_tan+0xea>
 80067d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80067d8:	469b      	mov	fp, r3
 80067da:	9b00      	ldr	r3, [sp, #0]
 80067dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4652      	mov	r2, sl
 80067e4:	a182      	add	r1, pc, #520	; (adr r1, 80069f0 <__kernel_tan+0x2f8>)
 80067e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ea:	465b      	mov	r3, fp
 80067ec:	f7f9 fcb4 	bl	8000158 <__aeabi_dsub>
 80067f0:	4604      	mov	r4, r0
 80067f2:	460d      	mov	r5, r1
 80067f4:	a180      	add	r1, pc, #512	; (adr r1, 80069f8 <__kernel_tan+0x300>)
 80067f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067fa:	9a02      	ldr	r2, [sp, #8]
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	f7f9 fcab 	bl	8000158 <__aeabi_dsub>
 8006802:	462b      	mov	r3, r5
 8006804:	4622      	mov	r2, r4
 8006806:	f7f9 fca9 	bl	800015c <__adddf3>
 800680a:	2300      	movs	r3, #0
 800680c:	4682      	mov	sl, r0
 800680e:	468b      	mov	fp, r1
 8006810:	9302      	str	r3, [sp, #8]
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	4652      	mov	r2, sl
 8006816:	465b      	mov	r3, fp
 8006818:	4650      	mov	r0, sl
 800681a:	4659      	mov	r1, fp
 800681c:	f7f9 fe54 	bl	80004c8 <__aeabi_dmul>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4680      	mov	r8, r0
 8006826:	4689      	mov	r9, r1
 8006828:	f7f9 fe4e 	bl	80004c8 <__aeabi_dmul>
 800682c:	4642      	mov	r2, r8
 800682e:	4604      	mov	r4, r0
 8006830:	460d      	mov	r5, r1
 8006832:	464b      	mov	r3, r9
 8006834:	4650      	mov	r0, sl
 8006836:	4659      	mov	r1, fp
 8006838:	f7f9 fe46 	bl	80004c8 <__aeabi_dmul>
 800683c:	a370      	add	r3, pc, #448	; (adr r3, 8006a00 <__kernel_tan+0x308>)
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7f9 fe3d 	bl	80004c8 <__aeabi_dmul>
 800684e:	a36e      	add	r3, pc, #440	; (adr r3, 8006a08 <__kernel_tan+0x310>)
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f7f9 fc82 	bl	800015c <__adddf3>
 8006858:	4622      	mov	r2, r4
 800685a:	462b      	mov	r3, r5
 800685c:	f7f9 fe34 	bl	80004c8 <__aeabi_dmul>
 8006860:	a36b      	add	r3, pc, #428	; (adr r3, 8006a10 <__kernel_tan+0x318>)
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f7f9 fc79 	bl	800015c <__adddf3>
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	f7f9 fe2b 	bl	80004c8 <__aeabi_dmul>
 8006872:	a369      	add	r3, pc, #420	; (adr r3, 8006a18 <__kernel_tan+0x320>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 fc70 	bl	800015c <__adddf3>
 800687c:	4622      	mov	r2, r4
 800687e:	462b      	mov	r3, r5
 8006880:	f7f9 fe22 	bl	80004c8 <__aeabi_dmul>
 8006884:	a366      	add	r3, pc, #408	; (adr r3, 8006a20 <__kernel_tan+0x328>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 fc67 	bl	800015c <__adddf3>
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	f7f9 fe19 	bl	80004c8 <__aeabi_dmul>
 8006896:	a364      	add	r3, pc, #400	; (adr r3, 8006a28 <__kernel_tan+0x330>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f7f9 fc5e 	bl	800015c <__adddf3>
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	f7f9 fe10 	bl	80004c8 <__aeabi_dmul>
 80068a8:	a361      	add	r3, pc, #388	; (adr r3, 8006a30 <__kernel_tan+0x338>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068b2:	4620      	mov	r0, r4
 80068b4:	4629      	mov	r1, r5
 80068b6:	f7f9 fe07 	bl	80004c8 <__aeabi_dmul>
 80068ba:	a35f      	add	r3, pc, #380	; (adr r3, 8006a38 <__kernel_tan+0x340>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fc4c 	bl	800015c <__adddf3>
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	f7f9 fdfe 	bl	80004c8 <__aeabi_dmul>
 80068cc:	a35c      	add	r3, pc, #368	; (adr r3, 8006a40 <__kernel_tan+0x348>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f7f9 fc43 	bl	800015c <__adddf3>
 80068d6:	4622      	mov	r2, r4
 80068d8:	462b      	mov	r3, r5
 80068da:	f7f9 fdf5 	bl	80004c8 <__aeabi_dmul>
 80068de:	a35a      	add	r3, pc, #360	; (adr r3, 8006a48 <__kernel_tan+0x350>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7f9 fc3a 	bl	800015c <__adddf3>
 80068e8:	4622      	mov	r2, r4
 80068ea:	462b      	mov	r3, r5
 80068ec:	f7f9 fdec 	bl	80004c8 <__aeabi_dmul>
 80068f0:	a357      	add	r3, pc, #348	; (adr r3, 8006a50 <__kernel_tan+0x358>)
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 fc31 	bl	800015c <__adddf3>
 80068fa:	4622      	mov	r2, r4
 80068fc:	462b      	mov	r3, r5
 80068fe:	f7f9 fde3 	bl	80004c8 <__aeabi_dmul>
 8006902:	a355      	add	r3, pc, #340	; (adr r3, 8006a58 <__kernel_tan+0x360>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fc28 	bl	800015c <__adddf3>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006914:	f7f9 fc22 	bl	800015c <__adddf3>
 8006918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800691c:	f7f9 fdd4 	bl	80004c8 <__aeabi_dmul>
 8006920:	9a02      	ldr	r2, [sp, #8]
 8006922:	9b00      	ldr	r3, [sp, #0]
 8006924:	f7f9 fc1a 	bl	800015c <__adddf3>
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	f7f9 fdcc 	bl	80004c8 <__aeabi_dmul>
 8006930:	9a02      	ldr	r2, [sp, #8]
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	f7f9 fc12 	bl	800015c <__adddf3>
 8006938:	a349      	add	r3, pc, #292	; (adr r3, 8006a60 <__kernel_tan+0x368>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	4604      	mov	r4, r0
 8006940:	460d      	mov	r5, r1
 8006942:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006946:	f7f9 fdbf 	bl	80004c8 <__aeabi_dmul>
 800694a:	4622      	mov	r2, r4
 800694c:	462b      	mov	r3, r5
 800694e:	f7f9 fc05 	bl	800015c <__adddf3>
 8006952:	460b      	mov	r3, r1
 8006954:	e9cd 0100 	strd	r0, r1, [sp]
 8006958:	4602      	mov	r2, r0
 800695a:	4659      	mov	r1, fp
 800695c:	4650      	mov	r0, sl
 800695e:	f7f9 fbfd 	bl	800015c <__adddf3>
 8006962:	4b44      	ldr	r3, [pc, #272]	; (8006a74 <__kernel_tan+0x37c>)
 8006964:	4604      	mov	r4, r0
 8006966:	429e      	cmp	r6, r3
 8006968:	460d      	mov	r5, r1
 800696a:	f340 8085 	ble.w	8006a78 <__kernel_tan+0x380>
 800696e:	4638      	mov	r0, r7
 8006970:	f7f9 fd40 	bl	80003f4 <__aeabi_i2d>
 8006974:	4622      	mov	r2, r4
 8006976:	4680      	mov	r8, r0
 8006978:	4689      	mov	r9, r1
 800697a:	462b      	mov	r3, r5
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fda2 	bl	80004c8 <__aeabi_dmul>
 8006984:	4642      	mov	r2, r8
 8006986:	4606      	mov	r6, r0
 8006988:	460f      	mov	r7, r1
 800698a:	464b      	mov	r3, r9
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fbe4 	bl	800015c <__adddf3>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f7f9 febe 	bl	800071c <__aeabi_ddiv>
 80069a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a4:	f7f9 fbd8 	bl	8000158 <__aeabi_dsub>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4650      	mov	r0, sl
 80069ae:	4659      	mov	r1, fp
 80069b0:	f7f9 fbd2 	bl	8000158 <__aeabi_dsub>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	f7f9 fbd0 	bl	800015c <__adddf3>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4640      	mov	r0, r8
 80069c2:	4649      	mov	r1, r9
 80069c4:	f7f9 fbc8 	bl	8000158 <__aeabi_dsub>
 80069c8:	9b07      	ldr	r3, [sp, #28]
 80069ca:	4604      	mov	r4, r0
 80069cc:	179b      	asrs	r3, r3, #30
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	f1c3 0001 	rsb	r0, r3, #1
 80069d6:	460d      	mov	r5, r1
 80069d8:	f7f9 fd0c 	bl	80003f4 <__aeabi_i2d>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4620      	mov	r0, r4
 80069e2:	4629      	mov	r1, r5
 80069e4:	f7f9 fd70 	bl	80004c8 <__aeabi_dmul>
 80069e8:	e6a9      	b.n	800673e <__kernel_tan+0x46>
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w
 80069f0:	54442d18 	.word	0x54442d18
 80069f4:	3fe921fb 	.word	0x3fe921fb
 80069f8:	33145c07 	.word	0x33145c07
 80069fc:	3c81a626 	.word	0x3c81a626
 8006a00:	74bf7ad4 	.word	0x74bf7ad4
 8006a04:	3efb2a70 	.word	0x3efb2a70
 8006a08:	32f0a7e9 	.word	0x32f0a7e9
 8006a0c:	3f12b80f 	.word	0x3f12b80f
 8006a10:	1a8d1068 	.word	0x1a8d1068
 8006a14:	3f3026f7 	.word	0x3f3026f7
 8006a18:	fee08315 	.word	0xfee08315
 8006a1c:	3f57dbc8 	.word	0x3f57dbc8
 8006a20:	e96e8493 	.word	0xe96e8493
 8006a24:	3f8226e3 	.word	0x3f8226e3
 8006a28:	1bb341fe 	.word	0x1bb341fe
 8006a2c:	3faba1ba 	.word	0x3faba1ba
 8006a30:	db605373 	.word	0xdb605373
 8006a34:	bef375cb 	.word	0xbef375cb
 8006a38:	a03792a6 	.word	0xa03792a6
 8006a3c:	3f147e88 	.word	0x3f147e88
 8006a40:	f2f26501 	.word	0xf2f26501
 8006a44:	3f4344d8 	.word	0x3f4344d8
 8006a48:	c9560328 	.word	0xc9560328
 8006a4c:	3f6d6d22 	.word	0x3f6d6d22
 8006a50:	8406d637 	.word	0x8406d637
 8006a54:	3f9664f4 	.word	0x3f9664f4
 8006a58:	1110fe7a 	.word	0x1110fe7a
 8006a5c:	3fc11111 	.word	0x3fc11111
 8006a60:	55555563 	.word	0x55555563
 8006a64:	3fd55555 	.word	0x3fd55555
 8006a68:	3e2fffff 	.word	0x3e2fffff
 8006a6c:	3ff00000 	.word	0x3ff00000
 8006a70:	bff00000 	.word	0xbff00000
 8006a74:	3fe59427 	.word	0x3fe59427
 8006a78:	2f01      	cmp	r7, #1
 8006a7a:	d031      	beq.n	8006ae0 <__kernel_tan+0x3e8>
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	2000      	movs	r0, #0
 8006a84:	4918      	ldr	r1, [pc, #96]	; (8006ae8 <__kernel_tan+0x3f0>)
 8006a86:	f7f9 fe49 	bl	800071c <__aeabi_ddiv>
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a94:	4652      	mov	r2, sl
 8006a96:	465b      	mov	r3, fp
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7f9 fb5c 	bl	8000158 <__aeabi_dsub>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aa8:	f7f9 fb56 	bl	8000158 <__aeabi_dsub>
 8006aac:	4632      	mov	r2, r6
 8006aae:	462b      	mov	r3, r5
 8006ab0:	f7f9 fd0a 	bl	80004c8 <__aeabi_dmul>
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4682      	mov	sl, r0
 8006ab8:	468b      	mov	fp, r1
 8006aba:	462b      	mov	r3, r5
 8006abc:	4630      	mov	r0, r6
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f7f9 fd02 	bl	80004c8 <__aeabi_dmul>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <__kernel_tan+0x3f4>)
 8006ac8:	f7f9 fb48 	bl	800015c <__adddf3>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4650      	mov	r0, sl
 8006ad2:	4659      	mov	r1, fp
 8006ad4:	f7f9 fb42 	bl	800015c <__adddf3>
 8006ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006adc:	4634      	mov	r4, r6
 8006ade:	e66d      	b.n	80067bc <__kernel_tan+0xc4>
 8006ae0:	4682      	mov	sl, r0
 8006ae2:	468b      	mov	fp, r1
 8006ae4:	e62d      	b.n	8006742 <__kernel_tan+0x4a>
 8006ae6:	bf00      	nop
 8006ae8:	bff00000 	.word	0xbff00000
 8006aec:	3ff00000 	.word	0x3ff00000

08006af0 <__ieee754_rem_pio2>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	4614      	mov	r4, r2
 8006af6:	4ac2      	ldr	r2, [pc, #776]	; (8006e00 <__ieee754_rem_pio2+0x310>)
 8006af8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006afc:	b08d      	sub	sp, #52	; 0x34
 8006afe:	4592      	cmp	sl, r2
 8006b00:	9104      	str	r1, [sp, #16]
 8006b02:	dc07      	bgt.n	8006b14 <__ieee754_rem_pio2+0x24>
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	e9c4 0100 	strd	r0, r1, [r4]
 8006b0c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006b10:	2500      	movs	r5, #0
 8006b12:	e024      	b.n	8006b5e <__ieee754_rem_pio2+0x6e>
 8006b14:	4abb      	ldr	r2, [pc, #748]	; (8006e04 <__ieee754_rem_pio2+0x314>)
 8006b16:	4592      	cmp	sl, r2
 8006b18:	dc72      	bgt.n	8006c00 <__ieee754_rem_pio2+0x110>
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	4dba      	ldr	r5, [pc, #744]	; (8006e08 <__ieee754_rem_pio2+0x318>)
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	a3a9      	add	r3, pc, #676	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x2d8>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	dd36      	ble.n	8006b96 <__ieee754_rem_pio2+0xa6>
 8006b28:	f7f9 fb16 	bl	8000158 <__aeabi_dsub>
 8006b2c:	45aa      	cmp	sl, r5
 8006b2e:	4606      	mov	r6, r0
 8006b30:	460f      	mov	r7, r1
 8006b32:	d018      	beq.n	8006b66 <__ieee754_rem_pio2+0x76>
 8006b34:	a3a6      	add	r3, pc, #664	; (adr r3, 8006dd0 <__ieee754_rem_pio2+0x2e0>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f7f9 fb0d 	bl	8000158 <__aeabi_dsub>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4630      	mov	r0, r6
 8006b44:	e9c4 2300 	strd	r2, r3, [r4]
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 fb05 	bl	8000158 <__aeabi_dsub>
 8006b4e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006dd0 <__ieee754_rem_pio2+0x2e0>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fb00 	bl	8000158 <__aeabi_dsub>
 8006b58:	2501      	movs	r5, #1
 8006b5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006b5e:	4628      	mov	r0, r5
 8006b60:	b00d      	add	sp, #52	; 0x34
 8006b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b66:	a39c      	add	r3, pc, #624	; (adr r3, 8006dd8 <__ieee754_rem_pio2+0x2e8>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 faf4 	bl	8000158 <__aeabi_dsub>
 8006b70:	a39b      	add	r3, pc, #620	; (adr r3, 8006de0 <__ieee754_rem_pio2+0x2f0>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	4606      	mov	r6, r0
 8006b78:	460f      	mov	r7, r1
 8006b7a:	f7f9 faed 	bl	8000158 <__aeabi_dsub>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4630      	mov	r0, r6
 8006b84:	e9c4 2300 	strd	r2, r3, [r4]
 8006b88:	4639      	mov	r1, r7
 8006b8a:	f7f9 fae5 	bl	8000158 <__aeabi_dsub>
 8006b8e:	a394      	add	r3, pc, #592	; (adr r3, 8006de0 <__ieee754_rem_pio2+0x2f0>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	e7de      	b.n	8006b54 <__ieee754_rem_pio2+0x64>
 8006b96:	f7f9 fae1 	bl	800015c <__adddf3>
 8006b9a:	45aa      	cmp	sl, r5
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	d016      	beq.n	8006bd0 <__ieee754_rem_pio2+0xe0>
 8006ba2:	a38b      	add	r3, pc, #556	; (adr r3, 8006dd0 <__ieee754_rem_pio2+0x2e0>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fad8 	bl	800015c <__adddf3>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	e9c4 2300 	strd	r2, r3, [r4]
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 face 	bl	8000158 <__aeabi_dsub>
 8006bbc:	a384      	add	r3, pc, #528	; (adr r3, 8006dd0 <__ieee754_rem_pio2+0x2e0>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 facb 	bl	800015c <__adddf3>
 8006bc6:	f04f 35ff 	mov.w	r5, #4294967295
 8006bca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006bce:	e7c6      	b.n	8006b5e <__ieee754_rem_pio2+0x6e>
 8006bd0:	a381      	add	r3, pc, #516	; (adr r3, 8006dd8 <__ieee754_rem_pio2+0x2e8>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fac1 	bl	800015c <__adddf3>
 8006bda:	a381      	add	r3, pc, #516	; (adr r3, 8006de0 <__ieee754_rem_pio2+0x2f0>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	4606      	mov	r6, r0
 8006be2:	460f      	mov	r7, r1
 8006be4:	f7f9 faba 	bl	800015c <__adddf3>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4630      	mov	r0, r6
 8006bee:	e9c4 2300 	strd	r2, r3, [r4]
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 fab0 	bl	8000158 <__aeabi_dsub>
 8006bf8:	a379      	add	r3, pc, #484	; (adr r3, 8006de0 <__ieee754_rem_pio2+0x2f0>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	e7e0      	b.n	8006bc2 <__ieee754_rem_pio2+0xd2>
 8006c00:	4a82      	ldr	r2, [pc, #520]	; (8006e0c <__ieee754_rem_pio2+0x31c>)
 8006c02:	4592      	cmp	sl, r2
 8006c04:	f300 80d4 	bgt.w	8006db0 <__ieee754_rem_pio2+0x2c0>
 8006c08:	f000 f966 	bl	8006ed8 <fabs>
 8006c0c:	a376      	add	r3, pc, #472	; (adr r3, 8006de8 <__ieee754_rem_pio2+0x2f8>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	4606      	mov	r6, r0
 8006c14:	460f      	mov	r7, r1
 8006c16:	f7f9 fc57 	bl	80004c8 <__aeabi_dmul>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4b7c      	ldr	r3, [pc, #496]	; (8006e10 <__ieee754_rem_pio2+0x320>)
 8006c1e:	f7f9 fa9d 	bl	800015c <__adddf3>
 8006c22:	f7f9 feeb 	bl	80009fc <__aeabi_d2iz>
 8006c26:	4605      	mov	r5, r0
 8006c28:	f7f9 fbe4 	bl	80003f4 <__aeabi_i2d>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c34:	a364      	add	r3, pc, #400	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x2d8>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fc45 	bl	80004c8 <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4630      	mov	r0, r6
 8006c44:	4639      	mov	r1, r7
 8006c46:	f7f9 fa87 	bl	8000158 <__aeabi_dsub>
 8006c4a:	a361      	add	r3, pc, #388	; (adr r3, 8006dd0 <__ieee754_rem_pio2+0x2e0>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c58:	f7f9 fc36 	bl	80004c8 <__aeabi_dmul>
 8006c5c:	2d1f      	cmp	r5, #31
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460f      	mov	r7, r1
 8006c62:	dc0e      	bgt.n	8006c82 <__ieee754_rem_pio2+0x192>
 8006c64:	4b6b      	ldr	r3, [pc, #428]	; (8006e14 <__ieee754_rem_pio2+0x324>)
 8006c66:	1e6a      	subs	r2, r5, #1
 8006c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6c:	4553      	cmp	r3, sl
 8006c6e:	d008      	beq.n	8006c82 <__ieee754_rem_pio2+0x192>
 8006c70:	4632      	mov	r2, r6
 8006c72:	463b      	mov	r3, r7
 8006c74:	4640      	mov	r0, r8
 8006c76:	4649      	mov	r1, r9
 8006c78:	f7f9 fa6e 	bl	8000158 <__aeabi_dsub>
 8006c7c:	e9c4 0100 	strd	r0, r1, [r4]
 8006c80:	e012      	b.n	8006ca8 <__ieee754_rem_pio2+0x1b8>
 8006c82:	463b      	mov	r3, r7
 8006c84:	4632      	mov	r2, r6
 8006c86:	4640      	mov	r0, r8
 8006c88:	4649      	mov	r1, r9
 8006c8a:	f7f9 fa65 	bl	8000158 <__aeabi_dsub>
 8006c8e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8006c92:	9305      	str	r3, [sp, #20]
 8006c94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c98:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	dc1f      	bgt.n	8006ce0 <__ieee754_rem_pio2+0x1f0>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	e9c4 2300 	strd	r2, r3, [r4]
 8006ca8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8006cac:	4640      	mov	r0, r8
 8006cae:	4653      	mov	r3, sl
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	f7f9 fa51 	bl	8000158 <__aeabi_dsub>
 8006cb6:	4632      	mov	r2, r6
 8006cb8:	463b      	mov	r3, r7
 8006cba:	f7f9 fa4d 	bl	8000158 <__aeabi_dsub>
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006cc4:	9904      	ldr	r1, [sp, #16]
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	f6bf af48 	bge.w	8006b5e <__ieee754_rem_pio2+0x6e>
 8006cce:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8006cd2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006cd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006cda:	60e3      	str	r3, [r4, #12]
 8006cdc:	426d      	negs	r5, r5
 8006cde:	e73e      	b.n	8006b5e <__ieee754_rem_pio2+0x6e>
 8006ce0:	a33d      	add	r3, pc, #244	; (adr r3, 8006dd8 <__ieee754_rem_pio2+0x2e8>)
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cea:	f7f9 fbed 	bl	80004c8 <__aeabi_dmul>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 fa2d 	bl	8000158 <__aeabi_dsub>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4682      	mov	sl, r0
 8006d04:	468b      	mov	fp, r1
 8006d06:	4640      	mov	r0, r8
 8006d08:	4649      	mov	r1, r9
 8006d0a:	f7f9 fa25 	bl	8000158 <__aeabi_dsub>
 8006d0e:	4632      	mov	r2, r6
 8006d10:	463b      	mov	r3, r7
 8006d12:	f7f9 fa21 	bl	8000158 <__aeabi_dsub>
 8006d16:	a332      	add	r3, pc, #200	; (adr r3, 8006de0 <__ieee754_rem_pio2+0x2f0>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d24:	f7f9 fbd0 	bl	80004c8 <__aeabi_dmul>
 8006d28:	4632      	mov	r2, r6
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	f7f9 fa14 	bl	8000158 <__aeabi_dsub>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	4650      	mov	r0, sl
 8006d3a:	4659      	mov	r1, fp
 8006d3c:	f7f9 fa0c 	bl	8000158 <__aeabi_dsub>
 8006d40:	9a05      	ldr	r2, [sp, #20]
 8006d42:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b31      	cmp	r3, #49	; 0x31
 8006d4a:	dc06      	bgt.n	8006d5a <__ieee754_rem_pio2+0x26a>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	46d0      	mov	r8, sl
 8006d52:	46d9      	mov	r9, fp
 8006d54:	e9c4 2300 	strd	r2, r3, [r4]
 8006d58:	e7a6      	b.n	8006ca8 <__ieee754_rem_pio2+0x1b8>
 8006d5a:	a325      	add	r3, pc, #148	; (adr r3, 8006df0 <__ieee754_rem_pio2+0x300>)
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d64:	f7f9 fbb0 	bl	80004c8 <__aeabi_dmul>
 8006d68:	4606      	mov	r6, r0
 8006d6a:	460f      	mov	r7, r1
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4650      	mov	r0, sl
 8006d72:	4659      	mov	r1, fp
 8006d74:	f7f9 f9f0 	bl	8000158 <__aeabi_dsub>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	4689      	mov	r9, r1
 8006d80:	4650      	mov	r0, sl
 8006d82:	4659      	mov	r1, fp
 8006d84:	f7f9 f9e8 	bl	8000158 <__aeabi_dsub>
 8006d88:	4632      	mov	r2, r6
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	f7f9 f9e4 	bl	8000158 <__aeabi_dsub>
 8006d90:	a319      	add	r3, pc, #100	; (adr r3, 8006df8 <__ieee754_rem_pio2+0x308>)
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d9e:	f7f9 fb93 	bl	80004c8 <__aeabi_dmul>
 8006da2:	4632      	mov	r2, r6
 8006da4:	463b      	mov	r3, r7
 8006da6:	f7f9 f9d7 	bl	8000158 <__aeabi_dsub>
 8006daa:	4606      	mov	r6, r0
 8006dac:	460f      	mov	r7, r1
 8006dae:	e75f      	b.n	8006c70 <__ieee754_rem_pio2+0x180>
 8006db0:	4a19      	ldr	r2, [pc, #100]	; (8006e18 <__ieee754_rem_pio2+0x328>)
 8006db2:	4592      	cmp	sl, r2
 8006db4:	dd32      	ble.n	8006e1c <__ieee754_rem_pio2+0x32c>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	f7f9 f9cd 	bl	8000158 <__aeabi_dsub>
 8006dbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006dc2:	e9c4 0100 	strd	r0, r1, [r4]
 8006dc6:	e6a3      	b.n	8006b10 <__ieee754_rem_pio2+0x20>
 8006dc8:	54400000 	.word	0x54400000
 8006dcc:	3ff921fb 	.word	0x3ff921fb
 8006dd0:	1a626331 	.word	0x1a626331
 8006dd4:	3dd0b461 	.word	0x3dd0b461
 8006dd8:	1a600000 	.word	0x1a600000
 8006ddc:	3dd0b461 	.word	0x3dd0b461
 8006de0:	2e037073 	.word	0x2e037073
 8006de4:	3ba3198a 	.word	0x3ba3198a
 8006de8:	6dc9c883 	.word	0x6dc9c883
 8006dec:	3fe45f30 	.word	0x3fe45f30
 8006df0:	2e000000 	.word	0x2e000000
 8006df4:	3ba3198a 	.word	0x3ba3198a
 8006df8:	252049c1 	.word	0x252049c1
 8006dfc:	397b839a 	.word	0x397b839a
 8006e00:	3fe921fb 	.word	0x3fe921fb
 8006e04:	4002d97b 	.word	0x4002d97b
 8006e08:	3ff921fb 	.word	0x3ff921fb
 8006e0c:	413921fb 	.word	0x413921fb
 8006e10:	3fe00000 	.word	0x3fe00000
 8006e14:	080077b0 	.word	0x080077b0
 8006e18:	7fefffff 	.word	0x7fefffff
 8006e1c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006e20:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006e24:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006e28:	460f      	mov	r7, r1
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	f7f9 fde6 	bl	80009fc <__aeabi_d2iz>
 8006e30:	f7f9 fae0 	bl	80003f4 <__aeabi_i2d>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4630      	mov	r0, r6
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e40:	f7f9 f98a 	bl	8000158 <__aeabi_dsub>
 8006e44:	2200      	movs	r2, #0
 8006e46:	4b22      	ldr	r3, [pc, #136]	; (8006ed0 <__ieee754_rem_pio2+0x3e0>)
 8006e48:	f7f9 fb3e 	bl	80004c8 <__aeabi_dmul>
 8006e4c:	460f      	mov	r7, r1
 8006e4e:	4606      	mov	r6, r0
 8006e50:	f7f9 fdd4 	bl	80009fc <__aeabi_d2iz>
 8006e54:	f7f9 face 	bl	80003f4 <__aeabi_i2d>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e64:	f7f9 f978 	bl	8000158 <__aeabi_dsub>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4b19      	ldr	r3, [pc, #100]	; (8006ed0 <__ieee754_rem_pio2+0x3e0>)
 8006e6c:	f7f9 fb2c 	bl	80004c8 <__aeabi_dmul>
 8006e70:	f04f 0803 	mov.w	r8, #3
 8006e74:	2600      	movs	r6, #0
 8006e76:	2700      	movs	r7, #0
 8006e78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e7c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006e80:	4632      	mov	r2, r6
 8006e82:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006e86:	463b      	mov	r3, r7
 8006e88:	46c2      	mov	sl, r8
 8006e8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e8e:	f7f9 fd83 	bl	8000998 <__aeabi_dcmpeq>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d1f4      	bne.n	8006e80 <__ieee754_rem_pio2+0x390>
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <__ieee754_rem_pio2+0x3e4>)
 8006e98:	462a      	mov	r2, r5
 8006e9a:	9301      	str	r3, [sp, #4]
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	a806      	add	r0, sp, #24
 8006ea4:	4653      	mov	r3, sl
 8006ea6:	f000 f81b 	bl	8006ee0 <__kernel_rem_pio2>
 8006eaa:	9b04      	ldr	r3, [sp, #16]
 8006eac:	4605      	mov	r5, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f6bf ae55 	bge.w	8006b5e <__ieee754_rem_pio2+0x6e>
 8006eb4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ebc:	e9c4 2300 	strd	r2, r3, [r4]
 8006ec0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ec8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006ecc:	e706      	b.n	8006cdc <__ieee754_rem_pio2+0x1ec>
 8006ece:	bf00      	nop
 8006ed0:	41700000 	.word	0x41700000
 8006ed4:	08007830 	.word	0x08007830

08006ed8 <fabs>:
 8006ed8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006edc:	4619      	mov	r1, r3
 8006ede:	4770      	bx	lr

08006ee0 <__kernel_rem_pio2>:
 8006ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006ee8:	9308      	str	r3, [sp, #32]
 8006eea:	9106      	str	r1, [sp, #24]
 8006eec:	4bb6      	ldr	r3, [pc, #728]	; (80071c8 <__kernel_rem_pio2+0x2e8>)
 8006eee:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006ef0:	f112 0f14 	cmn.w	r2, #20
 8006ef4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ef8:	bfa8      	it	ge
 8006efa:	1ed4      	subge	r4, r2, #3
 8006efc:	9302      	str	r3, [sp, #8]
 8006efe:	9b08      	ldr	r3, [sp, #32]
 8006f00:	bfb8      	it	lt
 8006f02:	2400      	movlt	r4, #0
 8006f04:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f08:	9307      	str	r3, [sp, #28]
 8006f0a:	bfa4      	itt	ge
 8006f0c:	2318      	movge	r3, #24
 8006f0e:	fb94 f4f3 	sdivge	r4, r4, r3
 8006f12:	f06f 0317 	mvn.w	r3, #23
 8006f16:	fb04 3303 	mla	r3, r4, r3, r3
 8006f1a:	eb03 0b02 	add.w	fp, r3, r2
 8006f1e:	9a07      	ldr	r2, [sp, #28]
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	1aa7      	subs	r7, r4, r2
 8006f24:	eb03 0802 	add.w	r8, r3, r2
 8006f28:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006f2a:	2500      	movs	r5, #0
 8006f2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	9009      	str	r0, [sp, #36]	; 0x24
 8006f36:	ae20      	add	r6, sp, #128	; 0x80
 8006f38:	4545      	cmp	r5, r8
 8006f3a:	dd14      	ble.n	8006f66 <__kernel_rem_pio2+0x86>
 8006f3c:	f04f 0800 	mov.w	r8, #0
 8006f40:	9a08      	ldr	r2, [sp, #32]
 8006f42:	ab20      	add	r3, sp, #128	; 0x80
 8006f44:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006f48:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8006f4c:	9b02      	ldr	r3, [sp, #8]
 8006f4e:	4598      	cmp	r8, r3
 8006f50:	dc35      	bgt.n	8006fbe <__kernel_rem_pio2+0xde>
 8006f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f54:	2200      	movs	r2, #0
 8006f56:	f1a3 0908 	sub.w	r9, r3, #8
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	462f      	mov	r7, r5
 8006f5e:	2600      	movs	r6, #0
 8006f60:	e9cd 2300 	strd	r2, r3, [sp]
 8006f64:	e01f      	b.n	8006fa6 <__kernel_rem_pio2+0xc6>
 8006f66:	42ef      	cmn	r7, r5
 8006f68:	d40b      	bmi.n	8006f82 <__kernel_rem_pio2+0xa2>
 8006f6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006f6e:	e9cd 2300 	strd	r2, r3, [sp]
 8006f72:	f7f9 fa3f 	bl	80003f4 <__aeabi_i2d>
 8006f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006f7e:	3501      	adds	r5, #1
 8006f80:	e7da      	b.n	8006f38 <__kernel_rem_pio2+0x58>
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	e7f8      	b.n	8006f7a <__kernel_rem_pio2+0x9a>
 8006f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006f90:	f7f9 fa9a 	bl	80004c8 <__aeabi_dmul>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f9c:	f7f9 f8de 	bl	800015c <__adddf3>
 8006fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	9b07      	ldr	r3, [sp, #28]
 8006fa8:	3f08      	subs	r7, #8
 8006faa:	429e      	cmp	r6, r3
 8006fac:	ddec      	ble.n	8006f88 <__kernel_rem_pio2+0xa8>
 8006fae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fb2:	f108 0801 	add.w	r8, r8, #1
 8006fb6:	e8ea 2302 	strd	r2, r3, [sl], #8
 8006fba:	3508      	adds	r5, #8
 8006fbc:	e7c6      	b.n	8006f4c <__kernel_rem_pio2+0x6c>
 8006fbe:	9b02      	ldr	r3, [sp, #8]
 8006fc0:	aa0c      	add	r2, sp, #48	; 0x30
 8006fc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fc8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006fca:	9e02      	ldr	r6, [sp, #8]
 8006fcc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fd2:	ab98      	add	r3, sp, #608	; 0x260
 8006fd4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fd8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006fdc:	ab70      	add	r3, sp, #448	; 0x1c0
 8006fde:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8006fe2:	46d0      	mov	r8, sl
 8006fe4:	46b1      	mov	r9, r6
 8006fe6:	af0c      	add	r7, sp, #48	; 0x30
 8006fe8:	9700      	str	r7, [sp, #0]
 8006fea:	f1b9 0f00 	cmp.w	r9, #0
 8006fee:	f1a8 0808 	sub.w	r8, r8, #8
 8006ff2:	dc70      	bgt.n	80070d6 <__kernel_rem_pio2+0x1f6>
 8006ff4:	465a      	mov	r2, fp
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f000 fab1 	bl	8007560 <scalbn>
 8006ffe:	2200      	movs	r2, #0
 8007000:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007004:	4604      	mov	r4, r0
 8007006:	460d      	mov	r5, r1
 8007008:	f7f9 fa5e 	bl	80004c8 <__aeabi_dmul>
 800700c:	f000 fb24 	bl	8007658 <floor>
 8007010:	2200      	movs	r2, #0
 8007012:	4b6e      	ldr	r3, [pc, #440]	; (80071cc <__kernel_rem_pio2+0x2ec>)
 8007014:	f7f9 fa58 	bl	80004c8 <__aeabi_dmul>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4620      	mov	r0, r4
 800701e:	4629      	mov	r1, r5
 8007020:	f7f9 f89a 	bl	8000158 <__aeabi_dsub>
 8007024:	460d      	mov	r5, r1
 8007026:	4604      	mov	r4, r0
 8007028:	f7f9 fce8 	bl	80009fc <__aeabi_d2iz>
 800702c:	9004      	str	r0, [sp, #16]
 800702e:	f7f9 f9e1 	bl	80003f4 <__aeabi_i2d>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4620      	mov	r0, r4
 8007038:	4629      	mov	r1, r5
 800703a:	f7f9 f88d 	bl	8000158 <__aeabi_dsub>
 800703e:	f1bb 0f00 	cmp.w	fp, #0
 8007042:	4680      	mov	r8, r0
 8007044:	4689      	mov	r9, r1
 8007046:	dd6f      	ble.n	8007128 <__kernel_rem_pio2+0x248>
 8007048:	1e71      	subs	r1, r6, #1
 800704a:	ab0c      	add	r3, sp, #48	; 0x30
 800704c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007050:	9c04      	ldr	r4, [sp, #16]
 8007052:	f1cb 0018 	rsb	r0, fp, #24
 8007056:	fa43 f200 	asr.w	r2, r3, r0
 800705a:	4414      	add	r4, r2
 800705c:	4082      	lsls	r2, r0
 800705e:	1a9b      	subs	r3, r3, r2
 8007060:	aa0c      	add	r2, sp, #48	; 0x30
 8007062:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007066:	f1cb 0217 	rsb	r2, fp, #23
 800706a:	9404      	str	r4, [sp, #16]
 800706c:	4113      	asrs	r3, r2
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	9b00      	ldr	r3, [sp, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	dd66      	ble.n	8007144 <__kernel_rem_pio2+0x264>
 8007076:	2200      	movs	r2, #0
 8007078:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800707c:	4614      	mov	r4, r2
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	3301      	adds	r3, #1
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	4296      	cmp	r6, r2
 8007086:	f300 80ad 	bgt.w	80071e4 <__kernel_rem_pio2+0x304>
 800708a:	f1bb 0f00 	cmp.w	fp, #0
 800708e:	dd07      	ble.n	80070a0 <__kernel_rem_pio2+0x1c0>
 8007090:	f1bb 0f01 	cmp.w	fp, #1
 8007094:	f000 80b5 	beq.w	8007202 <__kernel_rem_pio2+0x322>
 8007098:	f1bb 0f02 	cmp.w	fp, #2
 800709c:	f000 80bb 	beq.w	8007216 <__kernel_rem_pio2+0x336>
 80070a0:	9b00      	ldr	r3, [sp, #0]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d14e      	bne.n	8007144 <__kernel_rem_pio2+0x264>
 80070a6:	4642      	mov	r2, r8
 80070a8:	464b      	mov	r3, r9
 80070aa:	2000      	movs	r0, #0
 80070ac:	4948      	ldr	r1, [pc, #288]	; (80071d0 <__kernel_rem_pio2+0x2f0>)
 80070ae:	f7f9 f853 	bl	8000158 <__aeabi_dsub>
 80070b2:	4680      	mov	r8, r0
 80070b4:	4689      	mov	r9, r1
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	d044      	beq.n	8007144 <__kernel_rem_pio2+0x264>
 80070ba:	465a      	mov	r2, fp
 80070bc:	2000      	movs	r0, #0
 80070be:	4944      	ldr	r1, [pc, #272]	; (80071d0 <__kernel_rem_pio2+0x2f0>)
 80070c0:	f000 fa4e 	bl	8007560 <scalbn>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4640      	mov	r0, r8
 80070ca:	4649      	mov	r1, r9
 80070cc:	f7f9 f844 	bl	8000158 <__aeabi_dsub>
 80070d0:	4680      	mov	r8, r0
 80070d2:	4689      	mov	r9, r1
 80070d4:	e036      	b.n	8007144 <__kernel_rem_pio2+0x264>
 80070d6:	2200      	movs	r2, #0
 80070d8:	4b3e      	ldr	r3, [pc, #248]	; (80071d4 <__kernel_rem_pio2+0x2f4>)
 80070da:	4620      	mov	r0, r4
 80070dc:	4629      	mov	r1, r5
 80070de:	f7f9 f9f3 	bl	80004c8 <__aeabi_dmul>
 80070e2:	f7f9 fc8b 	bl	80009fc <__aeabi_d2iz>
 80070e6:	f7f9 f985 	bl	80003f4 <__aeabi_i2d>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070f2:	2200      	movs	r2, #0
 80070f4:	4b38      	ldr	r3, [pc, #224]	; (80071d8 <__kernel_rem_pio2+0x2f8>)
 80070f6:	f7f9 f9e7 	bl	80004c8 <__aeabi_dmul>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4620      	mov	r0, r4
 8007100:	4629      	mov	r1, r5
 8007102:	f7f9 f829 	bl	8000158 <__aeabi_dsub>
 8007106:	f7f9 fc79 	bl	80009fc <__aeabi_d2iz>
 800710a:	9b00      	ldr	r3, [sp, #0]
 800710c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007110:	f843 0b04 	str.w	r0, [r3], #4
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800711a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800711e:	f7f9 f81d 	bl	800015c <__adddf3>
 8007122:	4604      	mov	r4, r0
 8007124:	460d      	mov	r5, r1
 8007126:	e760      	b.n	8006fea <__kernel_rem_pio2+0x10a>
 8007128:	d105      	bne.n	8007136 <__kernel_rem_pio2+0x256>
 800712a:	1e73      	subs	r3, r6, #1
 800712c:	aa0c      	add	r2, sp, #48	; 0x30
 800712e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007132:	15db      	asrs	r3, r3, #23
 8007134:	e79b      	b.n	800706e <__kernel_rem_pio2+0x18e>
 8007136:	2200      	movs	r2, #0
 8007138:	4b28      	ldr	r3, [pc, #160]	; (80071dc <__kernel_rem_pio2+0x2fc>)
 800713a:	f7f9 fc4b 	bl	80009d4 <__aeabi_dcmpge>
 800713e:	2800      	cmp	r0, #0
 8007140:	d13e      	bne.n	80071c0 <__kernel_rem_pio2+0x2e0>
 8007142:	9000      	str	r0, [sp, #0]
 8007144:	2200      	movs	r2, #0
 8007146:	2300      	movs	r3, #0
 8007148:	4640      	mov	r0, r8
 800714a:	4649      	mov	r1, r9
 800714c:	f7f9 fc24 	bl	8000998 <__aeabi_dcmpeq>
 8007150:	2800      	cmp	r0, #0
 8007152:	f000 80b2 	beq.w	80072ba <__kernel_rem_pio2+0x3da>
 8007156:	1e74      	subs	r4, r6, #1
 8007158:	4623      	mov	r3, r4
 800715a:	2200      	movs	r2, #0
 800715c:	9902      	ldr	r1, [sp, #8]
 800715e:	428b      	cmp	r3, r1
 8007160:	da60      	bge.n	8007224 <__kernel_rem_pio2+0x344>
 8007162:	2a00      	cmp	r2, #0
 8007164:	d075      	beq.n	8007252 <__kernel_rem_pio2+0x372>
 8007166:	ab0c      	add	r3, sp, #48	; 0x30
 8007168:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800716c:	f1ab 0b18 	sub.w	fp, fp, #24
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80a0 	beq.w	80072b6 <__kernel_rem_pio2+0x3d6>
 8007176:	465a      	mov	r2, fp
 8007178:	2000      	movs	r0, #0
 800717a:	4915      	ldr	r1, [pc, #84]	; (80071d0 <__kernel_rem_pio2+0x2f0>)
 800717c:	f000 f9f0 	bl	8007560 <scalbn>
 8007180:	46a2      	mov	sl, r4
 8007182:	4606      	mov	r6, r0
 8007184:	460f      	mov	r7, r1
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	ab70      	add	r3, sp, #448	; 0x1c0
 800718c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80071d4 <__kernel_rem_pio2+0x2f4>
 8007190:	00e5      	lsls	r5, r4, #3
 8007192:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8007196:	f1ba 0f00 	cmp.w	sl, #0
 800719a:	f280 80c4 	bge.w	8007326 <__kernel_rem_pio2+0x446>
 800719e:	4626      	mov	r6, r4
 80071a0:	2e00      	cmp	r6, #0
 80071a2:	f2c0 80f6 	blt.w	8007392 <__kernel_rem_pio2+0x4b2>
 80071a6:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <__kernel_rem_pio2+0x300>)
 80071a8:	f04f 0a00 	mov.w	sl, #0
 80071ac:	9307      	str	r3, [sp, #28]
 80071ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80071b0:	f04f 0b00 	mov.w	fp, #0
 80071b4:	f04f 0800 	mov.w	r8, #0
 80071b8:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80071bc:	1ba7      	subs	r7, r4, r6
 80071be:	e0dc      	b.n	800737a <__kernel_rem_pio2+0x49a>
 80071c0:	2302      	movs	r3, #2
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	e757      	b.n	8007076 <__kernel_rem_pio2+0x196>
 80071c6:	bf00      	nop
 80071c8:	08007978 	.word	0x08007978
 80071cc:	40200000 	.word	0x40200000
 80071d0:	3ff00000 	.word	0x3ff00000
 80071d4:	3e700000 	.word	0x3e700000
 80071d8:	41700000 	.word	0x41700000
 80071dc:	3fe00000 	.word	0x3fe00000
 80071e0:	08007938 	.word	0x08007938
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	b944      	cbnz	r4, 80071fa <__kernel_rem_pio2+0x31a>
 80071e8:	b11b      	cbz	r3, 80071f2 <__kernel_rem_pio2+0x312>
 80071ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	2301      	movs	r3, #1
 80071f2:	461c      	mov	r4, r3
 80071f4:	3201      	adds	r2, #1
 80071f6:	3704      	adds	r7, #4
 80071f8:	e744      	b.n	8007084 <__kernel_rem_pio2+0x1a4>
 80071fa:	1acb      	subs	r3, r1, r3
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	4623      	mov	r3, r4
 8007200:	e7f7      	b.n	80071f2 <__kernel_rem_pio2+0x312>
 8007202:	1e72      	subs	r2, r6, #1
 8007204:	ab0c      	add	r3, sp, #48	; 0x30
 8007206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800720e:	a90c      	add	r1, sp, #48	; 0x30
 8007210:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007214:	e744      	b.n	80070a0 <__kernel_rem_pio2+0x1c0>
 8007216:	1e72      	subs	r2, r6, #1
 8007218:	ab0c      	add	r3, sp, #48	; 0x30
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007222:	e7f4      	b.n	800720e <__kernel_rem_pio2+0x32e>
 8007224:	a90c      	add	r1, sp, #48	; 0x30
 8007226:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800722a:	3b01      	subs	r3, #1
 800722c:	430a      	orrs	r2, r1
 800722e:	e795      	b.n	800715c <__kernel_rem_pio2+0x27c>
 8007230:	3301      	adds	r3, #1
 8007232:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007236:	2900      	cmp	r1, #0
 8007238:	d0fa      	beq.n	8007230 <__kernel_rem_pio2+0x350>
 800723a:	9a08      	ldr	r2, [sp, #32]
 800723c:	a920      	add	r1, sp, #128	; 0x80
 800723e:	18b2      	adds	r2, r6, r2
 8007240:	f106 0801 	add.w	r8, r6, #1
 8007244:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007248:	18f4      	adds	r4, r6, r3
 800724a:	4544      	cmp	r4, r8
 800724c:	da04      	bge.n	8007258 <__kernel_rem_pio2+0x378>
 800724e:	4626      	mov	r6, r4
 8007250:	e6bf      	b.n	8006fd2 <__kernel_rem_pio2+0xf2>
 8007252:	2301      	movs	r3, #1
 8007254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007256:	e7ec      	b.n	8007232 <__kernel_rem_pio2+0x352>
 8007258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725a:	f04f 0900 	mov.w	r9, #0
 800725e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007262:	f7f9 f8c7 	bl	80003f4 <__aeabi_i2d>
 8007266:	2600      	movs	r6, #0
 8007268:	2700      	movs	r7, #0
 800726a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726c:	e9c5 0100 	strd	r0, r1, [r5]
 8007270:	3b08      	subs	r3, #8
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	9504      	str	r5, [sp, #16]
 8007276:	9b07      	ldr	r3, [sp, #28]
 8007278:	4599      	cmp	r9, r3
 800727a:	dd05      	ble.n	8007288 <__kernel_rem_pio2+0x3a8>
 800727c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8007280:	f108 0801 	add.w	r8, r8, #1
 8007284:	3508      	adds	r5, #8
 8007286:	e7e0      	b.n	800724a <__kernel_rem_pio2+0x36a>
 8007288:	f8dd c010 	ldr.w	ip, [sp, #16]
 800728c:	9900      	ldr	r1, [sp, #0]
 800728e:	f109 0901 	add.w	r9, r9, #1
 8007292:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007296:	9100      	str	r1, [sp, #0]
 8007298:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800729c:	f8cd c010 	str.w	ip, [sp, #16]
 80072a0:	f7f9 f912 	bl	80004c8 <__aeabi_dmul>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f8 ff56 	bl	800015c <__adddf3>
 80072b0:	4606      	mov	r6, r0
 80072b2:	460f      	mov	r7, r1
 80072b4:	e7df      	b.n	8007276 <__kernel_rem_pio2+0x396>
 80072b6:	3c01      	subs	r4, #1
 80072b8:	e755      	b.n	8007166 <__kernel_rem_pio2+0x286>
 80072ba:	f1cb 0200 	rsb	r2, fp, #0
 80072be:	4640      	mov	r0, r8
 80072c0:	4649      	mov	r1, r9
 80072c2:	f000 f94d 	bl	8007560 <scalbn>
 80072c6:	2200      	movs	r2, #0
 80072c8:	4ba3      	ldr	r3, [pc, #652]	; (8007558 <__kernel_rem_pio2+0x678>)
 80072ca:	4604      	mov	r4, r0
 80072cc:	460d      	mov	r5, r1
 80072ce:	f7f9 fb81 	bl	80009d4 <__aeabi_dcmpge>
 80072d2:	b1f8      	cbz	r0, 8007314 <__kernel_rem_pio2+0x434>
 80072d4:	2200      	movs	r2, #0
 80072d6:	4ba1      	ldr	r3, [pc, #644]	; (800755c <__kernel_rem_pio2+0x67c>)
 80072d8:	4620      	mov	r0, r4
 80072da:	4629      	mov	r1, r5
 80072dc:	f7f9 f8f4 	bl	80004c8 <__aeabi_dmul>
 80072e0:	f7f9 fb8c 	bl	80009fc <__aeabi_d2iz>
 80072e4:	4607      	mov	r7, r0
 80072e6:	f7f9 f885 	bl	80003f4 <__aeabi_i2d>
 80072ea:	2200      	movs	r2, #0
 80072ec:	4b9a      	ldr	r3, [pc, #616]	; (8007558 <__kernel_rem_pio2+0x678>)
 80072ee:	f7f9 f8eb 	bl	80004c8 <__aeabi_dmul>
 80072f2:	460b      	mov	r3, r1
 80072f4:	4602      	mov	r2, r0
 80072f6:	4629      	mov	r1, r5
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7f8 ff2d 	bl	8000158 <__aeabi_dsub>
 80072fe:	f7f9 fb7d 	bl	80009fc <__aeabi_d2iz>
 8007302:	1c74      	adds	r4, r6, #1
 8007304:	ab0c      	add	r3, sp, #48	; 0x30
 8007306:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800730a:	f10b 0b18 	add.w	fp, fp, #24
 800730e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8007312:	e730      	b.n	8007176 <__kernel_rem_pio2+0x296>
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	f7f9 fb70 	bl	80009fc <__aeabi_d2iz>
 800731c:	ab0c      	add	r3, sp, #48	; 0x30
 800731e:	4634      	mov	r4, r6
 8007320:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007324:	e727      	b.n	8007176 <__kernel_rem_pio2+0x296>
 8007326:	ab0c      	add	r3, sp, #48	; 0x30
 8007328:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800732c:	f7f9 f862 	bl	80003f4 <__aeabi_i2d>
 8007330:	4632      	mov	r2, r6
 8007332:	463b      	mov	r3, r7
 8007334:	f7f9 f8c8 	bl	80004c8 <__aeabi_dmul>
 8007338:	4642      	mov	r2, r8
 800733a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800733e:	464b      	mov	r3, r9
 8007340:	4630      	mov	r0, r6
 8007342:	4639      	mov	r1, r7
 8007344:	f7f9 f8c0 	bl	80004c8 <__aeabi_dmul>
 8007348:	f10a 3aff 	add.w	sl, sl, #4294967295
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	e721      	b.n	8007196 <__kernel_rem_pio2+0x2b6>
 8007352:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007356:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800735a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800735e:	f8cd c01c 	str.w	ip, [sp, #28]
 8007362:	f7f9 f8b1 	bl	80004c8 <__aeabi_dmul>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4650      	mov	r0, sl
 800736c:	4659      	mov	r1, fp
 800736e:	f7f8 fef5 	bl	800015c <__adddf3>
 8007372:	4682      	mov	sl, r0
 8007374:	468b      	mov	fp, r1
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	9b02      	ldr	r3, [sp, #8]
 800737c:	4598      	cmp	r8, r3
 800737e:	dc01      	bgt.n	8007384 <__kernel_rem_pio2+0x4a4>
 8007380:	45b8      	cmp	r8, r7
 8007382:	dde6      	ble.n	8007352 <__kernel_rem_pio2+0x472>
 8007384:	ab48      	add	r3, sp, #288	; 0x120
 8007386:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800738a:	e9c7 ab00 	strd	sl, fp, [r7]
 800738e:	3e01      	subs	r6, #1
 8007390:	e706      	b.n	80071a0 <__kernel_rem_pio2+0x2c0>
 8007392:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007394:	2b02      	cmp	r3, #2
 8007396:	dc09      	bgt.n	80073ac <__kernel_rem_pio2+0x4cc>
 8007398:	2b00      	cmp	r3, #0
 800739a:	dc32      	bgt.n	8007402 <__kernel_rem_pio2+0x522>
 800739c:	d058      	beq.n	8007450 <__kernel_rem_pio2+0x570>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	f003 0007 	and.w	r0, r3, #7
 80073a4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80073a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ac:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d1f5      	bne.n	800739e <__kernel_rem_pio2+0x4be>
 80073b2:	ab48      	add	r3, sp, #288	; 0x120
 80073b4:	441d      	add	r5, r3
 80073b6:	46aa      	mov	sl, r5
 80073b8:	46a3      	mov	fp, r4
 80073ba:	f1bb 0f00 	cmp.w	fp, #0
 80073be:	dc74      	bgt.n	80074aa <__kernel_rem_pio2+0x5ca>
 80073c0:	46aa      	mov	sl, r5
 80073c2:	46a3      	mov	fp, r4
 80073c4:	f1bb 0f01 	cmp.w	fp, #1
 80073c8:	f300 808e 	bgt.w	80074e8 <__kernel_rem_pio2+0x608>
 80073cc:	2700      	movs	r7, #0
 80073ce:	463e      	mov	r6, r7
 80073d0:	2c01      	cmp	r4, #1
 80073d2:	f300 80a8 	bgt.w	8007526 <__kernel_rem_pio2+0x646>
 80073d6:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80073da:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f040 80aa 	bne.w	800753a <__kernel_rem_pio2+0x65a>
 80073e6:	4603      	mov	r3, r0
 80073e8:	462a      	mov	r2, r5
 80073ea:	9806      	ldr	r0, [sp, #24]
 80073ec:	e9c0 2300 	strd	r2, r3, [r0]
 80073f0:	4622      	mov	r2, r4
 80073f2:	460b      	mov	r3, r1
 80073f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80073f8:	463a      	mov	r2, r7
 80073fa:	4633      	mov	r3, r6
 80073fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007400:	e7cd      	b.n	800739e <__kernel_rem_pio2+0x4be>
 8007402:	2000      	movs	r0, #0
 8007404:	46a0      	mov	r8, r4
 8007406:	4601      	mov	r1, r0
 8007408:	ab48      	add	r3, sp, #288	; 0x120
 800740a:	441d      	add	r5, r3
 800740c:	f1b8 0f00 	cmp.w	r8, #0
 8007410:	da38      	bge.n	8007484 <__kernel_rem_pio2+0x5a4>
 8007412:	9b00      	ldr	r3, [sp, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d03c      	beq.n	8007492 <__kernel_rem_pio2+0x5b2>
 8007418:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800741c:	4602      	mov	r2, r0
 800741e:	462b      	mov	r3, r5
 8007420:	9d06      	ldr	r5, [sp, #24]
 8007422:	2601      	movs	r6, #1
 8007424:	e9c5 2300 	strd	r2, r3, [r5]
 8007428:	460b      	mov	r3, r1
 800742a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800742e:	f7f8 fe93 	bl	8000158 <__aeabi_dsub>
 8007432:	4684      	mov	ip, r0
 8007434:	460f      	mov	r7, r1
 8007436:	ad48      	add	r5, sp, #288	; 0x120
 8007438:	42b4      	cmp	r4, r6
 800743a:	da2c      	bge.n	8007496 <__kernel_rem_pio2+0x5b6>
 800743c:	9b00      	ldr	r3, [sp, #0]
 800743e:	b10b      	cbz	r3, 8007444 <__kernel_rem_pio2+0x564>
 8007440:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007444:	4662      	mov	r2, ip
 8007446:	463b      	mov	r3, r7
 8007448:	9906      	ldr	r1, [sp, #24]
 800744a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800744e:	e7a6      	b.n	800739e <__kernel_rem_pio2+0x4be>
 8007450:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007452:	ab48      	add	r3, sp, #288	; 0x120
 8007454:	4637      	mov	r7, r6
 8007456:	441d      	add	r5, r3
 8007458:	2c00      	cmp	r4, #0
 800745a:	da09      	bge.n	8007470 <__kernel_rem_pio2+0x590>
 800745c:	9b00      	ldr	r3, [sp, #0]
 800745e:	b10b      	cbz	r3, 8007464 <__kernel_rem_pio2+0x584>
 8007460:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007464:	4632      	mov	r2, r6
 8007466:	463b      	mov	r3, r7
 8007468:	9906      	ldr	r1, [sp, #24]
 800746a:	e9c1 2300 	strd	r2, r3, [r1]
 800746e:	e796      	b.n	800739e <__kernel_rem_pio2+0x4be>
 8007470:	4630      	mov	r0, r6
 8007472:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007476:	4639      	mov	r1, r7
 8007478:	f7f8 fe70 	bl	800015c <__adddf3>
 800747c:	3c01      	subs	r4, #1
 800747e:	4606      	mov	r6, r0
 8007480:	460f      	mov	r7, r1
 8007482:	e7e9      	b.n	8007458 <__kernel_rem_pio2+0x578>
 8007484:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007488:	f7f8 fe68 	bl	800015c <__adddf3>
 800748c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007490:	e7bc      	b.n	800740c <__kernel_rem_pio2+0x52c>
 8007492:	460d      	mov	r5, r1
 8007494:	e7c2      	b.n	800741c <__kernel_rem_pio2+0x53c>
 8007496:	4660      	mov	r0, ip
 8007498:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800749c:	4639      	mov	r1, r7
 800749e:	f7f8 fe5d 	bl	800015c <__adddf3>
 80074a2:	3601      	adds	r6, #1
 80074a4:	4684      	mov	ip, r0
 80074a6:	460f      	mov	r7, r1
 80074a8:	e7c6      	b.n	8007438 <__kernel_rem_pio2+0x558>
 80074aa:	e9da 6700 	ldrd	r6, r7, [sl]
 80074ae:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80074b2:	4632      	mov	r2, r6
 80074b4:	463b      	mov	r3, r7
 80074b6:	4640      	mov	r0, r8
 80074b8:	4649      	mov	r1, r9
 80074ba:	f7f8 fe4f 	bl	800015c <__adddf3>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c6:	4640      	mov	r0, r8
 80074c8:	4649      	mov	r1, r9
 80074ca:	f7f8 fe45 	bl	8000158 <__aeabi_dsub>
 80074ce:	4632      	mov	r2, r6
 80074d0:	463b      	mov	r3, r7
 80074d2:	f7f8 fe43 	bl	800015c <__adddf3>
 80074d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074da:	e86a 0102 	strd	r0, r1, [sl], #-8
 80074de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074e2:	e9ca 2300 	strd	r2, r3, [sl]
 80074e6:	e768      	b.n	80073ba <__kernel_rem_pio2+0x4da>
 80074e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80074ec:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80074f0:	4642      	mov	r2, r8
 80074f2:	464b      	mov	r3, r9
 80074f4:	4630      	mov	r0, r6
 80074f6:	4639      	mov	r1, r7
 80074f8:	f7f8 fe30 	bl	800015c <__adddf3>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007504:	4630      	mov	r0, r6
 8007506:	4639      	mov	r1, r7
 8007508:	f7f8 fe26 	bl	8000158 <__aeabi_dsub>
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	f7f8 fe24 	bl	800015c <__adddf3>
 8007514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007518:	e86a 0102 	strd	r0, r1, [sl], #-8
 800751c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007520:	e9ca 2300 	strd	r2, r3, [sl]
 8007524:	e74e      	b.n	80073c4 <__kernel_rem_pio2+0x4e4>
 8007526:	4638      	mov	r0, r7
 8007528:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800752c:	4631      	mov	r1, r6
 800752e:	f7f8 fe15 	bl	800015c <__adddf3>
 8007532:	3c01      	subs	r4, #1
 8007534:	4607      	mov	r7, r0
 8007536:	460e      	mov	r6, r1
 8007538:	e74a      	b.n	80073d0 <__kernel_rem_pio2+0x4f0>
 800753a:	9b06      	ldr	r3, [sp, #24]
 800753c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007540:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007544:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007548:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800754c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007550:	601d      	str	r5, [r3, #0]
 8007552:	615e      	str	r6, [r3, #20]
 8007554:	e723      	b.n	800739e <__kernel_rem_pio2+0x4be>
 8007556:	bf00      	nop
 8007558:	41700000 	.word	0x41700000
 800755c:	3e700000 	.word	0x3e700000

08007560 <scalbn>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	4616      	mov	r6, r2
 8007564:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007568:	4604      	mov	r4, r0
 800756a:	460d      	mov	r5, r1
 800756c:	460b      	mov	r3, r1
 800756e:	b992      	cbnz	r2, 8007596 <scalbn+0x36>
 8007570:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007574:	4303      	orrs	r3, r0
 8007576:	d03c      	beq.n	80075f2 <scalbn+0x92>
 8007578:	4b31      	ldr	r3, [pc, #196]	; (8007640 <scalbn+0xe0>)
 800757a:	2200      	movs	r2, #0
 800757c:	f7f8 ffa4 	bl	80004c8 <__aeabi_dmul>
 8007580:	4b30      	ldr	r3, [pc, #192]	; (8007644 <scalbn+0xe4>)
 8007582:	4604      	mov	r4, r0
 8007584:	429e      	cmp	r6, r3
 8007586:	460d      	mov	r5, r1
 8007588:	da0f      	bge.n	80075aa <scalbn+0x4a>
 800758a:	a329      	add	r3, pc, #164	; (adr r3, 8007630 <scalbn+0xd0>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f7f8 ff9a 	bl	80004c8 <__aeabi_dmul>
 8007594:	e006      	b.n	80075a4 <scalbn+0x44>
 8007596:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800759a:	42ba      	cmp	r2, r7
 800759c:	d109      	bne.n	80075b2 <scalbn+0x52>
 800759e:	4602      	mov	r2, r0
 80075a0:	f7f8 fddc 	bl	800015c <__adddf3>
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	e023      	b.n	80075f2 <scalbn+0x92>
 80075aa:	460b      	mov	r3, r1
 80075ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075b0:	3a36      	subs	r2, #54	; 0x36
 80075b2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80075b6:	428e      	cmp	r6, r1
 80075b8:	dd0e      	ble.n	80075d8 <scalbn+0x78>
 80075ba:	a31f      	add	r3, pc, #124	; (adr r3, 8007638 <scalbn+0xd8>)
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80075c4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80075c8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80075cc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80075d0:	481d      	ldr	r0, [pc, #116]	; (8007648 <scalbn+0xe8>)
 80075d2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80075d6:	e7db      	b.n	8007590 <scalbn+0x30>
 80075d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075dc:	4432      	add	r2, r6
 80075de:	428a      	cmp	r2, r1
 80075e0:	dceb      	bgt.n	80075ba <scalbn+0x5a>
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	dd08      	ble.n	80075f8 <scalbn+0x98>
 80075e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075ee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075fc:	da0c      	bge.n	8007618 <scalbn+0xb8>
 80075fe:	a30c      	add	r3, pc, #48	; (adr r3, 8007630 <scalbn+0xd0>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007608:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800760c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007610:	480e      	ldr	r0, [pc, #56]	; (800764c <scalbn+0xec>)
 8007612:	f041 011f 	orr.w	r1, r1, #31
 8007616:	e7bb      	b.n	8007590 <scalbn+0x30>
 8007618:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800761c:	3236      	adds	r2, #54	; 0x36
 800761e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007622:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007626:	4620      	mov	r0, r4
 8007628:	4629      	mov	r1, r5
 800762a:	2200      	movs	r2, #0
 800762c:	4b08      	ldr	r3, [pc, #32]	; (8007650 <scalbn+0xf0>)
 800762e:	e7af      	b.n	8007590 <scalbn+0x30>
 8007630:	c2f8f359 	.word	0xc2f8f359
 8007634:	01a56e1f 	.word	0x01a56e1f
 8007638:	8800759c 	.word	0x8800759c
 800763c:	7e37e43c 	.word	0x7e37e43c
 8007640:	43500000 	.word	0x43500000
 8007644:	ffff3cb0 	.word	0xffff3cb0
 8007648:	8800759c 	.word	0x8800759c
 800764c:	c2f8f359 	.word	0xc2f8f359
 8007650:	3c900000 	.word	0x3c900000
 8007654:	00000000 	.word	0x00000000

08007658 <floor>:
 8007658:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800765c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007660:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007664:	2e13      	cmp	r6, #19
 8007666:	460b      	mov	r3, r1
 8007668:	4607      	mov	r7, r0
 800766a:	460c      	mov	r4, r1
 800766c:	4605      	mov	r5, r0
 800766e:	dc32      	bgt.n	80076d6 <floor+0x7e>
 8007670:	2e00      	cmp	r6, #0
 8007672:	da14      	bge.n	800769e <floor+0x46>
 8007674:	a334      	add	r3, pc, #208	; (adr r3, 8007748 <floor+0xf0>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 fd6f 	bl	800015c <__adddf3>
 800767e:	2200      	movs	r2, #0
 8007680:	2300      	movs	r3, #0
 8007682:	f7f9 f9b1 	bl	80009e8 <__aeabi_dcmpgt>
 8007686:	b138      	cbz	r0, 8007698 <floor+0x40>
 8007688:	2c00      	cmp	r4, #0
 800768a:	da56      	bge.n	800773a <floor+0xe2>
 800768c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007690:	4325      	orrs	r5, r4
 8007692:	d055      	beq.n	8007740 <floor+0xe8>
 8007694:	2500      	movs	r5, #0
 8007696:	4c2e      	ldr	r4, [pc, #184]	; (8007750 <floor+0xf8>)
 8007698:	4623      	mov	r3, r4
 800769a:	462f      	mov	r7, r5
 800769c:	e025      	b.n	80076ea <floor+0x92>
 800769e:	4a2d      	ldr	r2, [pc, #180]	; (8007754 <floor+0xfc>)
 80076a0:	fa42 f806 	asr.w	r8, r2, r6
 80076a4:	ea01 0208 	and.w	r2, r1, r8
 80076a8:	4302      	orrs	r2, r0
 80076aa:	d01e      	beq.n	80076ea <floor+0x92>
 80076ac:	a326      	add	r3, pc, #152	; (adr r3, 8007748 <floor+0xf0>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f7f8 fd53 	bl	800015c <__adddf3>
 80076b6:	2200      	movs	r2, #0
 80076b8:	2300      	movs	r3, #0
 80076ba:	f7f9 f995 	bl	80009e8 <__aeabi_dcmpgt>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d0ea      	beq.n	8007698 <floor+0x40>
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	bfbe      	ittt	lt
 80076c6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80076ca:	4133      	asrlt	r3, r6
 80076cc:	18e4      	addlt	r4, r4, r3
 80076ce:	2500      	movs	r5, #0
 80076d0:	ea24 0408 	bic.w	r4, r4, r8
 80076d4:	e7e0      	b.n	8007698 <floor+0x40>
 80076d6:	2e33      	cmp	r6, #51	; 0x33
 80076d8:	dd0b      	ble.n	80076f2 <floor+0x9a>
 80076da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80076de:	d104      	bne.n	80076ea <floor+0x92>
 80076e0:	4602      	mov	r2, r0
 80076e2:	f7f8 fd3b 	bl	800015c <__adddf3>
 80076e6:	4607      	mov	r7, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4638      	mov	r0, r7
 80076ec:	4619      	mov	r1, r3
 80076ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f2:	f04f 38ff 	mov.w	r8, #4294967295
 80076f6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80076fa:	fa28 f802 	lsr.w	r8, r8, r2
 80076fe:	ea10 0f08 	tst.w	r0, r8
 8007702:	d0f2      	beq.n	80076ea <floor+0x92>
 8007704:	a310      	add	r3, pc, #64	; (adr r3, 8007748 <floor+0xf0>)
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	f7f8 fd27 	bl	800015c <__adddf3>
 800770e:	2200      	movs	r2, #0
 8007710:	2300      	movs	r3, #0
 8007712:	f7f9 f969 	bl	80009e8 <__aeabi_dcmpgt>
 8007716:	2800      	cmp	r0, #0
 8007718:	d0be      	beq.n	8007698 <floor+0x40>
 800771a:	2c00      	cmp	r4, #0
 800771c:	da0a      	bge.n	8007734 <floor+0xdc>
 800771e:	2e14      	cmp	r6, #20
 8007720:	d101      	bne.n	8007726 <floor+0xce>
 8007722:	3401      	adds	r4, #1
 8007724:	e006      	b.n	8007734 <floor+0xdc>
 8007726:	2301      	movs	r3, #1
 8007728:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800772c:	40b3      	lsls	r3, r6
 800772e:	441d      	add	r5, r3
 8007730:	42af      	cmp	r7, r5
 8007732:	d8f6      	bhi.n	8007722 <floor+0xca>
 8007734:	ea25 0508 	bic.w	r5, r5, r8
 8007738:	e7ae      	b.n	8007698 <floor+0x40>
 800773a:	2500      	movs	r5, #0
 800773c:	462c      	mov	r4, r5
 800773e:	e7ab      	b.n	8007698 <floor+0x40>
 8007740:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007744:	e7a8      	b.n	8007698 <floor+0x40>
 8007746:	bf00      	nop
 8007748:	8800759c 	.word	0x8800759c
 800774c:	7e37e43c 	.word	0x7e37e43c
 8007750:	bff00000 	.word	0xbff00000
 8007754:	000fffff 	.word	0x000fffff

08007758 <_init>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr

08007764 <_fini>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr
